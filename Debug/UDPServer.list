
UDPServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010ee0  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c7c  080110e0  080110e0  000120e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013d5c  08013d5c  000151c8  2**0
                  CONTENTS
  4 .ARM          00000008  08013d5c  08013d5c  00014d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013d64  08013d64  000151c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013d64  08013d64  00014d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013d68  08013d68  00014d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08013d6c  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  08013df4  00015088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  08013e94  00015128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000088b0  200001c8  08013f34  000151c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20008a78  08013f34  00015a78  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000151c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00021e39  00000000  00000000  000151f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005a89  00000000  00000000  0003702f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001898  00000000  00000000  0003cab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000138b  00000000  00000000  0003e350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00034948  00000000  00000000  0003f6db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002a6ff  00000000  00000000  00074023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010d175  00000000  00000000  0009e722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001ab897  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006f50  00000000  00000000  001ab8dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005a  00000000  00000000  001b282c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001c8 	.word	0x200001c8
 800021c:	00000000 	.word	0x00000000
 8000220:	080110c8 	.word	0x080110c8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001cc 	.word	0x200001cc
 800023c:	080110c8 	.word	0x080110c8

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <udp_send_message>:
//	arch_sm->command = strdup(buf + offset);
//	offset += strlen(buf + offset) + 1;
//	arch_sm->data = strdup(buf + offset);
//}

err_t udp_send_message(struct udp_pcb *upcb, const ip_addr_t *addr, u16_t port, const char *dataSource) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af00      	add	r7, sp, #0
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	60b9      	str	r1, [r7, #8]
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	4613      	mov	r3, r2
 800060e:	80fb      	strh	r3, [r7, #6]
	// если сокет не создался, то на выход с ошибкой
	if (upcb == NULL) {
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d102      	bne.n	800061c <udp_send_message+0x1c>
		return ERR_ABRT;
 8000616:	f06f 030c 	mvn.w	r3, #12
 800061a:	e037      	b.n	800068c <udp_send_message+0x8c>
	}
	u16_t dataLength = strlen(dataSource);
 800061c:	6838      	ldr	r0, [r7, #0]
 800061e:	f7ff fe19 	bl	8000254 <strlen>
 8000622:	4603      	mov	r3, r0
 8000624:	83fb      	strh	r3, [r7, #30]
	// аллоцируем память под буфер с данными
	struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, dataLength, PBUF_RAM);
 8000626:	8bfb      	ldrh	r3, [r7, #30]
 8000628:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800062c:	4619      	mov	r1, r3
 800062e:	2036      	movs	r0, #54	@ 0x36
 8000630:	f006 fad8 	bl	8006be4 <pbuf_alloc>
 8000634:	61b8      	str	r0, [r7, #24]
	if (p != NULL) {
 8000636:	69bb      	ldr	r3, [r7, #24]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d026      	beq.n	800068a <udp_send_message+0x8a>
		// кладём данные в аллоцированный буфер
		err_t err = pbuf_take(p, dataSource, dataLength);
 800063c:	8bfb      	ldrh	r3, [r7, #30]
 800063e:	461a      	mov	r2, r3
 8000640:	6839      	ldr	r1, [r7, #0]
 8000642:	69b8      	ldr	r0, [r7, #24]
 8000644:	f007 f81e 	bl	8007684 <pbuf_take>
 8000648:	4603      	mov	r3, r0
 800064a:	75fb      	strb	r3, [r7, #23]
		//очистить память от сообщения
		//free(data);
		if (ERR_OK != err) {
 800064c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d005      	beq.n	8000660 <udp_send_message+0x60>
			// обязательно должны очистить аллоцированную память при ошибке
			pbuf_free(p);
 8000654:	69b8      	ldr	r0, [r7, #24]
 8000656:	f006 fda9 	bl	80071ac <pbuf_free>
			return err;
 800065a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800065e:	e015      	b.n	800068c <udp_send_message+0x8c>
		}
		// отсылаем пакет
		err = udp_sendto(upcb, p, addr, port);
 8000660:	88fb      	ldrh	r3, [r7, #6]
 8000662:	68ba      	ldr	r2, [r7, #8]
 8000664:	69b9      	ldr	r1, [r7, #24]
 8000666:	68f8      	ldr	r0, [r7, #12]
 8000668:	f00c fd34 	bl	800d0d4 <udp_sendto>
 800066c:	4603      	mov	r3, r0
 800066e:	75fb      	strb	r3, [r7, #23]
		if (ERR_OK != err) {
 8000670:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d005      	beq.n	8000684 <udp_send_message+0x84>
			// обязательно должны очистить аллоцированную память при ошибке
			pbuf_free(p);
 8000678:	69b8      	ldr	r0, [r7, #24]
 800067a:	f006 fd97 	bl	80071ac <pbuf_free>
			return err;
 800067e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000682:	e003      	b.n	800068c <udp_send_message+0x8c>
		}
		// очищаем аллоцированную память
		pbuf_free(p);
 8000684:	69b8      	ldr	r0, [r7, #24]
 8000686:	f006 fd91 	bl	80071ac <pbuf_free>
	}
	return ERR_OK;
 800068a:	2300      	movs	r3, #0
}
 800068c:	4618      	mov	r0, r3
 800068e:	3720      	adds	r7, #32
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <get_ifconfig>:

void get_ifconfig(char *answer) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b09e      	sub	sp, #120	@ 0x78
 8000698:	af04      	add	r7, sp, #16
 800069a:	6078      	str	r0, [r7, #4]
	char local_ip[BUFFER_ARRAY_SIZE];
	char subnet_mask[BUFFER_ARRAY_SIZE];
	char gateway[BUFFER_ARRAY_SIZE];

	ip4addr_ntoa_r(netif_ip4_addr(&gnetif), local_ip, BUFFER_ARRAY_SIZE);
 800069c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80006a0:	2220      	movs	r2, #32
 80006a2:	4619      	mov	r1, r3
 80006a4:	4813      	ldr	r0, [pc, #76]	@ (80006f4 <get_ifconfig+0x60>)
 80006a6:	f00e fb6d 	bl	800ed84 <ip4addr_ntoa_r>
	ip4addr_ntoa_r(netif_ip4_netmask(&gnetif), subnet_mask, BUFFER_ARRAY_SIZE);
 80006aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006ae:	2220      	movs	r2, #32
 80006b0:	4619      	mov	r1, r3
 80006b2:	4811      	ldr	r0, [pc, #68]	@ (80006f8 <get_ifconfig+0x64>)
 80006b4:	f00e fb66 	bl	800ed84 <ip4addr_ntoa_r>
	ip4addr_ntoa_r(netif_ip4_gw(&gnetif), gateway, BUFFER_ARRAY_SIZE);
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	2220      	movs	r2, #32
 80006be:	4619      	mov	r1, r3
 80006c0:	480e      	ldr	r0, [pc, #56]	@ (80006fc <get_ifconfig+0x68>)
 80006c2:	f00e fb5f 	bl	800ed84 <ip4addr_ntoa_r>
	sprintf(answer, "\n%s %s\n%s %s\n%s %s", "ip address: ", local_ip, "subnet mask:", subnet_mask, "gateway:    ",
 80006c6:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80006ca:	f107 0308 	add.w	r3, r7, #8
 80006ce:	9303      	str	r3, [sp, #12]
 80006d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000700 <get_ifconfig+0x6c>)
 80006d2:	9302      	str	r3, [sp, #8]
 80006d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006d8:	9301      	str	r3, [sp, #4]
 80006da:	4b0a      	ldr	r3, [pc, #40]	@ (8000704 <get_ifconfig+0x70>)
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	4613      	mov	r3, r2
 80006e0:	4a09      	ldr	r2, [pc, #36]	@ (8000708 <get_ifconfig+0x74>)
 80006e2:	490a      	ldr	r1, [pc, #40]	@ (800070c <get_ifconfig+0x78>)
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f00f fbf3 	bl	800fed0 <siprintf>
			gateway);
}
 80006ea:	bf00      	nop
 80006ec:	3768      	adds	r7, #104	@ 0x68
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000784 	.word	0x20000784
 80006f8:	20000788 	.word	0x20000788
 80006fc:	2000078c 	.word	0x2000078c
 8000700:	08011104 	.word	0x08011104
 8000704:	08011114 	.word	0x08011114
 8000708:	080110e0 	.word	0x080110e0
 800070c:	080110f0 	.word	0x080110f0

08000710 <sed_leds>:

void sed_leds(char *answer, char *received_message) {
 8000710:	b5b0      	push	{r4, r5, r7, lr}
 8000712:	b092      	sub	sp, #72	@ 0x48
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
	char led_answer[BUFFER_ARRAY_SIZE] = "leds { ";
 800071a:	4a47      	ldr	r2, [pc, #284]	@ (8000838 <sed_leds+0x128>)
 800071c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000720:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000724:	e883 0003 	stmia.w	r3, {r0, r1}
 8000728:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
 8000738:	615a      	str	r2, [r3, #20]
	char led[LEDS_COUNT];
	struct GPIO_Attr gpio_outputs[] = { { GPIOB, GPIO_PIN_0 }, { GPIOB,
 800073a:	4b40      	ldr	r3, [pc, #256]	@ (800083c <sed_leds+0x12c>)
 800073c:	f107 0408 	add.w	r4, r7, #8
 8000740:	461d      	mov	r5, r3
 8000742:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000744:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000746:	e895 0003 	ldmia.w	r5, {r0, r1}
 800074a:	e884 0003 	stmia.w	r4, {r0, r1}
	GPIO_PIN_7 }, { GPIOB, GPIO_PIN_14 } };
	for (uint16_t i = 0; i < sizeof(gpio_outputs) / sizeof(gpio_outputs[0]); i++) {
 800074e:	2300      	movs	r3, #0
 8000750:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8000754:	e04d      	b.n	80007f2 <sed_leds+0xe2>
		uint16_t led_command = received_message[i] - '0';
 8000756:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800075a:	683a      	ldr	r2, [r7, #0]
 800075c:	4413      	add	r3, r2
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	3b30      	subs	r3, #48	@ 0x30
 8000762:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
		if (led_command != 2 && led_command != HAL_GPIO_ReadPin(gpio_outputs[i].gpio, gpio_outputs[i].pin)) {
 8000766:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800076a:	2b02      	cmp	r3, #2
 800076c:	d03c      	beq.n	80007e8 <sed_leds+0xd8>
 800076e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000772:	00db      	lsls	r3, r3, #3
 8000774:	3348      	adds	r3, #72	@ 0x48
 8000776:	443b      	add	r3, r7
 8000778:	f853 2c40 	ldr.w	r2, [r3, #-64]
 800077c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000780:	00db      	lsls	r3, r3, #3
 8000782:	3348      	adds	r3, #72	@ 0x48
 8000784:	443b      	add	r3, r7
 8000786:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 800078a:	4619      	mov	r1, r3
 800078c:	4610      	mov	r0, r2
 800078e:	f002 fa51 	bl	8002c34 <HAL_GPIO_ReadPin>
 8000792:	4603      	mov	r3, r0
 8000794:	461a      	mov	r2, r3
 8000796:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800079a:	4293      	cmp	r3, r2
 800079c:	d024      	beq.n	80007e8 <sed_leds+0xd8>
			HAL_GPIO_WritePin(gpio_outputs[i].gpio, gpio_outputs[i].pin, led_command);
 800079e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80007a2:	00db      	lsls	r3, r3, #3
 80007a4:	3348      	adds	r3, #72	@ 0x48
 80007a6:	443b      	add	r3, r7
 80007a8:	f853 0c40 	ldr.w	r0, [r3, #-64]
 80007ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80007b0:	00db      	lsls	r3, r3, #3
 80007b2:	3348      	adds	r3, #72	@ 0x48
 80007b4:	443b      	add	r3, r7
 80007b6:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 80007ba:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80007be:	b2d2      	uxtb	r2, r2
 80007c0:	4619      	mov	r1, r3
 80007c2:	f002 fa4f 	bl	8002c64 <HAL_GPIO_WritePin>
			sprintf(led, "%d ", i + 1);
 80007c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80007ca:	1c5a      	adds	r2, r3, #1
 80007cc:	f107 0320 	add.w	r3, r7, #32
 80007d0:	491b      	ldr	r1, [pc, #108]	@ (8000840 <sed_leds+0x130>)
 80007d2:	4618      	mov	r0, r3
 80007d4:	f00f fb7c 	bl	800fed0 <siprintf>
			strcat(led_answer, led);
 80007d8:	f107 0220 	add.w	r2, r7, #32
 80007dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007e0:	4611      	mov	r1, r2
 80007e2:	4618      	mov	r0, r3
 80007e4:	f00f fc09 	bl	800fffa <strcat>
	for (uint16_t i = 0; i < sizeof(gpio_outputs) / sizeof(gpio_outputs[0]); i++) {
 80007e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80007ec:	3301      	adds	r3, #1
 80007ee:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80007f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80007f6:	2b02      	cmp	r3, #2
 80007f8:	d9ad      	bls.n	8000756 <sed_leds+0x46>
		}
	}
	strcat(led_answer, "} switched");
 80007fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff fd28 	bl	8000254 <strlen>
 8000804:	4603      	mov	r3, r0
 8000806:	461a      	mov	r2, r3
 8000808:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800080c:	4413      	add	r3, r2
 800080e:	490d      	ldr	r1, [pc, #52]	@ (8000844 <sed_leds+0x134>)
 8000810:	461a      	mov	r2, r3
 8000812:	460b      	mov	r3, r1
 8000814:	cb03      	ldmia	r3!, {r0, r1}
 8000816:	6010      	str	r0, [r2, #0]
 8000818:	6051      	str	r1, [r2, #4]
 800081a:	8819      	ldrh	r1, [r3, #0]
 800081c:	789b      	ldrb	r3, [r3, #2]
 800081e:	8111      	strh	r1, [r2, #8]
 8000820:	7293      	strb	r3, [r2, #10]
	strcpy(answer, led_answer);
 8000822:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000826:	4619      	mov	r1, r3
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f00f fc88 	bl	801013e <strcpy>
}
 800082e:	bf00      	nop
 8000830:	3748      	adds	r7, #72	@ 0x48
 8000832:	46bd      	mov	sp, r7
 8000834:	bdb0      	pop	{r4, r5, r7, pc}
 8000836:	bf00      	nop
 8000838:	08011134 	.word	0x08011134
 800083c:	08011154 	.word	0x08011154
 8000840:	08011124 	.word	0x08011124
 8000844:	08011128 	.word	0x08011128

08000848 <udp_receive_message>:

void udp_receive_message(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port) {
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	f2ad 4d34 	subw	sp, sp, #1076	@ 0x434
 800084e:	af00      	add	r7, sp, #0
 8000850:	f507 6486 	add.w	r4, r7, #1072	@ 0x430
 8000854:	f2a4 4424 	subw	r4, r4, #1060	@ 0x424
 8000858:	6020      	str	r0, [r4, #0]
 800085a:	f507 6086 	add.w	r0, r7, #1072	@ 0x430
 800085e:	f5a0 6085 	sub.w	r0, r0, #1064	@ 0x428
 8000862:	6001      	str	r1, [r0, #0]
 8000864:	f507 6186 	add.w	r1, r7, #1072	@ 0x430
 8000868:	f2a1 412c 	subw	r1, r1, #1068	@ 0x42c
 800086c:	600a      	str	r2, [r1, #0]
 800086e:	f507 6286 	add.w	r2, r7, #1072	@ 0x430
 8000872:	f5a2 6286 	sub.w	r2, r2, #1072	@ 0x430
 8000876:	6013      	str	r3, [r2, #0]
	if (p != NULL) {
 8000878:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 800087c:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d072      	beq.n	800096c <udp_receive_message+0x124>
		/* send received packet back to sender */
		char received_message[BUFFER_ARRAY_SIZE];
		strncpy(received_message, p->payload, p->len);
 8000886:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 800088a:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	6859      	ldr	r1, [r3, #4]
 8000892:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8000896:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	895b      	ldrh	r3, [r3, #10]
 800089e:	461a      	mov	r2, r3
 80008a0:	f107 0310 	add.w	r3, r7, #16
 80008a4:	4618      	mov	r0, r3
 80008a6:	f00f fbc9 	bl	801003c <strncpy>
		received_message[p->len] = '\0';
 80008aa:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 80008ae:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	895b      	ldrh	r3, [r3, #10]
 80008b6:	461a      	mov	r2, r3
 80008b8:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 80008bc:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 80008c0:	2100      	movs	r1, #0
 80008c2:	5499      	strb	r1, [r3, r2]
		pbuf_free(p);
 80008c4:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 80008c8:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 80008cc:	6818      	ldr	r0, [r3, #0]
 80008ce:	f006 fc6d 	bl	80071ac <pbuf_free>

		char answer[1024];
		if (strcmp(received_message, "echo") == 0) {
 80008d2:	f107 0310 	add.w	r3, r7, #16
 80008d6:	4928      	ldr	r1, [pc, #160]	@ (8000978 <udp_receive_message+0x130>)
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fcb1 	bl	8000240 <strcmp>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d108      	bne.n	80008f6 <udp_receive_message+0xae>
			strcpy(answer, received_message);
 80008e4:	f107 0210 	add.w	r2, r7, #16
 80008e8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008ec:	4611      	mov	r1, r2
 80008ee:	4618      	mov	r0, r3
 80008f0:	f00f fc25 	bl	801013e <strcpy>
 80008f4:	e02a      	b.n	800094c <udp_receive_message+0x104>
		} else if (strcmp(received_message, "ifconfig") == 0) {
 80008f6:	f107 0310 	add.w	r3, r7, #16
 80008fa:	4920      	ldr	r1, [pc, #128]	@ (800097c <udp_receive_message+0x134>)
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fc9f 	bl	8000240 <strcmp>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d105      	bne.n	8000914 <udp_receive_message+0xcc>
			get_ifconfig(answer);
 8000908:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fec1 	bl	8000694 <get_ifconfig>
 8000912:	e01b      	b.n	800094c <udp_receive_message+0x104>
		} else if (strncmp(received_message + LEDS_COUNT, "leds", 4) == 0) {
 8000914:	f107 0310 	add.w	r3, r7, #16
 8000918:	3303      	adds	r3, #3
 800091a:	2204      	movs	r2, #4
 800091c:	4918      	ldr	r1, [pc, #96]	@ (8000980 <udp_receive_message+0x138>)
 800091e:	4618      	mov	r0, r3
 8000920:	f00f fb7a 	bl	8010018 <strncmp>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d108      	bne.n	800093c <udp_receive_message+0xf4>
			sed_leds(answer, received_message);
 800092a:	f107 0210 	add.w	r2, r7, #16
 800092e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000932:	4611      	mov	r1, r2
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff feeb 	bl	8000710 <sed_leds>
 800093a:	e007      	b.n	800094c <udp_receive_message+0x104>
		} else {
			strcpy(answer, "Unknown command");
 800093c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000940:	4a10      	ldr	r2, [pc, #64]	@ (8000984 <udp_receive_message+0x13c>)
 8000942:	461c      	mov	r4, r3
 8000944:	4613      	mov	r3, r2
 8000946:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000948:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
		udp_send_message(pcb, addr, port, answer);
 800094c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000950:	f8b7 2440 	ldrh.w	r2, [r7, #1088]	@ 0x440
 8000954:	f507 6186 	add.w	r1, r7, #1072	@ 0x430
 8000958:	f5a1 6186 	sub.w	r1, r1, #1072	@ 0x430
 800095c:	f507 6086 	add.w	r0, r7, #1072	@ 0x430
 8000960:	f5a0 6085 	sub.w	r0, r0, #1064	@ 0x428
 8000964:	6809      	ldr	r1, [r1, #0]
 8000966:	6800      	ldr	r0, [r0, #0]
 8000968:	f7ff fe4a 	bl	8000600 <udp_send_message>
	}
}
 800096c:	bf00      	nop
 800096e:	f207 4734 	addw	r7, r7, #1076	@ 0x434
 8000972:	46bd      	mov	sp, r7
 8000974:	bd90      	pop	{r4, r7, pc}
 8000976:	bf00      	nop
 8000978:	0801116c 	.word	0x0801116c
 800097c:	08011174 	.word	0x08011174
 8000980:	08011180 	.word	0x08011180
 8000984:	08011188 	.word	0x08011188

08000988 <udp_create_socket>:

void udp_create_socket(void) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
	struct udp_pcb *pcb;

	/* get new pcb */
	pcb = udp_new();
 800098e:	f00c fdff 	bl	800d590 <udp_new>
 8000992:	6078      	str	r0, [r7, #4]
	if (pcb == NULL) {
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d00e      	beq.n	80009b8 <udp_create_socket+0x30>
		LWIP_DEBUGF(UDP_DEBUG, ("udp_new failed!\n"));
		return;
	}

	/* bind to any IP address on port 3333 */
	if (udp_bind(pcb, IP_ADDR_ANY, 3333) != ERR_OK) {
 800099a:	f640 5205 	movw	r2, #3333	@ 0xd05
 800099e:	4909      	ldr	r1, [pc, #36]	@ (80009c4 <udp_create_socket+0x3c>)
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f00c fd4d 	bl	800d440 <udp_bind>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d107      	bne.n	80009bc <udp_create_socket+0x34>
		return;
	}

	/* set udp_echo_recv() as callback function
	 for received packets */
	udp_recv(pcb, udp_receive_message, NULL);
 80009ac:	2200      	movs	r2, #0
 80009ae:	4906      	ldr	r1, [pc, #24]	@ (80009c8 <udp_create_socket+0x40>)
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f00c fdcd 	bl	800d550 <udp_recv>
 80009b6:	e002      	b.n	80009be <udp_create_socket+0x36>
		return;
 80009b8:	bf00      	nop
 80009ba:	e000      	b.n	80009be <udp_create_socket+0x36>
		return;
 80009bc:	bf00      	nop
}
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	08013c6c 	.word	0x08013c6c
 80009c8:	08000849 	.word	0x08000849

080009cc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80009d0:	f000 fd2a 	bl	8001428 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80009d4:	f000 f80e 	bl	80009f4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80009d8:	f000 f8dc 	bl	8000b94 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 80009dc:	f000 f87c 	bl	8000ad8 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 80009e0:	f000 f8aa 	bl	8000b38 <MX_USB_OTG_FS_PCD_Init>
	MX_LWIP_Init();
 80009e4:	f004 fb58 	bl	8005098 <MX_LWIP_Init>
	/* USER CODE BEGIN 2 */
	udp_create_socket();
 80009e8:	f7ff ffce 	bl	8000988 <udp_create_socket>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		MX_LWIP_Process();
 80009ec:	f004 fc94 	bl	8005318 <MX_LWIP_Process>
 80009f0:	e7fc      	b.n	80009ec <main+0x20>
	...

080009f4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b094      	sub	sp, #80	@ 0x50
 80009f8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	2234      	movs	r2, #52	@ 0x34
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f00f faf1 	bl	800ffea <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a08:	f107 0308 	add.w	r3, r7, #8
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000a18:	f002 fa86 	bl	8002f28 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000a1c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad0 <SystemClock_Config+0xdc>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a20:	4a2b      	ldr	r2, [pc, #172]	@ (8000ad0 <SystemClock_Config+0xdc>)
 8000a22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a28:	4b29      	ldr	r3, [pc, #164]	@ (8000ad0 <SystemClock_Config+0xdc>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a34:	4b27      	ldr	r3, [pc, #156]	@ (8000ad4 <SystemClock_Config+0xe0>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a3c:	4a25      	ldr	r2, [pc, #148]	@ (8000ad4 <SystemClock_Config+0xe0>)
 8000a3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a42:	6013      	str	r3, [r2, #0]
 8000a44:	4b23      	ldr	r3, [pc, #140]	@ (8000ad4 <SystemClock_Config+0xe0>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a4c:	603b      	str	r3, [r7, #0]
 8000a4e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a50:	2301      	movs	r3, #1
 8000a52:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a54:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a58:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a5e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a62:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000a64:	2308      	movs	r3, #8
 8000a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 216;
 8000a68:	23d8      	movs	r3, #216	@ 0xd8
 8000a6a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a70:	2304      	movs	r3, #4
 8000a72:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000a74:	2302      	movs	r3, #2
 8000a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f002 fab3 	bl	8002fe8 <HAL_RCC_OscConfig>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <SystemClock_Config+0x98>
		Error_Handler();
 8000a88:	f000 f926 	bl	8000cd8 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000a8c:	f002 fa5c 	bl	8002f48 <HAL_PWREx_EnableOverDrive>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0xa6>
		Error_Handler();
 8000a96:	f000 f91f 	bl	8000cd8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aa6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aaa:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8000ab0:	f107 0308 	add.w	r3, r7, #8
 8000ab4:	2103      	movs	r1, #3
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f002 fd44 	bl	8003544 <HAL_RCC_ClockConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0xd2>
		Error_Handler();
 8000ac2:	f000 f909 	bl	8000cd8 <Error_Handler>
	}
}
 8000ac6:	bf00      	nop
 8000ac8:	3750      	adds	r7, #80	@ 0x50
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40007000 	.word	0x40007000

08000ad8 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000adc:	4b14      	ldr	r3, [pc, #80]	@ (8000b30 <MX_USART3_UART_Init+0x58>)
 8000ade:	4a15      	ldr	r2, [pc, #84]	@ (8000b34 <MX_USART3_UART_Init+0x5c>)
 8000ae0:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000ae2:	4b13      	ldr	r3, [pc, #76]	@ (8000b30 <MX_USART3_UART_Init+0x58>)
 8000ae4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ae8:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aea:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <MX_USART3_UART_Init+0x58>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b30 <MX_USART3_UART_Init+0x58>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000af6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <MX_USART3_UART_Init+0x58>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b30 <MX_USART3_UART_Init+0x58>)
 8000afe:	220c      	movs	r2, #12
 8000b00:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	@ (8000b30 <MX_USART3_UART_Init+0x58>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b08:	4b09      	ldr	r3, [pc, #36]	@ (8000b30 <MX_USART3_UART_Init+0x58>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b0e:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <MX_USART3_UART_Init+0x58>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b14:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <MX_USART3_UART_Init+0x58>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000b1a:	4805      	ldr	r0, [pc, #20]	@ (8000b30 <MX_USART3_UART_Init+0x58>)
 8000b1c:	f003 fb60 	bl	80041e0 <HAL_UART_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_USART3_UART_Init+0x52>
		Error_Handler();
 8000b26:	f000 f8d7 	bl	8000cd8 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200001e4 	.word	0x200001e4
 8000b34:	40004800 	.word	0x40004800

08000b38 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b3c:	4b14      	ldr	r3, [pc, #80]	@ (8000b90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b3e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000b42:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b44:	4b12      	ldr	r3, [pc, #72]	@ (8000b90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b46:	2206      	movs	r2, #6
 8000b48:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b4c:	2202      	movs	r2, #2
 8000b4e:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b58:	2202      	movs	r2, #2
 8000b5a:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	@ (8000b90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b68:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	625a      	str	r2, [r3, #36]	@ 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	62da      	str	r2, [r3, #44]	@ 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8000b7a:	4805      	ldr	r0, [pc, #20]	@ (8000b90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b7c:	f002 f88b 	bl	8002c96 <HAL_PCD_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 8000b86:	f000 f8a7 	bl	8000cd8 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	2000026c 	.word	0x2000026c

08000b94 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	@ 0x30
 8000b98:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b9a:	f107 031c 	add.w	r3, r7, #28
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
 8000ba8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000baa:	4b47      	ldr	r3, [pc, #284]	@ (8000cc8 <MX_GPIO_Init+0x134>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	4a46      	ldr	r2, [pc, #280]	@ (8000cc8 <MX_GPIO_Init+0x134>)
 8000bb0:	f043 0304 	orr.w	r3, r3, #4
 8000bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb6:	4b44      	ldr	r3, [pc, #272]	@ (8000cc8 <MX_GPIO_Init+0x134>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	f003 0304 	and.w	r3, r3, #4
 8000bbe:	61bb      	str	r3, [r7, #24]
 8000bc0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000bc2:	4b41      	ldr	r3, [pc, #260]	@ (8000cc8 <MX_GPIO_Init+0x134>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	4a40      	ldr	r2, [pc, #256]	@ (8000cc8 <MX_GPIO_Init+0x134>)
 8000bc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bce:	4b3e      	ldr	r3, [pc, #248]	@ (8000cc8 <MX_GPIO_Init+0x134>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	4b3b      	ldr	r3, [pc, #236]	@ (8000cc8 <MX_GPIO_Init+0x134>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	4a3a      	ldr	r2, [pc, #232]	@ (8000cc8 <MX_GPIO_Init+0x134>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be6:	4b38      	ldr	r3, [pc, #224]	@ (8000cc8 <MX_GPIO_Init+0x134>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	4b35      	ldr	r3, [pc, #212]	@ (8000cc8 <MX_GPIO_Init+0x134>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	4a34      	ldr	r2, [pc, #208]	@ (8000cc8 <MX_GPIO_Init+0x134>)
 8000bf8:	f043 0302 	orr.w	r3, r3, #2
 8000bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfe:	4b32      	ldr	r3, [pc, #200]	@ (8000cc8 <MX_GPIO_Init+0x134>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0a:	4b2f      	ldr	r3, [pc, #188]	@ (8000cc8 <MX_GPIO_Init+0x134>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	4a2e      	ldr	r2, [pc, #184]	@ (8000cc8 <MX_GPIO_Init+0x134>)
 8000c10:	f043 0308 	orr.w	r3, r3, #8
 8000c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c16:	4b2c      	ldr	r3, [pc, #176]	@ (8000cc8 <MX_GPIO_Init+0x134>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	f003 0308 	and.w	r3, r3, #8
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000c22:	4b29      	ldr	r3, [pc, #164]	@ (8000cc8 <MX_GPIO_Init+0x134>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	4a28      	ldr	r2, [pc, #160]	@ (8000cc8 <MX_GPIO_Init+0x134>)
 8000c28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2e:	4b26      	ldr	r3, [pc, #152]	@ (8000cc8 <MX_GPIO_Init+0x134>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000c40:	4822      	ldr	r0, [pc, #136]	@ (8000ccc <MX_GPIO_Init+0x138>)
 8000c42:	f002 f80f 	bl	8002c64 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2140      	movs	r1, #64	@ 0x40
 8000c4a:	4821      	ldr	r0, [pc, #132]	@ (8000cd0 <MX_GPIO_Init+0x13c>)
 8000c4c:	f002 f80a 	bl	8002c64 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c54:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c56:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c5a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4619      	mov	r1, r3
 8000c66:	481b      	ldr	r0, [pc, #108]	@ (8000cd4 <MX_GPIO_Init+0x140>)
 8000c68:	f001 fe38 	bl	80028dc <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8000c6c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000c70:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	4619      	mov	r1, r3
 8000c84:	4811      	ldr	r0, [pc, #68]	@ (8000ccc <MX_GPIO_Init+0x138>)
 8000c86:	f001 fe29 	bl	80028dc <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c8a:	2340      	movs	r3, #64	@ 0x40
 8000c8c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	480b      	ldr	r0, [pc, #44]	@ (8000cd0 <MX_GPIO_Init+0x13c>)
 8000ca2:	f001 fe1b 	bl	80028dc <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ca6:	2380      	movs	r3, #128	@ 0x80
 8000ca8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000caa:	2300      	movs	r3, #0
 8000cac:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4805      	ldr	r0, [pc, #20]	@ (8000cd0 <MX_GPIO_Init+0x13c>)
 8000cba:	f001 fe0f 	bl	80028dc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000cbe:	bf00      	nop
 8000cc0:	3730      	adds	r7, #48	@ 0x30
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020400 	.word	0x40020400
 8000cd0:	40021800 	.word	0x40021800
 8000cd4:	40020800 	.word	0x40020800

08000cd8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cdc:	b672      	cpsid	i
}
 8000cde:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <Error_Handler+0x8>

08000ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cea:	4b0f      	ldr	r3, [pc, #60]	@ (8000d28 <HAL_MspInit+0x44>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cee:	4a0e      	ldr	r2, [pc, #56]	@ (8000d28 <HAL_MspInit+0x44>)
 8000cf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d28 <HAL_MspInit+0x44>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d02:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <HAL_MspInit+0x44>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d06:	4a08      	ldr	r2, [pc, #32]	@ (8000d28 <HAL_MspInit+0x44>)
 8000d08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d0e:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <HAL_MspInit+0x44>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	40023800 	.word	0x40023800

08000d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b0ae      	sub	sp, #184	@ 0xb8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	2290      	movs	r2, #144	@ 0x90
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f00f f94c 	bl	800ffea <memset>
  if(huart->Instance==USART3)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a22      	ldr	r2, [pc, #136]	@ (8000de0 <HAL_UART_MspInit+0xb4>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d13c      	bne.n	8000dd6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d60:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d62:	2300      	movs	r3, #0
 8000d64:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f002 fe10 	bl	8003990 <HAL_RCCEx_PeriphCLKConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d76:	f7ff ffaf 	bl	8000cd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000de4 <HAL_UART_MspInit+0xb8>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7e:	4a19      	ldr	r2, [pc, #100]	@ (8000de4 <HAL_UART_MspInit+0xb8>)
 8000d80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d86:	4b17      	ldr	r3, [pc, #92]	@ (8000de4 <HAL_UART_MspInit+0xb8>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d92:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <HAL_UART_MspInit+0xb8>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	4a13      	ldr	r2, [pc, #76]	@ (8000de4 <HAL_UART_MspInit+0xb8>)
 8000d98:	f043 0308 	orr.w	r3, r3, #8
 8000d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9e:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <HAL_UART_MspInit+0xb8>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	f003 0308 	and.w	r3, r3, #8
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000daa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dc4:	2307      	movs	r3, #7
 8000dc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dca:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4805      	ldr	r0, [pc, #20]	@ (8000de8 <HAL_UART_MspInit+0xbc>)
 8000dd2:	f001 fd83 	bl	80028dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dd6:	bf00      	nop
 8000dd8:	37b8      	adds	r7, #184	@ 0xb8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40004800 	.word	0x40004800
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020c00 	.word	0x40020c00

08000dec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b0ae      	sub	sp, #184	@ 0xb8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2290      	movs	r2, #144	@ 0x90
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f00f f8ec 	bl	800ffea <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e1a:	d166      	bne.n	8000eea <HAL_PCD_MspInit+0xfe>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e1c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000e20:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000e22:	23c0      	movs	r3, #192	@ 0xc0
 8000e24:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000e26:	2302      	movs	r3, #2
 8000e28:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000e32:	2301      	movs	r3, #1
 8000e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000e36:	2300      	movs	r3, #0
 8000e38:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000e3a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4618      	mov	r0, r3
 8000e48:	f002 fda2 	bl	8003990 <HAL_RCCEx_PeriphCLKConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <HAL_PCD_MspInit+0x6a>
    {
      Error_Handler();
 8000e52:	f7ff ff41 	bl	8000cd8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	4b27      	ldr	r3, [pc, #156]	@ (8000ef4 <HAL_PCD_MspInit+0x108>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	4a26      	ldr	r2, [pc, #152]	@ (8000ef4 <HAL_PCD_MspInit+0x108>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e62:	4b24      	ldr	r3, [pc, #144]	@ (8000ef4 <HAL_PCD_MspInit+0x108>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e6e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000e72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e82:	2303      	movs	r3, #3
 8000e84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e88:	230a      	movs	r3, #10
 8000e8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e92:	4619      	mov	r1, r3
 8000e94:	4818      	ldr	r0, [pc, #96]	@ (8000ef8 <HAL_PCD_MspInit+0x10c>)
 8000e96:	f001 fd21 	bl	80028dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000eae:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4810      	ldr	r0, [pc, #64]	@ (8000ef8 <HAL_PCD_MspInit+0x10c>)
 8000eb6:	f001 fd11 	bl	80028dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000eba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef4 <HAL_PCD_MspInit+0x108>)
 8000ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ebe:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef4 <HAL_PCD_MspInit+0x108>)
 8000ec0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ec4:	6353      	str	r3, [r2, #52]	@ 0x34
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef4 <HAL_PCD_MspInit+0x108>)
 8000ec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4b08      	ldr	r3, [pc, #32]	@ (8000ef4 <HAL_PCD_MspInit+0x108>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed6:	4a07      	ldr	r2, [pc, #28]	@ (8000ef4 <HAL_PCD_MspInit+0x108>)
 8000ed8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000edc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ede:	4b05      	ldr	r3, [pc, #20]	@ (8000ef4 <HAL_PCD_MspInit+0x108>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000eea:	bf00      	nop
 8000eec:	37b8      	adds	r7, #184	@ 0xb8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020000 	.word	0x40020000

08000efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <NMI_Handler+0x4>

08000f04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <HardFault_Handler+0x4>

08000f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <MemManage_Handler+0x4>

08000f14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <BusFault_Handler+0x4>

08000f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <UsageFault_Handler+0x4>

08000f24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f52:	f000 faa7 	bl	80014a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0
  return 1;
 8000f5e:	2301      	movs	r3, #1
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <_kill>:

int _kill(int pid, int sig)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f76:	4b05      	ldr	r3, [pc, #20]	@ (8000f8c <_kill+0x20>)
 8000f78:	2216      	movs	r2, #22
 8000f7a:	601a      	str	r2, [r3, #0]
  return -1;
 8000f7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	20008a68 	.word	0x20008a68

08000f90 <_exit>:

void _exit (int status)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f98:	f04f 31ff 	mov.w	r1, #4294967295
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff ffe5 	bl	8000f6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fa2:	bf00      	nop
 8000fa4:	e7fd      	b.n	8000fa2 <_exit+0x12>

08000fa6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b086      	sub	sp, #24
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	60f8      	str	r0, [r7, #12]
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	e00a      	b.n	8000fce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fb8:	f3af 8000 	nop.w
 8000fbc:	4601      	mov	r1, r0
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	1c5a      	adds	r2, r3, #1
 8000fc2:	60ba      	str	r2, [r7, #8]
 8000fc4:	b2ca      	uxtb	r2, r1
 8000fc6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	dbf0      	blt.n	8000fb8 <_read+0x12>
  }

  return len;
 8000fd6:	687b      	ldr	r3, [r7, #4]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	e009      	b.n	8001006 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	1c5a      	adds	r2, r3, #1
 8000ff6:	60ba      	str	r2, [r7, #8]
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	3301      	adds	r3, #1
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	429a      	cmp	r2, r3
 800100c:	dbf1      	blt.n	8000ff2 <_write+0x12>
  }
  return len;
 800100e:	687b      	ldr	r3, [r7, #4]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <_close>:

int _close(int file)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001020:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001024:	4618      	mov	r0, r3
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001040:	605a      	str	r2, [r3, #4]
  return 0;
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <_isatty>:

int _isatty(int file)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001058:	2301      	movs	r3, #1
}
 800105a:	4618      	mov	r0, r3
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001066:	b480      	push	{r7}
 8001068:	b085      	sub	sp, #20
 800106a:	af00      	add	r7, sp, #0
 800106c:	60f8      	str	r0, [r7, #12]
 800106e:	60b9      	str	r1, [r7, #8]
 8001070:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001080:	b480      	push	{r7}
 8001082:	b087      	sub	sp, #28
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001088:	4a14      	ldr	r2, [pc, #80]	@ (80010dc <_sbrk+0x5c>)
 800108a:	4b15      	ldr	r3, [pc, #84]	@ (80010e0 <_sbrk+0x60>)
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001094:	4b13      	ldr	r3, [pc, #76]	@ (80010e4 <_sbrk+0x64>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d102      	bne.n	80010a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800109c:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <_sbrk+0x64>)
 800109e:	4a12      	ldr	r2, [pc, #72]	@ (80010e8 <_sbrk+0x68>)
 80010a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010a2:	4b10      	ldr	r3, [pc, #64]	@ (80010e4 <_sbrk+0x64>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d205      	bcs.n	80010bc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80010b0:	4b0e      	ldr	r3, [pc, #56]	@ (80010ec <_sbrk+0x6c>)
 80010b2:	220c      	movs	r2, #12
 80010b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ba:	e009      	b.n	80010d0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80010bc:	4b09      	ldr	r3, [pc, #36]	@ (80010e4 <_sbrk+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010c2:	4b08      	ldr	r3, [pc, #32]	@ (80010e4 <_sbrk+0x64>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	4a06      	ldr	r2, [pc, #24]	@ (80010e4 <_sbrk+0x64>)
 80010cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ce:	68fb      	ldr	r3, [r7, #12]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	371c      	adds	r7, #28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	20080000 	.word	0x20080000
 80010e0:	00000400 	.word	0x00000400
 80010e4:	20000774 	.word	0x20000774
 80010e8:	20008a78 	.word	0x20008a78
 80010ec:	20008a68 	.word	0x20008a68

080010f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f4:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <SystemInit+0x20>)
 80010f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010fa:	4a05      	ldr	r2, [pc, #20]	@ (8001110 <SystemInit+0x20>)
 80010fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001100:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001114:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800114c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001118:	480d      	ldr	r0, [pc, #52]	@ (8001150 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800111a:	490e      	ldr	r1, [pc, #56]	@ (8001154 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800111c:	4a0e      	ldr	r2, [pc, #56]	@ (8001158 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800111e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001120:	e002      	b.n	8001128 <LoopCopyDataInit>

08001122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001126:	3304      	adds	r3, #4

08001128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800112c:	d3f9      	bcc.n	8001122 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112e:	4a0b      	ldr	r2, [pc, #44]	@ (800115c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001130:	4c0b      	ldr	r4, [pc, #44]	@ (8001160 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001134:	e001      	b.n	800113a <LoopFillZerobss>

08001136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001138:	3204      	adds	r2, #4

0800113a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800113c:	d3fb      	bcc.n	8001136 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800113e:	f7ff ffd7 	bl	80010f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001142:	f00e ffd5 	bl	80100f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001146:	f7ff fc41 	bl	80009cc <main>
  bx  lr    
 800114a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800114c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001150:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001154:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001158:	08013d6c 	.word	0x08013d6c
  ldr r2, =_sbss
 800115c:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8001160:	20008a78 	.word	0x20008a78

08001164 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001164:	e7fe      	b.n	8001164 <ADC_IRQHandler>

08001166 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d00b      	beq.n	800118e <LAN8742_RegisterBusIO+0x28>
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d007      	beq.n	800118e <LAN8742_RegisterBusIO+0x28>
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <LAN8742_RegisterBusIO+0x28>
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d102      	bne.n	8001194 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
 8001192:	e014      	b.n	80011be <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	68da      	ldr	r2, [r3, #12]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	691a      	ldr	r2, [r3, #16]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b086      	sub	sp, #24
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d17c      	bne.n	80012e4 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d002      	beq.n	80011f8 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2220      	movs	r2, #32
 80011fc:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	e01c      	b.n	800123e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	695b      	ldr	r3, [r3, #20]
 8001208:	f107 0208 	add.w	r2, r7, #8
 800120c:	2112      	movs	r1, #18
 800120e:	6978      	ldr	r0, [r7, #20]
 8001210:	4798      	blx	r3
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	da03      	bge.n	8001220 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001218:	f06f 0304 	mvn.w	r3, #4
 800121c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800121e:	e00b      	b.n	8001238 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	f003 031f 	and.w	r3, r3, #31
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	429a      	cmp	r2, r3
 800122a:	d105      	bne.n	8001238 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
         break;
 8001236:	e005      	b.n	8001244 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	3301      	adds	r3, #1
 800123c:	617b      	str	r3, [r7, #20]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	2b1f      	cmp	r3, #31
 8001242:	d9df      	bls.n	8001204 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b1f      	cmp	r3, #31
 800124a:	d902      	bls.n	8001252 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800124c:	f06f 0302 	mvn.w	r3, #2
 8001250:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d145      	bne.n	80012e4 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	6810      	ldr	r0, [r2, #0]
 8001260:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001264:	2100      	movs	r1, #0
 8001266:	4798      	blx	r3
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	db37      	blt.n	80012de <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	6810      	ldr	r0, [r2, #0]
 8001276:	f107 0208 	add.w	r2, r7, #8
 800127a:	2100      	movs	r1, #0
 800127c:	4798      	blx	r3
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	db28      	blt.n	80012d6 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	4798      	blx	r3
 800128a:	4603      	mov	r3, r0
 800128c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800128e:	e01c      	b.n	80012ca <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	4798      	blx	r3
 8001296:	4603      	mov	r3, r0
 8001298:	461a      	mov	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80012a2:	d80e      	bhi.n	80012c2 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	6810      	ldr	r0, [r2, #0]
 80012ac:	f107 0208 	add.w	r2, r7, #8
 80012b0:	2100      	movs	r1, #0
 80012b2:	4798      	blx	r3
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	da07      	bge.n	80012ca <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80012ba:	f06f 0304 	mvn.w	r3, #4
 80012be:	613b      	str	r3, [r7, #16]
                 break;
 80012c0:	e010      	b.n	80012e4 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80012c2:	f06f 0301 	mvn.w	r3, #1
 80012c6:	613b      	str	r3, [r7, #16]
               break;
 80012c8:	e00c      	b.n	80012e4 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1dd      	bne.n	8001290 <LAN8742_Init+0xc6>
 80012d4:	e006      	b.n	80012e4 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80012d6:	f06f 0304 	mvn.w	r3, #4
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	e002      	b.n	80012e4 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80012de:	f06f 0303 	mvn.w	r3, #3
 80012e2:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d112      	bne.n	8001310 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	4798      	blx	r3
 80012f0:	4603      	mov	r3, r0
 80012f2:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80012f4:	bf00      	nop
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	4798      	blx	r3
 80012fc:	4603      	mov	r3, r0
 80012fe:	461a      	mov	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001308:	d9f5      	bls.n	80012f6 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001310:	693b      	ldr	r3, [r7, #16]
 }
 8001312:	4618      	mov	r0, r3
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b084      	sub	sp, #16
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	6810      	ldr	r0, [r2, #0]
 800132e:	f107 020c 	add.w	r2, r7, #12
 8001332:	2101      	movs	r1, #1
 8001334:	4798      	blx	r3
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	da02      	bge.n	8001342 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800133c:	f06f 0304 	mvn.w	r3, #4
 8001340:	e06e      	b.n	8001420 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	6810      	ldr	r0, [r2, #0]
 800134a:	f107 020c 	add.w	r2, r7, #12
 800134e:	2101      	movs	r1, #1
 8001350:	4798      	blx	r3
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	da02      	bge.n	800135e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001358:	f06f 0304 	mvn.w	r3, #4
 800135c:	e060      	b.n	8001420 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	2b00      	cmp	r3, #0
 8001366:	d101      	bne.n	800136c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001368:	2301      	movs	r3, #1
 800136a:	e059      	b.n	8001420 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	6810      	ldr	r0, [r2, #0]
 8001374:	f107 020c 	add.w	r2, r7, #12
 8001378:	2100      	movs	r1, #0
 800137a:	4798      	blx	r3
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	da02      	bge.n	8001388 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001382:	f06f 0304 	mvn.w	r3, #4
 8001386:	e04b      	b.n	8001420 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d11b      	bne.n	80013ca <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d006      	beq.n	80013aa <LAN8742_GetLinkState+0x90>
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80013a6:	2302      	movs	r3, #2
 80013a8:	e03a      	b.n	8001420 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e033      	b.n	8001420 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80013c2:	2304      	movs	r3, #4
 80013c4:	e02c      	b.n	8001420 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80013c6:	2305      	movs	r3, #5
 80013c8:	e02a      	b.n	8001420 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	6810      	ldr	r0, [r2, #0]
 80013d2:	f107 020c 	add.w	r2, r7, #12
 80013d6:	211f      	movs	r1, #31
 80013d8:	4798      	blx	r3
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	da02      	bge.n	80013e6 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80013e0:	f06f 0304 	mvn.w	r3, #4
 80013e4:	e01c      	b.n	8001420 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d101      	bne.n	80013f4 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80013f0:	2306      	movs	r3, #6
 80013f2:	e015      	b.n	8001420 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f003 031c 	and.w	r3, r3, #28
 80013fa:	2b18      	cmp	r3, #24
 80013fc:	d101      	bne.n	8001402 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80013fe:	2302      	movs	r3, #2
 8001400:	e00e      	b.n	8001420 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f003 031c 	and.w	r3, r3, #28
 8001408:	2b08      	cmp	r3, #8
 800140a:	d101      	bne.n	8001410 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800140c:	2303      	movs	r3, #3
 800140e:	e007      	b.n	8001420 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f003 031c 	and.w	r3, r3, #28
 8001416:	2b14      	cmp	r3, #20
 8001418:	d101      	bne.n	800141e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800141a:	2304      	movs	r3, #4
 800141c:	e000      	b.n	8001420 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800141e:	2305      	movs	r3, #5
    }				
  }
}
 8001420:	4618      	mov	r0, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800142c:	2003      	movs	r0, #3
 800142e:	f000 f92f 	bl	8001690 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001432:	2000      	movs	r0, #0
 8001434:	f000 f806 	bl	8001444 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001438:	f7ff fc54 	bl	8000ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800144c:	4b12      	ldr	r3, [pc, #72]	@ (8001498 <HAL_InitTick+0x54>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b12      	ldr	r3, [pc, #72]	@ (800149c <HAL_InitTick+0x58>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4619      	mov	r1, r3
 8001456:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800145a:	fbb3 f3f1 	udiv	r3, r3, r1
 800145e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001462:	4618      	mov	r0, r3
 8001464:	f000 f93b 	bl	80016de <HAL_SYSTICK_Config>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e00e      	b.n	8001490 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b0f      	cmp	r3, #15
 8001476:	d80a      	bhi.n	800148e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001478:	2200      	movs	r2, #0
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	f04f 30ff 	mov.w	r0, #4294967295
 8001480:	f000 f911 	bl	80016a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001484:	4a06      	ldr	r2, [pc, #24]	@ (80014a0 <HAL_InitTick+0x5c>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	e000      	b.n	8001490 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
}
 8001490:	4618      	mov	r0, r3
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000000 	.word	0x20000000
 800149c:	20000008 	.word	0x20000008
 80014a0:	20000004 	.word	0x20000004

080014a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a8:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <HAL_IncTick+0x20>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <HAL_IncTick+0x24>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4413      	add	r3, r2
 80014b4:	4a04      	ldr	r2, [pc, #16]	@ (80014c8 <HAL_IncTick+0x24>)
 80014b6:	6013      	str	r3, [r2, #0]
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20000008 	.word	0x20000008
 80014c8:	20000778 	.word	0x20000778

080014cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return uwTick;
 80014d0:	4b03      	ldr	r3, [pc, #12]	@ (80014e0 <HAL_GetTick+0x14>)
 80014d2:	681b      	ldr	r3, [r3, #0]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	20000778 	.word	0x20000778

080014e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014ec:	f7ff ffee 	bl	80014cc <HAL_GetTick>
 80014f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014fc:	d005      	beq.n	800150a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001528 <HAL_Delay+0x44>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4413      	add	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800150a:	bf00      	nop
 800150c:	f7ff ffde 	bl	80014cc <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	429a      	cmp	r2, r3
 800151a:	d8f7      	bhi.n	800150c <HAL_Delay+0x28>
  {
  }
}
 800151c:	bf00      	nop
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000008 	.word	0x20000008

0800152c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800153c:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <__NVIC_SetPriorityGrouping+0x40>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001542:	68ba      	ldr	r2, [r7, #8]
 8001544:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001548:	4013      	ands	r3, r2
 800154a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001554:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <__NVIC_SetPriorityGrouping+0x44>)
 8001556:	4313      	orrs	r3, r2
 8001558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800155a:	4a04      	ldr	r2, [pc, #16]	@ (800156c <__NVIC_SetPriorityGrouping+0x40>)
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	60d3      	str	r3, [r2, #12]
}
 8001560:	bf00      	nop
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000ed00 	.word	0xe000ed00
 8001570:	05fa0000 	.word	0x05fa0000

08001574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001578:	4b04      	ldr	r3, [pc, #16]	@ (800158c <__NVIC_GetPriorityGrouping+0x18>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	0a1b      	lsrs	r3, r3, #8
 800157e:	f003 0307 	and.w	r3, r3, #7
}
 8001582:	4618      	mov	r0, r3
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	6039      	str	r1, [r7, #0]
 800159a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	db0a      	blt.n	80015ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	490c      	ldr	r1, [pc, #48]	@ (80015dc <__NVIC_SetPriority+0x4c>)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	0112      	lsls	r2, r2, #4
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	440b      	add	r3, r1
 80015b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b8:	e00a      	b.n	80015d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4908      	ldr	r1, [pc, #32]	@ (80015e0 <__NVIC_SetPriority+0x50>)
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	3b04      	subs	r3, #4
 80015c8:	0112      	lsls	r2, r2, #4
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	440b      	add	r3, r1
 80015ce:	761a      	strb	r2, [r3, #24]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000e100 	.word	0xe000e100
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b089      	sub	sp, #36	@ 0x24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f1c3 0307 	rsb	r3, r3, #7
 80015fe:	2b04      	cmp	r3, #4
 8001600:	bf28      	it	cs
 8001602:	2304      	movcs	r3, #4
 8001604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3304      	adds	r3, #4
 800160a:	2b06      	cmp	r3, #6
 800160c:	d902      	bls.n	8001614 <NVIC_EncodePriority+0x30>
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3b03      	subs	r3, #3
 8001612:	e000      	b.n	8001616 <NVIC_EncodePriority+0x32>
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	f04f 32ff 	mov.w	r2, #4294967295
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43da      	mvns	r2, r3
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	401a      	ands	r2, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800162c:	f04f 31ff 	mov.w	r1, #4294967295
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	43d9      	mvns	r1, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	4313      	orrs	r3, r2
         );
}
 800163e:	4618      	mov	r0, r3
 8001640:	3724      	adds	r7, #36	@ 0x24
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3b01      	subs	r3, #1
 8001658:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800165c:	d301      	bcc.n	8001662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165e:	2301      	movs	r3, #1
 8001660:	e00f      	b.n	8001682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001662:	4a0a      	ldr	r2, [pc, #40]	@ (800168c <SysTick_Config+0x40>)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166a:	210f      	movs	r1, #15
 800166c:	f04f 30ff 	mov.w	r0, #4294967295
 8001670:	f7ff ff8e 	bl	8001590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001674:	4b05      	ldr	r3, [pc, #20]	@ (800168c <SysTick_Config+0x40>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167a:	4b04      	ldr	r3, [pc, #16]	@ (800168c <SysTick_Config+0x40>)
 800167c:	2207      	movs	r2, #7
 800167e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	e000e010 	.word	0xe000e010

08001690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ff47 	bl	800152c <__NVIC_SetPriorityGrouping>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b086      	sub	sp, #24
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	4603      	mov	r3, r0
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b8:	f7ff ff5c 	bl	8001574 <__NVIC_GetPriorityGrouping>
 80016bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	6978      	ldr	r0, [r7, #20]
 80016c4:	f7ff ff8e 	bl	80015e4 <NVIC_EncodePriority>
 80016c8:	4602      	mov	r2, r0
 80016ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff5d 	bl	8001590 <__NVIC_SetPriority>
}
 80016d6:	bf00      	nop
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ffb0 	bl	800164c <SysTick_Config>
 80016ec:	4603      	mov	r3, r0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e06a      	b.n	80017e0 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001710:	2b00      	cmp	r3, #0
 8001712:	d106      	bne.n	8001722 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2223      	movs	r2, #35	@ 0x23
 8001718:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f003 ffe3 	bl	80056e8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001722:	4b31      	ldr	r3, [pc, #196]	@ (80017e8 <HAL_ETH_Init+0xf0>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001726:	4a30      	ldr	r2, [pc, #192]	@ (80017e8 <HAL_ETH_Init+0xf0>)
 8001728:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800172c:	6453      	str	r3, [r2, #68]	@ 0x44
 800172e:	4b2e      	ldr	r3, [pc, #184]	@ (80017e8 <HAL_ETH_Init+0xf0>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001732:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800173a:	4b2c      	ldr	r3, [pc, #176]	@ (80017ec <HAL_ETH_Init+0xf4>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	4a2b      	ldr	r2, [pc, #172]	@ (80017ec <HAL_ETH_Init+0xf4>)
 8001740:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001744:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001746:	4b29      	ldr	r3, [pc, #164]	@ (80017ec <HAL_ETH_Init+0xf4>)
 8001748:	685a      	ldr	r2, [r3, #4]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	4927      	ldr	r1, [pc, #156]	@ (80017ec <HAL_ETH_Init+0xf4>)
 8001750:	4313      	orrs	r3, r2
 8001752:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001754:	4b25      	ldr	r3, [pc, #148]	@ (80017ec <HAL_ETH_Init+0xf4>)
 8001756:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	6812      	ldr	r2, [r2, #0]
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800176e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001770:	f7ff feac 	bl	80014cc <HAL_GetTick>
 8001774:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001776:	e011      	b.n	800179c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001778:	f7ff fea8 	bl	80014cc <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001786:	d909      	bls.n	800179c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2204      	movs	r2, #4
 800178c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	22e0      	movs	r2, #224	@ 0xe0
 8001794:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e021      	b.n	80017e0 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1e4      	bne.n	8001778 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 fdf0 	bl	8002394 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 fe97 	bl	80024e8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 feed 	bl	800259a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	461a      	mov	r2, r3
 80017c6:	2100      	movs	r1, #0
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 fe55 	bl	8002478 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2210      	movs	r2, #16
 80017da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40013800 	.word	0x40013800

080017f0 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80017fe:	2b10      	cmp	r3, #16
 8001800:	d150      	bne.n	80018a4 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2223      	movs	r2, #35	@ 0x23
 8001806:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2204      	movs	r2, #4
 800180e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 f9fd 	bl	8001c10 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f042 0208 	orr.w	r2, r2, #8
 8001824:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800182e:	2001      	movs	r0, #1
 8001830:	f7ff fe58 	bl	80014e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f042 0204 	orr.w	r2, r2, #4
 800184a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001854:	2001      	movs	r0, #1
 8001856:	f7ff fe45 	bl	80014e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 fc36 	bl	80020d4 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6812      	ldr	r2, [r2, #0]
 8001876:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800187a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800187e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	6812      	ldr	r2, [r2, #0]
 800188e:	f043 0302 	orr.w	r3, r3, #2
 8001892:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001896:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2223      	movs	r2, #35	@ 0x23
 800189c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	e000      	b.n	80018a6 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
  }
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b084      	sub	sp, #16
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80018bc:	2b23      	cmp	r3, #35	@ 0x23
 80018be:	d14a      	bne.n	8001956 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2223      	movs	r2, #35	@ 0x23
 80018c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	6812      	ldr	r2, [r2, #0]
 80018d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80018da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018de:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6812      	ldr	r2, [r2, #0]
 80018ee:	f023 0302 	bic.w	r3, r3, #2
 80018f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018f6:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0204 	bic.w	r2, r2, #4
 8001906:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001910:	2001      	movs	r0, #1
 8001912:	f7ff fde7 	bl	80014e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 fbd8 	bl	80020d4 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0208 	bic.w	r2, r2, #8
 8001932:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800193c:	2001      	movs	r0, #1
 800193e:	f7ff fdd1 	bl	80014e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2210      	movs	r2, #16
 800194e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001952:	2300      	movs	r3, #0
 8001954:	e000      	b.n	8001958 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
  }
}
 8001958:	4618      	mov	r0, r3
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d109      	bne.n	8001986 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001978:	f043 0201 	orr.w	r2, r3, #1
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e07c      	b.n	8001a80 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800198c:	2b23      	cmp	r3, #35	@ 0x23
 800198e:	d176      	bne.n	8001a7e <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001990:	2200      	movs	r2, #0
 8001992:	68b9      	ldr	r1, [r7, #8]
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f000 fe6d 	bl	8002674 <ETH_Prepare_Tx_Descriptors>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d009      	beq.n	80019b4 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019a6:	f043 0202 	orr.w	r2, r3, #2
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e065      	b.n	8001a80 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80019b4:	f3bf 8f4f 	dsb	sy
}
 80019b8:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	3206      	adds	r2, #6
 80019c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c6:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019cc:	1c5a      	adds	r2, r3, #1
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	d904      	bls.n	80019e4 <HAL_ETH_Transmit+0x84>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019de:	1f1a      	subs	r2, r3, #4
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	3106      	adds	r1, #6
 80019f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80019f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019f8:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80019fa:	f7ff fd67 	bl	80014cc <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001a00:	e037      	b.n	8001a72 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d011      	beq.n	8001a38 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a1a:	f043 0208 	orr.w	r2, r3, #8
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a2c:	695a      	ldr	r2, [r3, #20]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e023      	b.n	8001a80 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a3e:	d018      	beq.n	8001a72 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a40:	f7ff fd44 	bl	80014cc <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d302      	bcc.n	8001a56 <HAL_ETH_Transmit+0xf6>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10d      	bne.n	8001a72 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a5c:	f043 0204 	orr.w	r2, r3, #4
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001a6c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e006      	b.n	8001a80 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	dbc3      	blt.n	8001a02 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	e000      	b.n	8001a80 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
  }
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d109      	bne.n	8001ab4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aa6:	f043 0201 	orr.w	r2, r3, #1
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0a8      	b.n	8001c06 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001aba:	2b23      	cmp	r3, #35	@ 0x23
 8001abc:	d001      	beq.n	8001ac2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e0a1      	b.n	8001c06 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ac6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69fa      	ldr	r2, [r7, #28]
 8001acc:	3212      	adds	r2, #18
 8001ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ad8:	f1c3 0304 	rsb	r3, r3, #4
 8001adc:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001ade:	e06a      	b.n	8001bb6 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d007      	beq.n	8001afc <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	699a      	ldr	r2, [r3, #24]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	69da      	ldr	r2, [r3, #28]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d103      	bne.n	8001b10 <HAL_ETH_ReadData+0x88>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d040      	beq.n	8001b92 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00c      	beq.n	8001b54 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	0c1b      	lsrs	r3, r3, #16
 8001b40:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001b44:	3b04      	subs	r3, #4
 8001b46:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001b50:	2301      	movs	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	f003 ff7b 	bl	8005a6c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	441a      	add	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3301      	adds	r3, #1
 8001b96:	61fb      	str	r3, [r7, #28]
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d902      	bls.n	8001ba4 <HAL_ETH_ReadData+0x11c>
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3b04      	subs	r3, #4
 8001ba2:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69fa      	ldr	r2, [r7, #28]
 8001ba8:	3212      	adds	r2, #18
 8001baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bae:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	db06      	blt.n	8001bcc <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d202      	bcs.n	8001bcc <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d089      	beq.n	8001ae0 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	441a      	add	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d002      	beq.n	8001be6 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 f815 	bl	8001c10 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69fa      	ldr	r2, [r7, #28]
 8001bea:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d108      	bne.n	8001c04 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	e000      	b.n	8001c06 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3720      	adds	r7, #32
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c24:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69fa      	ldr	r2, [r7, #28]
 8001c2a:	3212      	adds	r2, #18
 8001c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c30:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c36:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001c38:	e040      	b.n	8001cbc <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d112      	bne.n	8001c68 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001c42:	f107 030c 	add.w	r3, r7, #12
 8001c46:	4618      	mov	r0, r3
 8001c48:	f003 fee0 	bl	8005a0c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d102      	bne.n	8001c58 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	74fb      	strb	r3, [r7, #19]
 8001c56:	e007      	b.n	8001c68 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	461a      	mov	r2, r3
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001c68:	7cfb      	ldrb	r3, [r7, #19]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d026      	beq.n	8001cbc <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d103      	bne.n	8001c7e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	4a1e      	ldr	r2, [pc, #120]	@ (8001cf4 <ETH_UpdateDescriptor+0xe4>)
 8001c7a:	605a      	str	r2, [r3, #4]
 8001c7c:	e003      	b.n	8001c86 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8001c84:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001c86:	f3bf 8f5f 	dmb	sy
}
 8001c8a:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	61fb      	str	r3, [r7, #28]
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	2b03      	cmp	r3, #3
 8001ca2:	d902      	bls.n	8001caa <ETH_UpdateDescriptor+0x9a>
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	3b04      	subs	r3, #4
 8001ca8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69fa      	ldr	r2, [r7, #28]
 8001cae:	3212      	adds	r2, #18
 8001cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb4:	617b      	str	r3, [r7, #20]
      desccount--;
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d002      	beq.n	8001cc8 <ETH_UpdateDescriptor+0xb8>
 8001cc2:	7cfb      	ldrb	r3, [r7, #19]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1b8      	bne.n	8001c3a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d00c      	beq.n	8001cec <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cda:	461a      	mov	r2, r3
 8001cdc:	2300      	movs	r3, #0
 8001cde:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69fa      	ldr	r2, [r7, #28]
 8001ce4:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001cec:	bf00      	nop
 8001cee:	3720      	adds	r7, #32
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	80004600 	.word	0x80004600

08001cf8 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
 8001d04:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	f003 031c 	and.w	r3, r3, #28
 8001d14:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	02db      	lsls	r3, r3, #11
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	019b      	lsls	r3, r3, #6
 8001d26:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f023 0302 	bic.w	r3, r3, #2
 8001d36:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001d48:	f7ff fbc0 	bl	80014cc <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d4e:	e00d      	b.n	8001d6c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001d50:	f7ff fbbc 	bl	80014cc <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d5e:	d301      	bcc.n	8001d64 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e010      	b.n	8001d86 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1ec      	bne.n	8001d50 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	461a      	mov	r2, r3
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b086      	sub	sp, #24
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	60f8      	str	r0, [r7, #12]
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
 8001d9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	f003 031c 	and.w	r3, r3, #28
 8001daa:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	02db      	lsls	r3, r3, #11
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	019b      	lsls	r3, r3, #6
 8001dbc:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f043 0302 	orr.w	r3, r3, #2
 8001dcc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001de8:	f7ff fb70 	bl	80014cc <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dee:	e00d      	b.n	8001e0c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001df0:	f7ff fb6c 	bl	80014cc <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dfe:	d301      	bcc.n	8001e04 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e009      	b.n	8001e18 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1ec      	bne.n	8001df0 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e0d9      	b.n	8001fe8 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0310 	and.w	r3, r3, #16
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	bf14      	ite	ne
 8001e42:	2301      	movne	r3, #1
 8001e44:	2300      	moveq	r3, #0
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	461a      	mov	r2, r3
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	bf0c      	ite	eq
 8001e6c:	2301      	moveq	r3, #1
 8001e6e:	2300      	movne	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	461a      	mov	r2, r3
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	bf14      	ite	ne
 8001e88:	2301      	movne	r3, #1
 8001e8a:	2300      	moveq	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	bf0c      	ite	eq
 8001ea2:	2301      	moveq	r3, #1
 8001ea4:	2300      	movne	r3, #0
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	bf14      	ite	ne
 8001ebc:	2301      	movne	r3, #1
 8001ebe:	2300      	moveq	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	bf0c      	ite	eq
 8001ef2:	2301      	moveq	r3, #1
 8001ef4:	2300      	movne	r3, #0
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	461a      	mov	r2, r3
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	bf0c      	ite	eq
 8001f0c:	2301      	moveq	r3, #1
 8001f0e:	2300      	movne	r3, #0
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	bf14      	ite	ne
 8001f26:	2301      	movne	r3, #1
 8001f28:	2300      	moveq	r3, #0
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	bf14      	ite	ne
 8001f4e:	2301      	movne	r3, #1
 8001f50:	2300      	moveq	r3, #0
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	461a      	mov	r2, r3
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	bf14      	ite	ne
 8001f68:	2301      	movne	r3, #1
 8001f6a:	2300      	moveq	r3, #0
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	461a      	mov	r2, r3
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	bf0c      	ite	eq
 8001f84:	2301      	moveq	r3, #1
 8001f86:	2300      	movne	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	0c1b      	lsrs	r3, r3, #16
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	bf14      	ite	ne
 8001fbc:	2301      	movne	r3, #1
 8001fbe:	2300      	moveq	r3, #0
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	bf14      	ite	ne
 8001fd8:	2301      	movne	r3, #1
 8001fda:	2300      	moveq	r3, #0
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e00b      	b.n	8002020 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800200e:	2b10      	cmp	r3, #16
 8002010:	d105      	bne.n	800201e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002012:	6839      	ldr	r1, [r7, #0]
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f883 	bl	8002120 <ETH_SetMACConfig>

    return HAL_OK;
 800201a:	2300      	movs	r3, #0
 800201c:	e000      	b.n	8002020 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
  }
}
 8002020:	4618      	mov	r0, r3
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f023 031c 	bic.w	r3, r3, #28
 800203e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002040:	f001 fc72 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 8002044:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	4a1d      	ldr	r2, [pc, #116]	@ (80020c0 <HAL_ETH_SetMDIOClockRange+0x98>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d908      	bls.n	8002060 <HAL_ETH_SetMDIOClockRange+0x38>
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	4a1c      	ldr	r2, [pc, #112]	@ (80020c4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d804      	bhi.n	8002060 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f043 0308 	orr.w	r3, r3, #8
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	e027      	b.n	80020b0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	4a18      	ldr	r2, [pc, #96]	@ (80020c4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d908      	bls.n	800207a <HAL_ETH_SetMDIOClockRange+0x52>
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	4a17      	ldr	r2, [pc, #92]	@ (80020c8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d204      	bcs.n	800207a <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f043 030c 	orr.w	r3, r3, #12
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	e01a      	b.n	80020b0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	4a12      	ldr	r2, [pc, #72]	@ (80020c8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d303      	bcc.n	800208a <HAL_ETH_SetMDIOClockRange+0x62>
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	4a11      	ldr	r2, [pc, #68]	@ (80020cc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d911      	bls.n	80020ae <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	4a0f      	ldr	r2, [pc, #60]	@ (80020cc <HAL_ETH_SetMDIOClockRange+0xa4>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d908      	bls.n	80020a4 <HAL_ETH_SetMDIOClockRange+0x7c>
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	4a0e      	ldr	r2, [pc, #56]	@ (80020d0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d804      	bhi.n	80020a4 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f043 0304 	orr.w	r3, r3, #4
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	e005      	b.n	80020b0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f043 0310 	orr.w	r3, r3, #16
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	e000      	b.n	80020b0 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80020ae:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	611a      	str	r2, [r3, #16]
}
 80020b8:	bf00      	nop
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	01312cff 	.word	0x01312cff
 80020c4:	02160ebf 	.word	0x02160ebf
 80020c8:	03938700 	.word	0x03938700
 80020cc:	05f5e0ff 	.word	0x05f5e0ff
 80020d0:	08f0d17f 	.word	0x08f0d17f

080020d4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020f6:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002104:	2001      	movs	r0, #1
 8002106:	f7ff f9ed 	bl	80014e4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002114:	6193      	str	r3, [r2, #24]
}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	4b51      	ldr	r3, [pc, #324]	@ (800227c <ETH_SetMACConfig+0x15c>)
 8002136:	4013      	ands	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	7c1b      	ldrb	r3, [r3, #16]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d102      	bne.n	8002148 <ETH_SetMACConfig+0x28>
 8002142:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002146:	e000      	b.n	800214a <ETH_SetMACConfig+0x2a>
 8002148:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	7c5b      	ldrb	r3, [r3, #17]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d102      	bne.n	8002158 <ETH_SetMACConfig+0x38>
 8002152:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002156:	e000      	b.n	800215a <ETH_SetMACConfig+0x3a>
 8002158:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800215a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002160:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	7fdb      	ldrb	r3, [r3, #31]
 8002166:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002168:	431a      	orrs	r2, r3
                        macconf->Speed |
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800216e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	7f92      	ldrb	r2, [r2, #30]
 8002174:	2a00      	cmp	r2, #0
 8002176:	d102      	bne.n	800217e <ETH_SetMACConfig+0x5e>
 8002178:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800217c:	e000      	b.n	8002180 <ETH_SetMACConfig+0x60>
 800217e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002180:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	7f1b      	ldrb	r3, [r3, #28]
 8002186:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002188:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800218e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	791b      	ldrb	r3, [r3, #4]
 8002194:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002196:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800219e:	2a00      	cmp	r2, #0
 80021a0:	d102      	bne.n	80021a8 <ETH_SetMACConfig+0x88>
 80021a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021a6:	e000      	b.n	80021aa <ETH_SetMACConfig+0x8a>
 80021a8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80021aa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	7bdb      	ldrb	r3, [r3, #15]
 80021b0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80021b2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80021b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80021c0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80021c2:	4313      	orrs	r3, r2
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021da:	2001      	movs	r0, #1
 80021dc:	f7ff f982 	bl	80014e4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80021f6:	4013      	ands	r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021fe:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002206:	2a00      	cmp	r2, #0
 8002208:	d101      	bne.n	800220e <ETH_SetMACConfig+0xee>
 800220a:	2280      	movs	r2, #128	@ 0x80
 800220c:	e000      	b.n	8002210 <ETH_SetMACConfig+0xf0>
 800220e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002210:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002216:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800221e:	2a01      	cmp	r2, #1
 8002220:	d101      	bne.n	8002226 <ETH_SetMACConfig+0x106>
 8002222:	2208      	movs	r2, #8
 8002224:	e000      	b.n	8002228 <ETH_SetMACConfig+0x108>
 8002226:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002228:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002230:	2a01      	cmp	r2, #1
 8002232:	d101      	bne.n	8002238 <ETH_SetMACConfig+0x118>
 8002234:	2204      	movs	r2, #4
 8002236:	e000      	b.n	800223a <ETH_SetMACConfig+0x11a>
 8002238:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800223a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002242:	2a01      	cmp	r2, #1
 8002244:	d101      	bne.n	800224a <ETH_SetMACConfig+0x12a>
 8002246:	2202      	movs	r2, #2
 8002248:	e000      	b.n	800224c <ETH_SetMACConfig+0x12c>
 800224a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800224c:	4313      	orrs	r3, r2
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	4313      	orrs	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002264:	2001      	movs	r0, #1
 8002266:	f7ff f93d 	bl	80014e4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	619a      	str	r2, [r3, #24]
}
 8002272:	bf00      	nop
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	ff20810f 	.word	0xff20810f

08002280 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	4b3d      	ldr	r3, [pc, #244]	@ (8002390 <ETH_SetDMAConfig+0x110>)
 800229a:	4013      	ands	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	7b1b      	ldrb	r3, [r3, #12]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d102      	bne.n	80022ac <ETH_SetDMAConfig+0x2c>
 80022a6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80022aa:	e000      	b.n	80022ae <ETH_SetDMAConfig+0x2e>
 80022ac:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	7b5b      	ldrb	r3, [r3, #13]
 80022b2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022b4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	7f52      	ldrb	r2, [r2, #29]
 80022ba:	2a00      	cmp	r2, #0
 80022bc:	d102      	bne.n	80022c4 <ETH_SetDMAConfig+0x44>
 80022be:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80022c2:	e000      	b.n	80022c6 <ETH_SetDMAConfig+0x46>
 80022c4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80022c6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	7b9b      	ldrb	r3, [r3, #14]
 80022cc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80022ce:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80022d4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	7f1b      	ldrb	r3, [r3, #28]
 80022da:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80022dc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	7f9b      	ldrb	r3, [r3, #30]
 80022e2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80022e4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80022ea:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80022f2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022f4:	4313      	orrs	r3, r2
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002304:	461a      	mov	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002316:	2001      	movs	r0, #1
 8002318:	f7ff f8e4 	bl	80014e4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002324:	461a      	mov	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	791b      	ldrb	r3, [r3, #4]
 800232e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002334:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800233a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002340:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002348:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800234a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002350:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002352:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002358:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6812      	ldr	r2, [r2, #0]
 800235e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002362:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002366:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002374:	2001      	movs	r0, #1
 8002376:	f7ff f8b5 	bl	80014e4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002382:	461a      	mov	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6013      	str	r3, [r2, #0]
}
 8002388:	bf00      	nop
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	f8de3f23 	.word	0xf8de3f23

08002394 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b0a6      	sub	sp, #152	@ 0x98
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800239c:	2301      	movs	r3, #1
 800239e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80023a2:	2301      	movs	r3, #1
 80023a4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80023a8:	2300      	movs	r3, #0
 80023aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80023ac:	2300      	movs	r3, #0
 80023ae:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80023b2:	2301      	movs	r3, #1
 80023b4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80023b8:	2300      	movs	r3, #0
 80023ba:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80023be:	2301      	movs	r3, #1
 80023c0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80023c4:	2300      	movs	r3, #0
 80023c6:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80023ca:	2300      	movs	r3, #0
 80023cc:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80023d0:	2300      	movs	r3, #0
 80023d2:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80023d4:	2300      	movs	r3, #0
 80023d6:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80023da:	2300      	movs	r3, #0
 80023dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80023de:	2300      	movs	r3, #0
 80023e0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80023e4:	2300      	movs	r3, #0
 80023e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80023ea:	2300      	movs	r3, #0
 80023ec:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80023f0:	2300      	movs	r3, #0
 80023f2:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80023f6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80023fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80023fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002400:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002402:	2300      	movs	r3, #0
 8002404:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002408:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800240c:	4619      	mov	r1, r3
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff fe86 	bl	8002120 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002414:	2301      	movs	r3, #1
 8002416:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002418:	2301      	movs	r3, #1
 800241a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800241c:	2301      	movs	r3, #1
 800241e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002422:	2301      	movs	r3, #1
 8002424:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800242a:	2300      	movs	r3, #0
 800242c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002430:	2300      	movs	r3, #0
 8002432:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002436:	2300      	movs	r3, #0
 8002438:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800243a:	2301      	movs	r3, #1
 800243c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002440:	2301      	movs	r3, #1
 8002442:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002444:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002448:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800244a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800244e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002450:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002454:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002456:	2301      	movs	r3, #1
 8002458:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800245c:	2300      	movs	r3, #0
 800245e:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002460:	2300      	movs	r3, #0
 8002462:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002464:	f107 0308 	add.w	r3, r7, #8
 8002468:	4619      	mov	r1, r3
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff ff08 	bl	8002280 <ETH_SetDMAConfig>
}
 8002470:	bf00      	nop
 8002472:	3798      	adds	r7, #152	@ 0x98
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002478:	b480      	push	{r7}
 800247a:	b087      	sub	sp, #28
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3305      	adds	r3, #5
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	021b      	lsls	r3, r3, #8
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	3204      	adds	r2, #4
 8002490:	7812      	ldrb	r2, [r2, #0]
 8002492:	4313      	orrs	r3, r2
 8002494:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	4b11      	ldr	r3, [pc, #68]	@ (80024e0 <ETH_MACAddressConfig+0x68>)
 800249a:	4413      	add	r3, r2
 800249c:	461a      	mov	r2, r3
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3303      	adds	r3, #3
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	061a      	lsls	r2, r3, #24
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3302      	adds	r3, #2
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	041b      	lsls	r3, r3, #16
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3301      	adds	r3, #1
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	021b      	lsls	r3, r3, #8
 80024bc:	4313      	orrs	r3, r2
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	7812      	ldrb	r2, [r2, #0]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	4b06      	ldr	r3, [pc, #24]	@ (80024e4 <ETH_MACAddressConfig+0x6c>)
 80024ca:	4413      	add	r3, r2
 80024cc:	461a      	mov	r2, r3
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	6013      	str	r3, [r2, #0]
}
 80024d2:	bf00      	nop
 80024d4:	371c      	adds	r7, #28
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	40028040 	.word	0x40028040
 80024e4:	40028044 	.word	0x40028044

080024e8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80024f0:	2300      	movs	r3, #0
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	e03e      	b.n	8002574 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68d9      	ldr	r1, [r3, #12]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	440b      	add	r3, r1
 8002506:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2200      	movs	r2, #0
 8002512:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	2200      	movs	r2, #0
 800251e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002520:	68b9      	ldr	r1, [r7, #8]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	3206      	adds	r2, #6
 8002528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d80c      	bhi.n	8002558 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68d9      	ldr	r1, [r3, #12]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	4613      	mov	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	440b      	add	r3, r1
 8002550:	461a      	mov	r2, r3
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	e004      	b.n	8002562 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	461a      	mov	r2, r3
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	3301      	adds	r3, #1
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2b03      	cmp	r3, #3
 8002578:	d9bd      	bls.n	80024f6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68da      	ldr	r2, [r3, #12]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800258c:	611a      	str	r2, [r3, #16]
}
 800258e:	bf00      	nop
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800259a:	b480      	push	{r7}
 800259c:	b085      	sub	sp, #20
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	e046      	b.n	8002636 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6919      	ldr	r1, [r3, #16]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	4613      	mov	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	440b      	add	r3, r1
 80025b8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2200      	movs	r2, #0
 80025c4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2200      	movs	r2, #0
 80025ca:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2200      	movs	r2, #0
 80025d0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2200      	movs	r2, #0
 80025d6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2200      	movs	r2, #0
 80025dc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80025e4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 80025ec:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80025fa:	68b9      	ldr	r1, [r7, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	3212      	adds	r2, #18
 8002602:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d80c      	bhi.n	8002626 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6919      	ldr	r1, [r3, #16]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	440b      	add	r3, r1
 800261e:	461a      	mov	r2, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	60da      	str	r2, [r3, #12]
 8002624:	e004      	b.n	8002630 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	461a      	mov	r2, r3
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	3301      	adds	r3, #1
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2b03      	cmp	r3, #3
 800263a:	d9b5      	bls.n	80025a8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691a      	ldr	r2, [r3, #16]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002666:	60da      	str	r2, [r3, #12]
}
 8002668:	bf00      	nop
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002674:	b480      	push	{r7}
 8002676:	b08d      	sub	sp, #52	@ 0x34
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	3318      	adds	r3, #24
 8002684:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002692:	2300      	movs	r3, #0
 8002694:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800269a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800269e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80026b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80026b6:	d007      	beq.n	80026c8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026bc:	3304      	adds	r3, #4
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80026c8:	2302      	movs	r3, #2
 80026ca:	e0ff      	b.n	80028cc <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 80026cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ce:	3301      	adds	r3, #1
 80026d0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	461a      	mov	r2, r3
 80026d8:	6a3b      	ldr	r3, [r7, #32]
 80026da:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	4b7d      	ldr	r3, [pc, #500]	@ (80028d8 <ETH_Prepare_Tx_Descriptors+0x264>)
 80026e2:	4013      	ands	r3, r2
 80026e4:	69fa      	ldr	r2, [r7, #28]
 80026e6:	6852      	ldr	r2, [r2, #4]
 80026e8:	431a      	orrs	r2, r3
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d008      	beq.n	800270c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80026fa:	6a3b      	ldr	r3, [r7, #32]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	431a      	orrs	r2, r3
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0320 	and.w	r3, r3, #32
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	431a      	orrs	r2, r3
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0304 	and.w	r3, r3, #4
 8002732:	2b00      	cmp	r3, #0
 8002734:	d005      	beq.n	8002742 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002736:	6a3b      	ldr	r3, [r7, #32]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800274e:	f3bf 8f5f 	dmb	sy
}
 8002752:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002754:	6a3b      	ldr	r3, [r7, #32]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002760:	e082      	b.n	8002868 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d006      	beq.n	8002782 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800277c:	6a3b      	ldr	r3, [r7, #32]
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	e005      	b.n	800278e <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800278e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002790:	3301      	adds	r3, #1
 8002792:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002796:	2b03      	cmp	r3, #3
 8002798:	d902      	bls.n	80027a0 <ETH_Prepare_Tx_Descriptors+0x12c>
 800279a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800279c:	3b04      	subs	r3, #4
 800279e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027a8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80027be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80027c2:	d007      	beq.n	80027d4 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027c8:	3304      	adds	r3, #4
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d029      	beq.n	8002828 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027e0:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80027e2:	2300      	movs	r3, #0
 80027e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027e6:	e019      	b.n	800281c <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 80027e8:	f3bf 8f5f 	dmb	sy
}
 80027ec:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80027fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027fc:	3301      	adds	r3, #1
 80027fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002802:	2b03      	cmp	r3, #3
 8002804:	d902      	bls.n	800280c <ETH_Prepare_Tx_Descriptors+0x198>
 8002806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002808:	3b04      	subs	r3, #4
 800280a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002814:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002818:	3301      	adds	r3, #1
 800281a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800281c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800281e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002820:	429a      	cmp	r2, r3
 8002822:	d3e1      	bcc.n	80027e8 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8002824:	2302      	movs	r3, #2
 8002826:	e051      	b.n	80028cc <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8002828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282a:	3301      	adds	r3, #1
 800282c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	461a      	mov	r2, r3
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	4b25      	ldr	r3, [pc, #148]	@ (80028d8 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002844:	4013      	ands	r3, r2
 8002846:	69fa      	ldr	r2, [r7, #28]
 8002848:	6852      	ldr	r2, [r2, #4]
 800284a:	431a      	orrs	r2, r3
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	3301      	adds	r3, #1
 8002854:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002856:	f3bf 8f5f 	dmb	sy
}
 800285a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002864:	6a3b      	ldr	r3, [r7, #32]
 8002866:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	2b00      	cmp	r3, #0
 800286e:	f47f af78 	bne.w	8002762 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d006      	beq.n	8002886 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	e005      	b.n	8002892 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028a2:	6979      	ldr	r1, [r7, #20]
 80028a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028a6:	3304      	adds	r3, #4
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	440b      	add	r3, r1
 80028ac:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028b2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80028b4:	b672      	cpsid	i
}
 80028b6:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	4413      	add	r3, r2
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80028c6:	b662      	cpsie	i
}
 80028c8:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3734      	adds	r7, #52	@ 0x34
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	ffffe000 	.word	0xffffe000

080028dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028dc:	b480      	push	{r7}
 80028de:	b089      	sub	sp, #36	@ 0x24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80028ee:	2300      	movs	r3, #0
 80028f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]
 80028fa:	e175      	b.n	8002be8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80028fc:	2201      	movs	r2, #1
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	4013      	ands	r3, r2
 800290e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	429a      	cmp	r2, r3
 8002916:	f040 8164 	bne.w	8002be2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	2b01      	cmp	r3, #1
 8002924:	d005      	beq.n	8002932 <HAL_GPIO_Init+0x56>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d130      	bne.n	8002994 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	2203      	movs	r2, #3
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43db      	mvns	r3, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4013      	ands	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4313      	orrs	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002968:	2201      	movs	r2, #1
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	091b      	lsrs	r3, r3, #4
 800297e:	f003 0201 	and.w	r2, r3, #1
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4313      	orrs	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	2b03      	cmp	r3, #3
 800299e:	d017      	beq.n	80029d0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	2203      	movs	r2, #3
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 0303 	and.w	r3, r3, #3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d123      	bne.n	8002a24 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	08da      	lsrs	r2, r3, #3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3208      	adds	r2, #8
 80029e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	220f      	movs	r2, #15
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	691a      	ldr	r2, [r3, #16]
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	08da      	lsrs	r2, r3, #3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3208      	adds	r2, #8
 8002a1e:	69b9      	ldr	r1, [r7, #24]
 8002a20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	2203      	movs	r2, #3
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 0203 	and.w	r2, r3, #3
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 80be 	beq.w	8002be2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a66:	4b66      	ldr	r3, [pc, #408]	@ (8002c00 <HAL_GPIO_Init+0x324>)
 8002a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6a:	4a65      	ldr	r2, [pc, #404]	@ (8002c00 <HAL_GPIO_Init+0x324>)
 8002a6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a70:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a72:	4b63      	ldr	r3, [pc, #396]	@ (8002c00 <HAL_GPIO_Init+0x324>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002a7e:	4a61      	ldr	r2, [pc, #388]	@ (8002c04 <HAL_GPIO_Init+0x328>)
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	089b      	lsrs	r3, r3, #2
 8002a84:	3302      	adds	r3, #2
 8002a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	220f      	movs	r2, #15
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a58      	ldr	r2, [pc, #352]	@ (8002c08 <HAL_GPIO_Init+0x32c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d037      	beq.n	8002b1a <HAL_GPIO_Init+0x23e>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a57      	ldr	r2, [pc, #348]	@ (8002c0c <HAL_GPIO_Init+0x330>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d031      	beq.n	8002b16 <HAL_GPIO_Init+0x23a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a56      	ldr	r2, [pc, #344]	@ (8002c10 <HAL_GPIO_Init+0x334>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d02b      	beq.n	8002b12 <HAL_GPIO_Init+0x236>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a55      	ldr	r2, [pc, #340]	@ (8002c14 <HAL_GPIO_Init+0x338>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d025      	beq.n	8002b0e <HAL_GPIO_Init+0x232>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a54      	ldr	r2, [pc, #336]	@ (8002c18 <HAL_GPIO_Init+0x33c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d01f      	beq.n	8002b0a <HAL_GPIO_Init+0x22e>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a53      	ldr	r2, [pc, #332]	@ (8002c1c <HAL_GPIO_Init+0x340>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d019      	beq.n	8002b06 <HAL_GPIO_Init+0x22a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a52      	ldr	r2, [pc, #328]	@ (8002c20 <HAL_GPIO_Init+0x344>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d013      	beq.n	8002b02 <HAL_GPIO_Init+0x226>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a51      	ldr	r2, [pc, #324]	@ (8002c24 <HAL_GPIO_Init+0x348>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00d      	beq.n	8002afe <HAL_GPIO_Init+0x222>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a50      	ldr	r2, [pc, #320]	@ (8002c28 <HAL_GPIO_Init+0x34c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d007      	beq.n	8002afa <HAL_GPIO_Init+0x21e>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a4f      	ldr	r2, [pc, #316]	@ (8002c2c <HAL_GPIO_Init+0x350>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d101      	bne.n	8002af6 <HAL_GPIO_Init+0x21a>
 8002af2:	2309      	movs	r3, #9
 8002af4:	e012      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002af6:	230a      	movs	r3, #10
 8002af8:	e010      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002afa:	2308      	movs	r3, #8
 8002afc:	e00e      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002afe:	2307      	movs	r3, #7
 8002b00:	e00c      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002b02:	2306      	movs	r3, #6
 8002b04:	e00a      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002b06:	2305      	movs	r3, #5
 8002b08:	e008      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002b0a:	2304      	movs	r3, #4
 8002b0c:	e006      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e004      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002b12:	2302      	movs	r3, #2
 8002b14:	e002      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	69fa      	ldr	r2, [r7, #28]
 8002b1e:	f002 0203 	and.w	r2, r2, #3
 8002b22:	0092      	lsls	r2, r2, #2
 8002b24:	4093      	lsls	r3, r2
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b2c:	4935      	ldr	r1, [pc, #212]	@ (8002c04 <HAL_GPIO_Init+0x328>)
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	089b      	lsrs	r3, r3, #2
 8002b32:	3302      	adds	r3, #2
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b3a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c30 <HAL_GPIO_Init+0x354>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	43db      	mvns	r3, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4013      	ands	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b5e:	4a34      	ldr	r2, [pc, #208]	@ (8002c30 <HAL_GPIO_Init+0x354>)
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b64:	4b32      	ldr	r3, [pc, #200]	@ (8002c30 <HAL_GPIO_Init+0x354>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b88:	4a29      	ldr	r2, [pc, #164]	@ (8002c30 <HAL_GPIO_Init+0x354>)
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b8e:	4b28      	ldr	r3, [pc, #160]	@ (8002c30 <HAL_GPIO_Init+0x354>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	43db      	mvns	r3, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bb2:	4a1f      	ldr	r2, [pc, #124]	@ (8002c30 <HAL_GPIO_Init+0x354>)
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8002c30 <HAL_GPIO_Init+0x354>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bdc:	4a14      	ldr	r2, [pc, #80]	@ (8002c30 <HAL_GPIO_Init+0x354>)
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	3301      	adds	r3, #1
 8002be6:	61fb      	str	r3, [r7, #28]
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	2b0f      	cmp	r3, #15
 8002bec:	f67f ae86 	bls.w	80028fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002bf0:	bf00      	nop
 8002bf2:	bf00      	nop
 8002bf4:	3724      	adds	r7, #36	@ 0x24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	40023800 	.word	0x40023800
 8002c04:	40013800 	.word	0x40013800
 8002c08:	40020000 	.word	0x40020000
 8002c0c:	40020400 	.word	0x40020400
 8002c10:	40020800 	.word	0x40020800
 8002c14:	40020c00 	.word	0x40020c00
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	40021400 	.word	0x40021400
 8002c20:	40021800 	.word	0x40021800
 8002c24:	40021c00 	.word	0x40021c00
 8002c28:	40022000 	.word	0x40022000
 8002c2c:	40022400 	.word	0x40022400
 8002c30:	40013c00 	.word	0x40013c00

08002c34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691a      	ldr	r2, [r3, #16]
 8002c44:	887b      	ldrh	r3, [r7, #2]
 8002c46:	4013      	ands	r3, r2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	73fb      	strb	r3, [r7, #15]
 8002c50:	e001      	b.n	8002c56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c52:	2300      	movs	r3, #0
 8002c54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	807b      	strh	r3, [r7, #2]
 8002c70:	4613      	mov	r3, r2
 8002c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c74:	787b      	ldrb	r3, [r7, #1]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c7a:	887a      	ldrh	r2, [r7, #2]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002c80:	e003      	b.n	8002c8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c82:	887b      	ldrh	r3, [r7, #2]
 8002c84:	041a      	lsls	r2, r3, #16
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	619a      	str	r2, [r3, #24]
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c98:	b08f      	sub	sp, #60	@ 0x3c
 8002c9a:	af0a      	add	r7, sp, #40	@ 0x28
 8002c9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e116      	b.n	8002ed6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d106      	bne.n	8002cc8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7fe f892 	bl	8000dec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2203      	movs	r2, #3
 8002ccc:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d102      	bne.n	8002ce2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f001 ff3a 	bl	8004b60 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	603b      	str	r3, [r7, #0]
 8002cf2:	687e      	ldr	r6, [r7, #4]
 8002cf4:	466d      	mov	r5, sp
 8002cf6:	f106 0410 	add.w	r4, r6, #16
 8002cfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d06:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d0a:	1d33      	adds	r3, r6, #4
 8002d0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d0e:	6838      	ldr	r0, [r7, #0]
 8002d10:	f001 fece 	bl	8004ab0 <USB_CoreInit>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d005      	beq.n	8002d26 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e0d7      	b.n	8002ed6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f001 ff28 	bl	8004b82 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d32:	2300      	movs	r3, #0
 8002d34:	73fb      	strb	r3, [r7, #15]
 8002d36:	e04a      	b.n	8002dce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d38:	7bfa      	ldrb	r2, [r7, #15]
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4413      	add	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	333d      	adds	r3, #61	@ 0x3d
 8002d48:	2201      	movs	r2, #1
 8002d4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d4c:	7bfa      	ldrb	r2, [r7, #15]
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	4613      	mov	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	4413      	add	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	333c      	adds	r3, #60	@ 0x3c
 8002d5c:	7bfa      	ldrb	r2, [r7, #15]
 8002d5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d60:	7bfa      	ldrb	r2, [r7, #15]
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	b298      	uxth	r0, r3
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	3344      	adds	r3, #68	@ 0x44
 8002d74:	4602      	mov	r2, r0
 8002d76:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d78:	7bfa      	ldrb	r2, [r7, #15]
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	3340      	adds	r3, #64	@ 0x40
 8002d88:	2200      	movs	r2, #0
 8002d8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d8c:	7bfa      	ldrb	r2, [r7, #15]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	3348      	adds	r3, #72	@ 0x48
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002da0:	7bfa      	ldrb	r2, [r7, #15]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	4413      	add	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	334c      	adds	r3, #76	@ 0x4c
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002db4:	7bfa      	ldrb	r2, [r7, #15]
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	3354      	adds	r3, #84	@ 0x54
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	73fb      	strb	r3, [r7, #15]
 8002dce:	7bfa      	ldrb	r2, [r7, #15]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d3af      	bcc.n	8002d38 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dd8:	2300      	movs	r3, #0
 8002dda:	73fb      	strb	r3, [r7, #15]
 8002ddc:	e044      	b.n	8002e68 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002dde:	7bfa      	ldrb	r2, [r7, #15]
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	4413      	add	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	440b      	add	r3, r1
 8002dec:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8002df0:	2200      	movs	r2, #0
 8002df2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002df4:	7bfa      	ldrb	r2, [r7, #15]
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8002e06:	7bfa      	ldrb	r2, [r7, #15]
 8002e08:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e0a:	7bfa      	ldrb	r2, [r7, #15]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	4413      	add	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e20:	7bfa      	ldrb	r2, [r7, #15]
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	4413      	add	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e36:	7bfa      	ldrb	r2, [r7, #15]
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	4413      	add	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	440b      	add	r3, r1
 8002e44:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e4c:	7bfa      	ldrb	r2, [r7, #15]
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	4413      	add	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
 8002e64:	3301      	adds	r3, #1
 8002e66:	73fb      	strb	r3, [r7, #15]
 8002e68:	7bfa      	ldrb	r2, [r7, #15]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d3b5      	bcc.n	8002dde <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	603b      	str	r3, [r7, #0]
 8002e78:	687e      	ldr	r6, [r7, #4]
 8002e7a:	466d      	mov	r5, sp
 8002e7c:	f106 0410 	add.w	r4, r6, #16
 8002e80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e90:	1d33      	adds	r3, r6, #4
 8002e92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e94:	6838      	ldr	r0, [r7, #0]
 8002e96:	f001 fec1 	bl	8004c1c <USB_DevInit>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d005      	beq.n	8002eac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e014      	b.n	8002ed6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d102      	bne.n	8002eca <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f80b 	bl	8002ee0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f002 f87f 	bl	8004fd2 <USB_DevDisconnect>

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002ee0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f0e:	4b05      	ldr	r3, [pc, #20]	@ (8002f24 <HAL_PCDEx_ActivateLPM+0x44>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	10000003 	.word	0x10000003

08002f28 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f2c:	4b05      	ldr	r3, [pc, #20]	@ (8002f44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a04      	ldr	r2, [pc, #16]	@ (8002f44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f36:	6013      	str	r3, [r2, #0]
}
 8002f38:	bf00      	nop
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	40007000 	.word	0x40007000

08002f48 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f52:	4b23      	ldr	r3, [pc, #140]	@ (8002fe0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f56:	4a22      	ldr	r2, [pc, #136]	@ (8002fe0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f5e:	4b20      	ldr	r3, [pc, #128]	@ (8002fe0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8002fe4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a1d      	ldr	r2, [pc, #116]	@ (8002fe4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f74:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f76:	f7fe faa9 	bl	80014cc <HAL_GetTick>
 8002f7a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f7c:	e009      	b.n	8002f92 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f7e:	f7fe faa5 	bl	80014cc <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f8c:	d901      	bls.n	8002f92 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e022      	b.n	8002fd8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f92:	4b14      	ldr	r3, [pc, #80]	@ (8002fe4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f9e:	d1ee      	bne.n	8002f7e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002fa0:	4b10      	ldr	r3, [pc, #64]	@ (8002fe4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a0f      	ldr	r2, [pc, #60]	@ (8002fe4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002faa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fac:	f7fe fa8e 	bl	80014cc <HAL_GetTick>
 8002fb0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002fb2:	e009      	b.n	8002fc8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002fb4:	f7fe fa8a 	bl	80014cc <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002fc2:	d901      	bls.n	8002fc8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e007      	b.n	8002fd8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002fc8:	4b06      	ldr	r3, [pc, #24]	@ (8002fe4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002fd4:	d1ee      	bne.n	8002fb4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	40007000 	.word	0x40007000

08002fe8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e29b      	b.n	8003536 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 8087 	beq.w	800311a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800300c:	4b96      	ldr	r3, [pc, #600]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 030c 	and.w	r3, r3, #12
 8003014:	2b04      	cmp	r3, #4
 8003016:	d00c      	beq.n	8003032 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003018:	4b93      	ldr	r3, [pc, #588]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 030c 	and.w	r3, r3, #12
 8003020:	2b08      	cmp	r3, #8
 8003022:	d112      	bne.n	800304a <HAL_RCC_OscConfig+0x62>
 8003024:	4b90      	ldr	r3, [pc, #576]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800302c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003030:	d10b      	bne.n	800304a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003032:	4b8d      	ldr	r3, [pc, #564]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d06c      	beq.n	8003118 <HAL_RCC_OscConfig+0x130>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d168      	bne.n	8003118 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e275      	b.n	8003536 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003052:	d106      	bne.n	8003062 <HAL_RCC_OscConfig+0x7a>
 8003054:	4b84      	ldr	r3, [pc, #528]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a83      	ldr	r2, [pc, #524]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 800305a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800305e:	6013      	str	r3, [r2, #0]
 8003060:	e02e      	b.n	80030c0 <HAL_RCC_OscConfig+0xd8>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10c      	bne.n	8003084 <HAL_RCC_OscConfig+0x9c>
 800306a:	4b7f      	ldr	r3, [pc, #508]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a7e      	ldr	r2, [pc, #504]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003070:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	4b7c      	ldr	r3, [pc, #496]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a7b      	ldr	r2, [pc, #492]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 800307c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003080:	6013      	str	r3, [r2, #0]
 8003082:	e01d      	b.n	80030c0 <HAL_RCC_OscConfig+0xd8>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800308c:	d10c      	bne.n	80030a8 <HAL_RCC_OscConfig+0xc0>
 800308e:	4b76      	ldr	r3, [pc, #472]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a75      	ldr	r2, [pc, #468]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003094:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003098:	6013      	str	r3, [r2, #0]
 800309a:	4b73      	ldr	r3, [pc, #460]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a72      	ldr	r2, [pc, #456]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 80030a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	e00b      	b.n	80030c0 <HAL_RCC_OscConfig+0xd8>
 80030a8:	4b6f      	ldr	r3, [pc, #444]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a6e      	ldr	r2, [pc, #440]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 80030ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	4b6c      	ldr	r3, [pc, #432]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a6b      	ldr	r2, [pc, #428]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 80030ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d013      	beq.n	80030f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c8:	f7fe fa00 	bl	80014cc <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d0:	f7fe f9fc 	bl	80014cc <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b64      	cmp	r3, #100	@ 0x64
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e229      	b.n	8003536 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e2:	4b61      	ldr	r3, [pc, #388]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0f0      	beq.n	80030d0 <HAL_RCC_OscConfig+0xe8>
 80030ee:	e014      	b.n	800311a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f0:	f7fe f9ec 	bl	80014cc <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f8:	f7fe f9e8 	bl	80014cc <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b64      	cmp	r3, #100	@ 0x64
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e215      	b.n	8003536 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800310a:	4b57      	ldr	r3, [pc, #348]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x110>
 8003116:	e000      	b.n	800311a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d069      	beq.n	80031fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003126:	4b50      	ldr	r3, [pc, #320]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 030c 	and.w	r3, r3, #12
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00b      	beq.n	800314a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003132:	4b4d      	ldr	r3, [pc, #308]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	2b08      	cmp	r3, #8
 800313c:	d11c      	bne.n	8003178 <HAL_RCC_OscConfig+0x190>
 800313e:	4b4a      	ldr	r3, [pc, #296]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d116      	bne.n	8003178 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800314a:	4b47      	ldr	r3, [pc, #284]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d005      	beq.n	8003162 <HAL_RCC_OscConfig+0x17a>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d001      	beq.n	8003162 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e1e9      	b.n	8003536 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003162:	4b41      	ldr	r3, [pc, #260]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	493d      	ldr	r1, [pc, #244]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003172:	4313      	orrs	r3, r2
 8003174:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003176:	e040      	b.n	80031fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d023      	beq.n	80031c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003180:	4b39      	ldr	r3, [pc, #228]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a38      	ldr	r2, [pc, #224]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003186:	f043 0301 	orr.w	r3, r3, #1
 800318a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318c:	f7fe f99e 	bl	80014cc <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003194:	f7fe f99a 	bl	80014cc <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e1c7      	b.n	8003536 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a6:	4b30      	ldr	r3, [pc, #192]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0f0      	beq.n	8003194 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b2:	4b2d      	ldr	r3, [pc, #180]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	4929      	ldr	r1, [pc, #164]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	600b      	str	r3, [r1, #0]
 80031c6:	e018      	b.n	80031fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031c8:	4b27      	ldr	r3, [pc, #156]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a26      	ldr	r2, [pc, #152]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 80031ce:	f023 0301 	bic.w	r3, r3, #1
 80031d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d4:	f7fe f97a 	bl	80014cc <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031dc:	f7fe f976 	bl	80014cc <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e1a3      	b.n	8003536 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d038      	beq.n	8003278 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d019      	beq.n	8003242 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800320e:	4b16      	ldr	r3, [pc, #88]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003212:	4a15      	ldr	r2, [pc, #84]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003214:	f043 0301 	orr.w	r3, r3, #1
 8003218:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321a:	f7fe f957 	bl	80014cc <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003222:	f7fe f953 	bl	80014cc <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e180      	b.n	8003536 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003234:	4b0c      	ldr	r3, [pc, #48]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003236:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0f0      	beq.n	8003222 <HAL_RCC_OscConfig+0x23a>
 8003240:	e01a      	b.n	8003278 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003242:	4b09      	ldr	r3, [pc, #36]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003246:	4a08      	ldr	r2, [pc, #32]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003248:	f023 0301 	bic.w	r3, r3, #1
 800324c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800324e:	f7fe f93d 	bl	80014cc <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003254:	e00a      	b.n	800326c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003256:	f7fe f939 	bl	80014cc <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d903      	bls.n	800326c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e166      	b.n	8003536 <HAL_RCC_OscConfig+0x54e>
 8003268:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800326c:	4b92      	ldr	r3, [pc, #584]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 800326e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1ee      	bne.n	8003256 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 80a4 	beq.w	80033ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003286:	4b8c      	ldr	r3, [pc, #560]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10d      	bne.n	80032ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003292:	4b89      	ldr	r3, [pc, #548]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003296:	4a88      	ldr	r2, [pc, #544]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 8003298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800329c:	6413      	str	r3, [r2, #64]	@ 0x40
 800329e:	4b86      	ldr	r3, [pc, #536]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032aa:	2301      	movs	r3, #1
 80032ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032ae:	4b83      	ldr	r3, [pc, #524]	@ (80034bc <HAL_RCC_OscConfig+0x4d4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d118      	bne.n	80032ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80032ba:	4b80      	ldr	r3, [pc, #512]	@ (80034bc <HAL_RCC_OscConfig+0x4d4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a7f      	ldr	r2, [pc, #508]	@ (80034bc <HAL_RCC_OscConfig+0x4d4>)
 80032c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032c6:	f7fe f901 	bl	80014cc <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ce:	f7fe f8fd 	bl	80014cc <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b64      	cmp	r3, #100	@ 0x64
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e12a      	b.n	8003536 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032e0:	4b76      	ldr	r3, [pc, #472]	@ (80034bc <HAL_RCC_OscConfig+0x4d4>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0f0      	beq.n	80032ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d106      	bne.n	8003302 <HAL_RCC_OscConfig+0x31a>
 80032f4:	4b70      	ldr	r3, [pc, #448]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 80032f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f8:	4a6f      	ldr	r2, [pc, #444]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 80032fa:	f043 0301 	orr.w	r3, r3, #1
 80032fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003300:	e02d      	b.n	800335e <HAL_RCC_OscConfig+0x376>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10c      	bne.n	8003324 <HAL_RCC_OscConfig+0x33c>
 800330a:	4b6b      	ldr	r3, [pc, #428]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800330e:	4a6a      	ldr	r2, [pc, #424]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 8003310:	f023 0301 	bic.w	r3, r3, #1
 8003314:	6713      	str	r3, [r2, #112]	@ 0x70
 8003316:	4b68      	ldr	r3, [pc, #416]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 8003318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800331a:	4a67      	ldr	r2, [pc, #412]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 800331c:	f023 0304 	bic.w	r3, r3, #4
 8003320:	6713      	str	r3, [r2, #112]	@ 0x70
 8003322:	e01c      	b.n	800335e <HAL_RCC_OscConfig+0x376>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b05      	cmp	r3, #5
 800332a:	d10c      	bne.n	8003346 <HAL_RCC_OscConfig+0x35e>
 800332c:	4b62      	ldr	r3, [pc, #392]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 800332e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003330:	4a61      	ldr	r2, [pc, #388]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 8003332:	f043 0304 	orr.w	r3, r3, #4
 8003336:	6713      	str	r3, [r2, #112]	@ 0x70
 8003338:	4b5f      	ldr	r3, [pc, #380]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 800333a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800333c:	4a5e      	ldr	r2, [pc, #376]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 800333e:	f043 0301 	orr.w	r3, r3, #1
 8003342:	6713      	str	r3, [r2, #112]	@ 0x70
 8003344:	e00b      	b.n	800335e <HAL_RCC_OscConfig+0x376>
 8003346:	4b5c      	ldr	r3, [pc, #368]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 8003348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800334a:	4a5b      	ldr	r2, [pc, #364]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 800334c:	f023 0301 	bic.w	r3, r3, #1
 8003350:	6713      	str	r3, [r2, #112]	@ 0x70
 8003352:	4b59      	ldr	r3, [pc, #356]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 8003354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003356:	4a58      	ldr	r2, [pc, #352]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 8003358:	f023 0304 	bic.w	r3, r3, #4
 800335c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d015      	beq.n	8003392 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003366:	f7fe f8b1 	bl	80014cc <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800336c:	e00a      	b.n	8003384 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336e:	f7fe f8ad 	bl	80014cc <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800337c:	4293      	cmp	r3, r2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e0d8      	b.n	8003536 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003384:	4b4c      	ldr	r3, [pc, #304]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 8003386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0ee      	beq.n	800336e <HAL_RCC_OscConfig+0x386>
 8003390:	e014      	b.n	80033bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003392:	f7fe f89b 	bl	80014cc <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003398:	e00a      	b.n	80033b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800339a:	f7fe f897 	bl	80014cc <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e0c2      	b.n	8003536 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b0:	4b41      	ldr	r3, [pc, #260]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1ee      	bne.n	800339a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033bc:	7dfb      	ldrb	r3, [r7, #23]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d105      	bne.n	80033ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c2:	4b3d      	ldr	r3, [pc, #244]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c6:	4a3c      	ldr	r2, [pc, #240]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 80033c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033cc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 80ae 	beq.w	8003534 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033d8:	4b37      	ldr	r3, [pc, #220]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 030c 	and.w	r3, r3, #12
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d06d      	beq.n	80034c0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d14b      	bne.n	8003484 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ec:	4b32      	ldr	r3, [pc, #200]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a31      	ldr	r2, [pc, #196]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 80033f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f8:	f7fe f868 	bl	80014cc <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003400:	f7fe f864 	bl	80014cc <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e091      	b.n	8003536 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003412:	4b29      	ldr	r3, [pc, #164]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69da      	ldr	r2, [r3, #28]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342c:	019b      	lsls	r3, r3, #6
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003434:	085b      	lsrs	r3, r3, #1
 8003436:	3b01      	subs	r3, #1
 8003438:	041b      	lsls	r3, r3, #16
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003440:	061b      	lsls	r3, r3, #24
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003448:	071b      	lsls	r3, r3, #28
 800344a:	491b      	ldr	r1, [pc, #108]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 800344c:	4313      	orrs	r3, r2
 800344e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003450:	4b19      	ldr	r3, [pc, #100]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a18      	ldr	r2, [pc, #96]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 8003456:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800345a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345c:	f7fe f836 	bl	80014cc <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003464:	f7fe f832 	bl	80014cc <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e05f      	b.n	8003536 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003476:	4b10      	ldr	r3, [pc, #64]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0f0      	beq.n	8003464 <HAL_RCC_OscConfig+0x47c>
 8003482:	e057      	b.n	8003534 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003484:	4b0c      	ldr	r3, [pc, #48]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a0b      	ldr	r2, [pc, #44]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 800348a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800348e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003490:	f7fe f81c 	bl	80014cc <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003498:	f7fe f818 	bl	80014cc <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e045      	b.n	8003536 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034aa:	4b03      	ldr	r3, [pc, #12]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f0      	bne.n	8003498 <HAL_RCC_OscConfig+0x4b0>
 80034b6:	e03d      	b.n	8003534 <HAL_RCC_OscConfig+0x54c>
 80034b8:	40023800 	.word	0x40023800
 80034bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80034c0:	4b1f      	ldr	r3, [pc, #124]	@ (8003540 <HAL_RCC_OscConfig+0x558>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d030      	beq.n	8003530 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034d8:	429a      	cmp	r2, r3
 80034da:	d129      	bne.n	8003530 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d122      	bne.n	8003530 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034f0:	4013      	ands	r3, r2
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034f6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d119      	bne.n	8003530 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003506:	085b      	lsrs	r3, r3, #1
 8003508:	3b01      	subs	r3, #1
 800350a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800350c:	429a      	cmp	r2, r3
 800350e:	d10f      	bne.n	8003530 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800351c:	429a      	cmp	r2, r3
 800351e:	d107      	bne.n	8003530 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800352c:	429a      	cmp	r2, r3
 800352e:	d001      	beq.n	8003534 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e000      	b.n	8003536 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40023800 	.word	0x40023800

08003544 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800354e:	2300      	movs	r3, #0
 8003550:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e0d0      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800355c:	4b6a      	ldr	r3, [pc, #424]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d910      	bls.n	800358c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356a:	4b67      	ldr	r3, [pc, #412]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f023 020f 	bic.w	r2, r3, #15
 8003572:	4965      	ldr	r1, [pc, #404]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	4313      	orrs	r3, r2
 8003578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800357a:	4b63      	ldr	r3, [pc, #396]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	429a      	cmp	r2, r3
 8003586:	d001      	beq.n	800358c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0b8      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d020      	beq.n	80035da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d005      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035a4:	4b59      	ldr	r3, [pc, #356]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	4a58      	ldr	r2, [pc, #352]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80035aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80035ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035bc:	4b53      	ldr	r3, [pc, #332]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	4a52      	ldr	r2, [pc, #328]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80035c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80035c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c8:	4b50      	ldr	r3, [pc, #320]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	494d      	ldr	r1, [pc, #308]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d040      	beq.n	8003668 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d107      	bne.n	80035fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ee:	4b47      	ldr	r3, [pc, #284]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d115      	bne.n	8003626 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e07f      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b02      	cmp	r3, #2
 8003604:	d107      	bne.n	8003616 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003606:	4b41      	ldr	r3, [pc, #260]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d109      	bne.n	8003626 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e073      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003616:	4b3d      	ldr	r3, [pc, #244]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e06b      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003626:	4b39      	ldr	r3, [pc, #228]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f023 0203 	bic.w	r2, r3, #3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	4936      	ldr	r1, [pc, #216]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 8003634:	4313      	orrs	r3, r2
 8003636:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003638:	f7fd ff48 	bl	80014cc <HAL_GetTick>
 800363c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363e:	e00a      	b.n	8003656 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003640:	f7fd ff44 	bl	80014cc <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800364e:	4293      	cmp	r3, r2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e053      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003656:	4b2d      	ldr	r3, [pc, #180]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 020c 	and.w	r2, r3, #12
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	429a      	cmp	r2, r3
 8003666:	d1eb      	bne.n	8003640 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003668:	4b27      	ldr	r3, [pc, #156]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 030f 	and.w	r3, r3, #15
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d210      	bcs.n	8003698 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003676:	4b24      	ldr	r3, [pc, #144]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f023 020f 	bic.w	r2, r3, #15
 800367e:	4922      	ldr	r1, [pc, #136]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	4313      	orrs	r3, r2
 8003684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003686:	4b20      	ldr	r3, [pc, #128]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	429a      	cmp	r2, r3
 8003692:	d001      	beq.n	8003698 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e032      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d008      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036a4:	4b19      	ldr	r3, [pc, #100]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	4916      	ldr	r1, [pc, #88]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d009      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036c2:	4b12      	ldr	r3, [pc, #72]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	490e      	ldr	r1, [pc, #56]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036d6:	f000 f821 	bl	800371c <HAL_RCC_GetSysClockFreq>
 80036da:	4602      	mov	r2, r0
 80036dc:	4b0b      	ldr	r3, [pc, #44]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	091b      	lsrs	r3, r3, #4
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	490a      	ldr	r1, [pc, #40]	@ (8003710 <HAL_RCC_ClockConfig+0x1cc>)
 80036e8:	5ccb      	ldrb	r3, [r1, r3]
 80036ea:	fa22 f303 	lsr.w	r3, r2, r3
 80036ee:	4a09      	ldr	r2, [pc, #36]	@ (8003714 <HAL_RCC_ClockConfig+0x1d0>)
 80036f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036f2:	4b09      	ldr	r3, [pc, #36]	@ (8003718 <HAL_RCC_ClockConfig+0x1d4>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fd fea4 	bl	8001444 <HAL_InitTick>

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40023c00 	.word	0x40023c00
 800370c:	40023800 	.word	0x40023800
 8003710:	08013b78 	.word	0x08013b78
 8003714:	20000000 	.word	0x20000000
 8003718:	20000004 	.word	0x20000004

0800371c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800371c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003720:	b094      	sub	sp, #80	@ 0x50
 8003722:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003724:	2300      	movs	r3, #0
 8003726:	647b      	str	r3, [r7, #68]	@ 0x44
 8003728:	2300      	movs	r3, #0
 800372a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800372c:	2300      	movs	r3, #0
 800372e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003730:	2300      	movs	r3, #0
 8003732:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003734:	4b79      	ldr	r3, [pc, #484]	@ (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 030c 	and.w	r3, r3, #12
 800373c:	2b08      	cmp	r3, #8
 800373e:	d00d      	beq.n	800375c <HAL_RCC_GetSysClockFreq+0x40>
 8003740:	2b08      	cmp	r3, #8
 8003742:	f200 80e1 	bhi.w	8003908 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003746:	2b00      	cmp	r3, #0
 8003748:	d002      	beq.n	8003750 <HAL_RCC_GetSysClockFreq+0x34>
 800374a:	2b04      	cmp	r3, #4
 800374c:	d003      	beq.n	8003756 <HAL_RCC_GetSysClockFreq+0x3a>
 800374e:	e0db      	b.n	8003908 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003750:	4b73      	ldr	r3, [pc, #460]	@ (8003920 <HAL_RCC_GetSysClockFreq+0x204>)
 8003752:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003754:	e0db      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003756:	4b73      	ldr	r3, [pc, #460]	@ (8003924 <HAL_RCC_GetSysClockFreq+0x208>)
 8003758:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800375a:	e0d8      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800375c:	4b6f      	ldr	r3, [pc, #444]	@ (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003764:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003766:	4b6d      	ldr	r3, [pc, #436]	@ (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d063      	beq.n	800383a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003772:	4b6a      	ldr	r3, [pc, #424]	@ (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	099b      	lsrs	r3, r3, #6
 8003778:	2200      	movs	r2, #0
 800377a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800377c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800377e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003784:	633b      	str	r3, [r7, #48]	@ 0x30
 8003786:	2300      	movs	r3, #0
 8003788:	637b      	str	r3, [r7, #52]	@ 0x34
 800378a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800378e:	4622      	mov	r2, r4
 8003790:	462b      	mov	r3, r5
 8003792:	f04f 0000 	mov.w	r0, #0
 8003796:	f04f 0100 	mov.w	r1, #0
 800379a:	0159      	lsls	r1, r3, #5
 800379c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037a0:	0150      	lsls	r0, r2, #5
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4621      	mov	r1, r4
 80037a8:	1a51      	subs	r1, r2, r1
 80037aa:	6139      	str	r1, [r7, #16]
 80037ac:	4629      	mov	r1, r5
 80037ae:	eb63 0301 	sbc.w	r3, r3, r1
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037c0:	4659      	mov	r1, fp
 80037c2:	018b      	lsls	r3, r1, #6
 80037c4:	4651      	mov	r1, sl
 80037c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037ca:	4651      	mov	r1, sl
 80037cc:	018a      	lsls	r2, r1, #6
 80037ce:	4651      	mov	r1, sl
 80037d0:	ebb2 0801 	subs.w	r8, r2, r1
 80037d4:	4659      	mov	r1, fp
 80037d6:	eb63 0901 	sbc.w	r9, r3, r1
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	f04f 0300 	mov.w	r3, #0
 80037e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037ee:	4690      	mov	r8, r2
 80037f0:	4699      	mov	r9, r3
 80037f2:	4623      	mov	r3, r4
 80037f4:	eb18 0303 	adds.w	r3, r8, r3
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	462b      	mov	r3, r5
 80037fc:	eb49 0303 	adc.w	r3, r9, r3
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	f04f 0300 	mov.w	r3, #0
 800380a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800380e:	4629      	mov	r1, r5
 8003810:	024b      	lsls	r3, r1, #9
 8003812:	4621      	mov	r1, r4
 8003814:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003818:	4621      	mov	r1, r4
 800381a:	024a      	lsls	r2, r1, #9
 800381c:	4610      	mov	r0, r2
 800381e:	4619      	mov	r1, r3
 8003820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003822:	2200      	movs	r2, #0
 8003824:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003826:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003828:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800382c:	f7fc fd70 	bl	8000310 <__aeabi_uldivmod>
 8003830:	4602      	mov	r2, r0
 8003832:	460b      	mov	r3, r1
 8003834:	4613      	mov	r3, r2
 8003836:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003838:	e058      	b.n	80038ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800383a:	4b38      	ldr	r3, [pc, #224]	@ (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	099b      	lsrs	r3, r3, #6
 8003840:	2200      	movs	r2, #0
 8003842:	4618      	mov	r0, r3
 8003844:	4611      	mov	r1, r2
 8003846:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800384a:	623b      	str	r3, [r7, #32]
 800384c:	2300      	movs	r3, #0
 800384e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003850:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003854:	4642      	mov	r2, r8
 8003856:	464b      	mov	r3, r9
 8003858:	f04f 0000 	mov.w	r0, #0
 800385c:	f04f 0100 	mov.w	r1, #0
 8003860:	0159      	lsls	r1, r3, #5
 8003862:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003866:	0150      	lsls	r0, r2, #5
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4641      	mov	r1, r8
 800386e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003872:	4649      	mov	r1, r9
 8003874:	eb63 0b01 	sbc.w	fp, r3, r1
 8003878:	f04f 0200 	mov.w	r2, #0
 800387c:	f04f 0300 	mov.w	r3, #0
 8003880:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003884:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003888:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800388c:	ebb2 040a 	subs.w	r4, r2, sl
 8003890:	eb63 050b 	sbc.w	r5, r3, fp
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	f04f 0300 	mov.w	r3, #0
 800389c:	00eb      	lsls	r3, r5, #3
 800389e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038a2:	00e2      	lsls	r2, r4, #3
 80038a4:	4614      	mov	r4, r2
 80038a6:	461d      	mov	r5, r3
 80038a8:	4643      	mov	r3, r8
 80038aa:	18e3      	adds	r3, r4, r3
 80038ac:	603b      	str	r3, [r7, #0]
 80038ae:	464b      	mov	r3, r9
 80038b0:	eb45 0303 	adc.w	r3, r5, r3
 80038b4:	607b      	str	r3, [r7, #4]
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	f04f 0300 	mov.w	r3, #0
 80038be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038c2:	4629      	mov	r1, r5
 80038c4:	028b      	lsls	r3, r1, #10
 80038c6:	4621      	mov	r1, r4
 80038c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038cc:	4621      	mov	r1, r4
 80038ce:	028a      	lsls	r2, r1, #10
 80038d0:	4610      	mov	r0, r2
 80038d2:	4619      	mov	r1, r3
 80038d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038d6:	2200      	movs	r2, #0
 80038d8:	61bb      	str	r3, [r7, #24]
 80038da:	61fa      	str	r2, [r7, #28]
 80038dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038e0:	f7fc fd16 	bl	8000310 <__aeabi_uldivmod>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4613      	mov	r3, r2
 80038ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80038ec:	4b0b      	ldr	r3, [pc, #44]	@ (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	0c1b      	lsrs	r3, r3, #16
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	3301      	adds	r3, #1
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80038fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003900:	fbb2 f3f3 	udiv	r3, r2, r3
 8003904:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003906:	e002      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003908:	4b05      	ldr	r3, [pc, #20]	@ (8003920 <HAL_RCC_GetSysClockFreq+0x204>)
 800390a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800390c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800390e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003910:	4618      	mov	r0, r3
 8003912:	3750      	adds	r7, #80	@ 0x50
 8003914:	46bd      	mov	sp, r7
 8003916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800391a:	bf00      	nop
 800391c:	40023800 	.word	0x40023800
 8003920:	00f42400 	.word	0x00f42400
 8003924:	007a1200 	.word	0x007a1200

08003928 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800392c:	4b03      	ldr	r3, [pc, #12]	@ (800393c <HAL_RCC_GetHCLKFreq+0x14>)
 800392e:	681b      	ldr	r3, [r3, #0]
}
 8003930:	4618      	mov	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	20000000 	.word	0x20000000

08003940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003944:	f7ff fff0 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 8003948:	4602      	mov	r2, r0
 800394a:	4b05      	ldr	r3, [pc, #20]	@ (8003960 <HAL_RCC_GetPCLK1Freq+0x20>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	0a9b      	lsrs	r3, r3, #10
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	4903      	ldr	r1, [pc, #12]	@ (8003964 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003956:	5ccb      	ldrb	r3, [r1, r3]
 8003958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800395c:	4618      	mov	r0, r3
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40023800 	.word	0x40023800
 8003964:	08013b88 	.word	0x08013b88

08003968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800396c:	f7ff ffdc 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 8003970:	4602      	mov	r2, r0
 8003972:	4b05      	ldr	r3, [pc, #20]	@ (8003988 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	0b5b      	lsrs	r3, r3, #13
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	4903      	ldr	r1, [pc, #12]	@ (800398c <HAL_RCC_GetPCLK2Freq+0x24>)
 800397e:	5ccb      	ldrb	r3, [r1, r3]
 8003980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003984:	4618      	mov	r0, r3
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40023800 	.word	0x40023800
 800398c:	08013b88 	.word	0x08013b88

08003990 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b088      	sub	sp, #32
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003998:	2300      	movs	r3, #0
 800399a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800399c:	2300      	movs	r3, #0
 800399e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80039a0:	2300      	movs	r3, #0
 80039a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80039a4:	2300      	movs	r3, #0
 80039a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80039a8:	2300      	movs	r3, #0
 80039aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d012      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80039b8:	4b69      	ldr	r3, [pc, #420]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	4a68      	ldr	r2, [pc, #416]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039be:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80039c2:	6093      	str	r3, [r2, #8]
 80039c4:	4b66      	ldr	r3, [pc, #408]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039cc:	4964      	ldr	r1, [pc, #400]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80039da:	2301      	movs	r3, #1
 80039dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d017      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039ea:	4b5d      	ldr	r3, [pc, #372]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039f0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039f8:	4959      	ldr	r1, [pc, #356]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a08:	d101      	bne.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a16:	2301      	movs	r3, #1
 8003a18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d017      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a26:	4b4e      	ldr	r3, [pc, #312]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a2c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a34:	494a      	ldr	r1, [pc, #296]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a44:	d101      	bne.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003a46:	2301      	movs	r3, #1
 8003a48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003a52:	2301      	movs	r3, #1
 8003a54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003a62:	2301      	movs	r3, #1
 8003a64:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 808b 	beq.w	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a74:	4b3a      	ldr	r3, [pc, #232]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a78:	4a39      	ldr	r2, [pc, #228]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a80:	4b37      	ldr	r3, [pc, #220]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a88:	60bb      	str	r3, [r7, #8]
 8003a8a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a8c:	4b35      	ldr	r3, [pc, #212]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a34      	ldr	r2, [pc, #208]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a98:	f7fd fd18 	bl	80014cc <HAL_GetTick>
 8003a9c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa0:	f7fd fd14 	bl	80014cc <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b64      	cmp	r3, #100	@ 0x64
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e38f      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ab2:	4b2c      	ldr	r3, [pc, #176]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0f0      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003abe:	4b28      	ldr	r3, [pc, #160]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ac6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d035      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d02e      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003adc:	4b20      	ldr	r3, [pc, #128]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ae4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aea:	4a1d      	ldr	r2, [pc, #116]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003af0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003af2:	4b1b      	ldr	r3, [pc, #108]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af6:	4a1a      	ldr	r2, [pc, #104]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003afc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003afe:	4a18      	ldr	r2, [pc, #96]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b04:	4b16      	ldr	r3, [pc, #88]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d114      	bne.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b10:	f7fd fcdc 	bl	80014cc <HAL_GetTick>
 8003b14:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b16:	e00a      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b18:	f7fd fcd8 	bl	80014cc <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e351      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d0ee      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b46:	d111      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003b48:	4b05      	ldr	r3, [pc, #20]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003b54:	4b04      	ldr	r3, [pc, #16]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b56:	400b      	ands	r3, r1
 8003b58:	4901      	ldr	r1, [pc, #4]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	608b      	str	r3, [r1, #8]
 8003b5e:	e00b      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003b60:	40023800 	.word	0x40023800
 8003b64:	40007000 	.word	0x40007000
 8003b68:	0ffffcff 	.word	0x0ffffcff
 8003b6c:	4bac      	ldr	r3, [pc, #688]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	4aab      	ldr	r2, [pc, #684]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b72:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003b76:	6093      	str	r3, [r2, #8]
 8003b78:	4ba9      	ldr	r3, [pc, #676]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b7a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b84:	49a6      	ldr	r1, [pc, #664]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0310 	and.w	r3, r3, #16
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d010      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b96:	4ba2      	ldr	r3, [pc, #648]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b9c:	4aa0      	ldr	r2, [pc, #640]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ba2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003ba6:	4b9e      	ldr	r3, [pc, #632]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ba8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb0:	499b      	ldr	r1, [pc, #620]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00a      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bc4:	4b96      	ldr	r3, [pc, #600]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bd2:	4993      	ldr	r1, [pc, #588]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00a      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003be6:	4b8e      	ldr	r3, [pc, #568]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bf4:	498a      	ldr	r1, [pc, #552]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00a      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c08:	4b85      	ldr	r3, [pc, #532]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c16:	4982      	ldr	r1, [pc, #520]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00a      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c2a:	4b7d      	ldr	r3, [pc, #500]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c30:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c38:	4979      	ldr	r1, [pc, #484]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00a      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c4c:	4b74      	ldr	r3, [pc, #464]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c52:	f023 0203 	bic.w	r2, r3, #3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c5a:	4971      	ldr	r1, [pc, #452]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c6e:	4b6c      	ldr	r3, [pc, #432]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c74:	f023 020c 	bic.w	r2, r3, #12
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c7c:	4968      	ldr	r1, [pc, #416]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00a      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c90:	4b63      	ldr	r3, [pc, #396]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c96:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c9e:	4960      	ldr	r1, [pc, #384]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cb2:	4b5b      	ldr	r3, [pc, #364]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cc0:	4957      	ldr	r1, [pc, #348]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00a      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cd4:	4b52      	ldr	r3, [pc, #328]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cda:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce2:	494f      	ldr	r1, [pc, #316]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003cf6:	4b4a      	ldr	r3, [pc, #296]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cfc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d04:	4946      	ldr	r1, [pc, #280]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d18:	4b41      	ldr	r3, [pc, #260]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d1e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d26:	493e      	ldr	r1, [pc, #248]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003d3a:	4b39      	ldr	r3, [pc, #228]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d40:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d48:	4935      	ldr	r1, [pc, #212]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00a      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d5c:	4b30      	ldr	r3, [pc, #192]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d62:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d6a:	492d      	ldr	r1, [pc, #180]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d011      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d7e:	4b28      	ldr	r3, [pc, #160]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d84:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d8c:	4924      	ldr	r1, [pc, #144]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d9c:	d101      	bne.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003dae:	2301      	movs	r3, #1
 8003db0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00a      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dbe:	4b18      	ldr	r3, [pc, #96]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dcc:	4914      	ldr	r1, [pc, #80]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00b      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003de0:	4b0f      	ldr	r3, [pc, #60]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003df0:	490b      	ldr	r1, [pc, #44]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00f      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003e04:	4b06      	ldr	r3, [pc, #24]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e0a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e14:	4902      	ldr	r1, [pc, #8]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003e1c:	e002      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003e1e:	bf00      	nop
 8003e20:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00b      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e30:	4b8a      	ldr	r3, [pc, #552]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e36:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e40:	4986      	ldr	r1, [pc, #536]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00b      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003e54:	4b81      	ldr	r3, [pc, #516]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e5a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e64:	497d      	ldr	r1, [pc, #500]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d006      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f000 80d6 	beq.w	800402c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e80:	4b76      	ldr	r3, [pc, #472]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a75      	ldr	r2, [pc, #468]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003e8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e8c:	f7fd fb1e 	bl	80014cc <HAL_GetTick>
 8003e90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e94:	f7fd fb1a 	bl	80014cc <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b64      	cmp	r3, #100	@ 0x64
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e195      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ea6:	4b6d      	ldr	r3, [pc, #436]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1f0      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d021      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d11d      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ec6:	4b65      	ldr	r3, [pc, #404]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ecc:	0c1b      	lsrs	r3, r3, #16
 8003ece:	f003 0303 	and.w	r3, r3, #3
 8003ed2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ed4:	4b61      	ldr	r3, [pc, #388]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003eda:	0e1b      	lsrs	r3, r3, #24
 8003edc:	f003 030f 	and.w	r3, r3, #15
 8003ee0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	019a      	lsls	r2, r3, #6
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	041b      	lsls	r3, r3, #16
 8003eec:	431a      	orrs	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	061b      	lsls	r3, r3, #24
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	071b      	lsls	r3, r3, #28
 8003efa:	4958      	ldr	r1, [pc, #352]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d004      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f16:	d00a      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d02e      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f2c:	d129      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f2e:	4b4b      	ldr	r3, [pc, #300]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f34:	0c1b      	lsrs	r3, r3, #16
 8003f36:	f003 0303 	and.w	r3, r3, #3
 8003f3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f3c:	4b47      	ldr	r3, [pc, #284]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f42:	0f1b      	lsrs	r3, r3, #28
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	019a      	lsls	r2, r3, #6
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	041b      	lsls	r3, r3, #16
 8003f54:	431a      	orrs	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	061b      	lsls	r3, r3, #24
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	071b      	lsls	r3, r3, #28
 8003f62:	493e      	ldr	r1, [pc, #248]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f6a:	4b3c      	ldr	r3, [pc, #240]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f70:	f023 021f 	bic.w	r2, r3, #31
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	4938      	ldr	r1, [pc, #224]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d01d      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f8e:	4b33      	ldr	r3, [pc, #204]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f94:	0e1b      	lsrs	r3, r3, #24
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f9c:	4b2f      	ldr	r3, [pc, #188]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fa2:	0f1b      	lsrs	r3, r3, #28
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	019a      	lsls	r2, r3, #6
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	041b      	lsls	r3, r3, #16
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	061b      	lsls	r3, r3, #24
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	071b      	lsls	r3, r3, #28
 8003fc2:	4926      	ldr	r1, [pc, #152]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d011      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	019a      	lsls	r2, r3, #6
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	041b      	lsls	r3, r3, #16
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	061b      	lsls	r3, r3, #24
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	071b      	lsls	r3, r3, #28
 8003ff2:	491a      	ldr	r1, [pc, #104]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ffa:	4b18      	ldr	r3, [pc, #96]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a17      	ldr	r2, [pc, #92]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004000:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004004:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004006:	f7fd fa61 	bl	80014cc <HAL_GetTick>
 800400a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800400c:	e008      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800400e:	f7fd fa5d 	bl	80014cc <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b64      	cmp	r3, #100	@ 0x64
 800401a:	d901      	bls.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e0d8      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004020:	4b0e      	ldr	r3, [pc, #56]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0f0      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	2b01      	cmp	r3, #1
 8004030:	f040 80ce 	bne.w	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004034:	4b09      	ldr	r3, [pc, #36]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a08      	ldr	r2, [pc, #32]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800403a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800403e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004040:	f7fd fa44 	bl	80014cc <HAL_GetTick>
 8004044:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004046:	e00b      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004048:	f7fd fa40 	bl	80014cc <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b64      	cmp	r3, #100	@ 0x64
 8004054:	d904      	bls.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e0bb      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800405a:	bf00      	nop
 800405c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004060:	4b5e      	ldr	r3, [pc, #376]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004068:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800406c:	d0ec      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800407e:	2b00      	cmp	r3, #0
 8004080:	d009      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800408a:	2b00      	cmp	r3, #0
 800408c:	d02e      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004092:	2b00      	cmp	r3, #0
 8004094:	d12a      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004096:	4b51      	ldr	r3, [pc, #324]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800409c:	0c1b      	lsrs	r3, r3, #16
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80040a4:	4b4d      	ldr	r3, [pc, #308]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040aa:	0f1b      	lsrs	r3, r3, #28
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	019a      	lsls	r2, r3, #6
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	041b      	lsls	r3, r3, #16
 80040bc:	431a      	orrs	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	061b      	lsls	r3, r3, #24
 80040c4:	431a      	orrs	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	071b      	lsls	r3, r3, #28
 80040ca:	4944      	ldr	r1, [pc, #272]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80040d2:	4b42      	ldr	r3, [pc, #264]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040d8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e0:	3b01      	subs	r3, #1
 80040e2:	021b      	lsls	r3, r3, #8
 80040e4:	493d      	ldr	r1, [pc, #244]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d022      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004100:	d11d      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004102:	4b36      	ldr	r3, [pc, #216]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004108:	0e1b      	lsrs	r3, r3, #24
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004110:	4b32      	ldr	r3, [pc, #200]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004116:	0f1b      	lsrs	r3, r3, #28
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	019a      	lsls	r2, r3, #6
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	041b      	lsls	r3, r3, #16
 800412a:	431a      	orrs	r2, r3
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	061b      	lsls	r3, r3, #24
 8004130:	431a      	orrs	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	071b      	lsls	r3, r3, #28
 8004136:	4929      	ldr	r1, [pc, #164]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0308 	and.w	r3, r3, #8
 8004146:	2b00      	cmp	r3, #0
 8004148:	d028      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800414a:	4b24      	ldr	r3, [pc, #144]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800414c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004150:	0e1b      	lsrs	r3, r3, #24
 8004152:	f003 030f 	and.w	r3, r3, #15
 8004156:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004158:	4b20      	ldr	r3, [pc, #128]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800415a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800415e:	0c1b      	lsrs	r3, r3, #16
 8004160:	f003 0303 	and.w	r3, r3, #3
 8004164:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	019a      	lsls	r2, r3, #6
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	041b      	lsls	r3, r3, #16
 8004170:	431a      	orrs	r2, r3
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	061b      	lsls	r3, r3, #24
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	071b      	lsls	r3, r3, #28
 800417e:	4917      	ldr	r1, [pc, #92]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004186:	4b15      	ldr	r3, [pc, #84]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004188:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800418c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004194:	4911      	ldr	r1, [pc, #68]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004196:	4313      	orrs	r3, r2
 8004198:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800419c:	4b0f      	ldr	r3, [pc, #60]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a0e      	ldr	r2, [pc, #56]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a8:	f7fd f990 	bl	80014cc <HAL_GetTick>
 80041ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041b0:	f7fd f98c 	bl	80014cc <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b64      	cmp	r3, #100	@ 0x64
 80041bc:	d901      	bls.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e007      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041c2:	4b06      	ldr	r3, [pc, #24]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041ce:	d1ef      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3720      	adds	r7, #32
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	40023800 	.word	0x40023800

080041e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e040      	b.n	8004274 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d106      	bne.n	8004208 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7fc fd92 	bl	8000d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2224      	movs	r2, #36	@ 0x24
 800420c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0201 	bic.w	r2, r2, #1
 800421c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f82c 	bl	800427c <UART_SetConfig>
 8004224:	4603      	mov	r3, r0
 8004226:	2b01      	cmp	r3, #1
 8004228:	d101      	bne.n	800422e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e022      	b.n	8004274 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004232:	2b00      	cmp	r3, #0
 8004234:	d002      	beq.n	800423c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 fa84 	bl	8004744 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800424a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800425a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0201 	orr.w	r2, r2, #1
 800426a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 fb0b 	bl	8004888 <UART_CheckIdleState>
 8004272:	4603      	mov	r3, r0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004284:	2300      	movs	r3, #0
 8004286:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	431a      	orrs	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	431a      	orrs	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	4313      	orrs	r3, r2
 800429e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	4ba6      	ldr	r3, [pc, #664]	@ (8004540 <UART_SetConfig+0x2c4>)
 80042a8:	4013      	ands	r3, r2
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6812      	ldr	r2, [r2, #0]
 80042ae:	6979      	ldr	r1, [r7, #20]
 80042b0:	430b      	orrs	r3, r1
 80042b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a94      	ldr	r2, [pc, #592]	@ (8004544 <UART_SetConfig+0x2c8>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d120      	bne.n	800433a <UART_SetConfig+0xbe>
 80042f8:	4b93      	ldr	r3, [pc, #588]	@ (8004548 <UART_SetConfig+0x2cc>)
 80042fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	2b03      	cmp	r3, #3
 8004304:	d816      	bhi.n	8004334 <UART_SetConfig+0xb8>
 8004306:	a201      	add	r2, pc, #4	@ (adr r2, 800430c <UART_SetConfig+0x90>)
 8004308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430c:	0800431d 	.word	0x0800431d
 8004310:	08004329 	.word	0x08004329
 8004314:	08004323 	.word	0x08004323
 8004318:	0800432f 	.word	0x0800432f
 800431c:	2301      	movs	r3, #1
 800431e:	77fb      	strb	r3, [r7, #31]
 8004320:	e150      	b.n	80045c4 <UART_SetConfig+0x348>
 8004322:	2302      	movs	r3, #2
 8004324:	77fb      	strb	r3, [r7, #31]
 8004326:	e14d      	b.n	80045c4 <UART_SetConfig+0x348>
 8004328:	2304      	movs	r3, #4
 800432a:	77fb      	strb	r3, [r7, #31]
 800432c:	e14a      	b.n	80045c4 <UART_SetConfig+0x348>
 800432e:	2308      	movs	r3, #8
 8004330:	77fb      	strb	r3, [r7, #31]
 8004332:	e147      	b.n	80045c4 <UART_SetConfig+0x348>
 8004334:	2310      	movs	r3, #16
 8004336:	77fb      	strb	r3, [r7, #31]
 8004338:	e144      	b.n	80045c4 <UART_SetConfig+0x348>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a83      	ldr	r2, [pc, #524]	@ (800454c <UART_SetConfig+0x2d0>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d132      	bne.n	80043aa <UART_SetConfig+0x12e>
 8004344:	4b80      	ldr	r3, [pc, #512]	@ (8004548 <UART_SetConfig+0x2cc>)
 8004346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800434a:	f003 030c 	and.w	r3, r3, #12
 800434e:	2b0c      	cmp	r3, #12
 8004350:	d828      	bhi.n	80043a4 <UART_SetConfig+0x128>
 8004352:	a201      	add	r2, pc, #4	@ (adr r2, 8004358 <UART_SetConfig+0xdc>)
 8004354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004358:	0800438d 	.word	0x0800438d
 800435c:	080043a5 	.word	0x080043a5
 8004360:	080043a5 	.word	0x080043a5
 8004364:	080043a5 	.word	0x080043a5
 8004368:	08004399 	.word	0x08004399
 800436c:	080043a5 	.word	0x080043a5
 8004370:	080043a5 	.word	0x080043a5
 8004374:	080043a5 	.word	0x080043a5
 8004378:	08004393 	.word	0x08004393
 800437c:	080043a5 	.word	0x080043a5
 8004380:	080043a5 	.word	0x080043a5
 8004384:	080043a5 	.word	0x080043a5
 8004388:	0800439f 	.word	0x0800439f
 800438c:	2300      	movs	r3, #0
 800438e:	77fb      	strb	r3, [r7, #31]
 8004390:	e118      	b.n	80045c4 <UART_SetConfig+0x348>
 8004392:	2302      	movs	r3, #2
 8004394:	77fb      	strb	r3, [r7, #31]
 8004396:	e115      	b.n	80045c4 <UART_SetConfig+0x348>
 8004398:	2304      	movs	r3, #4
 800439a:	77fb      	strb	r3, [r7, #31]
 800439c:	e112      	b.n	80045c4 <UART_SetConfig+0x348>
 800439e:	2308      	movs	r3, #8
 80043a0:	77fb      	strb	r3, [r7, #31]
 80043a2:	e10f      	b.n	80045c4 <UART_SetConfig+0x348>
 80043a4:	2310      	movs	r3, #16
 80043a6:	77fb      	strb	r3, [r7, #31]
 80043a8:	e10c      	b.n	80045c4 <UART_SetConfig+0x348>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a68      	ldr	r2, [pc, #416]	@ (8004550 <UART_SetConfig+0x2d4>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d120      	bne.n	80043f6 <UART_SetConfig+0x17a>
 80043b4:	4b64      	ldr	r3, [pc, #400]	@ (8004548 <UART_SetConfig+0x2cc>)
 80043b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ba:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80043be:	2b30      	cmp	r3, #48	@ 0x30
 80043c0:	d013      	beq.n	80043ea <UART_SetConfig+0x16e>
 80043c2:	2b30      	cmp	r3, #48	@ 0x30
 80043c4:	d814      	bhi.n	80043f0 <UART_SetConfig+0x174>
 80043c6:	2b20      	cmp	r3, #32
 80043c8:	d009      	beq.n	80043de <UART_SetConfig+0x162>
 80043ca:	2b20      	cmp	r3, #32
 80043cc:	d810      	bhi.n	80043f0 <UART_SetConfig+0x174>
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <UART_SetConfig+0x15c>
 80043d2:	2b10      	cmp	r3, #16
 80043d4:	d006      	beq.n	80043e4 <UART_SetConfig+0x168>
 80043d6:	e00b      	b.n	80043f0 <UART_SetConfig+0x174>
 80043d8:	2300      	movs	r3, #0
 80043da:	77fb      	strb	r3, [r7, #31]
 80043dc:	e0f2      	b.n	80045c4 <UART_SetConfig+0x348>
 80043de:	2302      	movs	r3, #2
 80043e0:	77fb      	strb	r3, [r7, #31]
 80043e2:	e0ef      	b.n	80045c4 <UART_SetConfig+0x348>
 80043e4:	2304      	movs	r3, #4
 80043e6:	77fb      	strb	r3, [r7, #31]
 80043e8:	e0ec      	b.n	80045c4 <UART_SetConfig+0x348>
 80043ea:	2308      	movs	r3, #8
 80043ec:	77fb      	strb	r3, [r7, #31]
 80043ee:	e0e9      	b.n	80045c4 <UART_SetConfig+0x348>
 80043f0:	2310      	movs	r3, #16
 80043f2:	77fb      	strb	r3, [r7, #31]
 80043f4:	e0e6      	b.n	80045c4 <UART_SetConfig+0x348>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a56      	ldr	r2, [pc, #344]	@ (8004554 <UART_SetConfig+0x2d8>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d120      	bne.n	8004442 <UART_SetConfig+0x1c6>
 8004400:	4b51      	ldr	r3, [pc, #324]	@ (8004548 <UART_SetConfig+0x2cc>)
 8004402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004406:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800440a:	2bc0      	cmp	r3, #192	@ 0xc0
 800440c:	d013      	beq.n	8004436 <UART_SetConfig+0x1ba>
 800440e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004410:	d814      	bhi.n	800443c <UART_SetConfig+0x1c0>
 8004412:	2b80      	cmp	r3, #128	@ 0x80
 8004414:	d009      	beq.n	800442a <UART_SetConfig+0x1ae>
 8004416:	2b80      	cmp	r3, #128	@ 0x80
 8004418:	d810      	bhi.n	800443c <UART_SetConfig+0x1c0>
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <UART_SetConfig+0x1a8>
 800441e:	2b40      	cmp	r3, #64	@ 0x40
 8004420:	d006      	beq.n	8004430 <UART_SetConfig+0x1b4>
 8004422:	e00b      	b.n	800443c <UART_SetConfig+0x1c0>
 8004424:	2300      	movs	r3, #0
 8004426:	77fb      	strb	r3, [r7, #31]
 8004428:	e0cc      	b.n	80045c4 <UART_SetConfig+0x348>
 800442a:	2302      	movs	r3, #2
 800442c:	77fb      	strb	r3, [r7, #31]
 800442e:	e0c9      	b.n	80045c4 <UART_SetConfig+0x348>
 8004430:	2304      	movs	r3, #4
 8004432:	77fb      	strb	r3, [r7, #31]
 8004434:	e0c6      	b.n	80045c4 <UART_SetConfig+0x348>
 8004436:	2308      	movs	r3, #8
 8004438:	77fb      	strb	r3, [r7, #31]
 800443a:	e0c3      	b.n	80045c4 <UART_SetConfig+0x348>
 800443c:	2310      	movs	r3, #16
 800443e:	77fb      	strb	r3, [r7, #31]
 8004440:	e0c0      	b.n	80045c4 <UART_SetConfig+0x348>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a44      	ldr	r2, [pc, #272]	@ (8004558 <UART_SetConfig+0x2dc>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d125      	bne.n	8004498 <UART_SetConfig+0x21c>
 800444c:	4b3e      	ldr	r3, [pc, #248]	@ (8004548 <UART_SetConfig+0x2cc>)
 800444e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004452:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004456:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800445a:	d017      	beq.n	800448c <UART_SetConfig+0x210>
 800445c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004460:	d817      	bhi.n	8004492 <UART_SetConfig+0x216>
 8004462:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004466:	d00b      	beq.n	8004480 <UART_SetConfig+0x204>
 8004468:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800446c:	d811      	bhi.n	8004492 <UART_SetConfig+0x216>
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <UART_SetConfig+0x1fe>
 8004472:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004476:	d006      	beq.n	8004486 <UART_SetConfig+0x20a>
 8004478:	e00b      	b.n	8004492 <UART_SetConfig+0x216>
 800447a:	2300      	movs	r3, #0
 800447c:	77fb      	strb	r3, [r7, #31]
 800447e:	e0a1      	b.n	80045c4 <UART_SetConfig+0x348>
 8004480:	2302      	movs	r3, #2
 8004482:	77fb      	strb	r3, [r7, #31]
 8004484:	e09e      	b.n	80045c4 <UART_SetConfig+0x348>
 8004486:	2304      	movs	r3, #4
 8004488:	77fb      	strb	r3, [r7, #31]
 800448a:	e09b      	b.n	80045c4 <UART_SetConfig+0x348>
 800448c:	2308      	movs	r3, #8
 800448e:	77fb      	strb	r3, [r7, #31]
 8004490:	e098      	b.n	80045c4 <UART_SetConfig+0x348>
 8004492:	2310      	movs	r3, #16
 8004494:	77fb      	strb	r3, [r7, #31]
 8004496:	e095      	b.n	80045c4 <UART_SetConfig+0x348>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a2f      	ldr	r2, [pc, #188]	@ (800455c <UART_SetConfig+0x2e0>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d125      	bne.n	80044ee <UART_SetConfig+0x272>
 80044a2:	4b29      	ldr	r3, [pc, #164]	@ (8004548 <UART_SetConfig+0x2cc>)
 80044a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80044ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80044b0:	d017      	beq.n	80044e2 <UART_SetConfig+0x266>
 80044b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80044b6:	d817      	bhi.n	80044e8 <UART_SetConfig+0x26c>
 80044b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044bc:	d00b      	beq.n	80044d6 <UART_SetConfig+0x25a>
 80044be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044c2:	d811      	bhi.n	80044e8 <UART_SetConfig+0x26c>
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <UART_SetConfig+0x254>
 80044c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044cc:	d006      	beq.n	80044dc <UART_SetConfig+0x260>
 80044ce:	e00b      	b.n	80044e8 <UART_SetConfig+0x26c>
 80044d0:	2301      	movs	r3, #1
 80044d2:	77fb      	strb	r3, [r7, #31]
 80044d4:	e076      	b.n	80045c4 <UART_SetConfig+0x348>
 80044d6:	2302      	movs	r3, #2
 80044d8:	77fb      	strb	r3, [r7, #31]
 80044da:	e073      	b.n	80045c4 <UART_SetConfig+0x348>
 80044dc:	2304      	movs	r3, #4
 80044de:	77fb      	strb	r3, [r7, #31]
 80044e0:	e070      	b.n	80045c4 <UART_SetConfig+0x348>
 80044e2:	2308      	movs	r3, #8
 80044e4:	77fb      	strb	r3, [r7, #31]
 80044e6:	e06d      	b.n	80045c4 <UART_SetConfig+0x348>
 80044e8:	2310      	movs	r3, #16
 80044ea:	77fb      	strb	r3, [r7, #31]
 80044ec:	e06a      	b.n	80045c4 <UART_SetConfig+0x348>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a1b      	ldr	r2, [pc, #108]	@ (8004560 <UART_SetConfig+0x2e4>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d138      	bne.n	800456a <UART_SetConfig+0x2ee>
 80044f8:	4b13      	ldr	r3, [pc, #76]	@ (8004548 <UART_SetConfig+0x2cc>)
 80044fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044fe:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004502:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004506:	d017      	beq.n	8004538 <UART_SetConfig+0x2bc>
 8004508:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800450c:	d82a      	bhi.n	8004564 <UART_SetConfig+0x2e8>
 800450e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004512:	d00b      	beq.n	800452c <UART_SetConfig+0x2b0>
 8004514:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004518:	d824      	bhi.n	8004564 <UART_SetConfig+0x2e8>
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <UART_SetConfig+0x2aa>
 800451e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004522:	d006      	beq.n	8004532 <UART_SetConfig+0x2b6>
 8004524:	e01e      	b.n	8004564 <UART_SetConfig+0x2e8>
 8004526:	2300      	movs	r3, #0
 8004528:	77fb      	strb	r3, [r7, #31]
 800452a:	e04b      	b.n	80045c4 <UART_SetConfig+0x348>
 800452c:	2302      	movs	r3, #2
 800452e:	77fb      	strb	r3, [r7, #31]
 8004530:	e048      	b.n	80045c4 <UART_SetConfig+0x348>
 8004532:	2304      	movs	r3, #4
 8004534:	77fb      	strb	r3, [r7, #31]
 8004536:	e045      	b.n	80045c4 <UART_SetConfig+0x348>
 8004538:	2308      	movs	r3, #8
 800453a:	77fb      	strb	r3, [r7, #31]
 800453c:	e042      	b.n	80045c4 <UART_SetConfig+0x348>
 800453e:	bf00      	nop
 8004540:	efff69f3 	.word	0xefff69f3
 8004544:	40011000 	.word	0x40011000
 8004548:	40023800 	.word	0x40023800
 800454c:	40004400 	.word	0x40004400
 8004550:	40004800 	.word	0x40004800
 8004554:	40004c00 	.word	0x40004c00
 8004558:	40005000 	.word	0x40005000
 800455c:	40011400 	.word	0x40011400
 8004560:	40007800 	.word	0x40007800
 8004564:	2310      	movs	r3, #16
 8004566:	77fb      	strb	r3, [r7, #31]
 8004568:	e02c      	b.n	80045c4 <UART_SetConfig+0x348>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a72      	ldr	r2, [pc, #456]	@ (8004738 <UART_SetConfig+0x4bc>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d125      	bne.n	80045c0 <UART_SetConfig+0x344>
 8004574:	4b71      	ldr	r3, [pc, #452]	@ (800473c <UART_SetConfig+0x4c0>)
 8004576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800457a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800457e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004582:	d017      	beq.n	80045b4 <UART_SetConfig+0x338>
 8004584:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004588:	d817      	bhi.n	80045ba <UART_SetConfig+0x33e>
 800458a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800458e:	d00b      	beq.n	80045a8 <UART_SetConfig+0x32c>
 8004590:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004594:	d811      	bhi.n	80045ba <UART_SetConfig+0x33e>
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <UART_SetConfig+0x326>
 800459a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800459e:	d006      	beq.n	80045ae <UART_SetConfig+0x332>
 80045a0:	e00b      	b.n	80045ba <UART_SetConfig+0x33e>
 80045a2:	2300      	movs	r3, #0
 80045a4:	77fb      	strb	r3, [r7, #31]
 80045a6:	e00d      	b.n	80045c4 <UART_SetConfig+0x348>
 80045a8:	2302      	movs	r3, #2
 80045aa:	77fb      	strb	r3, [r7, #31]
 80045ac:	e00a      	b.n	80045c4 <UART_SetConfig+0x348>
 80045ae:	2304      	movs	r3, #4
 80045b0:	77fb      	strb	r3, [r7, #31]
 80045b2:	e007      	b.n	80045c4 <UART_SetConfig+0x348>
 80045b4:	2308      	movs	r3, #8
 80045b6:	77fb      	strb	r3, [r7, #31]
 80045b8:	e004      	b.n	80045c4 <UART_SetConfig+0x348>
 80045ba:	2310      	movs	r3, #16
 80045bc:	77fb      	strb	r3, [r7, #31]
 80045be:	e001      	b.n	80045c4 <UART_SetConfig+0x348>
 80045c0:	2310      	movs	r3, #16
 80045c2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	69db      	ldr	r3, [r3, #28]
 80045c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045cc:	d15b      	bne.n	8004686 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80045ce:	7ffb      	ldrb	r3, [r7, #31]
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d828      	bhi.n	8004626 <UART_SetConfig+0x3aa>
 80045d4:	a201      	add	r2, pc, #4	@ (adr r2, 80045dc <UART_SetConfig+0x360>)
 80045d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045da:	bf00      	nop
 80045dc:	08004601 	.word	0x08004601
 80045e0:	08004609 	.word	0x08004609
 80045e4:	08004611 	.word	0x08004611
 80045e8:	08004627 	.word	0x08004627
 80045ec:	08004617 	.word	0x08004617
 80045f0:	08004627 	.word	0x08004627
 80045f4:	08004627 	.word	0x08004627
 80045f8:	08004627 	.word	0x08004627
 80045fc:	0800461f 	.word	0x0800461f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004600:	f7ff f99e 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 8004604:	61b8      	str	r0, [r7, #24]
        break;
 8004606:	e013      	b.n	8004630 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004608:	f7ff f9ae 	bl	8003968 <HAL_RCC_GetPCLK2Freq>
 800460c:	61b8      	str	r0, [r7, #24]
        break;
 800460e:	e00f      	b.n	8004630 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004610:	4b4b      	ldr	r3, [pc, #300]	@ (8004740 <UART_SetConfig+0x4c4>)
 8004612:	61bb      	str	r3, [r7, #24]
        break;
 8004614:	e00c      	b.n	8004630 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004616:	f7ff f881 	bl	800371c <HAL_RCC_GetSysClockFreq>
 800461a:	61b8      	str	r0, [r7, #24]
        break;
 800461c:	e008      	b.n	8004630 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800461e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004622:	61bb      	str	r3, [r7, #24]
        break;
 8004624:	e004      	b.n	8004630 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004626:	2300      	movs	r3, #0
 8004628:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	77bb      	strb	r3, [r7, #30]
        break;
 800462e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d074      	beq.n	8004720 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	005a      	lsls	r2, r3, #1
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	085b      	lsrs	r3, r3, #1
 8004640:	441a      	add	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	fbb2 f3f3 	udiv	r3, r2, r3
 800464a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	2b0f      	cmp	r3, #15
 8004650:	d916      	bls.n	8004680 <UART_SetConfig+0x404>
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004658:	d212      	bcs.n	8004680 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	b29b      	uxth	r3, r3
 800465e:	f023 030f 	bic.w	r3, r3, #15
 8004662:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	085b      	lsrs	r3, r3, #1
 8004668:	b29b      	uxth	r3, r3
 800466a:	f003 0307 	and.w	r3, r3, #7
 800466e:	b29a      	uxth	r2, r3
 8004670:	89fb      	ldrh	r3, [r7, #14]
 8004672:	4313      	orrs	r3, r2
 8004674:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	89fa      	ldrh	r2, [r7, #14]
 800467c:	60da      	str	r2, [r3, #12]
 800467e:	e04f      	b.n	8004720 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	77bb      	strb	r3, [r7, #30]
 8004684:	e04c      	b.n	8004720 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004686:	7ffb      	ldrb	r3, [r7, #31]
 8004688:	2b08      	cmp	r3, #8
 800468a:	d828      	bhi.n	80046de <UART_SetConfig+0x462>
 800468c:	a201      	add	r2, pc, #4	@ (adr r2, 8004694 <UART_SetConfig+0x418>)
 800468e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004692:	bf00      	nop
 8004694:	080046b9 	.word	0x080046b9
 8004698:	080046c1 	.word	0x080046c1
 800469c:	080046c9 	.word	0x080046c9
 80046a0:	080046df 	.word	0x080046df
 80046a4:	080046cf 	.word	0x080046cf
 80046a8:	080046df 	.word	0x080046df
 80046ac:	080046df 	.word	0x080046df
 80046b0:	080046df 	.word	0x080046df
 80046b4:	080046d7 	.word	0x080046d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046b8:	f7ff f942 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 80046bc:	61b8      	str	r0, [r7, #24]
        break;
 80046be:	e013      	b.n	80046e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046c0:	f7ff f952 	bl	8003968 <HAL_RCC_GetPCLK2Freq>
 80046c4:	61b8      	str	r0, [r7, #24]
        break;
 80046c6:	e00f      	b.n	80046e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004740 <UART_SetConfig+0x4c4>)
 80046ca:	61bb      	str	r3, [r7, #24]
        break;
 80046cc:	e00c      	b.n	80046e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ce:	f7ff f825 	bl	800371c <HAL_RCC_GetSysClockFreq>
 80046d2:	61b8      	str	r0, [r7, #24]
        break;
 80046d4:	e008      	b.n	80046e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046da:	61bb      	str	r3, [r7, #24]
        break;
 80046dc:	e004      	b.n	80046e8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80046de:	2300      	movs	r3, #0
 80046e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	77bb      	strb	r3, [r7, #30]
        break;
 80046e6:	bf00      	nop
    }

    if (pclk != 0U)
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d018      	beq.n	8004720 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	085a      	lsrs	r2, r3, #1
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	441a      	add	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004700:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	2b0f      	cmp	r3, #15
 8004706:	d909      	bls.n	800471c <UART_SetConfig+0x4a0>
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800470e:	d205      	bcs.n	800471c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	b29a      	uxth	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	60da      	str	r2, [r3, #12]
 800471a:	e001      	b.n	8004720 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800472c:	7fbb      	ldrb	r3, [r7, #30]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3720      	adds	r7, #32
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	40007c00 	.word	0x40007c00
 800473c:	40023800 	.word	0x40023800
 8004740:	00f42400 	.word	0x00f42400

08004744 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00a      	beq.n	800476e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00a      	beq.n	80047b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b6:	f003 0308 	and.w	r3, r3, #8
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d8:	f003 0310 	and.w	r3, r3, #16
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00a      	beq.n	80047f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004820:	2b00      	cmp	r3, #0
 8004822:	d01a      	beq.n	800485a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004842:	d10a      	bne.n	800485a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	605a      	str	r2, [r3, #4]
  }
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af02      	add	r7, sp, #8
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004898:	f7fc fe18 	bl	80014cc <HAL_GetTick>
 800489c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0308 	and.w	r3, r3, #8
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d10e      	bne.n	80048ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f831 	bl	8004922 <UART_WaitOnFlagUntilTimeout>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e027      	b.n	800491a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d10e      	bne.n	80048f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f81b 	bl	8004922 <UART_WaitOnFlagUntilTimeout>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e011      	b.n	800491a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2220      	movs	r2, #32
 80048fa:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2220      	movs	r2, #32
 8004900:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b09c      	sub	sp, #112	@ 0x70
 8004926:	af00      	add	r7, sp, #0
 8004928:	60f8      	str	r0, [r7, #12]
 800492a:	60b9      	str	r1, [r7, #8]
 800492c:	603b      	str	r3, [r7, #0]
 800492e:	4613      	mov	r3, r2
 8004930:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004932:	e0a7      	b.n	8004a84 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004934:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493a:	f000 80a3 	beq.w	8004a84 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800493e:	f7fc fdc5 	bl	80014cc <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800494a:	429a      	cmp	r2, r3
 800494c:	d302      	bcc.n	8004954 <UART_WaitOnFlagUntilTimeout+0x32>
 800494e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004950:	2b00      	cmp	r3, #0
 8004952:	d13f      	bne.n	80049d4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800495c:	e853 3f00 	ldrex	r3, [r3]
 8004960:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004962:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004964:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004968:	667b      	str	r3, [r7, #100]	@ 0x64
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	461a      	mov	r2, r3
 8004970:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004972:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004974:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004976:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004978:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800497a:	e841 2300 	strex	r3, r2, [r1]
 800497e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1e6      	bne.n	8004954 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	3308      	adds	r3, #8
 800498c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004990:	e853 3f00 	ldrex	r3, [r3]
 8004994:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004998:	f023 0301 	bic.w	r3, r3, #1
 800499c:	663b      	str	r3, [r7, #96]	@ 0x60
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3308      	adds	r3, #8
 80049a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80049a6:	64ba      	str	r2, [r7, #72]	@ 0x48
 80049a8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80049ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049ae:	e841 2300 	strex	r3, r2, [r1]
 80049b2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80049b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1e5      	bne.n	8004986 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2220      	movs	r2, #32
 80049be:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e068      	b.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0304 	and.w	r3, r3, #4
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d050      	beq.n	8004a84 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049f0:	d148      	bne.n	8004a84 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80049fa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a04:	e853 3f00 	ldrex	r3, [r3]
 8004a08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004a10:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	461a      	mov	r2, r3
 8004a18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a1c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004a20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a22:	e841 2300 	strex	r3, r2, [r1]
 8004a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1e6      	bne.n	80049fc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	3308      	adds	r3, #8
 8004a34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	e853 3f00 	ldrex	r3, [r3]
 8004a3c:	613b      	str	r3, [r7, #16]
   return(result);
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	f023 0301 	bic.w	r3, r3, #1
 8004a44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3308      	adds	r3, #8
 8004a4c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004a4e:	623a      	str	r2, [r7, #32]
 8004a50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a52:	69f9      	ldr	r1, [r7, #28]
 8004a54:	6a3a      	ldr	r2, [r7, #32]
 8004a56:	e841 2300 	strex	r3, r2, [r1]
 8004a5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1e5      	bne.n	8004a2e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2220      	movs	r2, #32
 8004a66:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e010      	b.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	69da      	ldr	r2, [r3, #28]
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	bf0c      	ite	eq
 8004a94:	2301      	moveq	r3, #1
 8004a96:	2300      	movne	r3, #0
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	79fb      	ldrb	r3, [r7, #7]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	f43f af48 	beq.w	8004934 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3770      	adds	r7, #112	@ 0x70
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
	...

08004ab0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ab0:	b084      	sub	sp, #16
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b084      	sub	sp, #16
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	f107 001c 	add.w	r0, r7, #28
 8004abe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d120      	bne.n	8004b0a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004acc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68da      	ldr	r2, [r3, #12]
 8004ad8:	4b20      	ldr	r3, [pc, #128]	@ (8004b5c <USB_CoreInit+0xac>)
 8004ada:	4013      	ands	r3, r2
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004aec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d105      	bne.n	8004afe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fa96 	bl	8005030 <USB_CoreReset>
 8004b04:	4603      	mov	r3, r0
 8004b06:	73fb      	strb	r3, [r7, #15]
 8004b08:	e010      	b.n	8004b2c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 fa8a 	bl	8005030 <USB_CoreReset>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b24:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d10b      	bne.n	8004b4a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f043 0206 	orr.w	r2, r3, #6
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f043 0220 	orr.w	r2, r3, #32
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b56:	b004      	add	sp, #16
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	ffbdffbf 	.word	0xffbdffbf

08004b60 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f023 0201 	bic.w	r2, r3, #1
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b084      	sub	sp, #16
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b9e:	78fb      	ldrb	r3, [r7, #3]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d115      	bne.n	8004bd0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004bb0:	2001      	movs	r0, #1
 8004bb2:	f7fc fc97 	bl	80014e4 <HAL_Delay>
      ms++;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 fa29 	bl	8005014 <USB_GetMode>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d01e      	beq.n	8004c06 <USB_SetCurrentMode+0x84>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2b31      	cmp	r3, #49	@ 0x31
 8004bcc:	d9f0      	bls.n	8004bb0 <USB_SetCurrentMode+0x2e>
 8004bce:	e01a      	b.n	8004c06 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004bd0:	78fb      	ldrb	r3, [r7, #3]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d115      	bne.n	8004c02 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004be2:	2001      	movs	r0, #1
 8004be4:	f7fc fc7e 	bl	80014e4 <HAL_Delay>
      ms++;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	3301      	adds	r3, #1
 8004bec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 fa10 	bl	8005014 <USB_GetMode>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d005      	beq.n	8004c06 <USB_SetCurrentMode+0x84>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2b31      	cmp	r3, #49	@ 0x31
 8004bfe:	d9f0      	bls.n	8004be2 <USB_SetCurrentMode+0x60>
 8004c00:	e001      	b.n	8004c06 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e005      	b.n	8004c12 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2b32      	cmp	r3, #50	@ 0x32
 8004c0a:	d101      	bne.n	8004c10 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e000      	b.n	8004c12 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
	...

08004c1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c1c:	b084      	sub	sp, #16
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b086      	sub	sp, #24
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
 8004c26:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004c2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c36:	2300      	movs	r3, #0
 8004c38:	613b      	str	r3, [r7, #16]
 8004c3a:	e009      	b.n	8004c50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	3340      	adds	r3, #64	@ 0x40
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	2200      	movs	r2, #0
 8004c48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	613b      	str	r3, [r7, #16]
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	2b0e      	cmp	r3, #14
 8004c54:	d9f2      	bls.n	8004c3c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d11c      	bne.n	8004c96 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c6a:	f043 0302 	orr.w	r3, r3, #2
 8004c6e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c74:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	e005      	b.n	8004ca2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c9a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004ca8:	461a      	mov	r2, r3
 8004caa:	2300      	movs	r3, #0
 8004cac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	680b      	ldr	r3, [r1, #0]
 8004cc0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d10c      	bne.n	8004ce2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d104      	bne.n	8004cd8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004cce:	2100      	movs	r1, #0
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f965 	bl	8004fa0 <USB_SetDevSpeed>
 8004cd6:	e008      	b.n	8004cea <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004cd8:	2101      	movs	r1, #1
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f960 	bl	8004fa0 <USB_SetDevSpeed>
 8004ce0:	e003      	b.n	8004cea <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ce2:	2103      	movs	r1, #3
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 f95b 	bl	8004fa0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004cea:	2110      	movs	r1, #16
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f8f3 	bl	8004ed8 <USB_FlushTxFifo>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f91f 	bl	8004f40 <USB_FlushRxFifo>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d001      	beq.n	8004d0c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d12:	461a      	mov	r2, r3
 8004d14:	2300      	movs	r3, #0
 8004d16:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d1e:	461a      	mov	r2, r3
 8004d20:	2300      	movs	r3, #0
 8004d22:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d30:	2300      	movs	r3, #0
 8004d32:	613b      	str	r3, [r7, #16]
 8004d34:	e043      	b.n	8004dbe <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d4c:	d118      	bne.n	8004d80 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10a      	bne.n	8004d6a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d60:	461a      	mov	r2, r3
 8004d62:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004d66:	6013      	str	r3, [r2, #0]
 8004d68:	e013      	b.n	8004d92 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d76:	461a      	mov	r2, r3
 8004d78:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004d7c:	6013      	str	r3, [r2, #0]
 8004d7e:	e008      	b.n	8004d92 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	2300      	movs	r3, #0
 8004d90:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d9e:	461a      	mov	r2, r3
 8004da0:	2300      	movs	r3, #0
 8004da2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004db0:	461a      	mov	r2, r3
 8004db2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004db6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	613b      	str	r3, [r7, #16]
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d3b7      	bcc.n	8004d36 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	613b      	str	r3, [r7, #16]
 8004dca:	e043      	b.n	8004e54 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004dde:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004de2:	d118      	bne.n	8004e16 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10a      	bne.n	8004e00 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	015a      	lsls	r2, r3, #5
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	4413      	add	r3, r2
 8004df2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004df6:	461a      	mov	r2, r3
 8004df8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004dfc:	6013      	str	r3, [r2, #0]
 8004dfe:	e013      	b.n	8004e28 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	015a      	lsls	r2, r3, #5
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004e12:	6013      	str	r3, [r2, #0]
 8004e14:	e008      	b.n	8004e28 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e22:	461a      	mov	r2, r3
 8004e24:	2300      	movs	r3, #0
 8004e26:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	015a      	lsls	r2, r3, #5
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4413      	add	r3, r2
 8004e30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e34:	461a      	mov	r2, r3
 8004e36:	2300      	movs	r3, #0
 8004e38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	015a      	lsls	r2, r3, #5
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	4413      	add	r3, r2
 8004e42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e46:	461a      	mov	r2, r3
 8004e48:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004e4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	3301      	adds	r3, #1
 8004e52:	613b      	str	r3, [r7, #16]
 8004e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d3b7      	bcc.n	8004dcc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e6a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e6e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004e7c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d105      	bne.n	8004e90 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	f043 0210 	orr.w	r2, r3, #16
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	699a      	ldr	r2, [r3, #24]
 8004e94:	4b0e      	ldr	r3, [pc, #56]	@ (8004ed0 <USB_DevInit+0x2b4>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d005      	beq.n	8004eae <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	f043 0208 	orr.w	r2, r3, #8
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004eae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d105      	bne.n	8004ec0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	699a      	ldr	r2, [r3, #24]
 8004eb8:	4b06      	ldr	r3, [pc, #24]	@ (8004ed4 <USB_DevInit+0x2b8>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3718      	adds	r7, #24
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ecc:	b004      	add	sp, #16
 8004ece:	4770      	bx	lr
 8004ed0:	803c3800 	.word	0x803c3800
 8004ed4:	40000004 	.word	0x40000004

08004ed8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4a13      	ldr	r2, [pc, #76]	@ (8004f3c <USB_FlushTxFifo+0x64>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d901      	bls.n	8004ef8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e01b      	b.n	8004f30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	daf2      	bge.n	8004ee6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	019b      	lsls	r3, r3, #6
 8004f08:	f043 0220 	orr.w	r2, r3, #32
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	3301      	adds	r3, #1
 8004f14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	4a08      	ldr	r2, [pc, #32]	@ (8004f3c <USB_FlushTxFifo+0x64>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d901      	bls.n	8004f22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e006      	b.n	8004f30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	f003 0320 	and.w	r3, r3, #32
 8004f2a:	2b20      	cmp	r3, #32
 8004f2c:	d0f0      	beq.n	8004f10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	00030d40 	.word	0x00030d40

08004f40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	4a11      	ldr	r2, [pc, #68]	@ (8004f9c <USB_FlushRxFifo+0x5c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d901      	bls.n	8004f5e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e018      	b.n	8004f90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	daf2      	bge.n	8004f4c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2210      	movs	r2, #16
 8004f6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	3301      	adds	r3, #1
 8004f74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4a08      	ldr	r2, [pc, #32]	@ (8004f9c <USB_FlushRxFifo+0x5c>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d901      	bls.n	8004f82 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e006      	b.n	8004f90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	f003 0310 	and.w	r3, r3, #16
 8004f8a:	2b10      	cmp	r3, #16
 8004f8c:	d0f0      	beq.n	8004f70 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	00030d40 	.word	0x00030d40

08004fa0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	460b      	mov	r3, r1
 8004faa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	78fb      	ldrb	r3, [r7, #3]
 8004fba:	68f9      	ldr	r1, [r7, #12]
 8004fbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b085      	sub	sp, #20
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004fec:	f023 0303 	bic.w	r3, r3, #3
 8004ff0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005000:	f043 0302 	orr.w	r3, r3, #2
 8005004:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	f003 0301 	and.w	r3, r3, #1
}
 8005024:	4618      	mov	r0, r3
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	3301      	adds	r3, #1
 8005040:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4a13      	ldr	r2, [pc, #76]	@ (8005094 <USB_CoreReset+0x64>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d901      	bls.n	800504e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e01b      	b.n	8005086 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	2b00      	cmp	r3, #0
 8005054:	daf2      	bge.n	800503c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005056:	2300      	movs	r3, #0
 8005058:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f043 0201 	orr.w	r2, r3, #1
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	3301      	adds	r3, #1
 800506a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4a09      	ldr	r2, [pc, #36]	@ (8005094 <USB_CoreReset+0x64>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d901      	bls.n	8005078 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e006      	b.n	8005086 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	2b01      	cmp	r3, #1
 8005082:	d0f0      	beq.n	8005066 <USB_CoreReset+0x36>

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	00030d40 	.word	0x00030d40

08005098 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800509e:	4b87      	ldr	r3, [pc, #540]	@ (80052bc <MX_LWIP_Init+0x224>)
 80050a0:	220a      	movs	r2, #10
 80050a2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 102;
 80050a4:	4b85      	ldr	r3, [pc, #532]	@ (80052bc <MX_LWIP_Init+0x224>)
 80050a6:	2266      	movs	r2, #102	@ 0x66
 80050a8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 2;
 80050aa:	4b84      	ldr	r3, [pc, #528]	@ (80052bc <MX_LWIP_Init+0x224>)
 80050ac:	2202      	movs	r2, #2
 80050ae:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 86;
 80050b0:	4b82      	ldr	r3, [pc, #520]	@ (80052bc <MX_LWIP_Init+0x224>)
 80050b2:	2256      	movs	r2, #86	@ 0x56
 80050b4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80050b6:	4b82      	ldr	r3, [pc, #520]	@ (80052c0 <MX_LWIP_Init+0x228>)
 80050b8:	22ff      	movs	r2, #255	@ 0xff
 80050ba:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80050bc:	4b80      	ldr	r3, [pc, #512]	@ (80052c0 <MX_LWIP_Init+0x228>)
 80050be:	22ff      	movs	r2, #255	@ 0xff
 80050c0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80050c2:	4b7f      	ldr	r3, [pc, #508]	@ (80052c0 <MX_LWIP_Init+0x228>)
 80050c4:	22ff      	movs	r2, #255	@ 0xff
 80050c6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80050c8:	4b7d      	ldr	r3, [pc, #500]	@ (80052c0 <MX_LWIP_Init+0x228>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 80050ce:	4b7d      	ldr	r3, [pc, #500]	@ (80052c4 <MX_LWIP_Init+0x22c>)
 80050d0:	220a      	movs	r2, #10
 80050d2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 102;
 80050d4:	4b7b      	ldr	r3, [pc, #492]	@ (80052c4 <MX_LWIP_Init+0x22c>)
 80050d6:	2266      	movs	r2, #102	@ 0x66
 80050d8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 2;
 80050da:	4b7a      	ldr	r3, [pc, #488]	@ (80052c4 <MX_LWIP_Init+0x22c>)
 80050dc:	2202      	movs	r2, #2
 80050de:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 254;
 80050e0:	4b78      	ldr	r3, [pc, #480]	@ (80052c4 <MX_LWIP_Init+0x22c>)
 80050e2:	22fe      	movs	r2, #254	@ 0xfe
 80050e4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 80050e6:	f000 fd31 	bl	8005b4c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80050ea:	4b74      	ldr	r3, [pc, #464]	@ (80052bc <MX_LWIP_Init+0x224>)
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	061a      	lsls	r2, r3, #24
 80050f0:	4b72      	ldr	r3, [pc, #456]	@ (80052bc <MX_LWIP_Init+0x224>)
 80050f2:	785b      	ldrb	r3, [r3, #1]
 80050f4:	041b      	lsls	r3, r3, #16
 80050f6:	431a      	orrs	r2, r3
 80050f8:	4b70      	ldr	r3, [pc, #448]	@ (80052bc <MX_LWIP_Init+0x224>)
 80050fa:	789b      	ldrb	r3, [r3, #2]
 80050fc:	021b      	lsls	r3, r3, #8
 80050fe:	4313      	orrs	r3, r2
 8005100:	4a6e      	ldr	r2, [pc, #440]	@ (80052bc <MX_LWIP_Init+0x224>)
 8005102:	78d2      	ldrb	r2, [r2, #3]
 8005104:	4313      	orrs	r3, r2
 8005106:	061a      	lsls	r2, r3, #24
 8005108:	4b6c      	ldr	r3, [pc, #432]	@ (80052bc <MX_LWIP_Init+0x224>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	0619      	lsls	r1, r3, #24
 800510e:	4b6b      	ldr	r3, [pc, #428]	@ (80052bc <MX_LWIP_Init+0x224>)
 8005110:	785b      	ldrb	r3, [r3, #1]
 8005112:	041b      	lsls	r3, r3, #16
 8005114:	4319      	orrs	r1, r3
 8005116:	4b69      	ldr	r3, [pc, #420]	@ (80052bc <MX_LWIP_Init+0x224>)
 8005118:	789b      	ldrb	r3, [r3, #2]
 800511a:	021b      	lsls	r3, r3, #8
 800511c:	430b      	orrs	r3, r1
 800511e:	4967      	ldr	r1, [pc, #412]	@ (80052bc <MX_LWIP_Init+0x224>)
 8005120:	78c9      	ldrb	r1, [r1, #3]
 8005122:	430b      	orrs	r3, r1
 8005124:	021b      	lsls	r3, r3, #8
 8005126:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800512a:	431a      	orrs	r2, r3
 800512c:	4b63      	ldr	r3, [pc, #396]	@ (80052bc <MX_LWIP_Init+0x224>)
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	0619      	lsls	r1, r3, #24
 8005132:	4b62      	ldr	r3, [pc, #392]	@ (80052bc <MX_LWIP_Init+0x224>)
 8005134:	785b      	ldrb	r3, [r3, #1]
 8005136:	041b      	lsls	r3, r3, #16
 8005138:	4319      	orrs	r1, r3
 800513a:	4b60      	ldr	r3, [pc, #384]	@ (80052bc <MX_LWIP_Init+0x224>)
 800513c:	789b      	ldrb	r3, [r3, #2]
 800513e:	021b      	lsls	r3, r3, #8
 8005140:	430b      	orrs	r3, r1
 8005142:	495e      	ldr	r1, [pc, #376]	@ (80052bc <MX_LWIP_Init+0x224>)
 8005144:	78c9      	ldrb	r1, [r1, #3]
 8005146:	430b      	orrs	r3, r1
 8005148:	0a1b      	lsrs	r3, r3, #8
 800514a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800514e:	431a      	orrs	r2, r3
 8005150:	4b5a      	ldr	r3, [pc, #360]	@ (80052bc <MX_LWIP_Init+0x224>)
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	0619      	lsls	r1, r3, #24
 8005156:	4b59      	ldr	r3, [pc, #356]	@ (80052bc <MX_LWIP_Init+0x224>)
 8005158:	785b      	ldrb	r3, [r3, #1]
 800515a:	041b      	lsls	r3, r3, #16
 800515c:	4319      	orrs	r1, r3
 800515e:	4b57      	ldr	r3, [pc, #348]	@ (80052bc <MX_LWIP_Init+0x224>)
 8005160:	789b      	ldrb	r3, [r3, #2]
 8005162:	021b      	lsls	r3, r3, #8
 8005164:	430b      	orrs	r3, r1
 8005166:	4955      	ldr	r1, [pc, #340]	@ (80052bc <MX_LWIP_Init+0x224>)
 8005168:	78c9      	ldrb	r1, [r1, #3]
 800516a:	430b      	orrs	r3, r1
 800516c:	0e1b      	lsrs	r3, r3, #24
 800516e:	4313      	orrs	r3, r2
 8005170:	4a55      	ldr	r2, [pc, #340]	@ (80052c8 <MX_LWIP_Init+0x230>)
 8005172:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005174:	4b52      	ldr	r3, [pc, #328]	@ (80052c0 <MX_LWIP_Init+0x228>)
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	061a      	lsls	r2, r3, #24
 800517a:	4b51      	ldr	r3, [pc, #324]	@ (80052c0 <MX_LWIP_Init+0x228>)
 800517c:	785b      	ldrb	r3, [r3, #1]
 800517e:	041b      	lsls	r3, r3, #16
 8005180:	431a      	orrs	r2, r3
 8005182:	4b4f      	ldr	r3, [pc, #316]	@ (80052c0 <MX_LWIP_Init+0x228>)
 8005184:	789b      	ldrb	r3, [r3, #2]
 8005186:	021b      	lsls	r3, r3, #8
 8005188:	4313      	orrs	r3, r2
 800518a:	4a4d      	ldr	r2, [pc, #308]	@ (80052c0 <MX_LWIP_Init+0x228>)
 800518c:	78d2      	ldrb	r2, [r2, #3]
 800518e:	4313      	orrs	r3, r2
 8005190:	061a      	lsls	r2, r3, #24
 8005192:	4b4b      	ldr	r3, [pc, #300]	@ (80052c0 <MX_LWIP_Init+0x228>)
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	0619      	lsls	r1, r3, #24
 8005198:	4b49      	ldr	r3, [pc, #292]	@ (80052c0 <MX_LWIP_Init+0x228>)
 800519a:	785b      	ldrb	r3, [r3, #1]
 800519c:	041b      	lsls	r3, r3, #16
 800519e:	4319      	orrs	r1, r3
 80051a0:	4b47      	ldr	r3, [pc, #284]	@ (80052c0 <MX_LWIP_Init+0x228>)
 80051a2:	789b      	ldrb	r3, [r3, #2]
 80051a4:	021b      	lsls	r3, r3, #8
 80051a6:	430b      	orrs	r3, r1
 80051a8:	4945      	ldr	r1, [pc, #276]	@ (80052c0 <MX_LWIP_Init+0x228>)
 80051aa:	78c9      	ldrb	r1, [r1, #3]
 80051ac:	430b      	orrs	r3, r1
 80051ae:	021b      	lsls	r3, r3, #8
 80051b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80051b4:	431a      	orrs	r2, r3
 80051b6:	4b42      	ldr	r3, [pc, #264]	@ (80052c0 <MX_LWIP_Init+0x228>)
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	0619      	lsls	r1, r3, #24
 80051bc:	4b40      	ldr	r3, [pc, #256]	@ (80052c0 <MX_LWIP_Init+0x228>)
 80051be:	785b      	ldrb	r3, [r3, #1]
 80051c0:	041b      	lsls	r3, r3, #16
 80051c2:	4319      	orrs	r1, r3
 80051c4:	4b3e      	ldr	r3, [pc, #248]	@ (80052c0 <MX_LWIP_Init+0x228>)
 80051c6:	789b      	ldrb	r3, [r3, #2]
 80051c8:	021b      	lsls	r3, r3, #8
 80051ca:	430b      	orrs	r3, r1
 80051cc:	493c      	ldr	r1, [pc, #240]	@ (80052c0 <MX_LWIP_Init+0x228>)
 80051ce:	78c9      	ldrb	r1, [r1, #3]
 80051d0:	430b      	orrs	r3, r1
 80051d2:	0a1b      	lsrs	r3, r3, #8
 80051d4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80051d8:	431a      	orrs	r2, r3
 80051da:	4b39      	ldr	r3, [pc, #228]	@ (80052c0 <MX_LWIP_Init+0x228>)
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	0619      	lsls	r1, r3, #24
 80051e0:	4b37      	ldr	r3, [pc, #220]	@ (80052c0 <MX_LWIP_Init+0x228>)
 80051e2:	785b      	ldrb	r3, [r3, #1]
 80051e4:	041b      	lsls	r3, r3, #16
 80051e6:	4319      	orrs	r1, r3
 80051e8:	4b35      	ldr	r3, [pc, #212]	@ (80052c0 <MX_LWIP_Init+0x228>)
 80051ea:	789b      	ldrb	r3, [r3, #2]
 80051ec:	021b      	lsls	r3, r3, #8
 80051ee:	430b      	orrs	r3, r1
 80051f0:	4933      	ldr	r1, [pc, #204]	@ (80052c0 <MX_LWIP_Init+0x228>)
 80051f2:	78c9      	ldrb	r1, [r1, #3]
 80051f4:	430b      	orrs	r3, r1
 80051f6:	0e1b      	lsrs	r3, r3, #24
 80051f8:	4313      	orrs	r3, r2
 80051fa:	4a34      	ldr	r2, [pc, #208]	@ (80052cc <MX_LWIP_Init+0x234>)
 80051fc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80051fe:	4b31      	ldr	r3, [pc, #196]	@ (80052c4 <MX_LWIP_Init+0x22c>)
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	061a      	lsls	r2, r3, #24
 8005204:	4b2f      	ldr	r3, [pc, #188]	@ (80052c4 <MX_LWIP_Init+0x22c>)
 8005206:	785b      	ldrb	r3, [r3, #1]
 8005208:	041b      	lsls	r3, r3, #16
 800520a:	431a      	orrs	r2, r3
 800520c:	4b2d      	ldr	r3, [pc, #180]	@ (80052c4 <MX_LWIP_Init+0x22c>)
 800520e:	789b      	ldrb	r3, [r3, #2]
 8005210:	021b      	lsls	r3, r3, #8
 8005212:	4313      	orrs	r3, r2
 8005214:	4a2b      	ldr	r2, [pc, #172]	@ (80052c4 <MX_LWIP_Init+0x22c>)
 8005216:	78d2      	ldrb	r2, [r2, #3]
 8005218:	4313      	orrs	r3, r2
 800521a:	061a      	lsls	r2, r3, #24
 800521c:	4b29      	ldr	r3, [pc, #164]	@ (80052c4 <MX_LWIP_Init+0x22c>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	0619      	lsls	r1, r3, #24
 8005222:	4b28      	ldr	r3, [pc, #160]	@ (80052c4 <MX_LWIP_Init+0x22c>)
 8005224:	785b      	ldrb	r3, [r3, #1]
 8005226:	041b      	lsls	r3, r3, #16
 8005228:	4319      	orrs	r1, r3
 800522a:	4b26      	ldr	r3, [pc, #152]	@ (80052c4 <MX_LWIP_Init+0x22c>)
 800522c:	789b      	ldrb	r3, [r3, #2]
 800522e:	021b      	lsls	r3, r3, #8
 8005230:	430b      	orrs	r3, r1
 8005232:	4924      	ldr	r1, [pc, #144]	@ (80052c4 <MX_LWIP_Init+0x22c>)
 8005234:	78c9      	ldrb	r1, [r1, #3]
 8005236:	430b      	orrs	r3, r1
 8005238:	021b      	lsls	r3, r3, #8
 800523a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800523e:	431a      	orrs	r2, r3
 8005240:	4b20      	ldr	r3, [pc, #128]	@ (80052c4 <MX_LWIP_Init+0x22c>)
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	0619      	lsls	r1, r3, #24
 8005246:	4b1f      	ldr	r3, [pc, #124]	@ (80052c4 <MX_LWIP_Init+0x22c>)
 8005248:	785b      	ldrb	r3, [r3, #1]
 800524a:	041b      	lsls	r3, r3, #16
 800524c:	4319      	orrs	r1, r3
 800524e:	4b1d      	ldr	r3, [pc, #116]	@ (80052c4 <MX_LWIP_Init+0x22c>)
 8005250:	789b      	ldrb	r3, [r3, #2]
 8005252:	021b      	lsls	r3, r3, #8
 8005254:	430b      	orrs	r3, r1
 8005256:	491b      	ldr	r1, [pc, #108]	@ (80052c4 <MX_LWIP_Init+0x22c>)
 8005258:	78c9      	ldrb	r1, [r1, #3]
 800525a:	430b      	orrs	r3, r1
 800525c:	0a1b      	lsrs	r3, r3, #8
 800525e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005262:	431a      	orrs	r2, r3
 8005264:	4b17      	ldr	r3, [pc, #92]	@ (80052c4 <MX_LWIP_Init+0x22c>)
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	0619      	lsls	r1, r3, #24
 800526a:	4b16      	ldr	r3, [pc, #88]	@ (80052c4 <MX_LWIP_Init+0x22c>)
 800526c:	785b      	ldrb	r3, [r3, #1]
 800526e:	041b      	lsls	r3, r3, #16
 8005270:	4319      	orrs	r1, r3
 8005272:	4b14      	ldr	r3, [pc, #80]	@ (80052c4 <MX_LWIP_Init+0x22c>)
 8005274:	789b      	ldrb	r3, [r3, #2]
 8005276:	021b      	lsls	r3, r3, #8
 8005278:	430b      	orrs	r3, r1
 800527a:	4912      	ldr	r1, [pc, #72]	@ (80052c4 <MX_LWIP_Init+0x22c>)
 800527c:	78c9      	ldrb	r1, [r1, #3]
 800527e:	430b      	orrs	r3, r1
 8005280:	0e1b      	lsrs	r3, r3, #24
 8005282:	4313      	orrs	r3, r2
 8005284:	4a12      	ldr	r2, [pc, #72]	@ (80052d0 <MX_LWIP_Init+0x238>)
 8005286:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8005288:	4b12      	ldr	r3, [pc, #72]	@ (80052d4 <MX_LWIP_Init+0x23c>)
 800528a:	9302      	str	r3, [sp, #8]
 800528c:	4b12      	ldr	r3, [pc, #72]	@ (80052d8 <MX_LWIP_Init+0x240>)
 800528e:	9301      	str	r3, [sp, #4]
 8005290:	2300      	movs	r3, #0
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	4b0e      	ldr	r3, [pc, #56]	@ (80052d0 <MX_LWIP_Init+0x238>)
 8005296:	4a0d      	ldr	r2, [pc, #52]	@ (80052cc <MX_LWIP_Init+0x234>)
 8005298:	490b      	ldr	r1, [pc, #44]	@ (80052c8 <MX_LWIP_Init+0x230>)
 800529a:	4810      	ldr	r0, [pc, #64]	@ (80052dc <MX_LWIP_Init+0x244>)
 800529c:	f001 f942 	bl	8006524 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80052a0:	480e      	ldr	r0, [pc, #56]	@ (80052dc <MX_LWIP_Init+0x244>)
 80052a2:	f001 faf1 	bl	8006888 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80052a6:	480d      	ldr	r0, [pc, #52]	@ (80052dc <MX_LWIP_Init+0x244>)
 80052a8:	f001 fafe 	bl	80068a8 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80052ac:	490c      	ldr	r1, [pc, #48]	@ (80052e0 <MX_LWIP_Init+0x248>)
 80052ae:	480b      	ldr	r0, [pc, #44]	@ (80052dc <MX_LWIP_Init+0x244>)
 80052b0:	f001 fbfc 	bl	8006aac <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80052b4:	bf00      	nop
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	200007c0 	.word	0x200007c0
 80052c0:	200007c4 	.word	0x200007c4
 80052c4:	200007c8 	.word	0x200007c8
 80052c8:	200007b4 	.word	0x200007b4
 80052cc:	200007b8 	.word	0x200007b8
 80052d0:	200007bc 	.word	0x200007bc
 80052d4:	0800fb01 	.word	0x0800fb01
 80052d8:	08005649 	.word	0x08005649
 80052dc:	20000780 	.word	0x20000780
 80052e0:	08005335 	.word	0x08005335

080052e4 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 80052ec:	f7fc f8ee 	bl	80014cc <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	4b08      	ldr	r3, [pc, #32]	@ (8005314 <Ethernet_Link_Periodic_Handle+0x30>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	2b63      	cmp	r3, #99	@ 0x63
 80052fa:	d907      	bls.n	800530c <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 80052fc:	f7fc f8e6 	bl	80014cc <HAL_GetTick>
 8005300:	4603      	mov	r3, r0
 8005302:	4a04      	ldr	r2, [pc, #16]	@ (8005314 <Ethernet_Link_Periodic_Handle+0x30>)
 8005304:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 faf4 	bl	80058f4 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 800530c:	bf00      	nop
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	2000077c 	.word	0x2000077c

08005318 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800531c:	4804      	ldr	r0, [pc, #16]	@ (8005330 <MX_LWIP_Process+0x18>)
 800531e:	f000 f973 	bl	8005608 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8005322:	f007 fcd3 	bl	800cccc <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8005326:	4802      	ldr	r0, [pc, #8]	@ (8005330 <MX_LWIP_Process+0x18>)
 8005328:	f7ff ffdc 	bl	80052e4 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800532c:	bf00      	nop
 800532e:	bd80      	pop	{r7, pc}
 8005330:	20000780 	.word	0x20000780

08005334 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <SCB_InvalidateDCache_by_Addr>:
{
 8005348:	b480      	push	{r7}
 800534a:	b087      	sub	sp, #28
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800535a:	2320      	movs	r3, #32
 800535c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800535e:	f3bf 8f4f 	dsb	sy
}
 8005362:	bf00      	nop
    while (op_size > 0) {
 8005364:	e00b      	b.n	800537e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8005366:	4a0d      	ldr	r2, [pc, #52]	@ (800539c <SCB_InvalidateDCache_by_Addr+0x54>)
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	4413      	add	r3, r2
 8005374:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	2b00      	cmp	r3, #0
 8005382:	dcf0      	bgt.n	8005366 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005384:	f3bf 8f4f 	dsb	sy
}
 8005388:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800538a:	f3bf 8f6f 	isb	sy
}
 800538e:	bf00      	nop
}
 8005390:	bf00      	nop
 8005392:	371c      	adds	r7, #28
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	e000ed00 	.word	0xe000ed00

080053a0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80053a8:	2300      	movs	r3, #0
 80053aa:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80053ac:	4b40      	ldr	r3, [pc, #256]	@ (80054b0 <low_level_init+0x110>)
 80053ae:	4a41      	ldr	r2, [pc, #260]	@ (80054b4 <low_level_init+0x114>)
 80053b0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80053b2:	2300      	movs	r3, #0
 80053b4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80053b6:	2380      	movs	r3, #128	@ 0x80
 80053b8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80053ba:	23e1      	movs	r3, #225	@ 0xe1
 80053bc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80053be:	2300      	movs	r3, #0
 80053c0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80053c2:	2300      	movs	r3, #0
 80053c4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80053c6:	2300      	movs	r3, #0
 80053c8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80053ca:	4a39      	ldr	r2, [pc, #228]	@ (80054b0 <low_level_init+0x110>)
 80053cc:	f107 0308 	add.w	r3, r7, #8
 80053d0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80053d2:	4b37      	ldr	r3, [pc, #220]	@ (80054b0 <low_level_init+0x110>)
 80053d4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80053d8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80053da:	4b35      	ldr	r3, [pc, #212]	@ (80054b0 <low_level_init+0x110>)
 80053dc:	4a36      	ldr	r2, [pc, #216]	@ (80054b8 <low_level_init+0x118>)
 80053de:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80053e0:	4b33      	ldr	r3, [pc, #204]	@ (80054b0 <low_level_init+0x110>)
 80053e2:	4a36      	ldr	r2, [pc, #216]	@ (80054bc <low_level_init+0x11c>)
 80053e4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80053e6:	4b32      	ldr	r3, [pc, #200]	@ (80054b0 <low_level_init+0x110>)
 80053e8:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80053ec:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80053ee:	4830      	ldr	r0, [pc, #192]	@ (80054b0 <low_level_init+0x110>)
 80053f0:	f7fc f982 	bl	80016f8 <HAL_ETH_Init>
 80053f4:	4603      	mov	r3, r0
 80053f6:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80053f8:	2238      	movs	r2, #56	@ 0x38
 80053fa:	2100      	movs	r1, #0
 80053fc:	4830      	ldr	r0, [pc, #192]	@ (80054c0 <low_level_init+0x120>)
 80053fe:	f00a fdf4 	bl	800ffea <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005402:	4b2f      	ldr	r3, [pc, #188]	@ (80054c0 <low_level_init+0x120>)
 8005404:	2221      	movs	r2, #33	@ 0x21
 8005406:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005408:	4b2d      	ldr	r3, [pc, #180]	@ (80054c0 <low_level_init+0x120>)
 800540a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800540e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005410:	4b2b      	ldr	r3, [pc, #172]	@ (80054c0 <low_level_init+0x120>)
 8005412:	2200      	movs	r2, #0
 8005414:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005416:	482b      	ldr	r0, [pc, #172]	@ (80054c4 <low_level_init+0x124>)
 8005418:	f000 ff4c 	bl	80062b4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2206      	movs	r2, #6
 8005420:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005424:	4b22      	ldr	r3, [pc, #136]	@ (80054b0 <low_level_init+0x110>)
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	781a      	ldrb	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005430:	4b1f      	ldr	r3, [pc, #124]	@ (80054b0 <low_level_init+0x110>)
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	785a      	ldrb	r2, [r3, #1]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800543c:	4b1c      	ldr	r3, [pc, #112]	@ (80054b0 <low_level_init+0x110>)
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	789a      	ldrb	r2, [r3, #2]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005448:	4b19      	ldr	r3, [pc, #100]	@ (80054b0 <low_level_init+0x110>)
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	78da      	ldrb	r2, [r3, #3]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005454:	4b16      	ldr	r3, [pc, #88]	@ (80054b0 <low_level_init+0x110>)
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	791a      	ldrb	r2, [r3, #4]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005460:	4b13      	ldr	r3, [pc, #76]	@ (80054b0 <low_level_init+0x110>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	795a      	ldrb	r2, [r3, #5]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005472:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800547a:	f043 030a 	orr.w	r3, r3, #10
 800547e:	b2da      	uxtb	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005486:	4910      	ldr	r1, [pc, #64]	@ (80054c8 <low_level_init+0x128>)
 8005488:	4810      	ldr	r0, [pc, #64]	@ (80054cc <low_level_init+0x12c>)
 800548a:	f7fb fe6c 	bl	8001166 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800548e:	480f      	ldr	r0, [pc, #60]	@ (80054cc <low_level_init+0x12c>)
 8005490:	f7fb fe9b 	bl	80011ca <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8005494:	7bfb      	ldrb	r3, [r7, #15]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d103      	bne.n	80054a2 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 fa2a 	bl	80058f4 <ethernet_link_check_state>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 80054a0:	e001      	b.n	80054a6 <low_level_init+0x106>
    Error_Handler();
 80054a2:	f7fb fc19 	bl	8000cd8 <Error_Handler>
}
 80054a6:	bf00      	nop
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	20005158 	.word	0x20005158
 80054b4:	40028000 	.word	0x40028000
 80054b8:	20000128 	.word	0x20000128
 80054bc:	20000088 	.word	0x20000088
 80054c0:	20005208 	.word	0x20005208
 80054c4:	08013b90 	.word	0x08013b90
 80054c8:	2000000c 	.word	0x2000000c
 80054cc:	20005240 	.word	0x20005240

080054d0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b092      	sub	sp, #72	@ 0x48
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80054da:	2300      	movs	r3, #0
 80054dc:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 80054de:	2300      	movs	r3, #0
 80054e0:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 80054e2:	2300      	movs	r3, #0
 80054e4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80054e8:	f107 030c 	add.w	r3, r7, #12
 80054ec:	2230      	movs	r2, #48	@ 0x30
 80054ee:	2100      	movs	r1, #0
 80054f0:	4618      	mov	r0, r3
 80054f2:	f00a fd7a 	bl	800ffea <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80054f6:	f107 030c 	add.w	r3, r7, #12
 80054fa:	2230      	movs	r2, #48	@ 0x30
 80054fc:	2100      	movs	r1, #0
 80054fe:	4618      	mov	r0, r3
 8005500:	f00a fd73 	bl	800ffea <memset>

  for(q = p; q != NULL; q = q->next)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	643b      	str	r3, [r7, #64]	@ 0x40
 8005508:	e045      	b.n	8005596 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800550a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800550c:	2b03      	cmp	r3, #3
 800550e:	d902      	bls.n	8005516 <low_level_output+0x46>
      return ERR_IF;
 8005510:	f06f 030b 	mvn.w	r3, #11
 8005514:	e055      	b.n	80055c2 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8005516:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005518:	6859      	ldr	r1, [r3, #4]
 800551a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800551c:	4613      	mov	r3, r2
 800551e:	005b      	lsls	r3, r3, #1
 8005520:	4413      	add	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	3348      	adds	r3, #72	@ 0x48
 8005526:	443b      	add	r3, r7
 8005528:	3b3c      	subs	r3, #60	@ 0x3c
 800552a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800552c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800552e:	895b      	ldrh	r3, [r3, #10]
 8005530:	4619      	mov	r1, r3
 8005532:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005534:	4613      	mov	r3, r2
 8005536:	005b      	lsls	r3, r3, #1
 8005538:	4413      	add	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	3348      	adds	r3, #72	@ 0x48
 800553e:	443b      	add	r3, r7
 8005540:	3b38      	subs	r3, #56	@ 0x38
 8005542:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005544:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005546:	2b00      	cmp	r3, #0
 8005548:	d011      	beq.n	800556e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800554a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800554c:	1e5a      	subs	r2, r3, #1
 800554e:	f107 000c 	add.w	r0, r7, #12
 8005552:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005554:	460b      	mov	r3, r1
 8005556:	005b      	lsls	r3, r3, #1
 8005558:	440b      	add	r3, r1
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	18c1      	adds	r1, r0, r3
 800555e:	4613      	mov	r3, r2
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	4413      	add	r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	3348      	adds	r3, #72	@ 0x48
 8005568:	443b      	add	r3, r7
 800556a:	3b34      	subs	r3, #52	@ 0x34
 800556c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800556e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d109      	bne.n	800558a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005576:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005578:	4613      	mov	r3, r2
 800557a:	005b      	lsls	r3, r3, #1
 800557c:	4413      	add	r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	3348      	adds	r3, #72	@ 0x48
 8005582:	443b      	add	r3, r7
 8005584:	3b34      	subs	r3, #52	@ 0x34
 8005586:	2200      	movs	r2, #0
 8005588:	601a      	str	r2, [r3, #0]
    }

    i++;
 800558a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800558c:	3301      	adds	r3, #1
 800558e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8005590:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	643b      	str	r3, [r7, #64]	@ 0x40
 8005596:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1b6      	bne.n	800550a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	891b      	ldrh	r3, [r3, #8]
 80055a0:	461a      	mov	r2, r3
 80055a2:	4b0a      	ldr	r3, [pc, #40]	@ (80055cc <low_level_output+0xfc>)
 80055a4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80055a6:	4a09      	ldr	r2, [pc, #36]	@ (80055cc <low_level_output+0xfc>)
 80055a8:	f107 030c 	add.w	r3, r7, #12
 80055ac:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80055ae:	4a07      	ldr	r2, [pc, #28]	@ (80055cc <low_level_output+0xfc>)
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80055b4:	2214      	movs	r2, #20
 80055b6:	4905      	ldr	r1, [pc, #20]	@ (80055cc <low_level_output+0xfc>)
 80055b8:	4805      	ldr	r0, [pc, #20]	@ (80055d0 <low_level_output+0x100>)
 80055ba:	f7fc f9d1 	bl	8001960 <HAL_ETH_Transmit>

  return errval;
 80055be:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3748      	adds	r7, #72	@ 0x48
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	20005208 	.word	0x20005208
 80055d0:	20005158 	.word	0x20005158

080055d4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80055dc:	2300      	movs	r3, #0
 80055de:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80055e0:	4b07      	ldr	r3, [pc, #28]	@ (8005600 <low_level_input+0x2c>)
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d105      	bne.n	80055f4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80055e8:	f107 030c 	add.w	r3, r7, #12
 80055ec:	4619      	mov	r1, r3
 80055ee:	4805      	ldr	r0, [pc, #20]	@ (8005604 <low_level_input+0x30>)
 80055f0:	f7fc fa4a 	bl	8001a88 <HAL_ETH_ReadData>
  }

  return p;
 80055f4:	68fb      	ldr	r3, [r7, #12]
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	20005154 	.word	0x20005154
 8005604:	20005158 	.word	0x20005158

08005608 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005610:	2300      	movs	r3, #0
 8005612:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f7ff ffdd 	bl	80055d4 <low_level_input>
 800561a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00a      	beq.n	8005638 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	6879      	ldr	r1, [r7, #4]
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	4798      	blx	r3
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d002      	beq.n	8005638 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f001 fdba 	bl	80071ac <pbuf_free>
      }
    }
  } while(p!=NULL);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1ea      	bne.n	8005614 <ethernetif_input+0xc>
}
 800563e:	bf00      	nop
 8005640:	bf00      	nop
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d106      	bne.n	8005664 <ethernetif_init+0x1c>
 8005656:	4b0e      	ldr	r3, [pc, #56]	@ (8005690 <ethernetif_init+0x48>)
 8005658:	f240 127b 	movw	r2, #379	@ 0x17b
 800565c:	490d      	ldr	r1, [pc, #52]	@ (8005694 <ethernetif_init+0x4c>)
 800565e:	480e      	ldr	r0, [pc, #56]	@ (8005698 <ethernetif_init+0x50>)
 8005660:	f00a fc24 	bl	800feac <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2273      	movs	r2, #115	@ 0x73
 8005668:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2274      	movs	r2, #116	@ 0x74
 8005670:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a09      	ldr	r2, [pc, #36]	@ (800569c <ethernetif_init+0x54>)
 8005678:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a08      	ldr	r2, [pc, #32]	@ (80056a0 <ethernetif_init+0x58>)
 800567e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f7ff fe8d 	bl	80053a0 <low_level_init>

  return ERR_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	08011198 	.word	0x08011198
 8005694:	080111b4 	.word	0x080111b4
 8005698:	080111c4 	.word	0x080111c4
 800569c:	0800deb9 	.word	0x0800deb9
 80056a0:	080054d1 	.word	0x080054d1

080056a4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80056b0:	68f9      	ldr	r1, [r7, #12]
 80056b2:	4807      	ldr	r0, [pc, #28]	@ (80056d0 <pbuf_free_custom+0x2c>)
 80056b4:	f000 fee0 	bl	8006478 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80056b8:	4b06      	ldr	r3, [pc, #24]	@ (80056d4 <pbuf_free_custom+0x30>)
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d102      	bne.n	80056c6 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80056c0:	4b04      	ldr	r3, [pc, #16]	@ (80056d4 <pbuf_free_custom+0x30>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	701a      	strb	r2, [r3, #0]
  }
}
 80056c6:	bf00      	nop
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	08013b90 	.word	0x08013b90
 80056d4:	20005154 	.word	0x20005154

080056d8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80056dc:	f7fb fef6 	bl	80014cc <HAL_GetTick>
 80056e0:	4603      	mov	r3, r0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	bd80      	pop	{r7, pc}
	...

080056e8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b08e      	sub	sp, #56	@ 0x38
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80056f4:	2200      	movs	r2, #0
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	605a      	str	r2, [r3, #4]
 80056fa:	609a      	str	r2, [r3, #8]
 80056fc:	60da      	str	r2, [r3, #12]
 80056fe:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a4e      	ldr	r2, [pc, #312]	@ (8005840 <HAL_ETH_MspInit+0x158>)
 8005706:	4293      	cmp	r3, r2
 8005708:	f040 8096 	bne.w	8005838 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800570c:	4b4d      	ldr	r3, [pc, #308]	@ (8005844 <HAL_ETH_MspInit+0x15c>)
 800570e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005710:	4a4c      	ldr	r2, [pc, #304]	@ (8005844 <HAL_ETH_MspInit+0x15c>)
 8005712:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005716:	6313      	str	r3, [r2, #48]	@ 0x30
 8005718:	4b4a      	ldr	r3, [pc, #296]	@ (8005844 <HAL_ETH_MspInit+0x15c>)
 800571a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800571c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005720:	623b      	str	r3, [r7, #32]
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	4b47      	ldr	r3, [pc, #284]	@ (8005844 <HAL_ETH_MspInit+0x15c>)
 8005726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005728:	4a46      	ldr	r2, [pc, #280]	@ (8005844 <HAL_ETH_MspInit+0x15c>)
 800572a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800572e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005730:	4b44      	ldr	r3, [pc, #272]	@ (8005844 <HAL_ETH_MspInit+0x15c>)
 8005732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005734:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005738:	61fb      	str	r3, [r7, #28]
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	4b41      	ldr	r3, [pc, #260]	@ (8005844 <HAL_ETH_MspInit+0x15c>)
 800573e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005740:	4a40      	ldr	r2, [pc, #256]	@ (8005844 <HAL_ETH_MspInit+0x15c>)
 8005742:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005746:	6313      	str	r3, [r2, #48]	@ 0x30
 8005748:	4b3e      	ldr	r3, [pc, #248]	@ (8005844 <HAL_ETH_MspInit+0x15c>)
 800574a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800574c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005750:	61bb      	str	r3, [r7, #24]
 8005752:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005754:	4b3b      	ldr	r3, [pc, #236]	@ (8005844 <HAL_ETH_MspInit+0x15c>)
 8005756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005758:	4a3a      	ldr	r2, [pc, #232]	@ (8005844 <HAL_ETH_MspInit+0x15c>)
 800575a:	f043 0304 	orr.w	r3, r3, #4
 800575e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005760:	4b38      	ldr	r3, [pc, #224]	@ (8005844 <HAL_ETH_MspInit+0x15c>)
 8005762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005764:	f003 0304 	and.w	r3, r3, #4
 8005768:	617b      	str	r3, [r7, #20]
 800576a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800576c:	4b35      	ldr	r3, [pc, #212]	@ (8005844 <HAL_ETH_MspInit+0x15c>)
 800576e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005770:	4a34      	ldr	r2, [pc, #208]	@ (8005844 <HAL_ETH_MspInit+0x15c>)
 8005772:	f043 0301 	orr.w	r3, r3, #1
 8005776:	6313      	str	r3, [r2, #48]	@ 0x30
 8005778:	4b32      	ldr	r3, [pc, #200]	@ (8005844 <HAL_ETH_MspInit+0x15c>)
 800577a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	613b      	str	r3, [r7, #16]
 8005782:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005784:	4b2f      	ldr	r3, [pc, #188]	@ (8005844 <HAL_ETH_MspInit+0x15c>)
 8005786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005788:	4a2e      	ldr	r2, [pc, #184]	@ (8005844 <HAL_ETH_MspInit+0x15c>)
 800578a:	f043 0302 	orr.w	r3, r3, #2
 800578e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005790:	4b2c      	ldr	r3, [pc, #176]	@ (8005844 <HAL_ETH_MspInit+0x15c>)
 8005792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	60fb      	str	r3, [r7, #12]
 800579a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800579c:	4b29      	ldr	r3, [pc, #164]	@ (8005844 <HAL_ETH_MspInit+0x15c>)
 800579e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a0:	4a28      	ldr	r2, [pc, #160]	@ (8005844 <HAL_ETH_MspInit+0x15c>)
 80057a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80057a8:	4b26      	ldr	r3, [pc, #152]	@ (8005844 <HAL_ETH_MspInit+0x15c>)
 80057aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057b0:	60bb      	str	r3, [r7, #8]
 80057b2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80057b4:	2332      	movs	r3, #50	@ 0x32
 80057b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057b8:	2302      	movs	r3, #2
 80057ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057bc:	2300      	movs	r3, #0
 80057be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057c0:	2303      	movs	r3, #3
 80057c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80057c4:	230b      	movs	r3, #11
 80057c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80057cc:	4619      	mov	r1, r3
 80057ce:	481e      	ldr	r0, [pc, #120]	@ (8005848 <HAL_ETH_MspInit+0x160>)
 80057d0:	f7fd f884 	bl	80028dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80057d4:	2386      	movs	r3, #134	@ 0x86
 80057d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057d8:	2302      	movs	r3, #2
 80057da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057dc:	2300      	movs	r3, #0
 80057de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057e0:	2303      	movs	r3, #3
 80057e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80057e4:	230b      	movs	r3, #11
 80057e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80057ec:	4619      	mov	r1, r3
 80057ee:	4817      	ldr	r0, [pc, #92]	@ (800584c <HAL_ETH_MspInit+0x164>)
 80057f0:	f7fd f874 	bl	80028dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80057f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80057f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057fa:	2302      	movs	r3, #2
 80057fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057fe:	2300      	movs	r3, #0
 8005800:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005802:	2303      	movs	r3, #3
 8005804:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005806:	230b      	movs	r3, #11
 8005808:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800580a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800580e:	4619      	mov	r1, r3
 8005810:	480f      	ldr	r0, [pc, #60]	@ (8005850 <HAL_ETH_MspInit+0x168>)
 8005812:	f7fd f863 	bl	80028dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005816:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800581a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800581c:	2302      	movs	r3, #2
 800581e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005820:	2300      	movs	r3, #0
 8005822:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005824:	2303      	movs	r3, #3
 8005826:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005828:	230b      	movs	r3, #11
 800582a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800582c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005830:	4619      	mov	r1, r3
 8005832:	4808      	ldr	r0, [pc, #32]	@ (8005854 <HAL_ETH_MspInit+0x16c>)
 8005834:	f7fd f852 	bl	80028dc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005838:	bf00      	nop
 800583a:	3738      	adds	r7, #56	@ 0x38
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	40028000 	.word	0x40028000
 8005844:	40023800 	.word	0x40023800
 8005848:	40020800 	.word	0x40020800
 800584c:	40020000 	.word	0x40020000
 8005850:	40020400 	.word	0x40020400
 8005854:	40021800 	.word	0x40021800

08005858 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800585c:	4802      	ldr	r0, [pc, #8]	@ (8005868 <ETH_PHY_IO_Init+0x10>)
 800585e:	f7fc fbe3 	bl	8002028 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	bd80      	pop	{r7, pc}
 8005868:	20005158 	.word	0x20005158

0800586c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800586c:	b480      	push	{r7}
 800586e:	af00      	add	r7, sp, #0
  return 0;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	68f9      	ldr	r1, [r7, #12]
 800588e:	4807      	ldr	r0, [pc, #28]	@ (80058ac <ETH_PHY_IO_ReadReg+0x30>)
 8005890:	f7fc fa32 	bl	8001cf8 <HAL_ETH_ReadPHYRegister>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d002      	beq.n	80058a0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800589a:	f04f 33ff 	mov.w	r3, #4294967295
 800589e:	e000      	b.n	80058a2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	20005158 	.word	0x20005158

080058b0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	68f9      	ldr	r1, [r7, #12]
 80058c2:	4807      	ldr	r0, [pc, #28]	@ (80058e0 <ETH_PHY_IO_WriteReg+0x30>)
 80058c4:	f7fc fa63 	bl	8001d8e <HAL_ETH_WritePHYRegister>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d002      	beq.n	80058d4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80058ce:	f04f 33ff 	mov.w	r3, #4294967295
 80058d2:	e000      	b.n	80058d6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	20005158 	.word	0x20005158

080058e4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80058e8:	f7fb fdf0 	bl	80014cc <HAL_GetTick>
 80058ec:	4603      	mov	r3, r0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	bd80      	pop	{r7, pc}
	...

080058f4 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b0a0      	sub	sp, #128	@ 0x80
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80058fc:	f107 030c 	add.w	r3, r7, #12
 8005900:	2264      	movs	r2, #100	@ 0x64
 8005902:	2100      	movs	r1, #0
 8005904:	4618      	mov	r0, r3
 8005906:	f00a fb70 	bl	800ffea <memset>
  int32_t PHYLinkState = 0;
 800590a:	2300      	movs	r3, #0
 800590c:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800590e:	2300      	movs	r3, #0
 8005910:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005912:	2300      	movs	r3, #0
 8005914:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005916:	2300      	movs	r3, #0
 8005918:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800591a:	483a      	ldr	r0, [pc, #232]	@ (8005a04 <ethernet_link_check_state+0x110>)
 800591c:	f7fb fcfd 	bl	800131a <LAN8742_GetLinkState>
 8005920:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005928:	089b      	lsrs	r3, r3, #2
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00c      	beq.n	800594e <ethernet_link_check_state+0x5a>
 8005934:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005936:	2b01      	cmp	r3, #1
 8005938:	dc09      	bgt.n	800594e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800593a:	4833      	ldr	r0, [pc, #204]	@ (8005a08 <ethernet_link_check_state+0x114>)
 800593c:	f7fb ffb7 	bl	80018ae <HAL_ETH_Stop>
    netif_set_down(netif);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f001 f81d 	bl	8006980 <netif_set_down>
    netif_set_link_down(netif);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f001 f880 	bl	8006a4c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800594c:	e055      	b.n	80059fa <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005954:	f003 0304 	and.w	r3, r3, #4
 8005958:	2b00      	cmp	r3, #0
 800595a:	d14e      	bne.n	80059fa <ethernet_link_check_state+0x106>
 800595c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800595e:	2b01      	cmp	r3, #1
 8005960:	dd4b      	ble.n	80059fa <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8005962:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005964:	3b02      	subs	r3, #2
 8005966:	2b03      	cmp	r3, #3
 8005968:	d82a      	bhi.n	80059c0 <ethernet_link_check_state+0xcc>
 800596a:	a201      	add	r2, pc, #4	@ (adr r2, 8005970 <ethernet_link_check_state+0x7c>)
 800596c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005970:	08005981 	.word	0x08005981
 8005974:	08005993 	.word	0x08005993
 8005978:	080059a3 	.word	0x080059a3
 800597c:	080059b3 	.word	0x080059b3
      duplex = ETH_FULLDUPLEX_MODE;
 8005980:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005984:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005986:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800598a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800598c:	2301      	movs	r3, #1
 800598e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005990:	e017      	b.n	80059c2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8005992:	2300      	movs	r3, #0
 8005994:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005996:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800599a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800599c:	2301      	movs	r3, #1
 800599e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80059a0:	e00f      	b.n	80059c2 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80059a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80059a6:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80059a8:	2300      	movs	r3, #0
 80059aa:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80059ac:	2301      	movs	r3, #1
 80059ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80059b0:	e007      	b.n	80059c2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80059b2:	2300      	movs	r3, #0
 80059b4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80059b6:	2300      	movs	r3, #0
 80059b8:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80059ba:	2301      	movs	r3, #1
 80059bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80059be:	e000      	b.n	80059c2 <ethernet_link_check_state+0xce>
      break;
 80059c0:	bf00      	nop
    if(linkchanged)
 80059c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d018      	beq.n	80059fa <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80059c8:	f107 030c 	add.w	r3, r7, #12
 80059cc:	4619      	mov	r1, r3
 80059ce:	480e      	ldr	r0, [pc, #56]	@ (8005a08 <ethernet_link_check_state+0x114>)
 80059d0:	f7fc fa26 	bl	8001e20 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80059d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059d6:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 80059d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059da:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80059dc:	f107 030c 	add.w	r3, r7, #12
 80059e0:	4619      	mov	r1, r3
 80059e2:	4809      	ldr	r0, [pc, #36]	@ (8005a08 <ethernet_link_check_state+0x114>)
 80059e4:	f7fc fb06 	bl	8001ff4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80059e8:	4807      	ldr	r0, [pc, #28]	@ (8005a08 <ethernet_link_check_state+0x114>)
 80059ea:	f7fb ff01 	bl	80017f0 <HAL_ETH_Start>
      netif_set_up(netif);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 ff5a 	bl	80068a8 <netif_set_up>
      netif_set_link_up(netif);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 fff5 	bl	80069e4 <netif_set_link_up>
}
 80059fa:	bf00      	nop
 80059fc:	3780      	adds	r7, #128	@ 0x80
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	20005240 	.word	0x20005240
 8005a08:	20005158 	.word	0x20005158

08005a0c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af02      	add	r7, sp, #8
 8005a12:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005a14:	4812      	ldr	r0, [pc, #72]	@ (8005a60 <HAL_ETH_RxAllocateCallback+0x54>)
 8005a16:	f000 fcc1 	bl	800639c <memp_malloc_pool>
 8005a1a:	60f8      	str	r0, [r7, #12]
  if (p)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d014      	beq.n	8005a4c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f103 0220 	add.w	r2, r3, #32
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4a0d      	ldr	r2, [pc, #52]	@ (8005a64 <HAL_ETH_RxAllocateCallback+0x58>)
 8005a30:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005a3a:	9201      	str	r2, [sp, #4]
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2241      	movs	r2, #65	@ 0x41
 8005a42:	2100      	movs	r1, #0
 8005a44:	2000      	movs	r0, #0
 8005a46:	f001 f9f7 	bl	8006e38 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005a4a:	e005      	b.n	8005a58 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005a4c:	4b06      	ldr	r3, [pc, #24]	@ (8005a68 <HAL_ETH_RxAllocateCallback+0x5c>)
 8005a4e:	2201      	movs	r2, #1
 8005a50:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	601a      	str	r2, [r3, #0]
}
 8005a58:	bf00      	nop
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	08013b90 	.word	0x08013b90
 8005a64:	080056a5 	.word	0x080056a5
 8005a68:	20005154 	.word	0x20005154

08005a6c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b088      	sub	sp, #32
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
 8005a78:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8005a82:	2300      	movs	r3, #0
 8005a84:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	3b20      	subs	r3, #32
 8005a8a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	2200      	movs	r2, #0
 8005a96:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	887a      	ldrh	r2, [r7, #2]
 8005a9c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d103      	bne.n	8005aae <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	69fa      	ldr	r2, [r7, #28]
 8005aaa:	601a      	str	r2, [r3, #0]
 8005aac:	e003      	b.n	8005ab6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	69fa      	ldr	r2, [r7, #28]
 8005ab4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	69fa      	ldr	r2, [r7, #28]
 8005aba:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	61fb      	str	r3, [r7, #28]
 8005ac2:	e009      	b.n	8005ad8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	891a      	ldrh	r2, [r3, #8]
 8005ac8:	887b      	ldrh	r3, [r7, #2]
 8005aca:	4413      	add	r3, r2
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	61fb      	str	r3, [r7, #28]
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1f2      	bne.n	8005ac4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8005ade:	887b      	ldrh	r3, [r7, #2]
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7ff fc30 	bl	8005348 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005ae8:	bf00      	nop
 8005aea:	3720      	adds	r7, #32
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	4603      	mov	r3, r0
 8005af8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8005afa:	88fb      	ldrh	r3, [r7, #6]
 8005afc:	021b      	lsls	r3, r3, #8
 8005afe:	b21a      	sxth	r2, r3
 8005b00:	88fb      	ldrh	r3, [r7, #6]
 8005b02:	0a1b      	lsrs	r3, r3, #8
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	b21b      	sxth	r3, r3
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	b21b      	sxth	r3, r3
 8005b0c:	b29b      	uxth	r3, r3
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b083      	sub	sp, #12
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	061a      	lsls	r2, r3, #24
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	021b      	lsls	r3, r3, #8
 8005b2a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	0a1b      	lsrs	r3, r3, #8
 8005b34:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	0e1b      	lsrs	r3, r3, #24
 8005b3e:	4313      	orrs	r3, r2
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8005b52:	2300      	movs	r3, #0
 8005b54:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005b56:	f000 f8d5 	bl	8005d04 <mem_init>
  memp_init();
 8005b5a:	f000 fbdb 	bl	8006314 <memp_init>
  pbuf_init();
  netif_init();
 8005b5e:	f000 fcd9 	bl	8006514 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005b62:	f007 f8f5 	bl	800cd50 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005b66:	f001 fe51 	bl	800780c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8005b6a:	f007 f867 	bl	800cc3c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8005b6e:	bf00      	nop
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
	...

08005b78 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	4603      	mov	r3, r0
 8005b80:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8005b82:	4b05      	ldr	r3, [pc, #20]	@ (8005b98 <ptr_to_mem+0x20>)
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	88fb      	ldrh	r3, [r7, #6]
 8005b88:	4413      	add	r3, r2
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	200058cc 	.word	0x200058cc

08005b9c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005ba4:	4b05      	ldr	r3, [pc, #20]	@ (8005bbc <mem_to_ptr+0x20>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	b29b      	uxth	r3, r3
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	200058cc 	.word	0x200058cc

08005bc0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8005bc0:	b590      	push	{r4, r7, lr}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005bc8:	4b45      	ldr	r3, [pc, #276]	@ (8005ce0 <plug_holes+0x120>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d206      	bcs.n	8005be0 <plug_holes+0x20>
 8005bd2:	4b44      	ldr	r3, [pc, #272]	@ (8005ce4 <plug_holes+0x124>)
 8005bd4:	f240 12df 	movw	r2, #479	@ 0x1df
 8005bd8:	4943      	ldr	r1, [pc, #268]	@ (8005ce8 <plug_holes+0x128>)
 8005bda:	4844      	ldr	r0, [pc, #272]	@ (8005cec <plug_holes+0x12c>)
 8005bdc:	f00a f966 	bl	800feac <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005be0:	4b43      	ldr	r3, [pc, #268]	@ (8005cf0 <plug_holes+0x130>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d306      	bcc.n	8005bf8 <plug_holes+0x38>
 8005bea:	4b3e      	ldr	r3, [pc, #248]	@ (8005ce4 <plug_holes+0x124>)
 8005bec:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8005bf0:	4940      	ldr	r1, [pc, #256]	@ (8005cf4 <plug_holes+0x134>)
 8005bf2:	483e      	ldr	r0, [pc, #248]	@ (8005cec <plug_holes+0x12c>)
 8005bf4:	f00a f95a 	bl	800feac <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	791b      	ldrb	r3, [r3, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d006      	beq.n	8005c0e <plug_holes+0x4e>
 8005c00:	4b38      	ldr	r3, [pc, #224]	@ (8005ce4 <plug_holes+0x124>)
 8005c02:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8005c06:	493c      	ldr	r1, [pc, #240]	@ (8005cf8 <plug_holes+0x138>)
 8005c08:	4838      	ldr	r0, [pc, #224]	@ (8005cec <plug_holes+0x12c>)
 8005c0a:	f00a f94f 	bl	800feac <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005c16:	d906      	bls.n	8005c26 <plug_holes+0x66>
 8005c18:	4b32      	ldr	r3, [pc, #200]	@ (8005ce4 <plug_holes+0x124>)
 8005c1a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8005c1e:	4937      	ldr	r1, [pc, #220]	@ (8005cfc <plug_holes+0x13c>)
 8005c20:	4832      	ldr	r0, [pc, #200]	@ (8005cec <plug_holes+0x12c>)
 8005c22:	f00a f943 	bl	800feac <iprintf>

  nmem = ptr_to_mem(mem->next);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7ff ffa4 	bl	8005b78 <ptr_to_mem>
 8005c30:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d024      	beq.n	8005c84 <plug_holes+0xc4>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	791b      	ldrb	r3, [r3, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d120      	bne.n	8005c84 <plug_holes+0xc4>
 8005c42:	4b2b      	ldr	r3, [pc, #172]	@ (8005cf0 <plug_holes+0x130>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d01b      	beq.n	8005c84 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005c4c:	4b2c      	ldr	r3, [pc, #176]	@ (8005d00 <plug_holes+0x140>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d102      	bne.n	8005c5c <plug_holes+0x9c>
      lfree = mem;
 8005c56:	4a2a      	ldr	r2, [pc, #168]	@ (8005d00 <plug_holes+0x140>)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	881a      	ldrh	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005c6c:	d00a      	beq.n	8005c84 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7ff ff80 	bl	8005b78 <ptr_to_mem>
 8005c78:	4604      	mov	r4, r0
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7ff ff8e 	bl	8005b9c <mem_to_ptr>
 8005c80:	4603      	mov	r3, r0
 8005c82:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	885b      	ldrh	r3, [r3, #2]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7ff ff75 	bl	8005b78 <ptr_to_mem>
 8005c8e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d01f      	beq.n	8005cd8 <plug_holes+0x118>
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	791b      	ldrb	r3, [r3, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d11b      	bne.n	8005cd8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005ca0:	4b17      	ldr	r3, [pc, #92]	@ (8005d00 <plug_holes+0x140>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d102      	bne.n	8005cb0 <plug_holes+0xf0>
      lfree = pmem;
 8005caa:	4a15      	ldr	r2, [pc, #84]	@ (8005d00 <plug_holes+0x140>)
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	881a      	ldrh	r2, [r3, #0]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005cc0:	d00a      	beq.n	8005cd8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7ff ff56 	bl	8005b78 <ptr_to_mem>
 8005ccc:	4604      	mov	r4, r0
 8005cce:	68b8      	ldr	r0, [r7, #8]
 8005cd0:	f7ff ff64 	bl	8005b9c <mem_to_ptr>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005cd8:	bf00      	nop
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd90      	pop	{r4, r7, pc}
 8005ce0:	200058cc 	.word	0x200058cc
 8005ce4:	080111ec 	.word	0x080111ec
 8005ce8:	0801121c 	.word	0x0801121c
 8005cec:	08011234 	.word	0x08011234
 8005cf0:	200058d0 	.word	0x200058d0
 8005cf4:	0801125c 	.word	0x0801125c
 8005cf8:	08011278 	.word	0x08011278
 8005cfc:	08011294 	.word	0x08011294
 8005d00:	200058d4 	.word	0x200058d4

08005d04 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005d0a:	4b18      	ldr	r3, [pc, #96]	@ (8005d6c <mem_init+0x68>)
 8005d0c:	3303      	adds	r3, #3
 8005d0e:	f023 0303 	bic.w	r3, r3, #3
 8005d12:	461a      	mov	r2, r3
 8005d14:	4b16      	ldr	r3, [pc, #88]	@ (8005d70 <mem_init+0x6c>)
 8005d16:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005d18:	4b15      	ldr	r3, [pc, #84]	@ (8005d70 <mem_init+0x6c>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8005d24:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8005d32:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8005d36:	f7ff ff1f 	bl	8005b78 <ptr_to_mem>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	4a0d      	ldr	r2, [pc, #52]	@ (8005d74 <mem_init+0x70>)
 8005d3e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8005d40:	4b0c      	ldr	r3, [pc, #48]	@ (8005d74 <mem_init+0x70>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2201      	movs	r2, #1
 8005d46:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005d48:	4b0a      	ldr	r3, [pc, #40]	@ (8005d74 <mem_init+0x70>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8005d50:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005d52:	4b08      	ldr	r3, [pc, #32]	@ (8005d74 <mem_init+0x70>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8005d5a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005d5c:	4b04      	ldr	r3, [pc, #16]	@ (8005d70 <mem_init+0x6c>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a05      	ldr	r2, [pc, #20]	@ (8005d78 <mem_init+0x74>)
 8005d62:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005d64:	bf00      	nop
 8005d66:	3708      	adds	r7, #8
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	20005278 	.word	0x20005278
 8005d70:	200058cc 	.word	0x200058cc
 8005d74:	200058d0 	.word	0x200058d0
 8005d78:	200058d4 	.word	0x200058d4

08005d7c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f7ff ff09 	bl	8005b9c <mem_to_ptr>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	881b      	ldrh	r3, [r3, #0]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7ff fef0 	bl	8005b78 <ptr_to_mem>
 8005d98:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	885b      	ldrh	r3, [r3, #2]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7ff feea 	bl	8005b78 <ptr_to_mem>
 8005da4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	881b      	ldrh	r3, [r3, #0]
 8005daa:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005dae:	d818      	bhi.n	8005de2 <mem_link_valid+0x66>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	885b      	ldrh	r3, [r3, #2]
 8005db4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005db8:	d813      	bhi.n	8005de2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005dbe:	8afa      	ldrh	r2, [r7, #22]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d004      	beq.n	8005dce <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	881b      	ldrh	r3, [r3, #0]
 8005dc8:	8afa      	ldrh	r2, [r7, #22]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d109      	bne.n	8005de2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005dce:	4b08      	ldr	r3, [pc, #32]	@ (8005df0 <mem_link_valid+0x74>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d006      	beq.n	8005de6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	885b      	ldrh	r3, [r3, #2]
 8005ddc:	8afa      	ldrh	r2, [r7, #22]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d001      	beq.n	8005de6 <mem_link_valid+0x6a>
    return 0;
 8005de2:	2300      	movs	r3, #0
 8005de4:	e000      	b.n	8005de8 <mem_link_valid+0x6c>
  }
  return 1;
 8005de6:	2301      	movs	r3, #1
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3718      	adds	r7, #24
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	200058d0 	.word	0x200058d0

08005df4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d04c      	beq.n	8005e9c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f003 0303 	and.w	r3, r3, #3
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d007      	beq.n	8005e1c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005e0c:	4b25      	ldr	r3, [pc, #148]	@ (8005ea4 <mem_free+0xb0>)
 8005e0e:	f240 2273 	movw	r2, #627	@ 0x273
 8005e12:	4925      	ldr	r1, [pc, #148]	@ (8005ea8 <mem_free+0xb4>)
 8005e14:	4825      	ldr	r0, [pc, #148]	@ (8005eac <mem_free+0xb8>)
 8005e16:	f00a f849 	bl	800feac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005e1a:	e040      	b.n	8005e9e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3b08      	subs	r3, #8
 8005e20:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005e22:	4b23      	ldr	r3, [pc, #140]	@ (8005eb0 <mem_free+0xbc>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d306      	bcc.n	8005e3a <mem_free+0x46>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f103 020c 	add.w	r2, r3, #12
 8005e32:	4b20      	ldr	r3, [pc, #128]	@ (8005eb4 <mem_free+0xc0>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d907      	bls.n	8005e4a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8005e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8005ea4 <mem_free+0xb0>)
 8005e3c:	f240 227f 	movw	r2, #639	@ 0x27f
 8005e40:	491d      	ldr	r1, [pc, #116]	@ (8005eb8 <mem_free+0xc4>)
 8005e42:	481a      	ldr	r0, [pc, #104]	@ (8005eac <mem_free+0xb8>)
 8005e44:	f00a f832 	bl	800feac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005e48:	e029      	b.n	8005e9e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	791b      	ldrb	r3, [r3, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d107      	bne.n	8005e62 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8005e52:	4b14      	ldr	r3, [pc, #80]	@ (8005ea4 <mem_free+0xb0>)
 8005e54:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8005e58:	4918      	ldr	r1, [pc, #96]	@ (8005ebc <mem_free+0xc8>)
 8005e5a:	4814      	ldr	r0, [pc, #80]	@ (8005eac <mem_free+0xb8>)
 8005e5c:	f00a f826 	bl	800feac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005e60:	e01d      	b.n	8005e9e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f7ff ff8a 	bl	8005d7c <mem_link_valid>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d107      	bne.n	8005e7e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8005e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ea4 <mem_free+0xb0>)
 8005e70:	f240 2295 	movw	r2, #661	@ 0x295
 8005e74:	4912      	ldr	r1, [pc, #72]	@ (8005ec0 <mem_free+0xcc>)
 8005e76:	480d      	ldr	r0, [pc, #52]	@ (8005eac <mem_free+0xb8>)
 8005e78:	f00a f818 	bl	800feac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005e7c:	e00f      	b.n	8005e9e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005e84:	4b0f      	ldr	r3, [pc, #60]	@ (8005ec4 <mem_free+0xd0>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d202      	bcs.n	8005e94 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005e8e:	4a0d      	ldr	r2, [pc, #52]	@ (8005ec4 <mem_free+0xd0>)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f7ff fe93 	bl	8005bc0 <plug_holes>
 8005e9a:	e000      	b.n	8005e9e <mem_free+0xaa>
    return;
 8005e9c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	080111ec 	.word	0x080111ec
 8005ea8:	080112c0 	.word	0x080112c0
 8005eac:	08011234 	.word	0x08011234
 8005eb0:	200058cc 	.word	0x200058cc
 8005eb4:	200058d0 	.word	0x200058d0
 8005eb8:	080112e4 	.word	0x080112e4
 8005ebc:	08011300 	.word	0x08011300
 8005ec0:	08011328 	.word	0x08011328
 8005ec4:	200058d4 	.word	0x200058d4

08005ec8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b088      	sub	sp, #32
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005ed4:	887b      	ldrh	r3, [r7, #2]
 8005ed6:	3303      	adds	r3, #3
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	f023 0303 	bic.w	r3, r3, #3
 8005ede:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005ee0:	8bfb      	ldrh	r3, [r7, #30]
 8005ee2:	2b0b      	cmp	r3, #11
 8005ee4:	d801      	bhi.n	8005eea <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005ee6:	230c      	movs	r3, #12
 8005ee8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005eea:	8bfb      	ldrh	r3, [r7, #30]
 8005eec:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005ef0:	d803      	bhi.n	8005efa <mem_trim+0x32>
 8005ef2:	8bfa      	ldrh	r2, [r7, #30]
 8005ef4:	887b      	ldrh	r3, [r7, #2]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d201      	bcs.n	8005efe <mem_trim+0x36>
    return NULL;
 8005efa:	2300      	movs	r3, #0
 8005efc:	e0cc      	b.n	8006098 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005efe:	4b68      	ldr	r3, [pc, #416]	@ (80060a0 <mem_trim+0x1d8>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d304      	bcc.n	8005f12 <mem_trim+0x4a>
 8005f08:	4b66      	ldr	r3, [pc, #408]	@ (80060a4 <mem_trim+0x1dc>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d306      	bcc.n	8005f20 <mem_trim+0x58>
 8005f12:	4b65      	ldr	r3, [pc, #404]	@ (80060a8 <mem_trim+0x1e0>)
 8005f14:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8005f18:	4964      	ldr	r1, [pc, #400]	@ (80060ac <mem_trim+0x1e4>)
 8005f1a:	4865      	ldr	r0, [pc, #404]	@ (80060b0 <mem_trim+0x1e8>)
 8005f1c:	f009 ffc6 	bl	800feac <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005f20:	4b5f      	ldr	r3, [pc, #380]	@ (80060a0 <mem_trim+0x1d8>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d304      	bcc.n	8005f34 <mem_trim+0x6c>
 8005f2a:	4b5e      	ldr	r3, [pc, #376]	@ (80060a4 <mem_trim+0x1dc>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d301      	bcc.n	8005f38 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	e0af      	b.n	8006098 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	3b08      	subs	r3, #8
 8005f3c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8005f3e:	69b8      	ldr	r0, [r7, #24]
 8005f40:	f7ff fe2c 	bl	8005b9c <mem_to_ptr>
 8005f44:	4603      	mov	r3, r0
 8005f46:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	881a      	ldrh	r2, [r3, #0]
 8005f4c:	8afb      	ldrh	r3, [r7, #22]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	3b08      	subs	r3, #8
 8005f54:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005f56:	8bfa      	ldrh	r2, [r7, #30]
 8005f58:	8abb      	ldrh	r3, [r7, #20]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d906      	bls.n	8005f6c <mem_trim+0xa4>
 8005f5e:	4b52      	ldr	r3, [pc, #328]	@ (80060a8 <mem_trim+0x1e0>)
 8005f60:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8005f64:	4953      	ldr	r1, [pc, #332]	@ (80060b4 <mem_trim+0x1ec>)
 8005f66:	4852      	ldr	r0, [pc, #328]	@ (80060b0 <mem_trim+0x1e8>)
 8005f68:	f009 ffa0 	bl	800feac <iprintf>
  if (newsize > size) {
 8005f6c:	8bfa      	ldrh	r2, [r7, #30]
 8005f6e:	8abb      	ldrh	r3, [r7, #20]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d901      	bls.n	8005f78 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005f74:	2300      	movs	r3, #0
 8005f76:	e08f      	b.n	8006098 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005f78:	8bfa      	ldrh	r2, [r7, #30]
 8005f7a:	8abb      	ldrh	r3, [r7, #20]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d101      	bne.n	8005f84 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	e089      	b.n	8006098 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	881b      	ldrh	r3, [r3, #0]
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7ff fdf5 	bl	8005b78 <ptr_to_mem>
 8005f8e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	791b      	ldrb	r3, [r3, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d13f      	bne.n	8006018 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005fa0:	d106      	bne.n	8005fb0 <mem_trim+0xe8>
 8005fa2:	4b41      	ldr	r3, [pc, #260]	@ (80060a8 <mem_trim+0x1e0>)
 8005fa4:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8005fa8:	4943      	ldr	r1, [pc, #268]	@ (80060b8 <mem_trim+0x1f0>)
 8005faa:	4841      	ldr	r0, [pc, #260]	@ (80060b0 <mem_trim+0x1e8>)
 8005fac:	f009 ff7e 	bl	800feac <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	881b      	ldrh	r3, [r3, #0]
 8005fb4:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005fb6:	8afa      	ldrh	r2, [r7, #22]
 8005fb8:	8bfb      	ldrh	r3, [r7, #30]
 8005fba:	4413      	add	r3, r2
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	3308      	adds	r3, #8
 8005fc0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005fc2:	4b3e      	ldr	r3, [pc, #248]	@ (80060bc <mem_trim+0x1f4>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d106      	bne.n	8005fda <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005fcc:	89fb      	ldrh	r3, [r7, #14]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7ff fdd2 	bl	8005b78 <ptr_to_mem>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	4a39      	ldr	r2, [pc, #228]	@ (80060bc <mem_trim+0x1f4>)
 8005fd8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005fda:	89fb      	ldrh	r3, [r7, #14]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7ff fdcb 	bl	8005b78 <ptr_to_mem>
 8005fe2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	89ba      	ldrh	r2, [r7, #12]
 8005fee:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	8afa      	ldrh	r2, [r7, #22]
 8005ff4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	89fa      	ldrh	r2, [r7, #14]
 8005ffa:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	881b      	ldrh	r3, [r3, #0]
 8006000:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006004:	d047      	beq.n	8006096 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	4618      	mov	r0, r3
 800600c:	f7ff fdb4 	bl	8005b78 <ptr_to_mem>
 8006010:	4602      	mov	r2, r0
 8006012:	89fb      	ldrh	r3, [r7, #14]
 8006014:	8053      	strh	r3, [r2, #2]
 8006016:	e03e      	b.n	8006096 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006018:	8bfb      	ldrh	r3, [r7, #30]
 800601a:	f103 0214 	add.w	r2, r3, #20
 800601e:	8abb      	ldrh	r3, [r7, #20]
 8006020:	429a      	cmp	r2, r3
 8006022:	d838      	bhi.n	8006096 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006024:	8afa      	ldrh	r2, [r7, #22]
 8006026:	8bfb      	ldrh	r3, [r7, #30]
 8006028:	4413      	add	r3, r2
 800602a:	b29b      	uxth	r3, r3
 800602c:	3308      	adds	r3, #8
 800602e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	881b      	ldrh	r3, [r3, #0]
 8006034:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006038:	d106      	bne.n	8006048 <mem_trim+0x180>
 800603a:	4b1b      	ldr	r3, [pc, #108]	@ (80060a8 <mem_trim+0x1e0>)
 800603c:	f240 3216 	movw	r2, #790	@ 0x316
 8006040:	491d      	ldr	r1, [pc, #116]	@ (80060b8 <mem_trim+0x1f0>)
 8006042:	481b      	ldr	r0, [pc, #108]	@ (80060b0 <mem_trim+0x1e8>)
 8006044:	f009 ff32 	bl	800feac <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8006048:	89fb      	ldrh	r3, [r7, #14]
 800604a:	4618      	mov	r0, r3
 800604c:	f7ff fd94 	bl	8005b78 <ptr_to_mem>
 8006050:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8006052:	4b1a      	ldr	r3, [pc, #104]	@ (80060bc <mem_trim+0x1f4>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	429a      	cmp	r2, r3
 800605a:	d202      	bcs.n	8006062 <mem_trim+0x19a>
      lfree = mem2;
 800605c:	4a17      	ldr	r2, [pc, #92]	@ (80060bc <mem_trim+0x1f4>)
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	2200      	movs	r2, #0
 8006066:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	881a      	ldrh	r2, [r3, #0]
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	8afa      	ldrh	r2, [r7, #22]
 8006074:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	89fa      	ldrh	r2, [r7, #14]
 800607a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	881b      	ldrh	r3, [r3, #0]
 8006080:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006084:	d007      	beq.n	8006096 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	881b      	ldrh	r3, [r3, #0]
 800608a:	4618      	mov	r0, r3
 800608c:	f7ff fd74 	bl	8005b78 <ptr_to_mem>
 8006090:	4602      	mov	r2, r0
 8006092:	89fb      	ldrh	r3, [r7, #14]
 8006094:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8006096:	687b      	ldr	r3, [r7, #4]
}
 8006098:	4618      	mov	r0, r3
 800609a:	3720      	adds	r7, #32
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	200058cc 	.word	0x200058cc
 80060a4:	200058d0 	.word	0x200058d0
 80060a8:	080111ec 	.word	0x080111ec
 80060ac:	0801135c 	.word	0x0801135c
 80060b0:	08011234 	.word	0x08011234
 80060b4:	08011374 	.word	0x08011374
 80060b8:	08011394 	.word	0x08011394
 80060bc:	200058d4 	.word	0x200058d4

080060c0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b088      	sub	sp, #32
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	4603      	mov	r3, r0
 80060c8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80060ca:	88fb      	ldrh	r3, [r7, #6]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d101      	bne.n	80060d4 <mem_malloc+0x14>
    return NULL;
 80060d0:	2300      	movs	r3, #0
 80060d2:	e0d9      	b.n	8006288 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80060d4:	88fb      	ldrh	r3, [r7, #6]
 80060d6:	3303      	adds	r3, #3
 80060d8:	b29b      	uxth	r3, r3
 80060da:	f023 0303 	bic.w	r3, r3, #3
 80060de:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80060e0:	8bbb      	ldrh	r3, [r7, #28]
 80060e2:	2b0b      	cmp	r3, #11
 80060e4:	d801      	bhi.n	80060ea <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80060e6:	230c      	movs	r3, #12
 80060e8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80060ea:	8bbb      	ldrh	r3, [r7, #28]
 80060ec:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80060f0:	d803      	bhi.n	80060fa <mem_malloc+0x3a>
 80060f2:	8bba      	ldrh	r2, [r7, #28]
 80060f4:	88fb      	ldrh	r3, [r7, #6]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d201      	bcs.n	80060fe <mem_malloc+0x3e>
    return NULL;
 80060fa:	2300      	movs	r3, #0
 80060fc:	e0c4      	b.n	8006288 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80060fe:	4b64      	ldr	r3, [pc, #400]	@ (8006290 <mem_malloc+0x1d0>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4618      	mov	r0, r3
 8006104:	f7ff fd4a 	bl	8005b9c <mem_to_ptr>
 8006108:	4603      	mov	r3, r0
 800610a:	83fb      	strh	r3, [r7, #30]
 800610c:	e0b4      	b.n	8006278 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800610e:	8bfb      	ldrh	r3, [r7, #30]
 8006110:	4618      	mov	r0, r3
 8006112:	f7ff fd31 	bl	8005b78 <ptr_to_mem>
 8006116:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	791b      	ldrb	r3, [r3, #4]
 800611c:	2b00      	cmp	r3, #0
 800611e:	f040 80a4 	bne.w	800626a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	881b      	ldrh	r3, [r3, #0]
 8006126:	461a      	mov	r2, r3
 8006128:	8bfb      	ldrh	r3, [r7, #30]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	f1a3 0208 	sub.w	r2, r3, #8
 8006130:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8006132:	429a      	cmp	r2, r3
 8006134:	f0c0 8099 	bcc.w	800626a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	461a      	mov	r2, r3
 800613e:	8bfb      	ldrh	r3, [r7, #30]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	f1a3 0208 	sub.w	r2, r3, #8
 8006146:	8bbb      	ldrh	r3, [r7, #28]
 8006148:	3314      	adds	r3, #20
 800614a:	429a      	cmp	r2, r3
 800614c:	d333      	bcc.n	80061b6 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800614e:	8bfa      	ldrh	r2, [r7, #30]
 8006150:	8bbb      	ldrh	r3, [r7, #28]
 8006152:	4413      	add	r3, r2
 8006154:	b29b      	uxth	r3, r3
 8006156:	3308      	adds	r3, #8
 8006158:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800615a:	8a7b      	ldrh	r3, [r7, #18]
 800615c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006160:	d106      	bne.n	8006170 <mem_malloc+0xb0>
 8006162:	4b4c      	ldr	r3, [pc, #304]	@ (8006294 <mem_malloc+0x1d4>)
 8006164:	f240 3287 	movw	r2, #903	@ 0x387
 8006168:	494b      	ldr	r1, [pc, #300]	@ (8006298 <mem_malloc+0x1d8>)
 800616a:	484c      	ldr	r0, [pc, #304]	@ (800629c <mem_malloc+0x1dc>)
 800616c:	f009 fe9e 	bl	800feac <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8006170:	8a7b      	ldrh	r3, [r7, #18]
 8006172:	4618      	mov	r0, r3
 8006174:	f7ff fd00 	bl	8005b78 <ptr_to_mem>
 8006178:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	881a      	ldrh	r2, [r3, #0]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8bfa      	ldrh	r2, [r7, #30]
 800618c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	8a7a      	ldrh	r2, [r7, #18]
 8006192:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	2201      	movs	r2, #1
 8006198:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	881b      	ldrh	r3, [r3, #0]
 800619e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80061a2:	d00b      	beq.n	80061bc <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7ff fce5 	bl	8005b78 <ptr_to_mem>
 80061ae:	4602      	mov	r2, r0
 80061b0:	8a7b      	ldrh	r3, [r7, #18]
 80061b2:	8053      	strh	r3, [r2, #2]
 80061b4:	e002      	b.n	80061bc <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	2201      	movs	r2, #1
 80061ba:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80061bc:	4b34      	ldr	r3, [pc, #208]	@ (8006290 <mem_malloc+0x1d0>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d127      	bne.n	8006216 <mem_malloc+0x156>
          struct mem *cur = lfree;
 80061c6:	4b32      	ldr	r3, [pc, #200]	@ (8006290 <mem_malloc+0x1d0>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80061cc:	e005      	b.n	80061da <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	881b      	ldrh	r3, [r3, #0]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7ff fcd0 	bl	8005b78 <ptr_to_mem>
 80061d8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	791b      	ldrb	r3, [r3, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d004      	beq.n	80061ec <mem_malloc+0x12c>
 80061e2:	4b2f      	ldr	r3, [pc, #188]	@ (80062a0 <mem_malloc+0x1e0>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d1f0      	bne.n	80061ce <mem_malloc+0x10e>
          }
          lfree = cur;
 80061ec:	4a28      	ldr	r2, [pc, #160]	@ (8006290 <mem_malloc+0x1d0>)
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80061f2:	4b27      	ldr	r3, [pc, #156]	@ (8006290 <mem_malloc+0x1d0>)
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	4b2a      	ldr	r3, [pc, #168]	@ (80062a0 <mem_malloc+0x1e0>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d00b      	beq.n	8006216 <mem_malloc+0x156>
 80061fe:	4b24      	ldr	r3, [pc, #144]	@ (8006290 <mem_malloc+0x1d0>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	791b      	ldrb	r3, [r3, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d006      	beq.n	8006216 <mem_malloc+0x156>
 8006208:	4b22      	ldr	r3, [pc, #136]	@ (8006294 <mem_malloc+0x1d4>)
 800620a:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800620e:	4925      	ldr	r1, [pc, #148]	@ (80062a4 <mem_malloc+0x1e4>)
 8006210:	4822      	ldr	r0, [pc, #136]	@ (800629c <mem_malloc+0x1dc>)
 8006212:	f009 fe4b 	bl	800feac <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006216:	8bba      	ldrh	r2, [r7, #28]
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	4413      	add	r3, r2
 800621c:	3308      	adds	r3, #8
 800621e:	4a20      	ldr	r2, [pc, #128]	@ (80062a0 <mem_malloc+0x1e0>)
 8006220:	6812      	ldr	r2, [r2, #0]
 8006222:	4293      	cmp	r3, r2
 8006224:	d906      	bls.n	8006234 <mem_malloc+0x174>
 8006226:	4b1b      	ldr	r3, [pc, #108]	@ (8006294 <mem_malloc+0x1d4>)
 8006228:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800622c:	491e      	ldr	r1, [pc, #120]	@ (80062a8 <mem_malloc+0x1e8>)
 800622e:	481b      	ldr	r0, [pc, #108]	@ (800629c <mem_malloc+0x1dc>)
 8006230:	f009 fe3c 	bl	800feac <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	f003 0303 	and.w	r3, r3, #3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d006      	beq.n	800624c <mem_malloc+0x18c>
 800623e:	4b15      	ldr	r3, [pc, #84]	@ (8006294 <mem_malloc+0x1d4>)
 8006240:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8006244:	4919      	ldr	r1, [pc, #100]	@ (80062ac <mem_malloc+0x1ec>)
 8006246:	4815      	ldr	r0, [pc, #84]	@ (800629c <mem_malloc+0x1dc>)
 8006248:	f009 fe30 	bl	800feac <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	f003 0303 	and.w	r3, r3, #3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d006      	beq.n	8006264 <mem_malloc+0x1a4>
 8006256:	4b0f      	ldr	r3, [pc, #60]	@ (8006294 <mem_malloc+0x1d4>)
 8006258:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800625c:	4914      	ldr	r1, [pc, #80]	@ (80062b0 <mem_malloc+0x1f0>)
 800625e:	480f      	ldr	r0, [pc, #60]	@ (800629c <mem_malloc+0x1dc>)
 8006260:	f009 fe24 	bl	800feac <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	3308      	adds	r3, #8
 8006268:	e00e      	b.n	8006288 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800626a:	8bfb      	ldrh	r3, [r7, #30]
 800626c:	4618      	mov	r0, r3
 800626e:	f7ff fc83 	bl	8005b78 <ptr_to_mem>
 8006272:	4603      	mov	r3, r0
 8006274:	881b      	ldrh	r3, [r3, #0]
 8006276:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006278:	8bfa      	ldrh	r2, [r7, #30]
 800627a:	8bbb      	ldrh	r3, [r7, #28]
 800627c:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8006280:	429a      	cmp	r2, r3
 8006282:	f4ff af44 	bcc.w	800610e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3720      	adds	r7, #32
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	200058d4 	.word	0x200058d4
 8006294:	080111ec 	.word	0x080111ec
 8006298:	08011394 	.word	0x08011394
 800629c:	08011234 	.word	0x08011234
 80062a0:	200058d0 	.word	0x200058d0
 80062a4:	080113a8 	.word	0x080113a8
 80062a8:	080113c4 	.word	0x080113c4
 80062ac:	080113f4 	.word	0x080113f4
 80062b0:	08011424 	.word	0x08011424

080062b4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	2200      	movs	r2, #0
 80062c2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	3303      	adds	r3, #3
 80062ca:	f023 0303 	bic.w	r3, r3, #3
 80062ce:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80062d0:	2300      	movs	r3, #0
 80062d2:	60fb      	str	r3, [r7, #12]
 80062d4:	e011      	b.n	80062fa <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	68ba      	ldr	r2, [r7, #8]
 80062e6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	461a      	mov	r2, r3
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	4413      	add	r3, r2
 80062f2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	3301      	adds	r3, #1
 80062f8:	60fb      	str	r3, [r7, #12]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	885b      	ldrh	r3, [r3, #2]
 80062fe:	461a      	mov	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4293      	cmp	r3, r2
 8006304:	dbe7      	blt.n	80062d6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006306:	bf00      	nop
 8006308:	bf00      	nop
 800630a:	3714      	adds	r7, #20
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800631a:	2300      	movs	r3, #0
 800631c:	80fb      	strh	r3, [r7, #6]
 800631e:	e009      	b.n	8006334 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006320:	88fb      	ldrh	r3, [r7, #6]
 8006322:	4a08      	ldr	r2, [pc, #32]	@ (8006344 <memp_init+0x30>)
 8006324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006328:	4618      	mov	r0, r3
 800632a:	f7ff ffc3 	bl	80062b4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800632e:	88fb      	ldrh	r3, [r7, #6]
 8006330:	3301      	adds	r3, #1
 8006332:	80fb      	strh	r3, [r7, #6]
 8006334:	88fb      	ldrh	r3, [r7, #6]
 8006336:	2b08      	cmp	r3, #8
 8006338:	d9f2      	bls.n	8006320 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800633a:	bf00      	nop
 800633c:	bf00      	nop
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	08013c08 	.word	0x08013c08

08006348 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d012      	beq.n	8006384 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	6812      	ldr	r2, [r2, #0]
 8006366:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f003 0303 	and.w	r3, r3, #3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d006      	beq.n	8006380 <do_memp_malloc_pool+0x38>
 8006372:	4b07      	ldr	r3, [pc, #28]	@ (8006390 <do_memp_malloc_pool+0x48>)
 8006374:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8006378:	4906      	ldr	r1, [pc, #24]	@ (8006394 <do_memp_malloc_pool+0x4c>)
 800637a:	4807      	ldr	r0, [pc, #28]	@ (8006398 <do_memp_malloc_pool+0x50>)
 800637c:	f009 fd96 	bl	800feac <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	e000      	b.n	8006386 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	08011448 	.word	0x08011448
 8006394:	08011478 	.word	0x08011478
 8006398:	0801149c 	.word	0x0801149c

0800639c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d106      	bne.n	80063b8 <memp_malloc_pool+0x1c>
 80063aa:	4b0a      	ldr	r3, [pc, #40]	@ (80063d4 <memp_malloc_pool+0x38>)
 80063ac:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80063b0:	4909      	ldr	r1, [pc, #36]	@ (80063d8 <memp_malloc_pool+0x3c>)
 80063b2:	480a      	ldr	r0, [pc, #40]	@ (80063dc <memp_malloc_pool+0x40>)
 80063b4:	f009 fd7a 	bl	800feac <iprintf>
  if (desc == NULL) {
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <memp_malloc_pool+0x26>
    return NULL;
 80063be:	2300      	movs	r3, #0
 80063c0:	e003      	b.n	80063ca <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7ff ffc0 	bl	8006348 <do_memp_malloc_pool>
 80063c8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3708      	adds	r7, #8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	08011448 	.word	0x08011448
 80063d8:	080114c4 	.word	0x080114c4
 80063dc:	0801149c 	.word	0x0801149c

080063e0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	4603      	mov	r3, r0
 80063e8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80063ea:	79fb      	ldrb	r3, [r7, #7]
 80063ec:	2b08      	cmp	r3, #8
 80063ee:	d908      	bls.n	8006402 <memp_malloc+0x22>
 80063f0:	4b0a      	ldr	r3, [pc, #40]	@ (800641c <memp_malloc+0x3c>)
 80063f2:	f240 1257 	movw	r2, #343	@ 0x157
 80063f6:	490a      	ldr	r1, [pc, #40]	@ (8006420 <memp_malloc+0x40>)
 80063f8:	480a      	ldr	r0, [pc, #40]	@ (8006424 <memp_malloc+0x44>)
 80063fa:	f009 fd57 	bl	800feac <iprintf>
 80063fe:	2300      	movs	r3, #0
 8006400:	e008      	b.n	8006414 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006402:	79fb      	ldrb	r3, [r7, #7]
 8006404:	4a08      	ldr	r2, [pc, #32]	@ (8006428 <memp_malloc+0x48>)
 8006406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800640a:	4618      	mov	r0, r3
 800640c:	f7ff ff9c 	bl	8006348 <do_memp_malloc_pool>
 8006410:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006412:	68fb      	ldr	r3, [r7, #12]
}
 8006414:	4618      	mov	r0, r3
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	08011448 	.word	0x08011448
 8006420:	080114d8 	.word	0x080114d8
 8006424:	0801149c 	.word	0x0801149c
 8006428:	08013c08 	.word	0x08013c08

0800642c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	f003 0303 	and.w	r3, r3, #3
 800643c:	2b00      	cmp	r3, #0
 800643e:	d006      	beq.n	800644e <do_memp_free_pool+0x22>
 8006440:	4b0a      	ldr	r3, [pc, #40]	@ (800646c <do_memp_free_pool+0x40>)
 8006442:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8006446:	490a      	ldr	r1, [pc, #40]	@ (8006470 <do_memp_free_pool+0x44>)
 8006448:	480a      	ldr	r0, [pc, #40]	@ (8006474 <do_memp_free_pool+0x48>)
 800644a:	f009 fd2f 	bl	800feac <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006464:	bf00      	nop
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	08011448 	.word	0x08011448
 8006470:	080114f8 	.word	0x080114f8
 8006474:	0801149c 	.word	0x0801149c

08006478 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d106      	bne.n	8006496 <memp_free_pool+0x1e>
 8006488:	4b0a      	ldr	r3, [pc, #40]	@ (80064b4 <memp_free_pool+0x3c>)
 800648a:	f240 1295 	movw	r2, #405	@ 0x195
 800648e:	490a      	ldr	r1, [pc, #40]	@ (80064b8 <memp_free_pool+0x40>)
 8006490:	480a      	ldr	r0, [pc, #40]	@ (80064bc <memp_free_pool+0x44>)
 8006492:	f009 fd0b 	bl	800feac <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d007      	beq.n	80064ac <memp_free_pool+0x34>
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d004      	beq.n	80064ac <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80064a2:	6839      	ldr	r1, [r7, #0]
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f7ff ffc1 	bl	800642c <do_memp_free_pool>
 80064aa:	e000      	b.n	80064ae <memp_free_pool+0x36>
    return;
 80064ac:	bf00      	nop
}
 80064ae:	3708      	adds	r7, #8
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	08011448 	.word	0x08011448
 80064b8:	080114c4 	.word	0x080114c4
 80064bc:	0801149c 	.word	0x0801149c

080064c0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	4603      	mov	r3, r0
 80064c8:	6039      	str	r1, [r7, #0]
 80064ca:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80064cc:	79fb      	ldrb	r3, [r7, #7]
 80064ce:	2b08      	cmp	r3, #8
 80064d0:	d907      	bls.n	80064e2 <memp_free+0x22>
 80064d2:	4b0c      	ldr	r3, [pc, #48]	@ (8006504 <memp_free+0x44>)
 80064d4:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80064d8:	490b      	ldr	r1, [pc, #44]	@ (8006508 <memp_free+0x48>)
 80064da:	480c      	ldr	r0, [pc, #48]	@ (800650c <memp_free+0x4c>)
 80064dc:	f009 fce6 	bl	800feac <iprintf>
 80064e0:	e00c      	b.n	80064fc <memp_free+0x3c>

  if (mem == NULL) {
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d008      	beq.n	80064fa <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80064e8:	79fb      	ldrb	r3, [r7, #7]
 80064ea:	4a09      	ldr	r2, [pc, #36]	@ (8006510 <memp_free+0x50>)
 80064ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064f0:	6839      	ldr	r1, [r7, #0]
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7ff ff9a 	bl	800642c <do_memp_free_pool>
 80064f8:	e000      	b.n	80064fc <memp_free+0x3c>
    return;
 80064fa:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80064fc:	3708      	adds	r7, #8
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	08011448 	.word	0x08011448
 8006508:	08011518 	.word	0x08011518
 800650c:	0801149c 	.word	0x0801149c
 8006510:	08013c08 	.word	0x08013c08

08006514 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006514:	b480      	push	{r7}
 8006516:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006518:	bf00      	nop
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
	...

08006524 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
 8006530:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d108      	bne.n	800654a <netif_add+0x26>
 8006538:	4b57      	ldr	r3, [pc, #348]	@ (8006698 <netif_add+0x174>)
 800653a:	f240 1227 	movw	r2, #295	@ 0x127
 800653e:	4957      	ldr	r1, [pc, #348]	@ (800669c <netif_add+0x178>)
 8006540:	4857      	ldr	r0, [pc, #348]	@ (80066a0 <netif_add+0x17c>)
 8006542:	f009 fcb3 	bl	800feac <iprintf>
 8006546:	2300      	movs	r3, #0
 8006548:	e0a2      	b.n	8006690 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800654a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654c:	2b00      	cmp	r3, #0
 800654e:	d108      	bne.n	8006562 <netif_add+0x3e>
 8006550:	4b51      	ldr	r3, [pc, #324]	@ (8006698 <netif_add+0x174>)
 8006552:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8006556:	4953      	ldr	r1, [pc, #332]	@ (80066a4 <netif_add+0x180>)
 8006558:	4851      	ldr	r0, [pc, #324]	@ (80066a0 <netif_add+0x17c>)
 800655a:	f009 fca7 	bl	800feac <iprintf>
 800655e:	2300      	movs	r3, #0
 8006560:	e096      	b.n	8006690 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d101      	bne.n	800656c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006568:	4b4f      	ldr	r3, [pc, #316]	@ (80066a8 <netif_add+0x184>)
 800656a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d101      	bne.n	8006576 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006572:	4b4d      	ldr	r3, [pc, #308]	@ (80066a8 <netif_add+0x184>)
 8006574:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d101      	bne.n	8006580 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800657c:	4b4a      	ldr	r3, [pc, #296]	@ (80066a8 <netif_add+0x184>)
 800657e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	4a45      	ldr	r2, [pc, #276]	@ (80066ac <netif_add+0x188>)
 8006596:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6a3a      	ldr	r2, [r7, #32]
 80065b0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80065b2:	4b3f      	ldr	r3, [pc, #252]	@ (80066b0 <netif_add+0x18c>)
 80065b4:	781a      	ldrb	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065c0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	68b9      	ldr	r1, [r7, #8]
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f000 f913 	bl	80067f4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80065ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	4798      	blx	r3
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d001      	beq.n	80065de <netif_add+0xba>
    return NULL;
 80065da:	2300      	movs	r3, #0
 80065dc:	e058      	b.n	8006690 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80065e4:	2bff      	cmp	r3, #255	@ 0xff
 80065e6:	d103      	bne.n	80065f0 <netif_add+0xcc>
        netif->num = 0;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 80065f0:	2300      	movs	r3, #0
 80065f2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80065f4:	4b2f      	ldr	r3, [pc, #188]	@ (80066b4 <netif_add+0x190>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	617b      	str	r3, [r7, #20]
 80065fa:	e02b      	b.n	8006654 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	429a      	cmp	r2, r3
 8006602:	d106      	bne.n	8006612 <netif_add+0xee>
 8006604:	4b24      	ldr	r3, [pc, #144]	@ (8006698 <netif_add+0x174>)
 8006606:	f240 128b 	movw	r2, #395	@ 0x18b
 800660a:	492b      	ldr	r1, [pc, #172]	@ (80066b8 <netif_add+0x194>)
 800660c:	4824      	ldr	r0, [pc, #144]	@ (80066a0 <netif_add+0x17c>)
 800660e:	f009 fc4d 	bl	800feac <iprintf>
        num_netifs++;
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	3301      	adds	r3, #1
 8006616:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	2bff      	cmp	r3, #255	@ 0xff
 800661c:	dd06      	ble.n	800662c <netif_add+0x108>
 800661e:	4b1e      	ldr	r3, [pc, #120]	@ (8006698 <netif_add+0x174>)
 8006620:	f240 128d 	movw	r2, #397	@ 0x18d
 8006624:	4925      	ldr	r1, [pc, #148]	@ (80066bc <netif_add+0x198>)
 8006626:	481e      	ldr	r0, [pc, #120]	@ (80066a0 <netif_add+0x17c>)
 8006628:	f009 fc40 	bl	800feac <iprintf>
        if (netif2->num == netif->num) {
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006638:	429a      	cmp	r2, r3
 800663a:	d108      	bne.n	800664e <netif_add+0x12a>
          netif->num++;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006642:	3301      	adds	r3, #1
 8006644:	b2da      	uxtb	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800664c:	e005      	b.n	800665a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	617b      	str	r3, [r7, #20]
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1d0      	bne.n	80065fc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1be      	bne.n	80065de <netif_add+0xba>
  }
  if (netif->num == 254) {
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006666:	2bfe      	cmp	r3, #254	@ 0xfe
 8006668:	d103      	bne.n	8006672 <netif_add+0x14e>
    netif_num = 0;
 800666a:	4b11      	ldr	r3, [pc, #68]	@ (80066b0 <netif_add+0x18c>)
 800666c:	2200      	movs	r2, #0
 800666e:	701a      	strb	r2, [r3, #0]
 8006670:	e006      	b.n	8006680 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006678:	3301      	adds	r3, #1
 800667a:	b2da      	uxtb	r2, r3
 800667c:	4b0c      	ldr	r3, [pc, #48]	@ (80066b0 <netif_add+0x18c>)
 800667e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8006680:	4b0c      	ldr	r3, [pc, #48]	@ (80066b4 <netif_add+0x190>)
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8006688:	4a0a      	ldr	r2, [pc, #40]	@ (80066b4 <netif_add+0x190>)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800668e:	68fb      	ldr	r3, [r7, #12]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3718      	adds	r7, #24
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	08011534 	.word	0x08011534
 800669c:	080115c8 	.word	0x080115c8
 80066a0:	08011584 	.word	0x08011584
 80066a4:	080115e4 	.word	0x080115e4
 80066a8:	08013c6c 	.word	0x08013c6c
 80066ac:	08006acf 	.word	0x08006acf
 80066b0:	200087cc 	.word	0x200087cc
 80066b4:	200087c4 	.word	0x200087c4
 80066b8:	08011608 	.word	0x08011608
 80066bc:	0801161c 	.word	0x0801161c

080066c0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80066ca:	6839      	ldr	r1, [r7, #0]
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f002 fbe7 	bl	8008ea0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80066d2:	6839      	ldr	r1, [r7, #0]
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f006 ff73 	bl	800d5c0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80066da:	bf00      	nop
 80066dc:	3708      	adds	r7, #8
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
	...

080066e4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b086      	sub	sp, #24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d106      	bne.n	8006704 <netif_do_set_ipaddr+0x20>
 80066f6:	4b1d      	ldr	r3, [pc, #116]	@ (800676c <netif_do_set_ipaddr+0x88>)
 80066f8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80066fc:	491c      	ldr	r1, [pc, #112]	@ (8006770 <netif_do_set_ipaddr+0x8c>)
 80066fe:	481d      	ldr	r0, [pc, #116]	@ (8006774 <netif_do_set_ipaddr+0x90>)
 8006700:	f009 fbd4 	bl	800feac <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d106      	bne.n	8006718 <netif_do_set_ipaddr+0x34>
 800670a:	4b18      	ldr	r3, [pc, #96]	@ (800676c <netif_do_set_ipaddr+0x88>)
 800670c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8006710:	4917      	ldr	r1, [pc, #92]	@ (8006770 <netif_do_set_ipaddr+0x8c>)
 8006712:	4818      	ldr	r0, [pc, #96]	@ (8006774 <netif_do_set_ipaddr+0x90>)
 8006714:	f009 fbca 	bl	800feac <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	3304      	adds	r3, #4
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	429a      	cmp	r2, r3
 8006724:	d01c      	beq.n	8006760 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	3304      	adds	r3, #4
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8006736:	f107 0314 	add.w	r3, r7, #20
 800673a:	4619      	mov	r1, r3
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f7ff ffbf 	bl	80066c0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d002      	beq.n	800674e <netif_do_set_ipaddr+0x6a>
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	e000      	b.n	8006750 <netif_do_set_ipaddr+0x6c>
 800674e:	2300      	movs	r3, #0
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006754:	2101      	movs	r1, #1
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f000 f8d2 	bl	8006900 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800675c:	2301      	movs	r3, #1
 800675e:	e000      	b.n	8006762 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3718      	adds	r7, #24
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	08011534 	.word	0x08011534
 8006770:	0801164c 	.word	0x0801164c
 8006774:	08011584 	.word	0x08011584

08006778 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	3308      	adds	r3, #8
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	429a      	cmp	r2, r3
 8006790:	d00a      	beq.n	80067a8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d002      	beq.n	800679e <netif_do_set_netmask+0x26>
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	e000      	b.n	80067a0 <netif_do_set_netmask+0x28>
 800679e:	2300      	movs	r3, #0
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80067a4:	2301      	movs	r3, #1
 80067a6:	e000      	b.n	80067aa <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b085      	sub	sp, #20
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	60f8      	str	r0, [r7, #12]
 80067be:	60b9      	str	r1, [r7, #8]
 80067c0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	330c      	adds	r3, #12
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d00a      	beq.n	80067e6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d002      	beq.n	80067dc <netif_do_set_gw+0x26>
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	e000      	b.n	80067de <netif_do_set_gw+0x28>
 80067dc:	2300      	movs	r3, #0
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80067e2:	2301      	movs	r3, #1
 80067e4:	e000      	b.n	80067e8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3714      	adds	r7, #20
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b088      	sub	sp, #32
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
 8006800:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8006802:	2300      	movs	r3, #0
 8006804:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8006806:	2300      	movs	r3, #0
 8006808:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8006810:	4b1c      	ldr	r3, [pc, #112]	@ (8006884 <netif_set_addr+0x90>)
 8006812:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800681a:	4b1a      	ldr	r3, [pc, #104]	@ (8006884 <netif_set_addr+0x90>)
 800681c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d101      	bne.n	8006828 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8006824:	4b17      	ldr	r3, [pc, #92]	@ (8006884 <netif_set_addr+0x90>)
 8006826:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d003      	beq.n	8006836 <netif_set_addr+0x42>
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <netif_set_addr+0x46>
 8006836:	2301      	movs	r3, #1
 8006838:	e000      	b.n	800683c <netif_set_addr+0x48>
 800683a:	2300      	movs	r3, #0
 800683c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d006      	beq.n	8006852 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006844:	f107 0310 	add.w	r3, r7, #16
 8006848:	461a      	mov	r2, r3
 800684a:	68b9      	ldr	r1, [r7, #8]
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f7ff ff49 	bl	80066e4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8006852:	69fa      	ldr	r2, [r7, #28]
 8006854:	6879      	ldr	r1, [r7, #4]
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f7ff ff8e 	bl	8006778 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800685c:	69ba      	ldr	r2, [r7, #24]
 800685e:	6839      	ldr	r1, [r7, #0]
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f7ff ffa8 	bl	80067b6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d106      	bne.n	800687a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800686c:	f107 0310 	add.w	r3, r7, #16
 8006870:	461a      	mov	r2, r3
 8006872:	68b9      	ldr	r1, [r7, #8]
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f7ff ff35 	bl	80066e4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800687a:	bf00      	nop
 800687c:	3720      	adds	r7, #32
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	08013c6c 	.word	0x08013c6c

08006888 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8006890:	4a04      	ldr	r2, [pc, #16]	@ (80068a4 <netif_set_default+0x1c>)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8006896:	bf00      	nop
 8006898:	370c      	adds	r7, #12
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	200087c8 	.word	0x200087c8

080068a8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d107      	bne.n	80068c6 <netif_set_up+0x1e>
 80068b6:	4b0f      	ldr	r3, [pc, #60]	@ (80068f4 <netif_set_up+0x4c>)
 80068b8:	f44f 7254 	mov.w	r2, #848	@ 0x350
 80068bc:	490e      	ldr	r1, [pc, #56]	@ (80068f8 <netif_set_up+0x50>)
 80068be:	480f      	ldr	r0, [pc, #60]	@ (80068fc <netif_set_up+0x54>)
 80068c0:	f009 faf4 	bl	800feac <iprintf>
 80068c4:	e013      	b.n	80068ee <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80068cc:	f003 0301 	and.w	r3, r3, #1
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d10c      	bne.n	80068ee <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80068da:	f043 0301 	orr.w	r3, r3, #1
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80068e6:	2103      	movs	r1, #3
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 f809 	bl	8006900 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	08011534 	.word	0x08011534
 80068f8:	080116bc 	.word	0x080116bc
 80068fc:	08011584 	.word	0x08011584

08006900 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	460b      	mov	r3, r1
 800690a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d106      	bne.n	8006920 <netif_issue_reports+0x20>
 8006912:	4b18      	ldr	r3, [pc, #96]	@ (8006974 <netif_issue_reports+0x74>)
 8006914:	f240 326d 	movw	r2, #877	@ 0x36d
 8006918:	4917      	ldr	r1, [pc, #92]	@ (8006978 <netif_issue_reports+0x78>)
 800691a:	4818      	ldr	r0, [pc, #96]	@ (800697c <netif_issue_reports+0x7c>)
 800691c:	f009 fac6 	bl	800feac <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006926:	f003 0304 	and.w	r3, r3, #4
 800692a:	2b00      	cmp	r3, #0
 800692c:	d01e      	beq.n	800696c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006934:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006938:	2b00      	cmp	r3, #0
 800693a:	d017      	beq.n	800696c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800693c:	78fb      	ldrb	r3, [r7, #3]
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b00      	cmp	r3, #0
 8006944:	d013      	beq.n	800696e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	3304      	adds	r3, #4
 800694a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00e      	beq.n	800696e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006956:	f003 0308 	and.w	r3, r3, #8
 800695a:	2b00      	cmp	r3, #0
 800695c:	d007      	beq.n	800696e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	3304      	adds	r3, #4
 8006962:	4619      	mov	r1, r3
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f007 fd95 	bl	800e494 <etharp_request>
 800696a:	e000      	b.n	800696e <netif_issue_reports+0x6e>
    return;
 800696c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	08011534 	.word	0x08011534
 8006978:	080116d8 	.word	0x080116d8
 800697c:	08011584 	.word	0x08011584

08006980 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d107      	bne.n	800699e <netif_set_down+0x1e>
 800698e:	4b12      	ldr	r3, [pc, #72]	@ (80069d8 <netif_set_down+0x58>)
 8006990:	f240 329b 	movw	r2, #923	@ 0x39b
 8006994:	4911      	ldr	r1, [pc, #68]	@ (80069dc <netif_set_down+0x5c>)
 8006996:	4812      	ldr	r0, [pc, #72]	@ (80069e0 <netif_set_down+0x60>)
 8006998:	f009 fa88 	bl	800feac <iprintf>
 800699c:	e019      	b.n	80069d2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d012      	beq.n	80069d2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80069b2:	f023 0301 	bic.w	r3, r3, #1
 80069b6:	b2da      	uxtb	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80069c4:	f003 0308 	and.w	r3, r3, #8
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d002      	beq.n	80069d2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f007 f91f 	bl	800dc10 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	08011534 	.word	0x08011534
 80069dc:	080116fc 	.word	0x080116fc
 80069e0:	08011584 	.word	0x08011584

080069e4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d107      	bne.n	8006a02 <netif_set_link_up+0x1e>
 80069f2:	4b13      	ldr	r3, [pc, #76]	@ (8006a40 <netif_set_link_up+0x5c>)
 80069f4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80069f8:	4912      	ldr	r1, [pc, #72]	@ (8006a44 <netif_set_link_up+0x60>)
 80069fa:	4813      	ldr	r0, [pc, #76]	@ (8006a48 <netif_set_link_up+0x64>)
 80069fc:	f009 fa56 	bl	800feac <iprintf>
 8006a00:	e01b      	b.n	8006a3a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006a08:	f003 0304 	and.w	r3, r3, #4
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d114      	bne.n	8006a3a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006a16:	f043 0304 	orr.w	r3, r3, #4
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8006a22:	2103      	movs	r1, #3
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f7ff ff6b 	bl	8006900 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	69db      	ldr	r3, [r3, #28]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d003      	beq.n	8006a3a <netif_set_link_up+0x56>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	69db      	ldr	r3, [r3, #28]
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8006a3a:	3708      	adds	r7, #8
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	08011534 	.word	0x08011534
 8006a44:	0801171c 	.word	0x0801171c
 8006a48:	08011584 	.word	0x08011584

08006a4c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d107      	bne.n	8006a6a <netif_set_link_down+0x1e>
 8006a5a:	4b11      	ldr	r3, [pc, #68]	@ (8006aa0 <netif_set_link_down+0x54>)
 8006a5c:	f240 4206 	movw	r2, #1030	@ 0x406
 8006a60:	4910      	ldr	r1, [pc, #64]	@ (8006aa4 <netif_set_link_down+0x58>)
 8006a62:	4811      	ldr	r0, [pc, #68]	@ (8006aa8 <netif_set_link_down+0x5c>)
 8006a64:	f009 fa22 	bl	800feac <iprintf>
 8006a68:	e017      	b.n	8006a9a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006a70:	f003 0304 	and.w	r3, r3, #4
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d010      	beq.n	8006a9a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006a7e:	f023 0304 	bic.w	r3, r3, #4
 8006a82:	b2da      	uxtb	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	69db      	ldr	r3, [r3, #28]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d003      	beq.n	8006a9a <netif_set_link_down+0x4e>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	69db      	ldr	r3, [r3, #28]
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	08011534 	.word	0x08011534
 8006aa4:	08011740 	.word	0x08011740
 8006aa8:	08011584 	.word	0x08011584

08006aac <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d002      	beq.n	8006ac2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	683a      	ldr	r2, [r7, #0]
 8006ac0:	61da      	str	r2, [r3, #28]
  }
}
 8006ac2:	bf00      	nop
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8006ace:	b480      	push	{r7}
 8006ad0:	b085      	sub	sp, #20
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	60f8      	str	r0, [r7, #12]
 8006ad6:	60b9      	str	r1, [r7, #8]
 8006ad8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8006ada:	f06f 030b 	mvn.w	r3, #11
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
	...

08006aec <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	4603      	mov	r3, r0
 8006af4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8006af6:	79fb      	ldrb	r3, [r7, #7]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d013      	beq.n	8006b24 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8006afc:	4b0d      	ldr	r3, [pc, #52]	@ (8006b34 <netif_get_by_index+0x48>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	60fb      	str	r3, [r7, #12]
 8006b02:	e00c      	b.n	8006b1e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	79fa      	ldrb	r2, [r7, #7]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d101      	bne.n	8006b18 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	e006      	b.n	8006b26 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	60fb      	str	r3, [r7, #12]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1ef      	bne.n	8006b04 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3714      	adds	r7, #20
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	200087c4 	.word	0x200087c4

08006b38 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8006b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8006b70 <pbuf_free_ooseq+0x38>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006b44:	4b0b      	ldr	r3, [pc, #44]	@ (8006b74 <pbuf_free_ooseq+0x3c>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	607b      	str	r3, [r7, #4]
 8006b4a:	e00a      	b.n	8006b62 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d003      	beq.n	8006b5c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f002 f9e1 	bl	8008f1c <tcp_free_ooseq>
      return;
 8006b5a:	e005      	b.n	8006b68 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	607b      	str	r3, [r7, #4]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d1f1      	bne.n	8006b4c <pbuf_free_ooseq+0x14>
    }
  }
}
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	200087cd 	.word	0x200087cd
 8006b74:	200087dc 	.word	0x200087dc

08006b78 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8006b7c:	4b03      	ldr	r3, [pc, #12]	@ (8006b8c <pbuf_pool_is_empty+0x14>)
 8006b7e:	2201      	movs	r2, #1
 8006b80:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8006b82:	bf00      	nop
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr
 8006b8c:	200087cd 	.word	0x200087cd

08006b90 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	4611      	mov	r1, r2
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	80fb      	strh	r3, [r7, #6]
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	88fa      	ldrh	r2, [r7, #6]
 8006bb6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	88ba      	ldrh	r2, [r7, #4]
 8006bbc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8006bbe:	8b3b      	ldrh	r3, [r7, #24]
 8006bc0:	b2da      	uxtb	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	7f3a      	ldrb	r2, [r7, #28]
 8006bca:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	73da      	strb	r2, [r3, #15]
}
 8006bd8:	bf00      	nop
 8006bda:	3714      	adds	r7, #20
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b08c      	sub	sp, #48	@ 0x30
 8006be8:	af02      	add	r7, sp, #8
 8006bea:	4603      	mov	r3, r0
 8006bec:	71fb      	strb	r3, [r7, #7]
 8006bee:	460b      	mov	r3, r1
 8006bf0:	80bb      	strh	r3, [r7, #4]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8006bf6:	79fb      	ldrb	r3, [r7, #7]
 8006bf8:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8006bfa:	887b      	ldrh	r3, [r7, #2]
 8006bfc:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8006c00:	d07f      	beq.n	8006d02 <pbuf_alloc+0x11e>
 8006c02:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8006c06:	f300 80c8 	bgt.w	8006d9a <pbuf_alloc+0x1b6>
 8006c0a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8006c0e:	d010      	beq.n	8006c32 <pbuf_alloc+0x4e>
 8006c10:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8006c14:	f300 80c1 	bgt.w	8006d9a <pbuf_alloc+0x1b6>
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d002      	beq.n	8006c22 <pbuf_alloc+0x3e>
 8006c1c:	2b41      	cmp	r3, #65	@ 0x41
 8006c1e:	f040 80bc 	bne.w	8006d9a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8006c22:	887a      	ldrh	r2, [r7, #2]
 8006c24:	88bb      	ldrh	r3, [r7, #4]
 8006c26:	4619      	mov	r1, r3
 8006c28:	2000      	movs	r0, #0
 8006c2a:	f000 f8d1 	bl	8006dd0 <pbuf_alloc_reference>
 8006c2e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8006c30:	e0bd      	b.n	8006dae <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8006c32:	2300      	movs	r3, #0
 8006c34:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8006c36:	2300      	movs	r3, #0
 8006c38:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8006c3a:	88bb      	ldrh	r3, [r7, #4]
 8006c3c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006c3e:	2008      	movs	r0, #8
 8006c40:	f7ff fbce 	bl	80063e0 <memp_malloc>
 8006c44:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d109      	bne.n	8006c60 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8006c4c:	f7ff ff94 	bl	8006b78 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8006c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d002      	beq.n	8006c5c <pbuf_alloc+0x78>
            pbuf_free(p);
 8006c56:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006c58:	f000 faa8 	bl	80071ac <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	e0a7      	b.n	8006db0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8006c60:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006c62:	3303      	adds	r3, #3
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	f023 0303 	bic.w	r3, r3, #3
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	8b7a      	ldrh	r2, [r7, #26]
 8006c74:	4293      	cmp	r3, r2
 8006c76:	bf28      	it	cs
 8006c78:	4613      	movcs	r3, r2
 8006c7a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8006c7c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006c7e:	3310      	adds	r3, #16
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	4413      	add	r3, r2
 8006c84:	3303      	adds	r3, #3
 8006c86:	f023 0303 	bic.w	r3, r3, #3
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	89f9      	ldrh	r1, [r7, #14]
 8006c8e:	8b7a      	ldrh	r2, [r7, #26]
 8006c90:	2300      	movs	r3, #0
 8006c92:	9301      	str	r3, [sp, #4]
 8006c94:	887b      	ldrh	r3, [r7, #2]
 8006c96:	9300      	str	r3, [sp, #0]
 8006c98:	460b      	mov	r3, r1
 8006c9a:	4601      	mov	r1, r0
 8006c9c:	6938      	ldr	r0, [r7, #16]
 8006c9e:	f7ff ff77 	bl	8006b90 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	f003 0303 	and.w	r3, r3, #3
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d006      	beq.n	8006cbc <pbuf_alloc+0xd8>
 8006cae:	4b42      	ldr	r3, [pc, #264]	@ (8006db8 <pbuf_alloc+0x1d4>)
 8006cb0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006cb4:	4941      	ldr	r1, [pc, #260]	@ (8006dbc <pbuf_alloc+0x1d8>)
 8006cb6:	4842      	ldr	r0, [pc, #264]	@ (8006dc0 <pbuf_alloc+0x1dc>)
 8006cb8:	f009 f8f8 	bl	800feac <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006cbc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006cbe:	3303      	adds	r3, #3
 8006cc0:	f023 0303 	bic.w	r3, r3, #3
 8006cc4:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8006cc8:	d106      	bne.n	8006cd8 <pbuf_alloc+0xf4>
 8006cca:	4b3b      	ldr	r3, [pc, #236]	@ (8006db8 <pbuf_alloc+0x1d4>)
 8006ccc:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8006cd0:	493c      	ldr	r1, [pc, #240]	@ (8006dc4 <pbuf_alloc+0x1e0>)
 8006cd2:	483b      	ldr	r0, [pc, #236]	@ (8006dc0 <pbuf_alloc+0x1dc>)
 8006cd4:	f009 f8ea 	bl	800feac <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d102      	bne.n	8006ce4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ce2:	e002      	b.n	8006cea <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	693a      	ldr	r2, [r7, #16]
 8006ce8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8006cee:	8b7a      	ldrh	r2, [r7, #26]
 8006cf0:	89fb      	ldrh	r3, [r7, #14]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8006cfa:	8b7b      	ldrh	r3, [r7, #26]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d19e      	bne.n	8006c3e <pbuf_alloc+0x5a>
      break;
 8006d00:	e055      	b.n	8006dae <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8006d02:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006d04:	3303      	adds	r3, #3
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	f023 0303 	bic.w	r3, r3, #3
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	88bb      	ldrh	r3, [r7, #4]
 8006d10:	3303      	adds	r3, #3
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	f023 0303 	bic.w	r3, r3, #3
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	4413      	add	r3, r2
 8006d1c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8006d1e:	8b3b      	ldrh	r3, [r7, #24]
 8006d20:	3310      	adds	r3, #16
 8006d22:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006d24:	8b3a      	ldrh	r2, [r7, #24]
 8006d26:	88bb      	ldrh	r3, [r7, #4]
 8006d28:	3303      	adds	r3, #3
 8006d2a:	f023 0303 	bic.w	r3, r3, #3
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d306      	bcc.n	8006d40 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8006d32:	8afa      	ldrh	r2, [r7, #22]
 8006d34:	88bb      	ldrh	r3, [r7, #4]
 8006d36:	3303      	adds	r3, #3
 8006d38:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d201      	bcs.n	8006d44 <pbuf_alloc+0x160>
        return NULL;
 8006d40:	2300      	movs	r3, #0
 8006d42:	e035      	b.n	8006db0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8006d44:	8afb      	ldrh	r3, [r7, #22]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7ff f9ba 	bl	80060c0 <mem_malloc>
 8006d4c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d101      	bne.n	8006d58 <pbuf_alloc+0x174>
        return NULL;
 8006d54:	2300      	movs	r3, #0
 8006d56:	e02b      	b.n	8006db0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006d58:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006d5a:	3310      	adds	r3, #16
 8006d5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d5e:	4413      	add	r3, r2
 8006d60:	3303      	adds	r3, #3
 8006d62:	f023 0303 	bic.w	r3, r3, #3
 8006d66:	4618      	mov	r0, r3
 8006d68:	88b9      	ldrh	r1, [r7, #4]
 8006d6a:	88ba      	ldrh	r2, [r7, #4]
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	9301      	str	r3, [sp, #4]
 8006d70:	887b      	ldrh	r3, [r7, #2]
 8006d72:	9300      	str	r3, [sp, #0]
 8006d74:	460b      	mov	r3, r1
 8006d76:	4601      	mov	r1, r0
 8006d78:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006d7a:	f7ff ff09 	bl	8006b90 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f003 0303 	and.w	r3, r3, #3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d010      	beq.n	8006dac <pbuf_alloc+0x1c8>
 8006d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8006db8 <pbuf_alloc+0x1d4>)
 8006d8c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8006d90:	490d      	ldr	r1, [pc, #52]	@ (8006dc8 <pbuf_alloc+0x1e4>)
 8006d92:	480b      	ldr	r0, [pc, #44]	@ (8006dc0 <pbuf_alloc+0x1dc>)
 8006d94:	f009 f88a 	bl	800feac <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8006d98:	e008      	b.n	8006dac <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006d9a:	4b07      	ldr	r3, [pc, #28]	@ (8006db8 <pbuf_alloc+0x1d4>)
 8006d9c:	f240 1227 	movw	r2, #295	@ 0x127
 8006da0:	490a      	ldr	r1, [pc, #40]	@ (8006dcc <pbuf_alloc+0x1e8>)
 8006da2:	4807      	ldr	r0, [pc, #28]	@ (8006dc0 <pbuf_alloc+0x1dc>)
 8006da4:	f009 f882 	bl	800feac <iprintf>
      return NULL;
 8006da8:	2300      	movs	r3, #0
 8006daa:	e001      	b.n	8006db0 <pbuf_alloc+0x1cc>
      break;
 8006dac:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8006dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3728      	adds	r7, #40	@ 0x28
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	08011764 	.word	0x08011764
 8006dbc:	08011794 	.word	0x08011794
 8006dc0:	080117c4 	.word	0x080117c4
 8006dc4:	080117ec 	.word	0x080117ec
 8006dc8:	08011820 	.word	0x08011820
 8006dcc:	0801184c 	.word	0x0801184c

08006dd0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b086      	sub	sp, #24
 8006dd4:	af02      	add	r7, sp, #8
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	460b      	mov	r3, r1
 8006dda:	807b      	strh	r3, [r7, #2]
 8006ddc:	4613      	mov	r3, r2
 8006dde:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006de0:	883b      	ldrh	r3, [r7, #0]
 8006de2:	2b41      	cmp	r3, #65	@ 0x41
 8006de4:	d009      	beq.n	8006dfa <pbuf_alloc_reference+0x2a>
 8006de6:	883b      	ldrh	r3, [r7, #0]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d006      	beq.n	8006dfa <pbuf_alloc_reference+0x2a>
 8006dec:	4b0f      	ldr	r3, [pc, #60]	@ (8006e2c <pbuf_alloc_reference+0x5c>)
 8006dee:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8006df2:	490f      	ldr	r1, [pc, #60]	@ (8006e30 <pbuf_alloc_reference+0x60>)
 8006df4:	480f      	ldr	r0, [pc, #60]	@ (8006e34 <pbuf_alloc_reference+0x64>)
 8006df6:	f009 f859 	bl	800feac <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006dfa:	2007      	movs	r0, #7
 8006dfc:	f7ff faf0 	bl	80063e0 <memp_malloc>
 8006e00:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d101      	bne.n	8006e0c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	e00b      	b.n	8006e24 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006e0c:	8879      	ldrh	r1, [r7, #2]
 8006e0e:	887a      	ldrh	r2, [r7, #2]
 8006e10:	2300      	movs	r3, #0
 8006e12:	9301      	str	r3, [sp, #4]
 8006e14:	883b      	ldrh	r3, [r7, #0]
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	460b      	mov	r3, r1
 8006e1a:	6879      	ldr	r1, [r7, #4]
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f7ff feb7 	bl	8006b90 <pbuf_init_alloced_pbuf>
  return p;
 8006e22:	68fb      	ldr	r3, [r7, #12]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3710      	adds	r7, #16
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	08011764 	.word	0x08011764
 8006e30:	08011868 	.word	0x08011868
 8006e34:	080117c4 	.word	0x080117c4

08006e38 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b088      	sub	sp, #32
 8006e3c:	af02      	add	r7, sp, #8
 8006e3e:	607b      	str	r3, [r7, #4]
 8006e40:	4603      	mov	r3, r0
 8006e42:	73fb      	strb	r3, [r7, #15]
 8006e44:	460b      	mov	r3, r1
 8006e46:	81bb      	strh	r3, [r7, #12]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006e4c:	7bfb      	ldrb	r3, [r7, #15]
 8006e4e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006e50:	8a7b      	ldrh	r3, [r7, #18]
 8006e52:	3303      	adds	r3, #3
 8006e54:	f023 0203 	bic.w	r2, r3, #3
 8006e58:	89bb      	ldrh	r3, [r7, #12]
 8006e5a:	441a      	add	r2, r3
 8006e5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d901      	bls.n	8006e66 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8006e62:	2300      	movs	r3, #0
 8006e64:	e018      	b.n	8006e98 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8006e66:	6a3b      	ldr	r3, [r7, #32]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d007      	beq.n	8006e7c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006e6c:	8a7b      	ldrh	r3, [r7, #18]
 8006e6e:	3303      	adds	r3, #3
 8006e70:	f023 0303 	bic.w	r3, r3, #3
 8006e74:	6a3a      	ldr	r2, [r7, #32]
 8006e76:	4413      	add	r3, r2
 8006e78:	617b      	str	r3, [r7, #20]
 8006e7a:	e001      	b.n	8006e80 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	89b9      	ldrh	r1, [r7, #12]
 8006e84:	89ba      	ldrh	r2, [r7, #12]
 8006e86:	2302      	movs	r3, #2
 8006e88:	9301      	str	r3, [sp, #4]
 8006e8a:	897b      	ldrh	r3, [r7, #10]
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	460b      	mov	r3, r1
 8006e90:	6979      	ldr	r1, [r7, #20]
 8006e92:	f7ff fe7d 	bl	8006b90 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8006e96:	687b      	ldr	r3, [r7, #4]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3718      	adds	r7, #24
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d106      	bne.n	8006ec0 <pbuf_realloc+0x20>
 8006eb2:	4b3a      	ldr	r3, [pc, #232]	@ (8006f9c <pbuf_realloc+0xfc>)
 8006eb4:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8006eb8:	4939      	ldr	r1, [pc, #228]	@ (8006fa0 <pbuf_realloc+0x100>)
 8006eba:	483a      	ldr	r0, [pc, #232]	@ (8006fa4 <pbuf_realloc+0x104>)
 8006ebc:	f008 fff6 	bl	800feac <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	891b      	ldrh	r3, [r3, #8]
 8006ec4:	887a      	ldrh	r2, [r7, #2]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d263      	bcs.n	8006f92 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	891a      	ldrh	r2, [r3, #8]
 8006ece:	887b      	ldrh	r3, [r7, #2]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006ed4:	887b      	ldrh	r3, [r7, #2]
 8006ed6:	817b      	strh	r3, [r7, #10]
  q = p;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006edc:	e018      	b.n	8006f10 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	895b      	ldrh	r3, [r3, #10]
 8006ee2:	897a      	ldrh	r2, [r7, #10]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	891a      	ldrh	r2, [r3, #8]
 8006eec:	893b      	ldrh	r3, [r7, #8]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d106      	bne.n	8006f10 <pbuf_realloc+0x70>
 8006f02:	4b26      	ldr	r3, [pc, #152]	@ (8006f9c <pbuf_realloc+0xfc>)
 8006f04:	f240 12af 	movw	r2, #431	@ 0x1af
 8006f08:	4927      	ldr	r1, [pc, #156]	@ (8006fa8 <pbuf_realloc+0x108>)
 8006f0a:	4826      	ldr	r0, [pc, #152]	@ (8006fa4 <pbuf_realloc+0x104>)
 8006f0c:	f008 ffce 	bl	800feac <iprintf>
  while (rem_len > q->len) {
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	895b      	ldrh	r3, [r3, #10]
 8006f14:	897a      	ldrh	r2, [r7, #10]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d8e1      	bhi.n	8006ede <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	7b1b      	ldrb	r3, [r3, #12]
 8006f1e:	f003 030f 	and.w	r3, r3, #15
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d121      	bne.n	8006f6a <pbuf_realloc+0xca>
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	895b      	ldrh	r3, [r3, #10]
 8006f2a:	897a      	ldrh	r2, [r7, #10]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d01c      	beq.n	8006f6a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	7b5b      	ldrb	r3, [r3, #13]
 8006f34:	f003 0302 	and.w	r3, r3, #2
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d116      	bne.n	8006f6a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	685a      	ldr	r2, [r3, #4]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	897b      	ldrh	r3, [r7, #10]
 8006f48:	4413      	add	r3, r2
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f7fe ffba 	bl	8005ec8 <mem_trim>
 8006f54:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d106      	bne.n	8006f6a <pbuf_realloc+0xca>
 8006f5c:	4b0f      	ldr	r3, [pc, #60]	@ (8006f9c <pbuf_realloc+0xfc>)
 8006f5e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8006f62:	4912      	ldr	r1, [pc, #72]	@ (8006fac <pbuf_realloc+0x10c>)
 8006f64:	480f      	ldr	r0, [pc, #60]	@ (8006fa4 <pbuf_realloc+0x104>)
 8006f66:	f008 ffa1 	bl	800feac <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	897a      	ldrh	r2, [r7, #10]
 8006f6e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	895a      	ldrh	r2, [r3, #10]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d004      	beq.n	8006f8a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4618      	mov	r0, r3
 8006f86:	f000 f911 	bl	80071ac <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	601a      	str	r2, [r3, #0]
 8006f90:	e000      	b.n	8006f94 <pbuf_realloc+0xf4>
    return;
 8006f92:	bf00      	nop

}
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	08011764 	.word	0x08011764
 8006fa0:	0801187c 	.word	0x0801187c
 8006fa4:	080117c4 	.word	0x080117c4
 8006fa8:	08011894 	.word	0x08011894
 8006fac:	080118ac 	.word	0x080118ac

08006fb0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d106      	bne.n	8006fd2 <pbuf_add_header_impl+0x22>
 8006fc4:	4b2b      	ldr	r3, [pc, #172]	@ (8007074 <pbuf_add_header_impl+0xc4>)
 8006fc6:	f240 12df 	movw	r2, #479	@ 0x1df
 8006fca:	492b      	ldr	r1, [pc, #172]	@ (8007078 <pbuf_add_header_impl+0xc8>)
 8006fcc:	482b      	ldr	r0, [pc, #172]	@ (800707c <pbuf_add_header_impl+0xcc>)
 8006fce:	f008 ff6d 	bl	800feac <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d003      	beq.n	8006fe0 <pbuf_add_header_impl+0x30>
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fde:	d301      	bcc.n	8006fe4 <pbuf_add_header_impl+0x34>
    return 1;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e043      	b.n	800706c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d101      	bne.n	8006fee <pbuf_add_header_impl+0x3e>
    return 0;
 8006fea:	2300      	movs	r3, #0
 8006fec:	e03e      	b.n	800706c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	891a      	ldrh	r2, [r3, #8]
 8006ff6:	8a7b      	ldrh	r3, [r7, #18]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	8a7a      	ldrh	r2, [r7, #18]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d901      	bls.n	8007006 <pbuf_add_header_impl+0x56>
    return 1;
 8007002:	2301      	movs	r3, #1
 8007004:	e032      	b.n	800706c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	7b1b      	ldrb	r3, [r3, #12]
 800700a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800700c:	8a3b      	ldrh	r3, [r7, #16]
 800700e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00c      	beq.n	8007030 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	685a      	ldr	r2, [r3, #4]
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	425b      	negs	r3, r3
 800701e:	4413      	add	r3, r2
 8007020:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	3310      	adds	r3, #16
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	429a      	cmp	r2, r3
 800702a:	d20d      	bcs.n	8007048 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800702c:	2301      	movs	r3, #1
 800702e:	e01d      	b.n	800706c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8007030:	79fb      	ldrb	r3, [r7, #7]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d006      	beq.n	8007044 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	685a      	ldr	r2, [r3, #4]
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	425b      	negs	r3, r3
 800703e:	4413      	add	r3, r2
 8007040:	617b      	str	r3, [r7, #20]
 8007042:	e001      	b.n	8007048 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8007044:	2301      	movs	r3, #1
 8007046:	e011      	b.n	800706c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	895a      	ldrh	r2, [r3, #10]
 8007052:	8a7b      	ldrh	r3, [r7, #18]
 8007054:	4413      	add	r3, r2
 8007056:	b29a      	uxth	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	891a      	ldrh	r2, [r3, #8]
 8007060:	8a7b      	ldrh	r3, [r7, #18]
 8007062:	4413      	add	r3, r2
 8007064:	b29a      	uxth	r2, r3
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	811a      	strh	r2, [r3, #8]


  return 0;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3718      	adds	r7, #24
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	08011764 	.word	0x08011764
 8007078:	080118c8 	.word	0x080118c8
 800707c:	080117c4 	.word	0x080117c4

08007080 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800708a:	2200      	movs	r2, #0
 800708c:	6839      	ldr	r1, [r7, #0]
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7ff ff8e 	bl	8006fb0 <pbuf_add_header_impl>
 8007094:	4603      	mov	r3, r0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
	...

080070a0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d106      	bne.n	80070be <pbuf_remove_header+0x1e>
 80070b0:	4b20      	ldr	r3, [pc, #128]	@ (8007134 <pbuf_remove_header+0x94>)
 80070b2:	f240 224b 	movw	r2, #587	@ 0x24b
 80070b6:	4920      	ldr	r1, [pc, #128]	@ (8007138 <pbuf_remove_header+0x98>)
 80070b8:	4820      	ldr	r0, [pc, #128]	@ (800713c <pbuf_remove_header+0x9c>)
 80070ba:	f008 fef7 	bl	800feac <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d003      	beq.n	80070cc <pbuf_remove_header+0x2c>
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070ca:	d301      	bcc.n	80070d0 <pbuf_remove_header+0x30>
    return 1;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e02c      	b.n	800712a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d101      	bne.n	80070da <pbuf_remove_header+0x3a>
    return 0;
 80070d6:	2300      	movs	r3, #0
 80070d8:	e027      	b.n	800712a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	895b      	ldrh	r3, [r3, #10]
 80070e2:	89fa      	ldrh	r2, [r7, #14]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d908      	bls.n	80070fa <pbuf_remove_header+0x5a>
 80070e8:	4b12      	ldr	r3, [pc, #72]	@ (8007134 <pbuf_remove_header+0x94>)
 80070ea:	f240 2255 	movw	r2, #597	@ 0x255
 80070ee:	4914      	ldr	r1, [pc, #80]	@ (8007140 <pbuf_remove_header+0xa0>)
 80070f0:	4812      	ldr	r0, [pc, #72]	@ (800713c <pbuf_remove_header+0x9c>)
 80070f2:	f008 fedb 	bl	800feac <iprintf>
 80070f6:	2301      	movs	r3, #1
 80070f8:	e017      	b.n	800712a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685a      	ldr	r2, [r3, #4]
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	441a      	add	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	895a      	ldrh	r2, [r3, #10]
 8007110:	89fb      	ldrh	r3, [r7, #14]
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	b29a      	uxth	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	891a      	ldrh	r2, [r3, #8]
 800711e:	89fb      	ldrh	r3, [r7, #14]
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	b29a      	uxth	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	08011764 	.word	0x08011764
 8007138:	080118c8 	.word	0x080118c8
 800713c:	080117c4 	.word	0x080117c4
 8007140:	080118d4 	.word	0x080118d4

08007144 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	460b      	mov	r3, r1
 800714e:	807b      	strh	r3, [r7, #2]
 8007150:	4613      	mov	r3, r2
 8007152:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8007154:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007158:	2b00      	cmp	r3, #0
 800715a:	da08      	bge.n	800716e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800715c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007160:	425b      	negs	r3, r3
 8007162:	4619      	mov	r1, r3
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f7ff ff9b 	bl	80070a0 <pbuf_remove_header>
 800716a:	4603      	mov	r3, r0
 800716c:	e007      	b.n	800717e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800716e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007172:	787a      	ldrb	r2, [r7, #1]
 8007174:	4619      	mov	r1, r3
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7ff ff1a 	bl	8006fb0 <pbuf_add_header_impl>
 800717c:	4603      	mov	r3, r0
  }
}
 800717e:	4618      	mov	r0, r3
 8007180:	3708      	adds	r7, #8
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b082      	sub	sp, #8
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
 800718e:	460b      	mov	r3, r1
 8007190:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8007192:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007196:	2201      	movs	r2, #1
 8007198:	4619      	mov	r1, r3
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f7ff ffd2 	bl	8007144 <pbuf_header_impl>
 80071a0:	4603      	mov	r3, r0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
	...

080071ac <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b086      	sub	sp, #24
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d10b      	bne.n	80071d2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d106      	bne.n	80071ce <pbuf_free+0x22>
 80071c0:	4b38      	ldr	r3, [pc, #224]	@ (80072a4 <pbuf_free+0xf8>)
 80071c2:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 80071c6:	4938      	ldr	r1, [pc, #224]	@ (80072a8 <pbuf_free+0xfc>)
 80071c8:	4838      	ldr	r0, [pc, #224]	@ (80072ac <pbuf_free+0x100>)
 80071ca:	f008 fe6f 	bl	800feac <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80071ce:	2300      	movs	r3, #0
 80071d0:	e063      	b.n	800729a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80071d2:	2300      	movs	r3, #0
 80071d4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80071d6:	e05c      	b.n	8007292 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	7b9b      	ldrb	r3, [r3, #14]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d106      	bne.n	80071ee <pbuf_free+0x42>
 80071e0:	4b30      	ldr	r3, [pc, #192]	@ (80072a4 <pbuf_free+0xf8>)
 80071e2:	f240 22f1 	movw	r2, #753	@ 0x2f1
 80071e6:	4932      	ldr	r1, [pc, #200]	@ (80072b0 <pbuf_free+0x104>)
 80071e8:	4830      	ldr	r0, [pc, #192]	@ (80072ac <pbuf_free+0x100>)
 80071ea:	f008 fe5f 	bl	800feac <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	7b9b      	ldrb	r3, [r3, #14]
 80071f2:	3b01      	subs	r3, #1
 80071f4:	b2da      	uxtb	r2, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	739a      	strb	r2, [r3, #14]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	7b9b      	ldrb	r3, [r3, #14]
 80071fe:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007200:	7dbb      	ldrb	r3, [r7, #22]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d143      	bne.n	800728e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	7b1b      	ldrb	r3, [r3, #12]
 8007210:	f003 030f 	and.w	r3, r3, #15
 8007214:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	7b5b      	ldrb	r3, [r3, #13]
 800721a:	f003 0302 	and.w	r3, r3, #2
 800721e:	2b00      	cmp	r3, #0
 8007220:	d011      	beq.n	8007246 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d106      	bne.n	800723c <pbuf_free+0x90>
 800722e:	4b1d      	ldr	r3, [pc, #116]	@ (80072a4 <pbuf_free+0xf8>)
 8007230:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8007234:	491f      	ldr	r1, [pc, #124]	@ (80072b4 <pbuf_free+0x108>)
 8007236:	481d      	ldr	r0, [pc, #116]	@ (80072ac <pbuf_free+0x100>)
 8007238:	f008 fe38 	bl	800feac <iprintf>
        pc->custom_free_function(p);
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	4798      	blx	r3
 8007244:	e01d      	b.n	8007282 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007246:	7bfb      	ldrb	r3, [r7, #15]
 8007248:	2b02      	cmp	r3, #2
 800724a:	d104      	bne.n	8007256 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800724c:	6879      	ldr	r1, [r7, #4]
 800724e:	2008      	movs	r0, #8
 8007250:	f7ff f936 	bl	80064c0 <memp_free>
 8007254:	e015      	b.n	8007282 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007256:	7bfb      	ldrb	r3, [r7, #15]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d104      	bne.n	8007266 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800725c:	6879      	ldr	r1, [r7, #4]
 800725e:	2007      	movs	r0, #7
 8007260:	f7ff f92e 	bl	80064c0 <memp_free>
 8007264:	e00d      	b.n	8007282 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007266:	7bfb      	ldrb	r3, [r7, #15]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d103      	bne.n	8007274 <pbuf_free+0xc8>
          mem_free(p);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f7fe fdc1 	bl	8005df4 <mem_free>
 8007272:	e006      	b.n	8007282 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8007274:	4b0b      	ldr	r3, [pc, #44]	@ (80072a4 <pbuf_free+0xf8>)
 8007276:	f240 320f 	movw	r2, #783	@ 0x30f
 800727a:	490f      	ldr	r1, [pc, #60]	@ (80072b8 <pbuf_free+0x10c>)
 800727c:	480b      	ldr	r0, [pc, #44]	@ (80072ac <pbuf_free+0x100>)
 800727e:	f008 fe15 	bl	800feac <iprintf>
        }
      }
      count++;
 8007282:	7dfb      	ldrb	r3, [r7, #23]
 8007284:	3301      	adds	r3, #1
 8007286:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	607b      	str	r3, [r7, #4]
 800728c:	e001      	b.n	8007292 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800728e:	2300      	movs	r3, #0
 8007290:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d19f      	bne.n	80071d8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007298:	7dfb      	ldrb	r3, [r7, #23]
}
 800729a:	4618      	mov	r0, r3
 800729c:	3718      	adds	r7, #24
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	08011764 	.word	0x08011764
 80072a8:	080118c8 	.word	0x080118c8
 80072ac:	080117c4 	.word	0x080117c4
 80072b0:	080118f4 	.word	0x080118f4
 80072b4:	0801190c 	.word	0x0801190c
 80072b8:	08011930 	.word	0x08011930

080072bc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80072bc:	b480      	push	{r7}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80072c4:	2300      	movs	r3, #0
 80072c6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80072c8:	e005      	b.n	80072d6 <pbuf_clen+0x1a>
    ++len;
 80072ca:	89fb      	ldrh	r3, [r7, #14]
 80072cc:	3301      	adds	r3, #1
 80072ce:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1f6      	bne.n	80072ca <pbuf_clen+0xe>
  }
  return len;
 80072dc:	89fb      	ldrh	r3, [r7, #14]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3714      	adds	r7, #20
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
	...

080072ec <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d010      	beq.n	800731c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	7b9b      	ldrb	r3, [r3, #14]
 80072fe:	3301      	adds	r3, #1
 8007300:	b2da      	uxtb	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	7b9b      	ldrb	r3, [r3, #14]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d106      	bne.n	800731c <pbuf_ref+0x30>
 800730e:	4b05      	ldr	r3, [pc, #20]	@ (8007324 <pbuf_ref+0x38>)
 8007310:	f240 3242 	movw	r2, #834	@ 0x342
 8007314:	4904      	ldr	r1, [pc, #16]	@ (8007328 <pbuf_ref+0x3c>)
 8007316:	4805      	ldr	r0, [pc, #20]	@ (800732c <pbuf_ref+0x40>)
 8007318:	f008 fdc8 	bl	800feac <iprintf>
  }
}
 800731c:	bf00      	nop
 800731e:	3708      	adds	r7, #8
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	08011764 	.word	0x08011764
 8007328:	08011944 	.word	0x08011944
 800732c:	080117c4 	.word	0x080117c4

08007330 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d002      	beq.n	8007346 <pbuf_cat+0x16>
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d107      	bne.n	8007356 <pbuf_cat+0x26>
 8007346:	4b20      	ldr	r3, [pc, #128]	@ (80073c8 <pbuf_cat+0x98>)
 8007348:	f240 3259 	movw	r2, #857	@ 0x359
 800734c:	491f      	ldr	r1, [pc, #124]	@ (80073cc <pbuf_cat+0x9c>)
 800734e:	4820      	ldr	r0, [pc, #128]	@ (80073d0 <pbuf_cat+0xa0>)
 8007350:	f008 fdac 	bl	800feac <iprintf>
 8007354:	e034      	b.n	80073c0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	60fb      	str	r3, [r7, #12]
 800735a:	e00a      	b.n	8007372 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	891a      	ldrh	r2, [r3, #8]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	891b      	ldrh	r3, [r3, #8]
 8007364:	4413      	add	r3, r2
 8007366:	b29a      	uxth	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	60fb      	str	r3, [r7, #12]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1f0      	bne.n	800735c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	891a      	ldrh	r2, [r3, #8]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	895b      	ldrh	r3, [r3, #10]
 8007382:	429a      	cmp	r2, r3
 8007384:	d006      	beq.n	8007394 <pbuf_cat+0x64>
 8007386:	4b10      	ldr	r3, [pc, #64]	@ (80073c8 <pbuf_cat+0x98>)
 8007388:	f240 3262 	movw	r2, #866	@ 0x362
 800738c:	4911      	ldr	r1, [pc, #68]	@ (80073d4 <pbuf_cat+0xa4>)
 800738e:	4810      	ldr	r0, [pc, #64]	@ (80073d0 <pbuf_cat+0xa0>)
 8007390:	f008 fd8c 	bl	800feac <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d006      	beq.n	80073aa <pbuf_cat+0x7a>
 800739c:	4b0a      	ldr	r3, [pc, #40]	@ (80073c8 <pbuf_cat+0x98>)
 800739e:	f240 3263 	movw	r2, #867	@ 0x363
 80073a2:	490d      	ldr	r1, [pc, #52]	@ (80073d8 <pbuf_cat+0xa8>)
 80073a4:	480a      	ldr	r0, [pc, #40]	@ (80073d0 <pbuf_cat+0xa0>)
 80073a6:	f008 fd81 	bl	800feac <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	891a      	ldrh	r2, [r3, #8]
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	891b      	ldrh	r3, [r3, #8]
 80073b2:	4413      	add	r3, r2
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	683a      	ldr	r2, [r7, #0]
 80073be:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	08011764 	.word	0x08011764
 80073cc:	08011958 	.word	0x08011958
 80073d0:	080117c4 	.word	0x080117c4
 80073d4:	08011990 	.word	0x08011990
 80073d8:	080119c0 	.word	0x080119c0

080073dc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80073e6:	6839      	ldr	r1, [r7, #0]
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f7ff ffa1 	bl	8007330 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80073ee:	6838      	ldr	r0, [r7, #0]
 80073f0:	f7ff ff7c 	bl	80072ec <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80073f4:	bf00      	nop
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b086      	sub	sp, #24
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007406:	2300      	movs	r3, #0
 8007408:	617b      	str	r3, [r7, #20]
 800740a:	2300      	movs	r3, #0
 800740c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d008      	beq.n	8007426 <pbuf_copy+0x2a>
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d005      	beq.n	8007426 <pbuf_copy+0x2a>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	891a      	ldrh	r2, [r3, #8]
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	891b      	ldrh	r3, [r3, #8]
 8007422:	429a      	cmp	r2, r3
 8007424:	d209      	bcs.n	800743a <pbuf_copy+0x3e>
 8007426:	4b57      	ldr	r3, [pc, #348]	@ (8007584 <pbuf_copy+0x188>)
 8007428:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800742c:	4956      	ldr	r1, [pc, #344]	@ (8007588 <pbuf_copy+0x18c>)
 800742e:	4857      	ldr	r0, [pc, #348]	@ (800758c <pbuf_copy+0x190>)
 8007430:	f008 fd3c 	bl	800feac <iprintf>
 8007434:	f06f 030f 	mvn.w	r3, #15
 8007438:	e09f      	b.n	800757a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	895b      	ldrh	r3, [r3, #10]
 800743e:	461a      	mov	r2, r3
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	1ad2      	subs	r2, r2, r3
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	895b      	ldrh	r3, [r3, #10]
 8007448:	4619      	mov	r1, r3
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	1acb      	subs	r3, r1, r3
 800744e:	429a      	cmp	r2, r3
 8007450:	d306      	bcc.n	8007460 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	895b      	ldrh	r3, [r3, #10]
 8007456:	461a      	mov	r2, r3
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	60fb      	str	r3, [r7, #12]
 800745e:	e005      	b.n	800746c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	895b      	ldrh	r3, [r3, #10]
 8007464:	461a      	mov	r2, r3
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685a      	ldr	r2, [r3, #4]
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	18d0      	adds	r0, r2, r3
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	4413      	add	r3, r2
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	4619      	mov	r1, r3
 8007480:	f008 fe65 	bl	801014e <memcpy>
    offset_to += len;
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	4413      	add	r3, r2
 800748a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800748c:	693a      	ldr	r2, [r7, #16]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	4413      	add	r3, r2
 8007492:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	895b      	ldrh	r3, [r3, #10]
 8007498:	461a      	mov	r2, r3
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	4293      	cmp	r3, r2
 800749e:	d906      	bls.n	80074ae <pbuf_copy+0xb2>
 80074a0:	4b38      	ldr	r3, [pc, #224]	@ (8007584 <pbuf_copy+0x188>)
 80074a2:	f240 32d9 	movw	r2, #985	@ 0x3d9
 80074a6:	493a      	ldr	r1, [pc, #232]	@ (8007590 <pbuf_copy+0x194>)
 80074a8:	4838      	ldr	r0, [pc, #224]	@ (800758c <pbuf_copy+0x190>)
 80074aa:	f008 fcff 	bl	800feac <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	895b      	ldrh	r3, [r3, #10]
 80074b2:	461a      	mov	r2, r3
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d906      	bls.n	80074c8 <pbuf_copy+0xcc>
 80074ba:	4b32      	ldr	r3, [pc, #200]	@ (8007584 <pbuf_copy+0x188>)
 80074bc:	f240 32da 	movw	r2, #986	@ 0x3da
 80074c0:	4934      	ldr	r1, [pc, #208]	@ (8007594 <pbuf_copy+0x198>)
 80074c2:	4832      	ldr	r0, [pc, #200]	@ (800758c <pbuf_copy+0x190>)
 80074c4:	f008 fcf2 	bl	800feac <iprintf>
    if (offset_from >= p_from->len) {
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	895b      	ldrh	r3, [r3, #10]
 80074cc:	461a      	mov	r2, r3
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d304      	bcc.n	80074de <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80074d4:	2300      	movs	r3, #0
 80074d6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	895b      	ldrh	r3, [r3, #10]
 80074e2:	461a      	mov	r2, r3
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d114      	bne.n	8007514 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80074ea:	2300      	movs	r3, #0
 80074ec:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d10c      	bne.n	8007514 <pbuf_copy+0x118>
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d009      	beq.n	8007514 <pbuf_copy+0x118>
 8007500:	4b20      	ldr	r3, [pc, #128]	@ (8007584 <pbuf_copy+0x188>)
 8007502:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8007506:	4924      	ldr	r1, [pc, #144]	@ (8007598 <pbuf_copy+0x19c>)
 8007508:	4820      	ldr	r0, [pc, #128]	@ (800758c <pbuf_copy+0x190>)
 800750a:	f008 fccf 	bl	800feac <iprintf>
 800750e:	f06f 030f 	mvn.w	r3, #15
 8007512:	e032      	b.n	800757a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d013      	beq.n	8007542 <pbuf_copy+0x146>
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	895a      	ldrh	r2, [r3, #10]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	891b      	ldrh	r3, [r3, #8]
 8007522:	429a      	cmp	r2, r3
 8007524:	d10d      	bne.n	8007542 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d009      	beq.n	8007542 <pbuf_copy+0x146>
 800752e:	4b15      	ldr	r3, [pc, #84]	@ (8007584 <pbuf_copy+0x188>)
 8007530:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8007534:	4919      	ldr	r1, [pc, #100]	@ (800759c <pbuf_copy+0x1a0>)
 8007536:	4815      	ldr	r0, [pc, #84]	@ (800758c <pbuf_copy+0x190>)
 8007538:	f008 fcb8 	bl	800feac <iprintf>
 800753c:	f06f 0305 	mvn.w	r3, #5
 8007540:	e01b      	b.n	800757a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d013      	beq.n	8007570 <pbuf_copy+0x174>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	895a      	ldrh	r2, [r3, #10]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	891b      	ldrh	r3, [r3, #8]
 8007550:	429a      	cmp	r2, r3
 8007552:	d10d      	bne.n	8007570 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d009      	beq.n	8007570 <pbuf_copy+0x174>
 800755c:	4b09      	ldr	r3, [pc, #36]	@ (8007584 <pbuf_copy+0x188>)
 800755e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8007562:	490e      	ldr	r1, [pc, #56]	@ (800759c <pbuf_copy+0x1a0>)
 8007564:	4809      	ldr	r0, [pc, #36]	@ (800758c <pbuf_copy+0x190>)
 8007566:	f008 fca1 	bl	800feac <iprintf>
 800756a:	f06f 0305 	mvn.w	r3, #5
 800756e:	e004      	b.n	800757a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	f47f af61 	bne.w	800743a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3718      	adds	r7, #24
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	08011764 	.word	0x08011764
 8007588:	08011a0c 	.word	0x08011a0c
 800758c:	080117c4 	.word	0x080117c4
 8007590:	08011a3c 	.word	0x08011a3c
 8007594:	08011a54 	.word	0x08011a54
 8007598:	08011a70 	.word	0x08011a70
 800759c:	08011a80 	.word	0x08011a80

080075a0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b088      	sub	sp, #32
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	4611      	mov	r1, r2
 80075ac:	461a      	mov	r2, r3
 80075ae:	460b      	mov	r3, r1
 80075b0:	80fb      	strh	r3, [r7, #6]
 80075b2:	4613      	mov	r3, r2
 80075b4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80075b6:	2300      	movs	r3, #0
 80075b8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80075ba:	2300      	movs	r3, #0
 80075bc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d108      	bne.n	80075d6 <pbuf_copy_partial+0x36>
 80075c4:	4b2b      	ldr	r3, [pc, #172]	@ (8007674 <pbuf_copy_partial+0xd4>)
 80075c6:	f240 420a 	movw	r2, #1034	@ 0x40a
 80075ca:	492b      	ldr	r1, [pc, #172]	@ (8007678 <pbuf_copy_partial+0xd8>)
 80075cc:	482b      	ldr	r0, [pc, #172]	@ (800767c <pbuf_copy_partial+0xdc>)
 80075ce:	f008 fc6d 	bl	800feac <iprintf>
 80075d2:	2300      	movs	r3, #0
 80075d4:	e04a      	b.n	800766c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d108      	bne.n	80075ee <pbuf_copy_partial+0x4e>
 80075dc:	4b25      	ldr	r3, [pc, #148]	@ (8007674 <pbuf_copy_partial+0xd4>)
 80075de:	f240 420b 	movw	r2, #1035	@ 0x40b
 80075e2:	4927      	ldr	r1, [pc, #156]	@ (8007680 <pbuf_copy_partial+0xe0>)
 80075e4:	4825      	ldr	r0, [pc, #148]	@ (800767c <pbuf_copy_partial+0xdc>)
 80075e6:	f008 fc61 	bl	800feac <iprintf>
 80075ea:	2300      	movs	r3, #0
 80075ec:	e03e      	b.n	800766c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	61fb      	str	r3, [r7, #28]
 80075f2:	e034      	b.n	800765e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80075f4:	88bb      	ldrh	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00a      	beq.n	8007610 <pbuf_copy_partial+0x70>
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	895b      	ldrh	r3, [r3, #10]
 80075fe:	88ba      	ldrh	r2, [r7, #4]
 8007600:	429a      	cmp	r2, r3
 8007602:	d305      	bcc.n	8007610 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	895b      	ldrh	r3, [r3, #10]
 8007608:	88ba      	ldrh	r2, [r7, #4]
 800760a:	1ad3      	subs	r3, r2, r3
 800760c:	80bb      	strh	r3, [r7, #4]
 800760e:	e023      	b.n	8007658 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	895a      	ldrh	r2, [r3, #10]
 8007614:	88bb      	ldrh	r3, [r7, #4]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800761a:	8b3a      	ldrh	r2, [r7, #24]
 800761c:	88fb      	ldrh	r3, [r7, #6]
 800761e:	429a      	cmp	r2, r3
 8007620:	d901      	bls.n	8007626 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8007622:	88fb      	ldrh	r3, [r7, #6]
 8007624:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007626:	8b7b      	ldrh	r3, [r7, #26]
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	18d0      	adds	r0, r2, r3
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	685a      	ldr	r2, [r3, #4]
 8007630:	88bb      	ldrh	r3, [r7, #4]
 8007632:	4413      	add	r3, r2
 8007634:	8b3a      	ldrh	r2, [r7, #24]
 8007636:	4619      	mov	r1, r3
 8007638:	f008 fd89 	bl	801014e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800763c:	8afa      	ldrh	r2, [r7, #22]
 800763e:	8b3b      	ldrh	r3, [r7, #24]
 8007640:	4413      	add	r3, r2
 8007642:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8007644:	8b7a      	ldrh	r2, [r7, #26]
 8007646:	8b3b      	ldrh	r3, [r7, #24]
 8007648:	4413      	add	r3, r2
 800764a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800764c:	88fa      	ldrh	r2, [r7, #6]
 800764e:	8b3b      	ldrh	r3, [r7, #24]
 8007650:	1ad3      	subs	r3, r2, r3
 8007652:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007654:	2300      	movs	r3, #0
 8007656:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	61fb      	str	r3, [r7, #28]
 800765e:	88fb      	ldrh	r3, [r7, #6]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d002      	beq.n	800766a <pbuf_copy_partial+0xca>
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1c4      	bne.n	80075f4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800766a:	8afb      	ldrh	r3, [r7, #22]
}
 800766c:	4618      	mov	r0, r3
 800766e:	3720      	adds	r7, #32
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	08011764 	.word	0x08011764
 8007678:	08011aac 	.word	0x08011aac
 800767c:	080117c4 	.word	0x080117c4
 8007680:	08011acc 	.word	0x08011acc

08007684 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b088      	sub	sp, #32
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	4613      	mov	r3, r2
 8007690:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8007692:	88fb      	ldrh	r3, [r7, #6]
 8007694:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8007696:	2300      	movs	r3, #0
 8007698:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d109      	bne.n	80076b4 <pbuf_take+0x30>
 80076a0:	4b3a      	ldr	r3, [pc, #232]	@ (800778c <pbuf_take+0x108>)
 80076a2:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 80076a6:	493a      	ldr	r1, [pc, #232]	@ (8007790 <pbuf_take+0x10c>)
 80076a8:	483a      	ldr	r0, [pc, #232]	@ (8007794 <pbuf_take+0x110>)
 80076aa:	f008 fbff 	bl	800feac <iprintf>
 80076ae:	f06f 030f 	mvn.w	r3, #15
 80076b2:	e067      	b.n	8007784 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d109      	bne.n	80076ce <pbuf_take+0x4a>
 80076ba:	4b34      	ldr	r3, [pc, #208]	@ (800778c <pbuf_take+0x108>)
 80076bc:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 80076c0:	4935      	ldr	r1, [pc, #212]	@ (8007798 <pbuf_take+0x114>)
 80076c2:	4834      	ldr	r0, [pc, #208]	@ (8007794 <pbuf_take+0x110>)
 80076c4:	f008 fbf2 	bl	800feac <iprintf>
 80076c8:	f06f 030f 	mvn.w	r3, #15
 80076cc:	e05a      	b.n	8007784 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	891b      	ldrh	r3, [r3, #8]
 80076d2:	88fa      	ldrh	r2, [r7, #6]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d909      	bls.n	80076ec <pbuf_take+0x68>
 80076d8:	4b2c      	ldr	r3, [pc, #176]	@ (800778c <pbuf_take+0x108>)
 80076da:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 80076de:	492f      	ldr	r1, [pc, #188]	@ (800779c <pbuf_take+0x118>)
 80076e0:	482c      	ldr	r0, [pc, #176]	@ (8007794 <pbuf_take+0x110>)
 80076e2:	f008 fbe3 	bl	800feac <iprintf>
 80076e6:	f04f 33ff 	mov.w	r3, #4294967295
 80076ea:	e04b      	b.n	8007784 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d007      	beq.n	8007702 <pbuf_take+0x7e>
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d004      	beq.n	8007702 <pbuf_take+0x7e>
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	891b      	ldrh	r3, [r3, #8]
 80076fc:	88fa      	ldrh	r2, [r7, #6]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d902      	bls.n	8007708 <pbuf_take+0x84>
    return ERR_ARG;
 8007702:	f06f 030f 	mvn.w	r3, #15
 8007706:	e03d      	b.n	8007784 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	61fb      	str	r3, [r7, #28]
 800770c:	e028      	b.n	8007760 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d106      	bne.n	8007722 <pbuf_take+0x9e>
 8007714:	4b1d      	ldr	r3, [pc, #116]	@ (800778c <pbuf_take+0x108>)
 8007716:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 800771a:	4921      	ldr	r1, [pc, #132]	@ (80077a0 <pbuf_take+0x11c>)
 800771c:	481d      	ldr	r0, [pc, #116]	@ (8007794 <pbuf_take+0x110>)
 800771e:	f008 fbc5 	bl	800feac <iprintf>
    buf_copy_len = total_copy_len;
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	895b      	ldrh	r3, [r3, #10]
 800772a:	461a      	mov	r2, r3
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	4293      	cmp	r3, r2
 8007730:	d902      	bls.n	8007738 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	895b      	ldrh	r3, [r3, #10]
 8007736:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	6858      	ldr	r0, [r3, #4]
 800773c:	68ba      	ldr	r2, [r7, #8]
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	4413      	add	r3, r2
 8007742:	69ba      	ldr	r2, [r7, #24]
 8007744:	4619      	mov	r1, r3
 8007746:	f008 fd02 	bl	801014e <memcpy>
    total_copy_len -= buf_copy_len;
 800774a:	697a      	ldr	r2, [r7, #20]
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8007752:	693a      	ldr	r2, [r7, #16]
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	4413      	add	r3, r2
 8007758:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	61fb      	str	r3, [r7, #28]
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1d3      	bne.n	800770e <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d103      	bne.n	8007774 <pbuf_take+0xf0>
 800776c:	88fb      	ldrh	r3, [r7, #6]
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	429a      	cmp	r2, r3
 8007772:	d006      	beq.n	8007782 <pbuf_take+0xfe>
 8007774:	4b05      	ldr	r3, [pc, #20]	@ (800778c <pbuf_take+0x108>)
 8007776:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 800777a:	490a      	ldr	r1, [pc, #40]	@ (80077a4 <pbuf_take+0x120>)
 800777c:	4805      	ldr	r0, [pc, #20]	@ (8007794 <pbuf_take+0x110>)
 800777e:	f008 fb95 	bl	800feac <iprintf>
  return ERR_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3720      	adds	r7, #32
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	08011764 	.word	0x08011764
 8007790:	08011b3c 	.word	0x08011b3c
 8007794:	080117c4 	.word	0x080117c4
 8007798:	08011b54 	.word	0x08011b54
 800779c:	08011b70 	.word	0x08011b70
 80077a0:	08011b90 	.word	0x08011b90
 80077a4:	08011ba8 	.word	0x08011ba8

080077a8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	4603      	mov	r3, r0
 80077b0:	603a      	str	r2, [r7, #0]
 80077b2:	71fb      	strb	r3, [r7, #7]
 80077b4:	460b      	mov	r3, r1
 80077b6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	8919      	ldrh	r1, [r3, #8]
 80077bc:	88ba      	ldrh	r2, [r7, #4]
 80077be:	79fb      	ldrb	r3, [r7, #7]
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7ff fa0f 	bl	8006be4 <pbuf_alloc>
 80077c6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d101      	bne.n	80077d2 <pbuf_clone+0x2a>
    return NULL;
 80077ce:	2300      	movs	r3, #0
 80077d0:	e011      	b.n	80077f6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80077d2:	6839      	ldr	r1, [r7, #0]
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f7ff fe11 	bl	80073fc <pbuf_copy>
 80077da:	4603      	mov	r3, r0
 80077dc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80077de:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d006      	beq.n	80077f4 <pbuf_clone+0x4c>
 80077e6:	4b06      	ldr	r3, [pc, #24]	@ (8007800 <pbuf_clone+0x58>)
 80077e8:	f240 5224 	movw	r2, #1316	@ 0x524
 80077ec:	4905      	ldr	r1, [pc, #20]	@ (8007804 <pbuf_clone+0x5c>)
 80077ee:	4806      	ldr	r0, [pc, #24]	@ (8007808 <pbuf_clone+0x60>)
 80077f0:	f008 fb5c 	bl	800feac <iprintf>
  return q;
 80077f4:	68fb      	ldr	r3, [r7, #12]
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	08011764 	.word	0x08011764
 8007804:	08011bd8 	.word	0x08011bd8
 8007808:	080117c4 	.word	0x080117c4

0800780c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007810:	f008 fa4c 	bl	800fcac <rand>
 8007814:	4603      	mov	r3, r0
 8007816:	b29b      	uxth	r3, r3
 8007818:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800781c:	b29b      	uxth	r3, r3
 800781e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8007822:	b29a      	uxth	r2, r3
 8007824:	4b01      	ldr	r3, [pc, #4]	@ (800782c <tcp_init+0x20>)
 8007826:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007828:	bf00      	nop
 800782a:	bd80      	pop	{r7, pc}
 800782c:	20000020 	.word	0x20000020

08007830 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	7d1b      	ldrb	r3, [r3, #20]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d105      	bne.n	800784c <tcp_free+0x1c>
 8007840:	4b06      	ldr	r3, [pc, #24]	@ (800785c <tcp_free+0x2c>)
 8007842:	22d4      	movs	r2, #212	@ 0xd4
 8007844:	4906      	ldr	r1, [pc, #24]	@ (8007860 <tcp_free+0x30>)
 8007846:	4807      	ldr	r0, [pc, #28]	@ (8007864 <tcp_free+0x34>)
 8007848:	f008 fb30 	bl	800feac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800784c:	6879      	ldr	r1, [r7, #4]
 800784e:	2001      	movs	r0, #1
 8007850:	f7fe fe36 	bl	80064c0 <memp_free>
}
 8007854:	bf00      	nop
 8007856:	3708      	adds	r7, #8
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	08011c64 	.word	0x08011c64
 8007860:	08011c94 	.word	0x08011c94
 8007864:	08011ca8 	.word	0x08011ca8

08007868 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	7d1b      	ldrb	r3, [r3, #20]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d105      	bne.n	8007884 <tcp_free_listen+0x1c>
 8007878:	4b06      	ldr	r3, [pc, #24]	@ (8007894 <tcp_free_listen+0x2c>)
 800787a:	22df      	movs	r2, #223	@ 0xdf
 800787c:	4906      	ldr	r1, [pc, #24]	@ (8007898 <tcp_free_listen+0x30>)
 800787e:	4807      	ldr	r0, [pc, #28]	@ (800789c <tcp_free_listen+0x34>)
 8007880:	f008 fb14 	bl	800feac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007884:	6879      	ldr	r1, [r7, #4]
 8007886:	2002      	movs	r0, #2
 8007888:	f7fe fe1a 	bl	80064c0 <memp_free>
}
 800788c:	bf00      	nop
 800788e:	3708      	adds	r7, #8
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	08011c64 	.word	0x08011c64
 8007898:	08011cd0 	.word	0x08011cd0
 800789c:	08011ca8 	.word	0x08011ca8

080078a0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80078a4:	f000 fea4 	bl	80085f0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80078a8:	4b07      	ldr	r3, [pc, #28]	@ (80078c8 <tcp_tmr+0x28>)
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	3301      	adds	r3, #1
 80078ae:	b2da      	uxtb	r2, r3
 80078b0:	4b05      	ldr	r3, [pc, #20]	@ (80078c8 <tcp_tmr+0x28>)
 80078b2:	701a      	strb	r2, [r3, #0]
 80078b4:	4b04      	ldr	r3, [pc, #16]	@ (80078c8 <tcp_tmr+0x28>)
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	f003 0301 	and.w	r3, r3, #1
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d001      	beq.n	80078c4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80078c0:	f000 fb54 	bl	8007f6c <tcp_slowtmr>
  }
}
 80078c4:	bf00      	nop
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	200087e5 	.word	0x200087e5

080078cc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d105      	bne.n	80078e8 <tcp_remove_listener+0x1c>
 80078dc:	4b0d      	ldr	r3, [pc, #52]	@ (8007914 <tcp_remove_listener+0x48>)
 80078de:	22ff      	movs	r2, #255	@ 0xff
 80078e0:	490d      	ldr	r1, [pc, #52]	@ (8007918 <tcp_remove_listener+0x4c>)
 80078e2:	480e      	ldr	r0, [pc, #56]	@ (800791c <tcp_remove_listener+0x50>)
 80078e4:	f008 fae2 	bl	800feac <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	60fb      	str	r3, [r7, #12]
 80078ec:	e00a      	b.n	8007904 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d102      	bne.n	80078fe <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	60fb      	str	r3, [r7, #12]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d1f1      	bne.n	80078ee <tcp_remove_listener+0x22>
    }
  }
}
 800790a:	bf00      	nop
 800790c:	bf00      	nop
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	08011c64 	.word	0x08011c64
 8007918:	08011cec 	.word	0x08011cec
 800791c:	08011ca8 	.word	0x08011ca8

08007920 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d106      	bne.n	800793c <tcp_listen_closed+0x1c>
 800792e:	4b14      	ldr	r3, [pc, #80]	@ (8007980 <tcp_listen_closed+0x60>)
 8007930:	f240 1211 	movw	r2, #273	@ 0x111
 8007934:	4913      	ldr	r1, [pc, #76]	@ (8007984 <tcp_listen_closed+0x64>)
 8007936:	4814      	ldr	r0, [pc, #80]	@ (8007988 <tcp_listen_closed+0x68>)
 8007938:	f008 fab8 	bl	800feac <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	7d1b      	ldrb	r3, [r3, #20]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d006      	beq.n	8007952 <tcp_listen_closed+0x32>
 8007944:	4b0e      	ldr	r3, [pc, #56]	@ (8007980 <tcp_listen_closed+0x60>)
 8007946:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800794a:	4910      	ldr	r1, [pc, #64]	@ (800798c <tcp_listen_closed+0x6c>)
 800794c:	480e      	ldr	r0, [pc, #56]	@ (8007988 <tcp_listen_closed+0x68>)
 800794e:	f008 faad 	bl	800feac <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007952:	2301      	movs	r3, #1
 8007954:	60fb      	str	r3, [r7, #12]
 8007956:	e00b      	b.n	8007970 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8007958:	4a0d      	ldr	r2, [pc, #52]	@ (8007990 <tcp_listen_closed+0x70>)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	6879      	ldr	r1, [r7, #4]
 8007964:	4618      	mov	r0, r3
 8007966:	f7ff ffb1 	bl	80078cc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	3301      	adds	r3, #1
 800796e:	60fb      	str	r3, [r7, #12]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2b03      	cmp	r3, #3
 8007974:	d9f0      	bls.n	8007958 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8007976:	bf00      	nop
 8007978:	bf00      	nop
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	08011c64 	.word	0x08011c64
 8007984:	08011d14 	.word	0x08011d14
 8007988:	08011ca8 	.word	0x08011ca8
 800798c:	08011d20 	.word	0x08011d20
 8007990:	08013c44 	.word	0x08013c44

08007994 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8007994:	b5b0      	push	{r4, r5, r7, lr}
 8007996:	b088      	sub	sp, #32
 8007998:	af04      	add	r7, sp, #16
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	460b      	mov	r3, r1
 800799e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d106      	bne.n	80079b4 <tcp_close_shutdown+0x20>
 80079a6:	4b63      	ldr	r3, [pc, #396]	@ (8007b34 <tcp_close_shutdown+0x1a0>)
 80079a8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80079ac:	4962      	ldr	r1, [pc, #392]	@ (8007b38 <tcp_close_shutdown+0x1a4>)
 80079ae:	4863      	ldr	r0, [pc, #396]	@ (8007b3c <tcp_close_shutdown+0x1a8>)
 80079b0:	f008 fa7c 	bl	800feac <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80079b4:	78fb      	ldrb	r3, [r7, #3]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d066      	beq.n	8007a88 <tcp_close_shutdown+0xf4>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	7d1b      	ldrb	r3, [r3, #20]
 80079be:	2b04      	cmp	r3, #4
 80079c0:	d003      	beq.n	80079ca <tcp_close_shutdown+0x36>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	7d1b      	ldrb	r3, [r3, #20]
 80079c6:	2b07      	cmp	r3, #7
 80079c8:	d15e      	bne.n	8007a88 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d104      	bne.n	80079dc <tcp_close_shutdown+0x48>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079d6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80079da:	d055      	beq.n	8007a88 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	8b5b      	ldrh	r3, [r3, #26]
 80079e0:	f003 0310 	and.w	r3, r3, #16
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d106      	bne.n	80079f6 <tcp_close_shutdown+0x62>
 80079e8:	4b52      	ldr	r3, [pc, #328]	@ (8007b34 <tcp_close_shutdown+0x1a0>)
 80079ea:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 80079ee:	4954      	ldr	r1, [pc, #336]	@ (8007b40 <tcp_close_shutdown+0x1ac>)
 80079f0:	4852      	ldr	r0, [pc, #328]	@ (8007b3c <tcp_close_shutdown+0x1a8>)
 80079f2:	f008 fa5b 	bl	800feac <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80079fe:	687d      	ldr	r5, [r7, #4]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	3304      	adds	r3, #4
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	8ad2      	ldrh	r2, [r2, #22]
 8007a08:	6879      	ldr	r1, [r7, #4]
 8007a0a:	8b09      	ldrh	r1, [r1, #24]
 8007a0c:	9102      	str	r1, [sp, #8]
 8007a0e:	9201      	str	r2, [sp, #4]
 8007a10:	9300      	str	r3, [sp, #0]
 8007a12:	462b      	mov	r3, r5
 8007a14:	4622      	mov	r2, r4
 8007a16:	4601      	mov	r1, r0
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f004 fe8d 	bl	800c738 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f001 f8c8 	bl	8008bb4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007a24:	4b47      	ldr	r3, [pc, #284]	@ (8007b44 <tcp_close_shutdown+0x1b0>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d105      	bne.n	8007a3a <tcp_close_shutdown+0xa6>
 8007a2e:	4b45      	ldr	r3, [pc, #276]	@ (8007b44 <tcp_close_shutdown+0x1b0>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	4a43      	ldr	r2, [pc, #268]	@ (8007b44 <tcp_close_shutdown+0x1b0>)
 8007a36:	6013      	str	r3, [r2, #0]
 8007a38:	e013      	b.n	8007a62 <tcp_close_shutdown+0xce>
 8007a3a:	4b42      	ldr	r3, [pc, #264]	@ (8007b44 <tcp_close_shutdown+0x1b0>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	60fb      	str	r3, [r7, #12]
 8007a40:	e00c      	b.n	8007a5c <tcp_close_shutdown+0xc8>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d104      	bne.n	8007a56 <tcp_close_shutdown+0xc2>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	68da      	ldr	r2, [r3, #12]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	60da      	str	r2, [r3, #12]
 8007a54:	e005      	b.n	8007a62 <tcp_close_shutdown+0xce>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	60fb      	str	r3, [r7, #12]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1ef      	bne.n	8007a42 <tcp_close_shutdown+0xae>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	60da      	str	r2, [r3, #12]
 8007a68:	4b37      	ldr	r3, [pc, #220]	@ (8007b48 <tcp_close_shutdown+0x1b4>)
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8007a6e:	4b37      	ldr	r3, [pc, #220]	@ (8007b4c <tcp_close_shutdown+0x1b8>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d102      	bne.n	8007a7e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8007a78:	f003 fd5c 	bl	800b534 <tcp_trigger_input_pcb_close>
 8007a7c:	e002      	b.n	8007a84 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f7ff fed6 	bl	8007830 <tcp_free>
      }
      return ERR_OK;
 8007a84:	2300      	movs	r3, #0
 8007a86:	e050      	b.n	8007b2a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	7d1b      	ldrb	r3, [r3, #20]
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d03b      	beq.n	8007b08 <tcp_close_shutdown+0x174>
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	dc44      	bgt.n	8007b1e <tcp_close_shutdown+0x18a>
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d002      	beq.n	8007a9e <tcp_close_shutdown+0x10a>
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d02a      	beq.n	8007af2 <tcp_close_shutdown+0x15e>
 8007a9c:	e03f      	b.n	8007b1e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	8adb      	ldrh	r3, [r3, #22]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d021      	beq.n	8007aea <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007aa6:	4b2a      	ldr	r3, [pc, #168]	@ (8007b50 <tcp_close_shutdown+0x1bc>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d105      	bne.n	8007abc <tcp_close_shutdown+0x128>
 8007ab0:	4b27      	ldr	r3, [pc, #156]	@ (8007b50 <tcp_close_shutdown+0x1bc>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	4a26      	ldr	r2, [pc, #152]	@ (8007b50 <tcp_close_shutdown+0x1bc>)
 8007ab8:	6013      	str	r3, [r2, #0]
 8007aba:	e013      	b.n	8007ae4 <tcp_close_shutdown+0x150>
 8007abc:	4b24      	ldr	r3, [pc, #144]	@ (8007b50 <tcp_close_shutdown+0x1bc>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	60bb      	str	r3, [r7, #8]
 8007ac2:	e00c      	b.n	8007ade <tcp_close_shutdown+0x14a>
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d104      	bne.n	8007ad8 <tcp_close_shutdown+0x144>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	68da      	ldr	r2, [r3, #12]
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	60da      	str	r2, [r3, #12]
 8007ad6:	e005      	b.n	8007ae4 <tcp_close_shutdown+0x150>
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	60bb      	str	r3, [r7, #8]
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1ef      	bne.n	8007ac4 <tcp_close_shutdown+0x130>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f7ff fea0 	bl	8007830 <tcp_free>
      break;
 8007af0:	e01a      	b.n	8007b28 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f7ff ff14 	bl	8007920 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007af8:	6879      	ldr	r1, [r7, #4]
 8007afa:	4816      	ldr	r0, [pc, #88]	@ (8007b54 <tcp_close_shutdown+0x1c0>)
 8007afc:	f001 f8aa 	bl	8008c54 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f7ff feb1 	bl	8007868 <tcp_free_listen>
      break;
 8007b06:	e00f      	b.n	8007b28 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007b08:	6879      	ldr	r1, [r7, #4]
 8007b0a:	480e      	ldr	r0, [pc, #56]	@ (8007b44 <tcp_close_shutdown+0x1b0>)
 8007b0c:	f001 f8a2 	bl	8008c54 <tcp_pcb_remove>
 8007b10:	4b0d      	ldr	r3, [pc, #52]	@ (8007b48 <tcp_close_shutdown+0x1b4>)
 8007b12:	2201      	movs	r2, #1
 8007b14:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f7ff fe8a 	bl	8007830 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8007b1c:	e004      	b.n	8007b28 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 f81a 	bl	8007b58 <tcp_close_shutdown_fin>
 8007b24:	4603      	mov	r3, r0
 8007b26:	e000      	b.n	8007b2a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bdb0      	pop	{r4, r5, r7, pc}
 8007b32:	bf00      	nop
 8007b34:	08011c64 	.word	0x08011c64
 8007b38:	08011d38 	.word	0x08011d38
 8007b3c:	08011ca8 	.word	0x08011ca8
 8007b40:	08011d58 	.word	0x08011d58
 8007b44:	200087dc 	.word	0x200087dc
 8007b48:	200087e4 	.word	0x200087e4
 8007b4c:	2000881c 	.word	0x2000881c
 8007b50:	200087d4 	.word	0x200087d4
 8007b54:	200087d8 	.word	0x200087d8

08007b58 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d106      	bne.n	8007b74 <tcp_close_shutdown_fin+0x1c>
 8007b66:	4b2e      	ldr	r3, [pc, #184]	@ (8007c20 <tcp_close_shutdown_fin+0xc8>)
 8007b68:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8007b6c:	492d      	ldr	r1, [pc, #180]	@ (8007c24 <tcp_close_shutdown_fin+0xcc>)
 8007b6e:	482e      	ldr	r0, [pc, #184]	@ (8007c28 <tcp_close_shutdown_fin+0xd0>)
 8007b70:	f008 f99c 	bl	800feac <iprintf>

  switch (pcb->state) {
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	7d1b      	ldrb	r3, [r3, #20]
 8007b78:	2b07      	cmp	r3, #7
 8007b7a:	d020      	beq.n	8007bbe <tcp_close_shutdown_fin+0x66>
 8007b7c:	2b07      	cmp	r3, #7
 8007b7e:	dc2b      	bgt.n	8007bd8 <tcp_close_shutdown_fin+0x80>
 8007b80:	2b03      	cmp	r3, #3
 8007b82:	d002      	beq.n	8007b8a <tcp_close_shutdown_fin+0x32>
 8007b84:	2b04      	cmp	r3, #4
 8007b86:	d00d      	beq.n	8007ba4 <tcp_close_shutdown_fin+0x4c>
 8007b88:	e026      	b.n	8007bd8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f003 fee2 	bl	800b954 <tcp_send_fin>
 8007b90:	4603      	mov	r3, r0
 8007b92:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d11f      	bne.n	8007bdc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2205      	movs	r2, #5
 8007ba0:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007ba2:	e01b      	b.n	8007bdc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f003 fed5 	bl	800b954 <tcp_send_fin>
 8007baa:	4603      	mov	r3, r0
 8007bac:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d114      	bne.n	8007be0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2205      	movs	r2, #5
 8007bba:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007bbc:	e010      	b.n	8007be0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f003 fec8 	bl	800b954 <tcp_send_fin>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007bc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d109      	bne.n	8007be4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2209      	movs	r2, #9
 8007bd4:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007bd6:	e005      	b.n	8007be4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	e01c      	b.n	8007c16 <tcp_close_shutdown_fin+0xbe>
      break;
 8007bdc:	bf00      	nop
 8007bde:	e002      	b.n	8007be6 <tcp_close_shutdown_fin+0x8e>
      break;
 8007be0:	bf00      	nop
 8007be2:	e000      	b.n	8007be6 <tcp_close_shutdown_fin+0x8e>
      break;
 8007be4:	bf00      	nop
  }

  if (err == ERR_OK) {
 8007be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d103      	bne.n	8007bf6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f003 ffee 	bl	800bbd0 <tcp_output>
 8007bf4:	e00d      	b.n	8007c12 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8007bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bfe:	d108      	bne.n	8007c12 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	8b5b      	ldrh	r3, [r3, #26]
 8007c04:	f043 0308 	orr.w	r3, r3, #8
 8007c08:	b29a      	uxth	r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	e001      	b.n	8007c16 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8007c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	08011c64 	.word	0x08011c64
 8007c24:	08011d14 	.word	0x08011d14
 8007c28:	08011ca8 	.word	0x08011ca8

08007c2c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d109      	bne.n	8007c4e <tcp_close+0x22>
 8007c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8007c78 <tcp_close+0x4c>)
 8007c3c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8007c40:	490e      	ldr	r1, [pc, #56]	@ (8007c7c <tcp_close+0x50>)
 8007c42:	480f      	ldr	r0, [pc, #60]	@ (8007c80 <tcp_close+0x54>)
 8007c44:	f008 f932 	bl	800feac <iprintf>
 8007c48:	f06f 030f 	mvn.w	r3, #15
 8007c4c:	e00f      	b.n	8007c6e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	7d1b      	ldrb	r3, [r3, #20]
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d006      	beq.n	8007c64 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	8b5b      	ldrh	r3, [r3, #26]
 8007c5a:	f043 0310 	orr.w	r3, r3, #16
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8007c64:	2101      	movs	r1, #1
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f7ff fe94 	bl	8007994 <tcp_close_shutdown>
 8007c6c:	4603      	mov	r3, r0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3708      	adds	r7, #8
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	08011c64 	.word	0x08011c64
 8007c7c:	08011d74 	.word	0x08011d74
 8007c80:	08011ca8 	.word	0x08011ca8

08007c84 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b08e      	sub	sp, #56	@ 0x38
 8007c88:	af04      	add	r7, sp, #16
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d107      	bne.n	8007ca4 <tcp_abandon+0x20>
 8007c94:	4b52      	ldr	r3, [pc, #328]	@ (8007de0 <tcp_abandon+0x15c>)
 8007c96:	f240 223d 	movw	r2, #573	@ 0x23d
 8007c9a:	4952      	ldr	r1, [pc, #328]	@ (8007de4 <tcp_abandon+0x160>)
 8007c9c:	4852      	ldr	r0, [pc, #328]	@ (8007de8 <tcp_abandon+0x164>)
 8007c9e:	f008 f905 	bl	800feac <iprintf>
 8007ca2:	e099      	b.n	8007dd8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	7d1b      	ldrb	r3, [r3, #20]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d106      	bne.n	8007cba <tcp_abandon+0x36>
 8007cac:	4b4c      	ldr	r3, [pc, #304]	@ (8007de0 <tcp_abandon+0x15c>)
 8007cae:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8007cb2:	494e      	ldr	r1, [pc, #312]	@ (8007dec <tcp_abandon+0x168>)
 8007cb4:	484c      	ldr	r0, [pc, #304]	@ (8007de8 <tcp_abandon+0x164>)
 8007cb6:	f008 f8f9 	bl	800feac <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	7d1b      	ldrb	r3, [r3, #20]
 8007cbe:	2b0a      	cmp	r3, #10
 8007cc0:	d107      	bne.n	8007cd2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8007cc2:	6879      	ldr	r1, [r7, #4]
 8007cc4:	484a      	ldr	r0, [pc, #296]	@ (8007df0 <tcp_abandon+0x16c>)
 8007cc6:	f000 ffc5 	bl	8008c54 <tcp_pcb_remove>
    tcp_free(pcb);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f7ff fdb0 	bl	8007830 <tcp_free>
 8007cd0:	e082      	b.n	8007dd8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cde:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ce4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cec:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	7d1b      	ldrb	r3, [r3, #20]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d126      	bne.n	8007d4a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	8adb      	ldrh	r3, [r3, #22]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d02e      	beq.n	8007d62 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007d04:	4b3b      	ldr	r3, [pc, #236]	@ (8007df4 <tcp_abandon+0x170>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d105      	bne.n	8007d1a <tcp_abandon+0x96>
 8007d0e:	4b39      	ldr	r3, [pc, #228]	@ (8007df4 <tcp_abandon+0x170>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	4a37      	ldr	r2, [pc, #220]	@ (8007df4 <tcp_abandon+0x170>)
 8007d16:	6013      	str	r3, [r2, #0]
 8007d18:	e013      	b.n	8007d42 <tcp_abandon+0xbe>
 8007d1a:	4b36      	ldr	r3, [pc, #216]	@ (8007df4 <tcp_abandon+0x170>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	61fb      	str	r3, [r7, #28]
 8007d20:	e00c      	b.n	8007d3c <tcp_abandon+0xb8>
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d104      	bne.n	8007d36 <tcp_abandon+0xb2>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	68da      	ldr	r2, [r3, #12]
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	60da      	str	r2, [r3, #12]
 8007d34:	e005      	b.n	8007d42 <tcp_abandon+0xbe>
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	61fb      	str	r3, [r7, #28]
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1ef      	bne.n	8007d22 <tcp_abandon+0x9e>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	60da      	str	r2, [r3, #12]
 8007d48:	e00b      	b.n	8007d62 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	8adb      	ldrh	r3, [r3, #22]
 8007d52:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007d54:	6879      	ldr	r1, [r7, #4]
 8007d56:	4828      	ldr	r0, [pc, #160]	@ (8007df8 <tcp_abandon+0x174>)
 8007d58:	f000 ff7c 	bl	8008c54 <tcp_pcb_remove>
 8007d5c:	4b27      	ldr	r3, [pc, #156]	@ (8007dfc <tcp_abandon+0x178>)
 8007d5e:	2201      	movs	r2, #1
 8007d60:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d004      	beq.n	8007d74 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f000 fd1e 	bl	80087b0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d004      	beq.n	8007d86 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d80:	4618      	mov	r0, r3
 8007d82:	f000 fd15 	bl	80087b0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d004      	beq.n	8007d98 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 fd0c 	bl	80087b0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8007d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00e      	beq.n	8007dbc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007d9e:	6879      	ldr	r1, [r7, #4]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	3304      	adds	r3, #4
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	8b12      	ldrh	r2, [r2, #24]
 8007da8:	9202      	str	r2, [sp, #8]
 8007daa:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8007dac:	9201      	str	r2, [sp, #4]
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	460b      	mov	r3, r1
 8007db2:	697a      	ldr	r2, [r7, #20]
 8007db4:	69b9      	ldr	r1, [r7, #24]
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f004 fcbe 	bl	800c738 <tcp_rst>
    }
    last_state = pcb->state;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	7d1b      	ldrb	r3, [r3, #20]
 8007dc0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f7ff fd34 	bl	8007830 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d004      	beq.n	8007dd8 <tcp_abandon+0x154>
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	f06f 010c 	mvn.w	r1, #12
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	4798      	blx	r3
  }
}
 8007dd8:	3728      	adds	r7, #40	@ 0x28
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	08011c64 	.word	0x08011c64
 8007de4:	08011da8 	.word	0x08011da8
 8007de8:	08011ca8 	.word	0x08011ca8
 8007dec:	08011dc4 	.word	0x08011dc4
 8007df0:	200087e0 	.word	0x200087e0
 8007df4:	200087d4 	.word	0x200087d4
 8007df8:	200087dc 	.word	0x200087dc
 8007dfc:	200087e4 	.word	0x200087e4

08007e00 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007e08:	2101      	movs	r1, #1
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f7ff ff3a 	bl	8007c84 <tcp_abandon>
}
 8007e10:	bf00      	nop
 8007e12:	3708      	adds	r7, #8
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d106      	bne.n	8007e34 <tcp_update_rcv_ann_wnd+0x1c>
 8007e26:	4b25      	ldr	r3, [pc, #148]	@ (8007ebc <tcp_update_rcv_ann_wnd+0xa4>)
 8007e28:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8007e2c:	4924      	ldr	r1, [pc, #144]	@ (8007ec0 <tcp_update_rcv_ann_wnd+0xa8>)
 8007e2e:	4825      	ldr	r0, [pc, #148]	@ (8007ec4 <tcp_update_rcv_ann_wnd+0xac>)
 8007e30:	f008 f83c 	bl	800feac <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007e3c:	4413      	add	r3, r2
 8007e3e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8007e48:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8007e4c:	bf28      	it	cs
 8007e4e:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8007e52:	b292      	uxth	r2, r2
 8007e54:	4413      	add	r3, r2
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	1ad3      	subs	r3, r2, r3
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	db08      	blt.n	8007e70 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e6a:	68fa      	ldr	r2, [r7, #12]
 8007e6c:	1ad3      	subs	r3, r2, r3
 8007e6e:	e020      	b.n	8007eb2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	dd03      	ble.n	8007e86 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007e84:	e014      	b.n	8007eb0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e98:	d306      	bcc.n	8007ea8 <tcp_update_rcv_ann_wnd+0x90>
 8007e9a:	4b08      	ldr	r3, [pc, #32]	@ (8007ebc <tcp_update_rcv_ann_wnd+0xa4>)
 8007e9c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8007ea0:	4909      	ldr	r1, [pc, #36]	@ (8007ec8 <tcp_update_rcv_ann_wnd+0xb0>)
 8007ea2:	4808      	ldr	r0, [pc, #32]	@ (8007ec4 <tcp_update_rcv_ann_wnd+0xac>)
 8007ea4:	f008 f802 	bl	800feac <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8007eb0:	2300      	movs	r3, #0
  }
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3710      	adds	r7, #16
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	08011c64 	.word	0x08011c64
 8007ec0:	08011ec0 	.word	0x08011ec0
 8007ec4:	08011ca8 	.word	0x08011ca8
 8007ec8:	08011ee4 	.word	0x08011ee4

08007ecc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d107      	bne.n	8007eee <tcp_recved+0x22>
 8007ede:	4b1f      	ldr	r3, [pc, #124]	@ (8007f5c <tcp_recved+0x90>)
 8007ee0:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8007ee4:	491e      	ldr	r1, [pc, #120]	@ (8007f60 <tcp_recved+0x94>)
 8007ee6:	481f      	ldr	r0, [pc, #124]	@ (8007f64 <tcp_recved+0x98>)
 8007ee8:	f007 ffe0 	bl	800feac <iprintf>
 8007eec:	e032      	b.n	8007f54 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	7d1b      	ldrb	r3, [r3, #20]
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d106      	bne.n	8007f04 <tcp_recved+0x38>
 8007ef6:	4b19      	ldr	r3, [pc, #100]	@ (8007f5c <tcp_recved+0x90>)
 8007ef8:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8007efc:	491a      	ldr	r1, [pc, #104]	@ (8007f68 <tcp_recved+0x9c>)
 8007efe:	4819      	ldr	r0, [pc, #100]	@ (8007f64 <tcp_recved+0x98>)
 8007f00:	f007 ffd4 	bl	800feac <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8007f08:	887b      	ldrh	r3, [r7, #2]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007f0e:	89fb      	ldrh	r3, [r7, #14]
 8007f10:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8007f14:	d804      	bhi.n	8007f20 <tcp_recved+0x54>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f1a:	89fa      	ldrh	r2, [r7, #14]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d204      	bcs.n	8007f2a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8007f26:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007f28:	e002      	b.n	8007f30 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	89fa      	ldrh	r2, [r7, #14]
 8007f2e:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f7ff ff71 	bl	8007e18 <tcp_update_rcv_ann_wnd>
 8007f36:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8007f3e:	d309      	bcc.n	8007f54 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	8b5b      	ldrh	r3, [r3, #26]
 8007f44:	f043 0302 	orr.w	r3, r3, #2
 8007f48:	b29a      	uxth	r2, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f003 fe3e 	bl	800bbd0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	08011c64 	.word	0x08011c64
 8007f60:	08011f00 	.word	0x08011f00
 8007f64:	08011ca8 	.word	0x08011ca8
 8007f68:	08011f18 	.word	0x08011f18

08007f6c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007f6c:	b5b0      	push	{r4, r5, r7, lr}
 8007f6e:	b090      	sub	sp, #64	@ 0x40
 8007f70:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8007f72:	2300      	movs	r3, #0
 8007f74:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8007f78:	4b95      	ldr	r3, [pc, #596]	@ (80081d0 <tcp_slowtmr+0x264>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	4a94      	ldr	r2, [pc, #592]	@ (80081d0 <tcp_slowtmr+0x264>)
 8007f80:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8007f82:	4b94      	ldr	r3, [pc, #592]	@ (80081d4 <tcp_slowtmr+0x268>)
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	3301      	adds	r3, #1
 8007f88:	b2da      	uxtb	r2, r3
 8007f8a:	4b92      	ldr	r3, [pc, #584]	@ (80081d4 <tcp_slowtmr+0x268>)
 8007f8c:	701a      	strb	r2, [r3, #0]
 8007f8e:	e000      	b.n	8007f92 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8007f90:	bf00      	nop
  prev = NULL;
 8007f92:	2300      	movs	r3, #0
 8007f94:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8007f96:	4b90      	ldr	r3, [pc, #576]	@ (80081d8 <tcp_slowtmr+0x26c>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8007f9c:	e29d      	b.n	80084da <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fa0:	7d1b      	ldrb	r3, [r3, #20]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d106      	bne.n	8007fb4 <tcp_slowtmr+0x48>
 8007fa6:	4b8d      	ldr	r3, [pc, #564]	@ (80081dc <tcp_slowtmr+0x270>)
 8007fa8:	f240 42be 	movw	r2, #1214	@ 0x4be
 8007fac:	498c      	ldr	r1, [pc, #560]	@ (80081e0 <tcp_slowtmr+0x274>)
 8007fae:	488d      	ldr	r0, [pc, #564]	@ (80081e4 <tcp_slowtmr+0x278>)
 8007fb0:	f007 ff7c 	bl	800feac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fb6:	7d1b      	ldrb	r3, [r3, #20]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d106      	bne.n	8007fca <tcp_slowtmr+0x5e>
 8007fbc:	4b87      	ldr	r3, [pc, #540]	@ (80081dc <tcp_slowtmr+0x270>)
 8007fbe:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8007fc2:	4989      	ldr	r1, [pc, #548]	@ (80081e8 <tcp_slowtmr+0x27c>)
 8007fc4:	4887      	ldr	r0, [pc, #540]	@ (80081e4 <tcp_slowtmr+0x278>)
 8007fc6:	f007 ff71 	bl	800feac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fcc:	7d1b      	ldrb	r3, [r3, #20]
 8007fce:	2b0a      	cmp	r3, #10
 8007fd0:	d106      	bne.n	8007fe0 <tcp_slowtmr+0x74>
 8007fd2:	4b82      	ldr	r3, [pc, #520]	@ (80081dc <tcp_slowtmr+0x270>)
 8007fd4:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8007fd8:	4984      	ldr	r1, [pc, #528]	@ (80081ec <tcp_slowtmr+0x280>)
 8007fda:	4882      	ldr	r0, [pc, #520]	@ (80081e4 <tcp_slowtmr+0x278>)
 8007fdc:	f007 ff66 	bl	800feac <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fe2:	7f9a      	ldrb	r2, [r3, #30]
 8007fe4:	4b7b      	ldr	r3, [pc, #492]	@ (80081d4 <tcp_slowtmr+0x268>)
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d105      	bne.n	8007ff8 <tcp_slowtmr+0x8c>
      prev = pcb;
 8007fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fee:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8007ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8007ff6:	e270      	b.n	80084da <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8007ff8:	4b76      	ldr	r3, [pc, #472]	@ (80081d4 <tcp_slowtmr+0x268>)
 8007ffa:	781a      	ldrb	r2, [r3, #0]
 8007ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ffe:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8008000:	2300      	movs	r3, #0
 8008002:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8008006:	2300      	movs	r3, #0
 8008008:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800800c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800800e:	7d1b      	ldrb	r3, [r3, #20]
 8008010:	2b02      	cmp	r3, #2
 8008012:	d10a      	bne.n	800802a <tcp_slowtmr+0xbe>
 8008014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008016:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800801a:	2b05      	cmp	r3, #5
 800801c:	d905      	bls.n	800802a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800801e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008022:	3301      	adds	r3, #1
 8008024:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008028:	e11e      	b.n	8008268 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800802a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800802c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008030:	2b0b      	cmp	r3, #11
 8008032:	d905      	bls.n	8008040 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8008034:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008038:	3301      	adds	r3, #1
 800803a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800803e:	e113      	b.n	8008268 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8008040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008042:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8008046:	2b00      	cmp	r3, #0
 8008048:	d075      	beq.n	8008136 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800804a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800804c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800804e:	2b00      	cmp	r3, #0
 8008050:	d006      	beq.n	8008060 <tcp_slowtmr+0xf4>
 8008052:	4b62      	ldr	r3, [pc, #392]	@ (80081dc <tcp_slowtmr+0x270>)
 8008054:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8008058:	4965      	ldr	r1, [pc, #404]	@ (80081f0 <tcp_slowtmr+0x284>)
 800805a:	4862      	ldr	r0, [pc, #392]	@ (80081e4 <tcp_slowtmr+0x278>)
 800805c:	f007 ff26 	bl	800feac <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008062:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008064:	2b00      	cmp	r3, #0
 8008066:	d106      	bne.n	8008076 <tcp_slowtmr+0x10a>
 8008068:	4b5c      	ldr	r3, [pc, #368]	@ (80081dc <tcp_slowtmr+0x270>)
 800806a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800806e:	4961      	ldr	r1, [pc, #388]	@ (80081f4 <tcp_slowtmr+0x288>)
 8008070:	485c      	ldr	r0, [pc, #368]	@ (80081e4 <tcp_slowtmr+0x278>)
 8008072:	f007 ff1b 	bl	800feac <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8008076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008078:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800807c:	2b0b      	cmp	r3, #11
 800807e:	d905      	bls.n	800808c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8008080:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008084:	3301      	adds	r3, #1
 8008086:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800808a:	e0ed      	b.n	8008268 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800808c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800808e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8008092:	3b01      	subs	r3, #1
 8008094:	4a58      	ldr	r2, [pc, #352]	@ (80081f8 <tcp_slowtmr+0x28c>)
 8008096:	5cd3      	ldrb	r3, [r2, r3]
 8008098:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800809a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800809c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80080a0:	7c7a      	ldrb	r2, [r7, #17]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d907      	bls.n	80080b6 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80080a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080a8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80080ac:	3301      	adds	r3, #1
 80080ae:	b2da      	uxtb	r2, r3
 80080b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80080b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80080bc:	7c7a      	ldrb	r2, [r7, #17]
 80080be:	429a      	cmp	r2, r3
 80080c0:	f200 80d2 	bhi.w	8008268 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80080c4:	2301      	movs	r3, #1
 80080c6:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80080c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d108      	bne.n	80080e4 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80080d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80080d4:	f004 fc24 	bl	800c920 <tcp_zero_window_probe>
 80080d8:	4603      	mov	r3, r0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d014      	beq.n	8008108 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 80080de:	2300      	movs	r3, #0
 80080e0:	623b      	str	r3, [r7, #32]
 80080e2:	e011      	b.n	8008108 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80080e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80080ea:	4619      	mov	r1, r3
 80080ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80080ee:	f003 fae9 	bl	800b6c4 <tcp_split_unsent_seg>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d107      	bne.n	8008108 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 80080f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80080fa:	f003 fd69 	bl	800bbd0 <tcp_output>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d101      	bne.n	8008108 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8008104:	2300      	movs	r3, #0
 8008106:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8008108:	6a3b      	ldr	r3, [r7, #32]
 800810a:	2b00      	cmp	r3, #0
 800810c:	f000 80ac 	beq.w	8008268 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8008110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008112:	2200      	movs	r2, #0
 8008114:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800811a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800811e:	2b06      	cmp	r3, #6
 8008120:	f200 80a2 	bhi.w	8008268 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8008124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008126:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800812a:	3301      	adds	r3, #1
 800812c:	b2da      	uxtb	r2, r3
 800812e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008130:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8008134:	e098      	b.n	8008268 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8008136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008138:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800813c:	2b00      	cmp	r3, #0
 800813e:	db0f      	blt.n	8008160 <tcp_slowtmr+0x1f4>
 8008140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008142:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008146:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800814a:	4293      	cmp	r3, r2
 800814c:	d008      	beq.n	8008160 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800814e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008150:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008154:	b29b      	uxth	r3, r3
 8008156:	3301      	adds	r3, #1
 8008158:	b29b      	uxth	r3, r3
 800815a:	b21a      	sxth	r2, r3
 800815c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800815e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8008160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008162:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8008166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008168:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800816c:	429a      	cmp	r2, r3
 800816e:	db7b      	blt.n	8008268 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008170:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008172:	f004 f821 	bl	800c1b8 <tcp_rexmit_rto_prepare>
 8008176:	4603      	mov	r3, r0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d007      	beq.n	800818c <tcp_slowtmr+0x220>
 800817c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800817e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008180:	2b00      	cmp	r3, #0
 8008182:	d171      	bne.n	8008268 <tcp_slowtmr+0x2fc>
 8008184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008186:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008188:	2b00      	cmp	r3, #0
 800818a:	d06d      	beq.n	8008268 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800818c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800818e:	7d1b      	ldrb	r3, [r3, #20]
 8008190:	2b02      	cmp	r3, #2
 8008192:	d03a      	beq.n	800820a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008196:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800819a:	2b0c      	cmp	r3, #12
 800819c:	bf28      	it	cs
 800819e:	230c      	movcs	r3, #12
 80081a0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80081a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081a4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80081a8:	10db      	asrs	r3, r3, #3
 80081aa:	b21b      	sxth	r3, r3
 80081ac:	461a      	mov	r2, r3
 80081ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081b0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80081b4:	4413      	add	r3, r2
 80081b6:	7efa      	ldrb	r2, [r7, #27]
 80081b8:	4910      	ldr	r1, [pc, #64]	@ (80081fc <tcp_slowtmr+0x290>)
 80081ba:	5c8a      	ldrb	r2, [r1, r2]
 80081bc:	4093      	lsls	r3, r2
 80081be:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80081c6:	4293      	cmp	r3, r2
 80081c8:	dc1a      	bgt.n	8008200 <tcp_slowtmr+0x294>
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	b21a      	sxth	r2, r3
 80081ce:	e019      	b.n	8008204 <tcp_slowtmr+0x298>
 80081d0:	200087d0 	.word	0x200087d0
 80081d4:	200087e6 	.word	0x200087e6
 80081d8:	200087dc 	.word	0x200087dc
 80081dc:	08011c64 	.word	0x08011c64
 80081e0:	08011fa8 	.word	0x08011fa8
 80081e4:	08011ca8 	.word	0x08011ca8
 80081e8:	08011fd4 	.word	0x08011fd4
 80081ec:	08012000 	.word	0x08012000
 80081f0:	08012030 	.word	0x08012030
 80081f4:	08012064 	.word	0x08012064
 80081f8:	08013c3c 	.word	0x08013c3c
 80081fc:	08013c2c 	.word	0x08013c2c
 8008200:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008206:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800820a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800820c:	2200      	movs	r2, #0
 800820e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008212:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008218:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800821c:	4293      	cmp	r3, r2
 800821e:	bf28      	it	cs
 8008220:	4613      	movcs	r3, r2
 8008222:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008224:	8a7b      	ldrh	r3, [r7, #18]
 8008226:	085b      	lsrs	r3, r3, #1
 8008228:	b29a      	uxth	r2, r3
 800822a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800822c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008232:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8008236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008238:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800823a:	005b      	lsls	r3, r3, #1
 800823c:	b29b      	uxth	r3, r3
 800823e:	429a      	cmp	r2, r3
 8008240:	d206      	bcs.n	8008250 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8008242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008244:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008246:	005b      	lsls	r3, r3, #1
 8008248:	b29a      	uxth	r2, r3
 800824a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800824c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8008250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008252:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8008254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008256:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800825a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800825c:	2200      	movs	r2, #0
 800825e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8008262:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008264:	f004 f818 	bl	800c298 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8008268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800826a:	7d1b      	ldrb	r3, [r3, #20]
 800826c:	2b06      	cmp	r3, #6
 800826e:	d111      	bne.n	8008294 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8008270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008272:	8b5b      	ldrh	r3, [r3, #26]
 8008274:	f003 0310 	and.w	r3, r3, #16
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00b      	beq.n	8008294 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800827c:	4b9c      	ldr	r3, [pc, #624]	@ (80084f0 <tcp_slowtmr+0x584>)
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008282:	6a1b      	ldr	r3, [r3, #32]
 8008284:	1ad3      	subs	r3, r2, r3
 8008286:	2b28      	cmp	r3, #40	@ 0x28
 8008288:	d904      	bls.n	8008294 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800828a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800828e:	3301      	adds	r3, #1
 8008290:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008296:	7a5b      	ldrb	r3, [r3, #9]
 8008298:	f003 0308 	and.w	r3, r3, #8
 800829c:	2b00      	cmp	r3, #0
 800829e:	d04a      	beq.n	8008336 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80082a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082a2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80082a4:	2b04      	cmp	r3, #4
 80082a6:	d003      	beq.n	80082b0 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80082a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082aa:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80082ac:	2b07      	cmp	r3, #7
 80082ae:	d142      	bne.n	8008336 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80082b0:	4b8f      	ldr	r3, [pc, #572]	@ (80084f0 <tcp_slowtmr+0x584>)
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082b6:	6a1b      	ldr	r3, [r3, #32]
 80082b8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80082ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082bc:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80082c0:	4b8c      	ldr	r3, [pc, #560]	@ (80084f4 <tcp_slowtmr+0x588>)
 80082c2:	440b      	add	r3, r1
 80082c4:	498c      	ldr	r1, [pc, #560]	@ (80084f8 <tcp_slowtmr+0x58c>)
 80082c6:	fba1 1303 	umull	r1, r3, r1, r3
 80082ca:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d90a      	bls.n	80082e6 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 80082d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80082d4:	3301      	adds	r3, #1
 80082d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 80082da:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80082de:	3301      	adds	r3, #1
 80082e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80082e4:	e027      	b.n	8008336 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80082e6:	4b82      	ldr	r3, [pc, #520]	@ (80084f0 <tcp_slowtmr+0x584>)
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ec:	6a1b      	ldr	r3, [r3, #32]
 80082ee:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80082f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082f2:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80082f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082f8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80082fc:	4618      	mov	r0, r3
 80082fe:	4b7f      	ldr	r3, [pc, #508]	@ (80084fc <tcp_slowtmr+0x590>)
 8008300:	fb00 f303 	mul.w	r3, r0, r3
 8008304:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008306:	497c      	ldr	r1, [pc, #496]	@ (80084f8 <tcp_slowtmr+0x58c>)
 8008308:	fba1 1303 	umull	r1, r3, r1, r3
 800830c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800830e:	429a      	cmp	r2, r3
 8008310:	d911      	bls.n	8008336 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8008312:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008314:	f004 fac4 	bl	800c8a0 <tcp_keepalive>
 8008318:	4603      	mov	r3, r0
 800831a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800831e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8008322:	2b00      	cmp	r3, #0
 8008324:	d107      	bne.n	8008336 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8008326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008328:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800832c:	3301      	adds	r3, #1
 800832e:	b2da      	uxtb	r2, r3
 8008330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008332:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8008336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008338:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800833a:	2b00      	cmp	r3, #0
 800833c:	d011      	beq.n	8008362 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800833e:	4b6c      	ldr	r3, [pc, #432]	@ (80084f0 <tcp_slowtmr+0x584>)
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008344:	6a1b      	ldr	r3, [r3, #32]
 8008346:	1ad2      	subs	r2, r2, r3
 8008348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800834a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800834e:	4619      	mov	r1, r3
 8008350:	460b      	mov	r3, r1
 8008352:	005b      	lsls	r3, r3, #1
 8008354:	440b      	add	r3, r1
 8008356:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008358:	429a      	cmp	r2, r3
 800835a:	d302      	bcc.n	8008362 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800835c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800835e:	f000 fddd 	bl	8008f1c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8008362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008364:	7d1b      	ldrb	r3, [r3, #20]
 8008366:	2b03      	cmp	r3, #3
 8008368:	d10b      	bne.n	8008382 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800836a:	4b61      	ldr	r3, [pc, #388]	@ (80084f0 <tcp_slowtmr+0x584>)
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008370:	6a1b      	ldr	r3, [r3, #32]
 8008372:	1ad3      	subs	r3, r2, r3
 8008374:	2b28      	cmp	r3, #40	@ 0x28
 8008376:	d904      	bls.n	8008382 <tcp_slowtmr+0x416>
        ++pcb_remove;
 8008378:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800837c:	3301      	adds	r3, #1
 800837e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8008382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008384:	7d1b      	ldrb	r3, [r3, #20]
 8008386:	2b09      	cmp	r3, #9
 8008388:	d10b      	bne.n	80083a2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800838a:	4b59      	ldr	r3, [pc, #356]	@ (80084f0 <tcp_slowtmr+0x584>)
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008390:	6a1b      	ldr	r3, [r3, #32]
 8008392:	1ad3      	subs	r3, r2, r3
 8008394:	2bf0      	cmp	r3, #240	@ 0xf0
 8008396:	d904      	bls.n	80083a2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8008398:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800839c:	3301      	adds	r3, #1
 800839e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80083a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d060      	beq.n	800846c <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 80083aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083b0:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80083b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80083b4:	f000 fbfe 	bl	8008bb4 <tcp_pcb_purge>
      if (prev != NULL) {
 80083b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d010      	beq.n	80083e0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80083be:	4b50      	ldr	r3, [pc, #320]	@ (8008500 <tcp_slowtmr+0x594>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d106      	bne.n	80083d6 <tcp_slowtmr+0x46a>
 80083c8:	4b4e      	ldr	r3, [pc, #312]	@ (8008504 <tcp_slowtmr+0x598>)
 80083ca:	f240 526d 	movw	r2, #1389	@ 0x56d
 80083ce:	494e      	ldr	r1, [pc, #312]	@ (8008508 <tcp_slowtmr+0x59c>)
 80083d0:	484e      	ldr	r0, [pc, #312]	@ (800850c <tcp_slowtmr+0x5a0>)
 80083d2:	f007 fd6b 	bl	800feac <iprintf>
        prev->next = pcb->next;
 80083d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083d8:	68da      	ldr	r2, [r3, #12]
 80083da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083dc:	60da      	str	r2, [r3, #12]
 80083de:	e00f      	b.n	8008400 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80083e0:	4b47      	ldr	r3, [pc, #284]	@ (8008500 <tcp_slowtmr+0x594>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d006      	beq.n	80083f8 <tcp_slowtmr+0x48c>
 80083ea:	4b46      	ldr	r3, [pc, #280]	@ (8008504 <tcp_slowtmr+0x598>)
 80083ec:	f240 5271 	movw	r2, #1393	@ 0x571
 80083f0:	4947      	ldr	r1, [pc, #284]	@ (8008510 <tcp_slowtmr+0x5a4>)
 80083f2:	4846      	ldr	r0, [pc, #280]	@ (800850c <tcp_slowtmr+0x5a0>)
 80083f4:	f007 fd5a 	bl	800feac <iprintf>
        tcp_active_pcbs = pcb->next;
 80083f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	4a40      	ldr	r2, [pc, #256]	@ (8008500 <tcp_slowtmr+0x594>)
 80083fe:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8008400:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008404:	2b00      	cmp	r3, #0
 8008406:	d013      	beq.n	8008430 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800840a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800840c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800840e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008410:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8008412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008414:	3304      	adds	r3, #4
 8008416:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008418:	8ad2      	ldrh	r2, [r2, #22]
 800841a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800841c:	8b09      	ldrh	r1, [r1, #24]
 800841e:	9102      	str	r1, [sp, #8]
 8008420:	9201      	str	r2, [sp, #4]
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	462b      	mov	r3, r5
 8008426:	4622      	mov	r2, r4
 8008428:	4601      	mov	r1, r0
 800842a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800842c:	f004 f984 	bl	800c738 <tcp_rst>
      err_arg = pcb->callback_arg;
 8008430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008438:	7d1b      	ldrb	r3, [r3, #20]
 800843a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800843c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800843e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8008446:	6838      	ldr	r0, [r7, #0]
 8008448:	f7ff f9f2 	bl	8007830 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800844c:	4b31      	ldr	r3, [pc, #196]	@ (8008514 <tcp_slowtmr+0x5a8>)
 800844e:	2200      	movs	r2, #0
 8008450:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d004      	beq.n	8008462 <tcp_slowtmr+0x4f6>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f06f 010c 	mvn.w	r1, #12
 800845e:	68b8      	ldr	r0, [r7, #8]
 8008460:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8008462:	4b2c      	ldr	r3, [pc, #176]	@ (8008514 <tcp_slowtmr+0x5a8>)
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d037      	beq.n	80084da <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800846a:	e592      	b.n	8007f92 <tcp_slowtmr+0x26>
      prev = pcb;
 800846c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800846e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8008470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8008476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008478:	7f1b      	ldrb	r3, [r3, #28]
 800847a:	3301      	adds	r3, #1
 800847c:	b2da      	uxtb	r2, r3
 800847e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008480:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008484:	7f1a      	ldrb	r2, [r3, #28]
 8008486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008488:	7f5b      	ldrb	r3, [r3, #29]
 800848a:	429a      	cmp	r2, r3
 800848c:	d325      	bcc.n	80084da <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800848e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008490:	2200      	movs	r2, #0
 8008492:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8008494:	4b1f      	ldr	r3, [pc, #124]	@ (8008514 <tcp_slowtmr+0x5a8>)
 8008496:	2200      	movs	r2, #0
 8008498:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800849a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800849c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d00b      	beq.n	80084bc <tcp_slowtmr+0x550>
 80084a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80084ac:	6912      	ldr	r2, [r2, #16]
 80084ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084b0:	4610      	mov	r0, r2
 80084b2:	4798      	blx	r3
 80084b4:	4603      	mov	r3, r0
 80084b6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80084ba:	e002      	b.n	80084c2 <tcp_slowtmr+0x556>
 80084bc:	2300      	movs	r3, #0
 80084be:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 80084c2:	4b14      	ldr	r3, [pc, #80]	@ (8008514 <tcp_slowtmr+0x5a8>)
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	f47f ad62 	bne.w	8007f90 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80084cc:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d102      	bne.n	80084da <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80084d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084d6:	f003 fb7b 	bl	800bbd0 <tcp_output>
  while (pcb != NULL) {
 80084da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f47f ad5e 	bne.w	8007f9e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80084e2:	2300      	movs	r3, #0
 80084e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 80084e6:	4b0c      	ldr	r3, [pc, #48]	@ (8008518 <tcp_slowtmr+0x5ac>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80084ec:	e069      	b.n	80085c2 <tcp_slowtmr+0x656>
 80084ee:	bf00      	nop
 80084f0:	200087d0 	.word	0x200087d0
 80084f4:	000a4cb8 	.word	0x000a4cb8
 80084f8:	10624dd3 	.word	0x10624dd3
 80084fc:	000124f8 	.word	0x000124f8
 8008500:	200087dc 	.word	0x200087dc
 8008504:	08011c64 	.word	0x08011c64
 8008508:	0801209c 	.word	0x0801209c
 800850c:	08011ca8 	.word	0x08011ca8
 8008510:	080120c8 	.word	0x080120c8
 8008514:	200087e4 	.word	0x200087e4
 8008518:	200087e0 	.word	0x200087e0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800851c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800851e:	7d1b      	ldrb	r3, [r3, #20]
 8008520:	2b0a      	cmp	r3, #10
 8008522:	d006      	beq.n	8008532 <tcp_slowtmr+0x5c6>
 8008524:	4b2b      	ldr	r3, [pc, #172]	@ (80085d4 <tcp_slowtmr+0x668>)
 8008526:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800852a:	492b      	ldr	r1, [pc, #172]	@ (80085d8 <tcp_slowtmr+0x66c>)
 800852c:	482b      	ldr	r0, [pc, #172]	@ (80085dc <tcp_slowtmr+0x670>)
 800852e:	f007 fcbd 	bl	800feac <iprintf>
    pcb_remove = 0;
 8008532:	2300      	movs	r3, #0
 8008534:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008538:	4b29      	ldr	r3, [pc, #164]	@ (80085e0 <tcp_slowtmr+0x674>)
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800853e:	6a1b      	ldr	r3, [r3, #32]
 8008540:	1ad3      	subs	r3, r2, r3
 8008542:	2bf0      	cmp	r3, #240	@ 0xf0
 8008544:	d904      	bls.n	8008550 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8008546:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800854a:	3301      	adds	r3, #1
 800854c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008550:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008554:	2b00      	cmp	r3, #0
 8008556:	d02f      	beq.n	80085b8 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008558:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800855a:	f000 fb2b 	bl	8008bb4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800855e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008560:	2b00      	cmp	r3, #0
 8008562:	d010      	beq.n	8008586 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008564:	4b1f      	ldr	r3, [pc, #124]	@ (80085e4 <tcp_slowtmr+0x678>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800856a:	429a      	cmp	r2, r3
 800856c:	d106      	bne.n	800857c <tcp_slowtmr+0x610>
 800856e:	4b19      	ldr	r3, [pc, #100]	@ (80085d4 <tcp_slowtmr+0x668>)
 8008570:	f240 52af 	movw	r2, #1455	@ 0x5af
 8008574:	491c      	ldr	r1, [pc, #112]	@ (80085e8 <tcp_slowtmr+0x67c>)
 8008576:	4819      	ldr	r0, [pc, #100]	@ (80085dc <tcp_slowtmr+0x670>)
 8008578:	f007 fc98 	bl	800feac <iprintf>
        prev->next = pcb->next;
 800857c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800857e:	68da      	ldr	r2, [r3, #12]
 8008580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008582:	60da      	str	r2, [r3, #12]
 8008584:	e00f      	b.n	80085a6 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008586:	4b17      	ldr	r3, [pc, #92]	@ (80085e4 <tcp_slowtmr+0x678>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800858c:	429a      	cmp	r2, r3
 800858e:	d006      	beq.n	800859e <tcp_slowtmr+0x632>
 8008590:	4b10      	ldr	r3, [pc, #64]	@ (80085d4 <tcp_slowtmr+0x668>)
 8008592:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8008596:	4915      	ldr	r1, [pc, #84]	@ (80085ec <tcp_slowtmr+0x680>)
 8008598:	4810      	ldr	r0, [pc, #64]	@ (80085dc <tcp_slowtmr+0x670>)
 800859a:	f007 fc87 	bl	800feac <iprintf>
        tcp_tw_pcbs = pcb->next;
 800859e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	4a10      	ldr	r2, [pc, #64]	@ (80085e4 <tcp_slowtmr+0x678>)
 80085a4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80085a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085a8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80085aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80085b0:	69f8      	ldr	r0, [r7, #28]
 80085b2:	f7ff f93d 	bl	8007830 <tcp_free>
 80085b6:	e004      	b.n	80085c2 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80085b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80085bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80085c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d1a9      	bne.n	800851c <tcp_slowtmr+0x5b0>
    }
  }
}
 80085c8:	bf00      	nop
 80085ca:	bf00      	nop
 80085cc:	3730      	adds	r7, #48	@ 0x30
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bdb0      	pop	{r4, r5, r7, pc}
 80085d2:	bf00      	nop
 80085d4:	08011c64 	.word	0x08011c64
 80085d8:	080120f4 	.word	0x080120f4
 80085dc:	08011ca8 	.word	0x08011ca8
 80085e0:	200087d0 	.word	0x200087d0
 80085e4:	200087e0 	.word	0x200087e0
 80085e8:	08012124 	.word	0x08012124
 80085ec:	0801214c 	.word	0x0801214c

080085f0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80085f6:	4b2d      	ldr	r3, [pc, #180]	@ (80086ac <tcp_fasttmr+0xbc>)
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	3301      	adds	r3, #1
 80085fc:	b2da      	uxtb	r2, r3
 80085fe:	4b2b      	ldr	r3, [pc, #172]	@ (80086ac <tcp_fasttmr+0xbc>)
 8008600:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8008602:	4b2b      	ldr	r3, [pc, #172]	@ (80086b0 <tcp_fasttmr+0xc0>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008608:	e048      	b.n	800869c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	7f9a      	ldrb	r2, [r3, #30]
 800860e:	4b27      	ldr	r3, [pc, #156]	@ (80086ac <tcp_fasttmr+0xbc>)
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	429a      	cmp	r2, r3
 8008614:	d03f      	beq.n	8008696 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8008616:	4b25      	ldr	r3, [pc, #148]	@ (80086ac <tcp_fasttmr+0xbc>)
 8008618:	781a      	ldrb	r2, [r3, #0]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	8b5b      	ldrh	r3, [r3, #26]
 8008622:	f003 0301 	and.w	r3, r3, #1
 8008626:	2b00      	cmp	r3, #0
 8008628:	d010      	beq.n	800864c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	8b5b      	ldrh	r3, [r3, #26]
 800862e:	f043 0302 	orr.w	r3, r3, #2
 8008632:	b29a      	uxth	r2, r3
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f003 fac9 	bl	800bbd0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	8b5b      	ldrh	r3, [r3, #26]
 8008642:	f023 0303 	bic.w	r3, r3, #3
 8008646:	b29a      	uxth	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	8b5b      	ldrh	r3, [r3, #26]
 8008650:	f003 0308 	and.w	r3, r3, #8
 8008654:	2b00      	cmp	r3, #0
 8008656:	d009      	beq.n	800866c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	8b5b      	ldrh	r3, [r3, #26]
 800865c:	f023 0308 	bic.w	r3, r3, #8
 8008660:	b29a      	uxth	r2, r3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f7ff fa76 	bl	8007b58 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00a      	beq.n	8008690 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800867a:	4b0e      	ldr	r3, [pc, #56]	@ (80086b4 <tcp_fasttmr+0xc4>)
 800867c:	2200      	movs	r2, #0
 800867e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f819 	bl	80086b8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008686:	4b0b      	ldr	r3, [pc, #44]	@ (80086b4 <tcp_fasttmr+0xc4>)
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d000      	beq.n	8008690 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800868e:	e7b8      	b.n	8008602 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	607b      	str	r3, [r7, #4]
 8008694:	e002      	b.n	800869c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1b3      	bne.n	800860a <tcp_fasttmr+0x1a>
    }
  }
}
 80086a2:	bf00      	nop
 80086a4:	bf00      	nop
 80086a6:	3708      	adds	r7, #8
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	200087e6 	.word	0x200087e6
 80086b0:	200087dc 	.word	0x200087dc
 80086b4:	200087e4 	.word	0x200087e4

080086b8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80086b8:	b590      	push	{r4, r7, lr}
 80086ba:	b085      	sub	sp, #20
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d109      	bne.n	80086da <tcp_process_refused_data+0x22>
 80086c6:	4b37      	ldr	r3, [pc, #220]	@ (80087a4 <tcp_process_refused_data+0xec>)
 80086c8:	f240 6209 	movw	r2, #1545	@ 0x609
 80086cc:	4936      	ldr	r1, [pc, #216]	@ (80087a8 <tcp_process_refused_data+0xf0>)
 80086ce:	4837      	ldr	r0, [pc, #220]	@ (80087ac <tcp_process_refused_data+0xf4>)
 80086d0:	f007 fbec 	bl	800feac <iprintf>
 80086d4:	f06f 030f 	mvn.w	r3, #15
 80086d8:	e060      	b.n	800879c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80086de:	7b5b      	ldrb	r3, [r3, #13]
 80086e0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80086e6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d00b      	beq.n	8008710 <tcp_process_refused_data+0x58>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6918      	ldr	r0, [r3, #16]
 8008702:	2300      	movs	r3, #0
 8008704:	68ba      	ldr	r2, [r7, #8]
 8008706:	6879      	ldr	r1, [r7, #4]
 8008708:	47a0      	blx	r4
 800870a:	4603      	mov	r3, r0
 800870c:	73fb      	strb	r3, [r7, #15]
 800870e:	e007      	b.n	8008720 <tcp_process_refused_data+0x68>
 8008710:	2300      	movs	r3, #0
 8008712:	68ba      	ldr	r2, [r7, #8]
 8008714:	6879      	ldr	r1, [r7, #4]
 8008716:	2000      	movs	r0, #0
 8008718:	f000 f8a4 	bl	8008864 <tcp_recv_null>
 800871c:	4603      	mov	r3, r0
 800871e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d12a      	bne.n	800877e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008728:	7bbb      	ldrb	r3, [r7, #14]
 800872a:	f003 0320 	and.w	r3, r3, #32
 800872e:	2b00      	cmp	r3, #0
 8008730:	d033      	beq.n	800879a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008736:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800873a:	d005      	beq.n	8008748 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008740:	3301      	adds	r3, #1
 8008742:	b29a      	uxth	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00b      	beq.n	800876a <tcp_process_refused_data+0xb2>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6918      	ldr	r0, [r3, #16]
 800875c:	2300      	movs	r3, #0
 800875e:	2200      	movs	r2, #0
 8008760:	6879      	ldr	r1, [r7, #4]
 8008762:	47a0      	blx	r4
 8008764:	4603      	mov	r3, r0
 8008766:	73fb      	strb	r3, [r7, #15]
 8008768:	e001      	b.n	800876e <tcp_process_refused_data+0xb6>
 800876a:	2300      	movs	r3, #0
 800876c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800876e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008772:	f113 0f0d 	cmn.w	r3, #13
 8008776:	d110      	bne.n	800879a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8008778:	f06f 030c 	mvn.w	r3, #12
 800877c:	e00e      	b.n	800879c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800877e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008782:	f113 0f0d 	cmn.w	r3, #13
 8008786:	d102      	bne.n	800878e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8008788:	f06f 030c 	mvn.w	r3, #12
 800878c:	e006      	b.n	800879c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8008794:	f06f 0304 	mvn.w	r3, #4
 8008798:	e000      	b.n	800879c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800879a:	2300      	movs	r3, #0
}
 800879c:	4618      	mov	r0, r3
 800879e:	3714      	adds	r7, #20
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd90      	pop	{r4, r7, pc}
 80087a4:	08011c64 	.word	0x08011c64
 80087a8:	08012174 	.word	0x08012174
 80087ac:	08011ca8 	.word	0x08011ca8

080087b0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80087b8:	e007      	b.n	80087ca <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 f80a 	bl	80087da <tcp_seg_free>
    seg = next;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1f4      	bne.n	80087ba <tcp_segs_free+0xa>
  }
}
 80087d0:	bf00      	nop
 80087d2:	bf00      	nop
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b082      	sub	sp, #8
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00c      	beq.n	8008802 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d004      	beq.n	80087fa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	4618      	mov	r0, r3
 80087f6:	f7fe fcd9 	bl	80071ac <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80087fa:	6879      	ldr	r1, [r7, #4]
 80087fc:	2003      	movs	r0, #3
 80087fe:	f7fd fe5f 	bl	80064c0 <memp_free>
  }
}
 8008802:	bf00      	nop
 8008804:	3708      	adds	r7, #8
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
	...

0800880c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d106      	bne.n	8008828 <tcp_seg_copy+0x1c>
 800881a:	4b0f      	ldr	r3, [pc, #60]	@ (8008858 <tcp_seg_copy+0x4c>)
 800881c:	f240 6282 	movw	r2, #1666	@ 0x682
 8008820:	490e      	ldr	r1, [pc, #56]	@ (800885c <tcp_seg_copy+0x50>)
 8008822:	480f      	ldr	r0, [pc, #60]	@ (8008860 <tcp_seg_copy+0x54>)
 8008824:	f007 fb42 	bl	800feac <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008828:	2003      	movs	r0, #3
 800882a:	f7fd fdd9 	bl	80063e0 <memp_malloc>
 800882e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d101      	bne.n	800883a <tcp_seg_copy+0x2e>
    return NULL;
 8008836:	2300      	movs	r3, #0
 8008838:	e00a      	b.n	8008850 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800883a:	2210      	movs	r2, #16
 800883c:	6879      	ldr	r1, [r7, #4]
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	f007 fc85 	bl	801014e <memcpy>
  pbuf_ref(cseg->p);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	4618      	mov	r0, r3
 800884a:	f7fe fd4f 	bl	80072ec <pbuf_ref>
  return cseg;
 800884e:	68fb      	ldr	r3, [r7, #12]
}
 8008850:	4618      	mov	r0, r3
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	08011c64 	.word	0x08011c64
 800885c:	080121b8 	.word	0x080121b8
 8008860:	08011ca8 	.word	0x08011ca8

08008864 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	607a      	str	r2, [r7, #4]
 8008870:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d109      	bne.n	800888c <tcp_recv_null+0x28>
 8008878:	4b12      	ldr	r3, [pc, #72]	@ (80088c4 <tcp_recv_null+0x60>)
 800887a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800887e:	4912      	ldr	r1, [pc, #72]	@ (80088c8 <tcp_recv_null+0x64>)
 8008880:	4812      	ldr	r0, [pc, #72]	@ (80088cc <tcp_recv_null+0x68>)
 8008882:	f007 fb13 	bl	800feac <iprintf>
 8008886:	f06f 030f 	mvn.w	r3, #15
 800888a:	e016      	b.n	80088ba <tcp_recv_null+0x56>

  if (p != NULL) {
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d009      	beq.n	80088a6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	891b      	ldrh	r3, [r3, #8]
 8008896:	4619      	mov	r1, r3
 8008898:	68b8      	ldr	r0, [r7, #8]
 800889a:	f7ff fb17 	bl	8007ecc <tcp_recved>
    pbuf_free(p);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f7fe fc84 	bl	80071ac <pbuf_free>
 80088a4:	e008      	b.n	80088b8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80088a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d104      	bne.n	80088b8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80088ae:	68b8      	ldr	r0, [r7, #8]
 80088b0:	f7ff f9bc 	bl	8007c2c <tcp_close>
 80088b4:	4603      	mov	r3, r0
 80088b6:	e000      	b.n	80088ba <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	08011c64 	.word	0x08011c64
 80088c8:	080121d4 	.word	0x080121d4
 80088cc:	08011ca8 	.word	0x08011ca8

080088d0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b086      	sub	sp, #24
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	4603      	mov	r3, r0
 80088d8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80088da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	db01      	blt.n	80088e6 <tcp_kill_prio+0x16>
 80088e2:	79fb      	ldrb	r3, [r7, #7]
 80088e4:	e000      	b.n	80088e8 <tcp_kill_prio+0x18>
 80088e6:	237f      	movs	r3, #127	@ 0x7f
 80088e8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80088ea:	7afb      	ldrb	r3, [r7, #11]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d034      	beq.n	800895a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80088f0:	7afb      	ldrb	r3, [r7, #11]
 80088f2:	3b01      	subs	r3, #1
 80088f4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80088f6:	2300      	movs	r3, #0
 80088f8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80088fa:	2300      	movs	r3, #0
 80088fc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80088fe:	4b19      	ldr	r3, [pc, #100]	@ (8008964 <tcp_kill_prio+0x94>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	617b      	str	r3, [r7, #20]
 8008904:	e01f      	b.n	8008946 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	7d5b      	ldrb	r3, [r3, #21]
 800890a:	7afa      	ldrb	r2, [r7, #11]
 800890c:	429a      	cmp	r2, r3
 800890e:	d80c      	bhi.n	800892a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8008914:	7afa      	ldrb	r2, [r7, #11]
 8008916:	429a      	cmp	r2, r3
 8008918:	d112      	bne.n	8008940 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800891a:	4b13      	ldr	r3, [pc, #76]	@ (8008968 <tcp_kill_prio+0x98>)
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	6a1b      	ldr	r3, [r3, #32]
 8008922:	1ad3      	subs	r3, r2, r3
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	429a      	cmp	r2, r3
 8008928:	d80a      	bhi.n	8008940 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800892a:	4b0f      	ldr	r3, [pc, #60]	@ (8008968 <tcp_kill_prio+0x98>)
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	6a1b      	ldr	r3, [r3, #32]
 8008932:	1ad3      	subs	r3, r2, r3
 8008934:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	7d5b      	ldrb	r3, [r3, #21]
 800893e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	617b      	str	r3, [r7, #20]
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d1dc      	bne.n	8008906 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d004      	beq.n	800895c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008952:	6938      	ldr	r0, [r7, #16]
 8008954:	f7ff fa54 	bl	8007e00 <tcp_abort>
 8008958:	e000      	b.n	800895c <tcp_kill_prio+0x8c>
    return;
 800895a:	bf00      	nop
  }
}
 800895c:	3718      	adds	r7, #24
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	200087dc 	.word	0x200087dc
 8008968:	200087d0 	.word	0x200087d0

0800896c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b086      	sub	sp, #24
 8008970:	af00      	add	r7, sp, #0
 8008972:	4603      	mov	r3, r0
 8008974:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008976:	79fb      	ldrb	r3, [r7, #7]
 8008978:	2b08      	cmp	r3, #8
 800897a:	d009      	beq.n	8008990 <tcp_kill_state+0x24>
 800897c:	79fb      	ldrb	r3, [r7, #7]
 800897e:	2b09      	cmp	r3, #9
 8008980:	d006      	beq.n	8008990 <tcp_kill_state+0x24>
 8008982:	4b1a      	ldr	r3, [pc, #104]	@ (80089ec <tcp_kill_state+0x80>)
 8008984:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8008988:	4919      	ldr	r1, [pc, #100]	@ (80089f0 <tcp_kill_state+0x84>)
 800898a:	481a      	ldr	r0, [pc, #104]	@ (80089f4 <tcp_kill_state+0x88>)
 800898c:	f007 fa8e 	bl	800feac <iprintf>

  inactivity = 0;
 8008990:	2300      	movs	r3, #0
 8008992:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008994:	2300      	movs	r3, #0
 8008996:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008998:	4b17      	ldr	r3, [pc, #92]	@ (80089f8 <tcp_kill_state+0x8c>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	617b      	str	r3, [r7, #20]
 800899e:	e017      	b.n	80089d0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	7d1b      	ldrb	r3, [r3, #20]
 80089a4:	79fa      	ldrb	r2, [r7, #7]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d10f      	bne.n	80089ca <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80089aa:	4b14      	ldr	r3, [pc, #80]	@ (80089fc <tcp_kill_state+0x90>)
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	6a1b      	ldr	r3, [r3, #32]
 80089b2:	1ad3      	subs	r3, r2, r3
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d807      	bhi.n	80089ca <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80089ba:	4b10      	ldr	r3, [pc, #64]	@ (80089fc <tcp_kill_state+0x90>)
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	6a1b      	ldr	r3, [r3, #32]
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	617b      	str	r3, [r7, #20]
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1e4      	bne.n	80089a0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d003      	beq.n	80089e4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80089dc:	2100      	movs	r1, #0
 80089de:	6938      	ldr	r0, [r7, #16]
 80089e0:	f7ff f950 	bl	8007c84 <tcp_abandon>
  }
}
 80089e4:	bf00      	nop
 80089e6:	3718      	adds	r7, #24
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	08011c64 	.word	0x08011c64
 80089f0:	080121f0 	.word	0x080121f0
 80089f4:	08011ca8 	.word	0x08011ca8
 80089f8:	200087dc 	.word	0x200087dc
 80089fc:	200087d0 	.word	0x200087d0

08008a00 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8008a06:	2300      	movs	r3, #0
 8008a08:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008a0e:	4b12      	ldr	r3, [pc, #72]	@ (8008a58 <tcp_kill_timewait+0x58>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	60fb      	str	r3, [r7, #12]
 8008a14:	e012      	b.n	8008a3c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008a16:	4b11      	ldr	r3, [pc, #68]	@ (8008a5c <tcp_kill_timewait+0x5c>)
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	6a1b      	ldr	r3, [r3, #32]
 8008a1e:	1ad3      	subs	r3, r2, r3
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d807      	bhi.n	8008a36 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8008a26:	4b0d      	ldr	r3, [pc, #52]	@ (8008a5c <tcp_kill_timewait+0x5c>)
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	6a1b      	ldr	r3, [r3, #32]
 8008a2e:	1ad3      	subs	r3, r2, r3
 8008a30:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	68db      	ldr	r3, [r3, #12]
 8008a3a:	60fb      	str	r3, [r7, #12]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d1e9      	bne.n	8008a16 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d002      	beq.n	8008a4e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008a48:	68b8      	ldr	r0, [r7, #8]
 8008a4a:	f7ff f9d9 	bl	8007e00 <tcp_abort>
  }
}
 8008a4e:	bf00      	nop
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	200087e0 	.word	0x200087e0
 8008a5c:	200087d0 	.word	0x200087d0

08008a60 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8008a66:	4b10      	ldr	r3, [pc, #64]	@ (8008aa8 <tcp_handle_closepend+0x48>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008a6c:	e014      	b.n	8008a98 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	8b5b      	ldrh	r3, [r3, #26]
 8008a78:	f003 0308 	and.w	r3, r3, #8
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d009      	beq.n	8008a94 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	8b5b      	ldrh	r3, [r3, #26]
 8008a84:	f023 0308 	bic.w	r3, r3, #8
 8008a88:	b29a      	uxth	r2, r3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f7ff f862 	bl	8007b58 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d1e7      	bne.n	8008a6e <tcp_handle_closepend+0xe>
  }
}
 8008a9e:	bf00      	nop
 8008aa0:	bf00      	nop
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	200087dc 	.word	0x200087dc

08008aac <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008ab6:	2001      	movs	r0, #1
 8008ab8:	f7fd fc92 	bl	80063e0 <memp_malloc>
 8008abc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d126      	bne.n	8008b12 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8008ac4:	f7ff ffcc 	bl	8008a60 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8008ac8:	f7ff ff9a 	bl	8008a00 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008acc:	2001      	movs	r0, #1
 8008ace:	f7fd fc87 	bl	80063e0 <memp_malloc>
 8008ad2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d11b      	bne.n	8008b12 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8008ada:	2009      	movs	r0, #9
 8008adc:	f7ff ff46 	bl	800896c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008ae0:	2001      	movs	r0, #1
 8008ae2:	f7fd fc7d 	bl	80063e0 <memp_malloc>
 8008ae6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d111      	bne.n	8008b12 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8008aee:	2008      	movs	r0, #8
 8008af0:	f7ff ff3c 	bl	800896c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008af4:	2001      	movs	r0, #1
 8008af6:	f7fd fc73 	bl	80063e0 <memp_malloc>
 8008afa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d107      	bne.n	8008b12 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8008b02:	79fb      	ldrb	r3, [r7, #7]
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7ff fee3 	bl	80088d0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008b0a:	2001      	movs	r0, #1
 8008b0c:	f7fd fc68 	bl	80063e0 <memp_malloc>
 8008b10:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d03f      	beq.n	8008b98 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008b18:	229c      	movs	r2, #156	@ 0x9c
 8008b1a:	2100      	movs	r1, #0
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f007 fa64 	bl	800ffea <memset>
    pcb->prio = prio;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	79fa      	ldrb	r2, [r7, #7]
 8008b26:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8008b2e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8008b38:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	22ff      	movs	r2, #255	@ 0xff
 8008b46:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8008b4e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2206      	movs	r2, #6
 8008b54:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2206      	movs	r2, #6
 8008b5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008b64:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8008b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8008ba4 <tcp_alloc+0xf8>)
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8008b76:	4b0c      	ldr	r3, [pc, #48]	@ (8008ba8 <tcp_alloc+0xfc>)
 8008b78:	781a      	ldrb	r2, [r3, #0]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8008b84:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	4a08      	ldr	r2, [pc, #32]	@ (8008bac <tcp_alloc+0x100>)
 8008b8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	4a07      	ldr	r2, [pc, #28]	@ (8008bb0 <tcp_alloc+0x104>)
 8008b94:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8008b98:	68fb      	ldr	r3, [r7, #12]
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	200087d0 	.word	0x200087d0
 8008ba8:	200087e6 	.word	0x200087e6
 8008bac:	08008865 	.word	0x08008865
 8008bb0:	006ddd00 	.word	0x006ddd00

08008bb4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d107      	bne.n	8008bd2 <tcp_pcb_purge+0x1e>
 8008bc2:	4b21      	ldr	r3, [pc, #132]	@ (8008c48 <tcp_pcb_purge+0x94>)
 8008bc4:	f640 0251 	movw	r2, #2129	@ 0x851
 8008bc8:	4920      	ldr	r1, [pc, #128]	@ (8008c4c <tcp_pcb_purge+0x98>)
 8008bca:	4821      	ldr	r0, [pc, #132]	@ (8008c50 <tcp_pcb_purge+0x9c>)
 8008bcc:	f007 f96e 	bl	800feac <iprintf>
 8008bd0:	e037      	b.n	8008c42 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	7d1b      	ldrb	r3, [r3, #20]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d033      	beq.n	8008c42 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8008bde:	2b0a      	cmp	r3, #10
 8008be0:	d02f      	beq.n	8008c42 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d02b      	beq.n	8008c42 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d007      	beq.n	8008c02 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7fe fad8 	bl	80071ac <pbuf_free>
      pcb->refused_data = NULL;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d002      	beq.n	8008c10 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 f986 	bl	8008f1c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008c16:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7ff fdc7 	bl	80087b0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7ff fdc2 	bl	80087b0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8008c42:	3708      	adds	r7, #8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	08011c64 	.word	0x08011c64
 8008c4c:	080122b0 	.word	0x080122b0
 8008c50:	08011ca8 	.word	0x08011ca8

08008c54 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d106      	bne.n	8008c72 <tcp_pcb_remove+0x1e>
 8008c64:	4b3e      	ldr	r3, [pc, #248]	@ (8008d60 <tcp_pcb_remove+0x10c>)
 8008c66:	f640 0283 	movw	r2, #2179	@ 0x883
 8008c6a:	493e      	ldr	r1, [pc, #248]	@ (8008d64 <tcp_pcb_remove+0x110>)
 8008c6c:	483e      	ldr	r0, [pc, #248]	@ (8008d68 <tcp_pcb_remove+0x114>)
 8008c6e:	f007 f91d 	bl	800feac <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d106      	bne.n	8008c86 <tcp_pcb_remove+0x32>
 8008c78:	4b39      	ldr	r3, [pc, #228]	@ (8008d60 <tcp_pcb_remove+0x10c>)
 8008c7a:	f640 0284 	movw	r2, #2180	@ 0x884
 8008c7e:	493b      	ldr	r1, [pc, #236]	@ (8008d6c <tcp_pcb_remove+0x118>)
 8008c80:	4839      	ldr	r0, [pc, #228]	@ (8008d68 <tcp_pcb_remove+0x114>)
 8008c82:	f007 f913 	bl	800feac <iprintf>

  TCP_RMV(pcblist, pcb);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	683a      	ldr	r2, [r7, #0]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d105      	bne.n	8008c9c <tcp_pcb_remove+0x48>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	68da      	ldr	r2, [r3, #12]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	601a      	str	r2, [r3, #0]
 8008c9a:	e013      	b.n	8008cc4 <tcp_pcb_remove+0x70>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	60fb      	str	r3, [r7, #12]
 8008ca2:	e00c      	b.n	8008cbe <tcp_pcb_remove+0x6a>
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	683a      	ldr	r2, [r7, #0]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d104      	bne.n	8008cb8 <tcp_pcb_remove+0x64>
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	68da      	ldr	r2, [r3, #12]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	60da      	str	r2, [r3, #12]
 8008cb6:	e005      	b.n	8008cc4 <tcp_pcb_remove+0x70>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	60fb      	str	r3, [r7, #12]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d1ef      	bne.n	8008ca4 <tcp_pcb_remove+0x50>
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8008cca:	6838      	ldr	r0, [r7, #0]
 8008ccc:	f7ff ff72 	bl	8008bb4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	7d1b      	ldrb	r3, [r3, #20]
 8008cd4:	2b0a      	cmp	r3, #10
 8008cd6:	d013      	beq.n	8008d00 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d00f      	beq.n	8008d00 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	8b5b      	ldrh	r3, [r3, #26]
 8008ce4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d009      	beq.n	8008d00 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	8b5b      	ldrh	r3, [r3, #26]
 8008cf0:	f043 0302 	orr.w	r3, r3, #2
 8008cf4:	b29a      	uxth	r2, r3
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008cfa:	6838      	ldr	r0, [r7, #0]
 8008cfc:	f002 ff68 	bl	800bbd0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	7d1b      	ldrb	r3, [r3, #20]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d020      	beq.n	8008d4a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d006      	beq.n	8008d1e <tcp_pcb_remove+0xca>
 8008d10:	4b13      	ldr	r3, [pc, #76]	@ (8008d60 <tcp_pcb_remove+0x10c>)
 8008d12:	f640 0293 	movw	r2, #2195	@ 0x893
 8008d16:	4916      	ldr	r1, [pc, #88]	@ (8008d70 <tcp_pcb_remove+0x11c>)
 8008d18:	4813      	ldr	r0, [pc, #76]	@ (8008d68 <tcp_pcb_remove+0x114>)
 8008d1a:	f007 f8c7 	bl	800feac <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d006      	beq.n	8008d34 <tcp_pcb_remove+0xe0>
 8008d26:	4b0e      	ldr	r3, [pc, #56]	@ (8008d60 <tcp_pcb_remove+0x10c>)
 8008d28:	f640 0294 	movw	r2, #2196	@ 0x894
 8008d2c:	4911      	ldr	r1, [pc, #68]	@ (8008d74 <tcp_pcb_remove+0x120>)
 8008d2e:	480e      	ldr	r0, [pc, #56]	@ (8008d68 <tcp_pcb_remove+0x114>)
 8008d30:	f007 f8bc 	bl	800feac <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d006      	beq.n	8008d4a <tcp_pcb_remove+0xf6>
 8008d3c:	4b08      	ldr	r3, [pc, #32]	@ (8008d60 <tcp_pcb_remove+0x10c>)
 8008d3e:	f640 0296 	movw	r2, #2198	@ 0x896
 8008d42:	490d      	ldr	r1, [pc, #52]	@ (8008d78 <tcp_pcb_remove+0x124>)
 8008d44:	4808      	ldr	r0, [pc, #32]	@ (8008d68 <tcp_pcb_remove+0x114>)
 8008d46:	f007 f8b1 	bl	800feac <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	2200      	movs	r2, #0
 8008d54:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8008d56:	bf00      	nop
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	08011c64 	.word	0x08011c64
 8008d64:	080122cc 	.word	0x080122cc
 8008d68:	08011ca8 	.word	0x08011ca8
 8008d6c:	080122e8 	.word	0x080122e8
 8008d70:	08012308 	.word	0x08012308
 8008d74:	08012320 	.word	0x08012320
 8008d78:	0801233c 	.word	0x0801233c

08008d7c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d106      	bne.n	8008d98 <tcp_next_iss+0x1c>
 8008d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8008db4 <tcp_next_iss+0x38>)
 8008d8c:	f640 02af 	movw	r2, #2223	@ 0x8af
 8008d90:	4909      	ldr	r1, [pc, #36]	@ (8008db8 <tcp_next_iss+0x3c>)
 8008d92:	480a      	ldr	r0, [pc, #40]	@ (8008dbc <tcp_next_iss+0x40>)
 8008d94:	f007 f88a 	bl	800feac <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8008d98:	4b09      	ldr	r3, [pc, #36]	@ (8008dc0 <tcp_next_iss+0x44>)
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	4b09      	ldr	r3, [pc, #36]	@ (8008dc4 <tcp_next_iss+0x48>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4413      	add	r3, r2
 8008da2:	4a07      	ldr	r2, [pc, #28]	@ (8008dc0 <tcp_next_iss+0x44>)
 8008da4:	6013      	str	r3, [r2, #0]
  return iss;
 8008da6:	4b06      	ldr	r3, [pc, #24]	@ (8008dc0 <tcp_next_iss+0x44>)
 8008da8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3708      	adds	r7, #8
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	08011c64 	.word	0x08011c64
 8008db8:	08012354 	.word	0x08012354
 8008dbc:	08011ca8 	.word	0x08011ca8
 8008dc0:	20000024 	.word	0x20000024
 8008dc4:	200087d0 	.word	0x200087d0

08008dc8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b086      	sub	sp, #24
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	4603      	mov	r3, r0
 8008dd0:	60b9      	str	r1, [r7, #8]
 8008dd2:	607a      	str	r2, [r7, #4]
 8008dd4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d106      	bne.n	8008dea <tcp_eff_send_mss_netif+0x22>
 8008ddc:	4b14      	ldr	r3, [pc, #80]	@ (8008e30 <tcp_eff_send_mss_netif+0x68>)
 8008dde:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8008de2:	4914      	ldr	r1, [pc, #80]	@ (8008e34 <tcp_eff_send_mss_netif+0x6c>)
 8008de4:	4814      	ldr	r0, [pc, #80]	@ (8008e38 <tcp_eff_send_mss_netif+0x70>)
 8008de6:	f007 f861 	bl	800feac <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d101      	bne.n	8008df4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8008df0:	89fb      	ldrh	r3, [r7, #14]
 8008df2:	e019      	b.n	8008e28 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008df8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008dfa:	8afb      	ldrh	r3, [r7, #22]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d012      	beq.n	8008e26 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008e00:	2328      	movs	r3, #40	@ 0x28
 8008e02:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008e04:	8afa      	ldrh	r2, [r7, #22]
 8008e06:	8abb      	ldrh	r3, [r7, #20]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d904      	bls.n	8008e16 <tcp_eff_send_mss_netif+0x4e>
 8008e0c:	8afa      	ldrh	r2, [r7, #22]
 8008e0e:	8abb      	ldrh	r3, [r7, #20]
 8008e10:	1ad3      	subs	r3, r2, r3
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	e000      	b.n	8008e18 <tcp_eff_send_mss_netif+0x50>
 8008e16:	2300      	movs	r3, #0
 8008e18:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008e1a:	8a7a      	ldrh	r2, [r7, #18]
 8008e1c:	89fb      	ldrh	r3, [r7, #14]
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	bf28      	it	cs
 8008e22:	4613      	movcs	r3, r2
 8008e24:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8008e26:	89fb      	ldrh	r3, [r7, #14]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3718      	adds	r7, #24
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	08011c64 	.word	0x08011c64
 8008e34:	08012370 	.word	0x08012370
 8008e38:	08011ca8 	.word	0x08011ca8

08008e3c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d119      	bne.n	8008e84 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8008e50:	4b10      	ldr	r3, [pc, #64]	@ (8008e94 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8008e52:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8008e56:	4910      	ldr	r1, [pc, #64]	@ (8008e98 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008e58:	4810      	ldr	r0, [pc, #64]	@ (8008e9c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8008e5a:	f007 f827 	bl	800feac <iprintf>

  while (pcb != NULL) {
 8008e5e:	e011      	b.n	8008e84 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d108      	bne.n	8008e7e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	f7fe ffc4 	bl	8007e00 <tcp_abort>
      pcb = next;
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	60fb      	str	r3, [r7, #12]
 8008e7c:	e002      	b.n	8008e84 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1ea      	bne.n	8008e60 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8008e8a:	bf00      	nop
 8008e8c:	bf00      	nop
 8008e8e:	3710      	adds	r7, #16
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	08011c64 	.word	0x08011c64
 8008e98:	08012398 	.word	0x08012398
 8008e9c:	08011ca8 	.word	0x08011ca8

08008ea0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d02a      	beq.n	8008f06 <tcp_netif_ip_addr_changed+0x66>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d026      	beq.n	8008f06 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008eb8:	4b15      	ldr	r3, [pc, #84]	@ (8008f10 <tcp_netif_ip_addr_changed+0x70>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f7ff ffbc 	bl	8008e3c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008ec4:	4b13      	ldr	r3, [pc, #76]	@ (8008f14 <tcp_netif_ip_addr_changed+0x74>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4619      	mov	r1, r3
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f7ff ffb6 	bl	8008e3c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d017      	beq.n	8008f06 <tcp_netif_ip_addr_changed+0x66>
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d013      	beq.n	8008f06 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008ede:	4b0e      	ldr	r3, [pc, #56]	@ (8008f18 <tcp_netif_ip_addr_changed+0x78>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	60fb      	str	r3, [r7, #12]
 8008ee4:	e00c      	b.n	8008f00 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d103      	bne.n	8008efa <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	60fb      	str	r3, [r7, #12]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d1ef      	bne.n	8008ee6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8008f06:	bf00      	nop
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	200087dc 	.word	0x200087dc
 8008f14:	200087d4 	.word	0x200087d4
 8008f18:	200087d8 	.word	0x200087d8

08008f1c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d007      	beq.n	8008f3c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7ff fc3d 	bl	80087b0 <tcp_segs_free>
    pcb->ooseq = NULL;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008f3c:	bf00      	nop
 8008f3e:	3708      	adds	r7, #8
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008f44:	b590      	push	{r4, r7, lr}
 8008f46:	b08d      	sub	sp, #52	@ 0x34
 8008f48:	af04      	add	r7, sp, #16
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d105      	bne.n	8008f60 <tcp_input+0x1c>
 8008f54:	4b9b      	ldr	r3, [pc, #620]	@ (80091c4 <tcp_input+0x280>)
 8008f56:	2283      	movs	r2, #131	@ 0x83
 8008f58:	499b      	ldr	r1, [pc, #620]	@ (80091c8 <tcp_input+0x284>)
 8008f5a:	489c      	ldr	r0, [pc, #624]	@ (80091cc <tcp_input+0x288>)
 8008f5c:	f006 ffa6 	bl	800feac <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	4a9a      	ldr	r2, [pc, #616]	@ (80091d0 <tcp_input+0x28c>)
 8008f66:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	895b      	ldrh	r3, [r3, #10]
 8008f6c:	2b13      	cmp	r3, #19
 8008f6e:	f240 83d1 	bls.w	8009714 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008f72:	4b98      	ldr	r3, [pc, #608]	@ (80091d4 <tcp_input+0x290>)
 8008f74:	695b      	ldr	r3, [r3, #20]
 8008f76:	4a97      	ldr	r2, [pc, #604]	@ (80091d4 <tcp_input+0x290>)
 8008f78:	6812      	ldr	r2, [r2, #0]
 8008f7a:	4611      	mov	r1, r2
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f005 febf 	bl	800ed00 <ip4_addr_isbroadcast_u32>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	f040 83c7 	bne.w	8009718 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008f8a:	4b92      	ldr	r3, [pc, #584]	@ (80091d4 <tcp_input+0x290>)
 8008f8c:	695b      	ldr	r3, [r3, #20]
 8008f8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008f92:	2be0      	cmp	r3, #224	@ 0xe0
 8008f94:	f000 83c0 	beq.w	8009718 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008f98:	4b8d      	ldr	r3, [pc, #564]	@ (80091d0 <tcp_input+0x28c>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	899b      	ldrh	r3, [r3, #12]
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7fc fda5 	bl	8005af0 <lwip_htons>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	0b1b      	lsrs	r3, r3, #12
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008fb2:	7cbb      	ldrb	r3, [r7, #18]
 8008fb4:	2b13      	cmp	r3, #19
 8008fb6:	f240 83b1 	bls.w	800971c <tcp_input+0x7d8>
 8008fba:	7cbb      	ldrb	r3, [r7, #18]
 8008fbc:	b29a      	uxth	r2, r3
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	891b      	ldrh	r3, [r3, #8]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	f200 83aa 	bhi.w	800971c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008fc8:	7cbb      	ldrb	r3, [r7, #18]
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	3b14      	subs	r3, #20
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	4b81      	ldr	r3, [pc, #516]	@ (80091d8 <tcp_input+0x294>)
 8008fd2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008fd4:	4b81      	ldr	r3, [pc, #516]	@ (80091dc <tcp_input+0x298>)
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	895a      	ldrh	r2, [r3, #10]
 8008fde:	7cbb      	ldrb	r3, [r7, #18]
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d309      	bcc.n	8008ffa <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008fe6:	4b7c      	ldr	r3, [pc, #496]	@ (80091d8 <tcp_input+0x294>)
 8008fe8:	881a      	ldrh	r2, [r3, #0]
 8008fea:	4b7d      	ldr	r3, [pc, #500]	@ (80091e0 <tcp_input+0x29c>)
 8008fec:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8008fee:	7cbb      	ldrb	r3, [r7, #18]
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f7fe f854 	bl	80070a0 <pbuf_remove_header>
 8008ff8:	e04e      	b.n	8009098 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d105      	bne.n	800900e <tcp_input+0xca>
 8009002:	4b70      	ldr	r3, [pc, #448]	@ (80091c4 <tcp_input+0x280>)
 8009004:	22c2      	movs	r2, #194	@ 0xc2
 8009006:	4977      	ldr	r1, [pc, #476]	@ (80091e4 <tcp_input+0x2a0>)
 8009008:	4870      	ldr	r0, [pc, #448]	@ (80091cc <tcp_input+0x288>)
 800900a:	f006 ff4f 	bl	800feac <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800900e:	2114      	movs	r1, #20
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f7fe f845 	bl	80070a0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	895a      	ldrh	r2, [r3, #10]
 800901a:	4b71      	ldr	r3, [pc, #452]	@ (80091e0 <tcp_input+0x29c>)
 800901c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800901e:	4b6e      	ldr	r3, [pc, #440]	@ (80091d8 <tcp_input+0x294>)
 8009020:	881a      	ldrh	r2, [r3, #0]
 8009022:	4b6f      	ldr	r3, [pc, #444]	@ (80091e0 <tcp_input+0x29c>)
 8009024:	881b      	ldrh	r3, [r3, #0]
 8009026:	1ad3      	subs	r3, r2, r3
 8009028:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800902a:	4b6d      	ldr	r3, [pc, #436]	@ (80091e0 <tcp_input+0x29c>)
 800902c:	881b      	ldrh	r3, [r3, #0]
 800902e:	4619      	mov	r1, r3
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f7fe f835 	bl	80070a0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	895b      	ldrh	r3, [r3, #10]
 800903c:	8a3a      	ldrh	r2, [r7, #16]
 800903e:	429a      	cmp	r2, r3
 8009040:	f200 836e 	bhi.w	8009720 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	4a64      	ldr	r2, [pc, #400]	@ (80091dc <tcp_input+0x298>)
 800904c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	8a3a      	ldrh	r2, [r7, #16]
 8009054:	4611      	mov	r1, r2
 8009056:	4618      	mov	r0, r3
 8009058:	f7fe f822 	bl	80070a0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	891a      	ldrh	r2, [r3, #8]
 8009060:	8a3b      	ldrh	r3, [r7, #16]
 8009062:	1ad3      	subs	r3, r2, r3
 8009064:	b29a      	uxth	r2, r3
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	895b      	ldrh	r3, [r3, #10]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d005      	beq.n	800907e <tcp_input+0x13a>
 8009072:	4b54      	ldr	r3, [pc, #336]	@ (80091c4 <tcp_input+0x280>)
 8009074:	22df      	movs	r2, #223	@ 0xdf
 8009076:	495c      	ldr	r1, [pc, #368]	@ (80091e8 <tcp_input+0x2a4>)
 8009078:	4854      	ldr	r0, [pc, #336]	@ (80091cc <tcp_input+0x288>)
 800907a:	f006 ff17 	bl	800feac <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	891a      	ldrh	r2, [r3, #8]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	891b      	ldrh	r3, [r3, #8]
 8009088:	429a      	cmp	r2, r3
 800908a:	d005      	beq.n	8009098 <tcp_input+0x154>
 800908c:	4b4d      	ldr	r3, [pc, #308]	@ (80091c4 <tcp_input+0x280>)
 800908e:	22e0      	movs	r2, #224	@ 0xe0
 8009090:	4956      	ldr	r1, [pc, #344]	@ (80091ec <tcp_input+0x2a8>)
 8009092:	484e      	ldr	r0, [pc, #312]	@ (80091cc <tcp_input+0x288>)
 8009094:	f006 ff0a 	bl	800feac <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009098:	4b4d      	ldr	r3, [pc, #308]	@ (80091d0 <tcp_input+0x28c>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	881b      	ldrh	r3, [r3, #0]
 800909e:	b29b      	uxth	r3, r3
 80090a0:	4a4b      	ldr	r2, [pc, #300]	@ (80091d0 <tcp_input+0x28c>)
 80090a2:	6814      	ldr	r4, [r2, #0]
 80090a4:	4618      	mov	r0, r3
 80090a6:	f7fc fd23 	bl	8005af0 <lwip_htons>
 80090aa:	4603      	mov	r3, r0
 80090ac:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80090ae:	4b48      	ldr	r3, [pc, #288]	@ (80091d0 <tcp_input+0x28c>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	885b      	ldrh	r3, [r3, #2]
 80090b4:	b29b      	uxth	r3, r3
 80090b6:	4a46      	ldr	r2, [pc, #280]	@ (80091d0 <tcp_input+0x28c>)
 80090b8:	6814      	ldr	r4, [r2, #0]
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7fc fd18 	bl	8005af0 <lwip_htons>
 80090c0:	4603      	mov	r3, r0
 80090c2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80090c4:	4b42      	ldr	r3, [pc, #264]	@ (80091d0 <tcp_input+0x28c>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	4a41      	ldr	r2, [pc, #260]	@ (80091d0 <tcp_input+0x28c>)
 80090cc:	6814      	ldr	r4, [r2, #0]
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7fc fd23 	bl	8005b1a <lwip_htonl>
 80090d4:	4603      	mov	r3, r0
 80090d6:	6063      	str	r3, [r4, #4]
 80090d8:	6863      	ldr	r3, [r4, #4]
 80090da:	4a45      	ldr	r2, [pc, #276]	@ (80091f0 <tcp_input+0x2ac>)
 80090dc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80090de:	4b3c      	ldr	r3, [pc, #240]	@ (80091d0 <tcp_input+0x28c>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	4a3a      	ldr	r2, [pc, #232]	@ (80091d0 <tcp_input+0x28c>)
 80090e6:	6814      	ldr	r4, [r2, #0]
 80090e8:	4618      	mov	r0, r3
 80090ea:	f7fc fd16 	bl	8005b1a <lwip_htonl>
 80090ee:	4603      	mov	r3, r0
 80090f0:	60a3      	str	r3, [r4, #8]
 80090f2:	68a3      	ldr	r3, [r4, #8]
 80090f4:	4a3f      	ldr	r2, [pc, #252]	@ (80091f4 <tcp_input+0x2b0>)
 80090f6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80090f8:	4b35      	ldr	r3, [pc, #212]	@ (80091d0 <tcp_input+0x28c>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	89db      	ldrh	r3, [r3, #14]
 80090fe:	b29b      	uxth	r3, r3
 8009100:	4a33      	ldr	r2, [pc, #204]	@ (80091d0 <tcp_input+0x28c>)
 8009102:	6814      	ldr	r4, [r2, #0]
 8009104:	4618      	mov	r0, r3
 8009106:	f7fc fcf3 	bl	8005af0 <lwip_htons>
 800910a:	4603      	mov	r3, r0
 800910c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800910e:	4b30      	ldr	r3, [pc, #192]	@ (80091d0 <tcp_input+0x28c>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	899b      	ldrh	r3, [r3, #12]
 8009114:	b29b      	uxth	r3, r3
 8009116:	4618      	mov	r0, r3
 8009118:	f7fc fcea 	bl	8005af0 <lwip_htons>
 800911c:	4603      	mov	r3, r0
 800911e:	b2db      	uxtb	r3, r3
 8009120:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009124:	b2da      	uxtb	r2, r3
 8009126:	4b34      	ldr	r3, [pc, #208]	@ (80091f8 <tcp_input+0x2b4>)
 8009128:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	891a      	ldrh	r2, [r3, #8]
 800912e:	4b33      	ldr	r3, [pc, #204]	@ (80091fc <tcp_input+0x2b8>)
 8009130:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009132:	4b31      	ldr	r3, [pc, #196]	@ (80091f8 <tcp_input+0x2b4>)
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	f003 0303 	and.w	r3, r3, #3
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00c      	beq.n	8009158 <tcp_input+0x214>
    tcplen++;
 800913e:	4b2f      	ldr	r3, [pc, #188]	@ (80091fc <tcp_input+0x2b8>)
 8009140:	881b      	ldrh	r3, [r3, #0]
 8009142:	3301      	adds	r3, #1
 8009144:	b29a      	uxth	r2, r3
 8009146:	4b2d      	ldr	r3, [pc, #180]	@ (80091fc <tcp_input+0x2b8>)
 8009148:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	891a      	ldrh	r2, [r3, #8]
 800914e:	4b2b      	ldr	r3, [pc, #172]	@ (80091fc <tcp_input+0x2b8>)
 8009150:	881b      	ldrh	r3, [r3, #0]
 8009152:	429a      	cmp	r2, r3
 8009154:	f200 82e6 	bhi.w	8009724 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8009158:	2300      	movs	r3, #0
 800915a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800915c:	4b28      	ldr	r3, [pc, #160]	@ (8009200 <tcp_input+0x2bc>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	61fb      	str	r3, [r7, #28]
 8009162:	e09d      	b.n	80092a0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009164:	69fb      	ldr	r3, [r7, #28]
 8009166:	7d1b      	ldrb	r3, [r3, #20]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d105      	bne.n	8009178 <tcp_input+0x234>
 800916c:	4b15      	ldr	r3, [pc, #84]	@ (80091c4 <tcp_input+0x280>)
 800916e:	22fb      	movs	r2, #251	@ 0xfb
 8009170:	4924      	ldr	r1, [pc, #144]	@ (8009204 <tcp_input+0x2c0>)
 8009172:	4816      	ldr	r0, [pc, #88]	@ (80091cc <tcp_input+0x288>)
 8009174:	f006 fe9a 	bl	800feac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	7d1b      	ldrb	r3, [r3, #20]
 800917c:	2b0a      	cmp	r3, #10
 800917e:	d105      	bne.n	800918c <tcp_input+0x248>
 8009180:	4b10      	ldr	r3, [pc, #64]	@ (80091c4 <tcp_input+0x280>)
 8009182:	22fc      	movs	r2, #252	@ 0xfc
 8009184:	4920      	ldr	r1, [pc, #128]	@ (8009208 <tcp_input+0x2c4>)
 8009186:	4811      	ldr	r0, [pc, #68]	@ (80091cc <tcp_input+0x288>)
 8009188:	f006 fe90 	bl	800feac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	7d1b      	ldrb	r3, [r3, #20]
 8009190:	2b01      	cmp	r3, #1
 8009192:	d105      	bne.n	80091a0 <tcp_input+0x25c>
 8009194:	4b0b      	ldr	r3, [pc, #44]	@ (80091c4 <tcp_input+0x280>)
 8009196:	22fd      	movs	r2, #253	@ 0xfd
 8009198:	491c      	ldr	r1, [pc, #112]	@ (800920c <tcp_input+0x2c8>)
 800919a:	480c      	ldr	r0, [pc, #48]	@ (80091cc <tcp_input+0x288>)
 800919c:	f006 fe86 	bl	800feac <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80091a0:	69fb      	ldr	r3, [r7, #28]
 80091a2:	7a1b      	ldrb	r3, [r3, #8]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d033      	beq.n	8009210 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	7a1a      	ldrb	r2, [r3, #8]
 80091ac:	4b09      	ldr	r3, [pc, #36]	@ (80091d4 <tcp_input+0x290>)
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80091b4:	3301      	adds	r3, #1
 80091b6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d029      	beq.n	8009210 <tcp_input+0x2cc>
      prev = pcb;
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	61bb      	str	r3, [r7, #24]
      continue;
 80091c0:	e06b      	b.n	800929a <tcp_input+0x356>
 80091c2:	bf00      	nop
 80091c4:	080123cc 	.word	0x080123cc
 80091c8:	08012400 	.word	0x08012400
 80091cc:	08012418 	.word	0x08012418
 80091d0:	200087f8 	.word	0x200087f8
 80091d4:	20005260 	.word	0x20005260
 80091d8:	200087fc 	.word	0x200087fc
 80091dc:	20008800 	.word	0x20008800
 80091e0:	200087fe 	.word	0x200087fe
 80091e4:	08012440 	.word	0x08012440
 80091e8:	08012450 	.word	0x08012450
 80091ec:	0801245c 	.word	0x0801245c
 80091f0:	20008808 	.word	0x20008808
 80091f4:	2000880c 	.word	0x2000880c
 80091f8:	20008814 	.word	0x20008814
 80091fc:	20008812 	.word	0x20008812
 8009200:	200087dc 	.word	0x200087dc
 8009204:	0801247c 	.word	0x0801247c
 8009208:	080124a4 	.word	0x080124a4
 800920c:	080124d0 	.word	0x080124d0
    }

    if (pcb->remote_port == tcphdr->src &&
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	8b1a      	ldrh	r2, [r3, #24]
 8009214:	4b72      	ldr	r3, [pc, #456]	@ (80093e0 <tcp_input+0x49c>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	881b      	ldrh	r3, [r3, #0]
 800921a:	b29b      	uxth	r3, r3
 800921c:	429a      	cmp	r2, r3
 800921e:	d13a      	bne.n	8009296 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	8ada      	ldrh	r2, [r3, #22]
 8009224:	4b6e      	ldr	r3, [pc, #440]	@ (80093e0 <tcp_input+0x49c>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	885b      	ldrh	r3, [r3, #2]
 800922a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800922c:	429a      	cmp	r2, r3
 800922e:	d132      	bne.n	8009296 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	685a      	ldr	r2, [r3, #4]
 8009234:	4b6b      	ldr	r3, [pc, #428]	@ (80093e4 <tcp_input+0x4a0>)
 8009236:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009238:	429a      	cmp	r2, r3
 800923a:	d12c      	bne.n	8009296 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	4b68      	ldr	r3, [pc, #416]	@ (80093e4 <tcp_input+0x4a0>)
 8009242:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009244:	429a      	cmp	r2, r3
 8009246:	d126      	bne.n	8009296 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	69fa      	ldr	r2, [r7, #28]
 800924e:	429a      	cmp	r2, r3
 8009250:	d106      	bne.n	8009260 <tcp_input+0x31c>
 8009252:	4b65      	ldr	r3, [pc, #404]	@ (80093e8 <tcp_input+0x4a4>)
 8009254:	f240 120d 	movw	r2, #269	@ 0x10d
 8009258:	4964      	ldr	r1, [pc, #400]	@ (80093ec <tcp_input+0x4a8>)
 800925a:	4865      	ldr	r0, [pc, #404]	@ (80093f0 <tcp_input+0x4ac>)
 800925c:	f006 fe26 	bl	800feac <iprintf>
      if (prev != NULL) {
 8009260:	69bb      	ldr	r3, [r7, #24]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00a      	beq.n	800927c <tcp_input+0x338>
        prev->next = pcb->next;
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	68da      	ldr	r2, [r3, #12]
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800926e:	4b61      	ldr	r3, [pc, #388]	@ (80093f4 <tcp_input+0x4b0>)
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8009276:	4a5f      	ldr	r2, [pc, #380]	@ (80093f4 <tcp_input+0x4b0>)
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	69fa      	ldr	r2, [r7, #28]
 8009282:	429a      	cmp	r2, r3
 8009284:	d111      	bne.n	80092aa <tcp_input+0x366>
 8009286:	4b58      	ldr	r3, [pc, #352]	@ (80093e8 <tcp_input+0x4a4>)
 8009288:	f240 1215 	movw	r2, #277	@ 0x115
 800928c:	495a      	ldr	r1, [pc, #360]	@ (80093f8 <tcp_input+0x4b4>)
 800928e:	4858      	ldr	r0, [pc, #352]	@ (80093f0 <tcp_input+0x4ac>)
 8009290:	f006 fe0c 	bl	800feac <iprintf>
      break;
 8009294:	e009      	b.n	80092aa <tcp_input+0x366>
    }
    prev = pcb;
 8009296:	69fb      	ldr	r3, [r7, #28]
 8009298:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800929a:	69fb      	ldr	r3, [r7, #28]
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	61fb      	str	r3, [r7, #28]
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	f47f af5e 	bne.w	8009164 <tcp_input+0x220>
 80092a8:	e000      	b.n	80092ac <tcp_input+0x368>
      break;
 80092aa:	bf00      	nop
  }

  if (pcb == NULL) {
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	f040 80aa 	bne.w	8009408 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80092b4:	4b51      	ldr	r3, [pc, #324]	@ (80093fc <tcp_input+0x4b8>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	61fb      	str	r3, [r7, #28]
 80092ba:	e03f      	b.n	800933c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80092bc:	69fb      	ldr	r3, [r7, #28]
 80092be:	7d1b      	ldrb	r3, [r3, #20]
 80092c0:	2b0a      	cmp	r3, #10
 80092c2:	d006      	beq.n	80092d2 <tcp_input+0x38e>
 80092c4:	4b48      	ldr	r3, [pc, #288]	@ (80093e8 <tcp_input+0x4a4>)
 80092c6:	f240 121f 	movw	r2, #287	@ 0x11f
 80092ca:	494d      	ldr	r1, [pc, #308]	@ (8009400 <tcp_input+0x4bc>)
 80092cc:	4848      	ldr	r0, [pc, #288]	@ (80093f0 <tcp_input+0x4ac>)
 80092ce:	f006 fded 	bl	800feac <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	7a1b      	ldrb	r3, [r3, #8]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d009      	beq.n	80092ee <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	7a1a      	ldrb	r2, [r3, #8]
 80092de:	4b41      	ldr	r3, [pc, #260]	@ (80093e4 <tcp_input+0x4a0>)
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80092e6:	3301      	adds	r3, #1
 80092e8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d122      	bne.n	8009334 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	8b1a      	ldrh	r2, [r3, #24]
 80092f2:	4b3b      	ldr	r3, [pc, #236]	@ (80093e0 <tcp_input+0x49c>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	881b      	ldrh	r3, [r3, #0]
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d11b      	bne.n	8009336 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	8ada      	ldrh	r2, [r3, #22]
 8009302:	4b37      	ldr	r3, [pc, #220]	@ (80093e0 <tcp_input+0x49c>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	885b      	ldrh	r3, [r3, #2]
 8009308:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800930a:	429a      	cmp	r2, r3
 800930c:	d113      	bne.n	8009336 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	685a      	ldr	r2, [r3, #4]
 8009312:	4b34      	ldr	r3, [pc, #208]	@ (80093e4 <tcp_input+0x4a0>)
 8009314:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009316:	429a      	cmp	r2, r3
 8009318:	d10d      	bne.n	8009336 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	4b31      	ldr	r3, [pc, #196]	@ (80093e4 <tcp_input+0x4a0>)
 8009320:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009322:	429a      	cmp	r2, r3
 8009324:	d107      	bne.n	8009336 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8009326:	69f8      	ldr	r0, [r7, #28]
 8009328:	f000 fb56 	bl	80099d8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f7fd ff3d 	bl	80071ac <pbuf_free>
        return;
 8009332:	e1fd      	b.n	8009730 <tcp_input+0x7ec>
        continue;
 8009334:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	61fb      	str	r3, [r7, #28]
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1bc      	bne.n	80092bc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8009342:	2300      	movs	r3, #0
 8009344:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009346:	4b2f      	ldr	r3, [pc, #188]	@ (8009404 <tcp_input+0x4c0>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	617b      	str	r3, [r7, #20]
 800934c:	e02a      	b.n	80093a4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	7a1b      	ldrb	r3, [r3, #8]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d00c      	beq.n	8009370 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	7a1a      	ldrb	r2, [r3, #8]
 800935a:	4b22      	ldr	r3, [pc, #136]	@ (80093e4 <tcp_input+0x4a0>)
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009362:	3301      	adds	r3, #1
 8009364:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009366:	429a      	cmp	r2, r3
 8009368:	d002      	beq.n	8009370 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	61bb      	str	r3, [r7, #24]
        continue;
 800936e:	e016      	b.n	800939e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	8ada      	ldrh	r2, [r3, #22]
 8009374:	4b1a      	ldr	r3, [pc, #104]	@ (80093e0 <tcp_input+0x49c>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	885b      	ldrh	r3, [r3, #2]
 800937a:	b29b      	uxth	r3, r3
 800937c:	429a      	cmp	r2, r3
 800937e:	d10c      	bne.n	800939a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	4b17      	ldr	r3, [pc, #92]	@ (80093e4 <tcp_input+0x4a0>)
 8009386:	695b      	ldr	r3, [r3, #20]
 8009388:	429a      	cmp	r2, r3
 800938a:	d00f      	beq.n	80093ac <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d00d      	beq.n	80093ae <tcp_input+0x46a>
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d009      	beq.n	80093ae <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	617b      	str	r3, [r7, #20]
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d1d1      	bne.n	800934e <tcp_input+0x40a>
 80093aa:	e000      	b.n	80093ae <tcp_input+0x46a>
            break;
 80093ac:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d029      	beq.n	8009408 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80093b4:	69bb      	ldr	r3, [r7, #24]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00a      	beq.n	80093d0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	68da      	ldr	r2, [r3, #12]
 80093be:	69bb      	ldr	r3, [r7, #24]
 80093c0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80093c2:	4b10      	ldr	r3, [pc, #64]	@ (8009404 <tcp_input+0x4c0>)
 80093c4:	681a      	ldr	r2, [r3, #0]
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80093ca:	4a0e      	ldr	r2, [pc, #56]	@ (8009404 <tcp_input+0x4c0>)
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80093d0:	6978      	ldr	r0, [r7, #20]
 80093d2:	f000 fa03 	bl	80097dc <tcp_listen_input>
      }
      pbuf_free(p);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f7fd fee8 	bl	80071ac <pbuf_free>
      return;
 80093dc:	e1a8      	b.n	8009730 <tcp_input+0x7ec>
 80093de:	bf00      	nop
 80093e0:	200087f8 	.word	0x200087f8
 80093e4:	20005260 	.word	0x20005260
 80093e8:	080123cc 	.word	0x080123cc
 80093ec:	080124f8 	.word	0x080124f8
 80093f0:	08012418 	.word	0x08012418
 80093f4:	200087dc 	.word	0x200087dc
 80093f8:	08012524 	.word	0x08012524
 80093fc:	200087e0 	.word	0x200087e0
 8009400:	08012550 	.word	0x08012550
 8009404:	200087d8 	.word	0x200087d8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	2b00      	cmp	r3, #0
 800940c:	f000 8158 	beq.w	80096c0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009410:	4b95      	ldr	r3, [pc, #596]	@ (8009668 <tcp_input+0x724>)
 8009412:	2200      	movs	r2, #0
 8009414:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	891a      	ldrh	r2, [r3, #8]
 800941a:	4b93      	ldr	r3, [pc, #588]	@ (8009668 <tcp_input+0x724>)
 800941c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800941e:	4a92      	ldr	r2, [pc, #584]	@ (8009668 <tcp_input+0x724>)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009424:	4b91      	ldr	r3, [pc, #580]	@ (800966c <tcp_input+0x728>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a8f      	ldr	r2, [pc, #572]	@ (8009668 <tcp_input+0x724>)
 800942a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800942c:	4b90      	ldr	r3, [pc, #576]	@ (8009670 <tcp_input+0x72c>)
 800942e:	2200      	movs	r2, #0
 8009430:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8009432:	4b90      	ldr	r3, [pc, #576]	@ (8009674 <tcp_input+0x730>)
 8009434:	2200      	movs	r2, #0
 8009436:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8009438:	4b8f      	ldr	r3, [pc, #572]	@ (8009678 <tcp_input+0x734>)
 800943a:	2200      	movs	r2, #0
 800943c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800943e:	4b8f      	ldr	r3, [pc, #572]	@ (800967c <tcp_input+0x738>)
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	f003 0308 	and.w	r3, r3, #8
 8009446:	2b00      	cmp	r3, #0
 8009448:	d006      	beq.n	8009458 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	7b5b      	ldrb	r3, [r3, #13]
 800944e:	f043 0301 	orr.w	r3, r3, #1
 8009452:	b2da      	uxtb	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800945c:	2b00      	cmp	r3, #0
 800945e:	d017      	beq.n	8009490 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009460:	69f8      	ldr	r0, [r7, #28]
 8009462:	f7ff f929 	bl	80086b8 <tcp_process_refused_data>
 8009466:	4603      	mov	r3, r0
 8009468:	f113 0f0d 	cmn.w	r3, #13
 800946c:	d007      	beq.n	800947e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00c      	beq.n	8009490 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009476:	4b82      	ldr	r3, [pc, #520]	@ (8009680 <tcp_input+0x73c>)
 8009478:	881b      	ldrh	r3, [r3, #0]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d008      	beq.n	8009490 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800947e:	69fb      	ldr	r3, [r7, #28]
 8009480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009482:	2b00      	cmp	r3, #0
 8009484:	f040 80e3 	bne.w	800964e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009488:	69f8      	ldr	r0, [r7, #28]
 800948a:	f003 f9a7 	bl	800c7dc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800948e:	e0de      	b.n	800964e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8009490:	4a7c      	ldr	r2, [pc, #496]	@ (8009684 <tcp_input+0x740>)
 8009492:	69fb      	ldr	r3, [r7, #28]
 8009494:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8009496:	69f8      	ldr	r0, [r7, #28]
 8009498:	f000 fb18 	bl	8009acc <tcp_process>
 800949c:	4603      	mov	r3, r0
 800949e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80094a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80094a4:	f113 0f0d 	cmn.w	r3, #13
 80094a8:	f000 80d3 	beq.w	8009652 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80094ac:	4b71      	ldr	r3, [pc, #452]	@ (8009674 <tcp_input+0x730>)
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	f003 0308 	and.w	r3, r3, #8
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d015      	beq.n	80094e4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d008      	beq.n	80094d4 <tcp_input+0x590>
 80094c2:	69fb      	ldr	r3, [r7, #28]
 80094c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094c8:	69fa      	ldr	r2, [r7, #28]
 80094ca:	6912      	ldr	r2, [r2, #16]
 80094cc:	f06f 010d 	mvn.w	r1, #13
 80094d0:	4610      	mov	r0, r2
 80094d2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80094d4:	69f9      	ldr	r1, [r7, #28]
 80094d6:	486c      	ldr	r0, [pc, #432]	@ (8009688 <tcp_input+0x744>)
 80094d8:	f7ff fbbc 	bl	8008c54 <tcp_pcb_remove>
        tcp_free(pcb);
 80094dc:	69f8      	ldr	r0, [r7, #28]
 80094de:	f7fe f9a7 	bl	8007830 <tcp_free>
 80094e2:	e0da      	b.n	800969a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80094e4:	2300      	movs	r3, #0
 80094e6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80094e8:	4b63      	ldr	r3, [pc, #396]	@ (8009678 <tcp_input+0x734>)
 80094ea:	881b      	ldrh	r3, [r3, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d01d      	beq.n	800952c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80094f0:	4b61      	ldr	r3, [pc, #388]	@ (8009678 <tcp_input+0x734>)
 80094f2:	881b      	ldrh	r3, [r3, #0]
 80094f4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80094f6:	69fb      	ldr	r3, [r7, #28]
 80094f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d00a      	beq.n	8009516 <tcp_input+0x5d2>
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009506:	69fa      	ldr	r2, [r7, #28]
 8009508:	6910      	ldr	r0, [r2, #16]
 800950a:	89fa      	ldrh	r2, [r7, #14]
 800950c:	69f9      	ldr	r1, [r7, #28]
 800950e:	4798      	blx	r3
 8009510:	4603      	mov	r3, r0
 8009512:	74fb      	strb	r3, [r7, #19]
 8009514:	e001      	b.n	800951a <tcp_input+0x5d6>
 8009516:	2300      	movs	r3, #0
 8009518:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800951a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800951e:	f113 0f0d 	cmn.w	r3, #13
 8009522:	f000 8098 	beq.w	8009656 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8009526:	4b54      	ldr	r3, [pc, #336]	@ (8009678 <tcp_input+0x734>)
 8009528:	2200      	movs	r2, #0
 800952a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800952c:	69f8      	ldr	r0, [r7, #28]
 800952e:	f000 f915 	bl	800975c <tcp_input_delayed_close>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	f040 8090 	bne.w	800965a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800953a:	4b4d      	ldr	r3, [pc, #308]	@ (8009670 <tcp_input+0x72c>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d041      	beq.n	80095c6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009546:	2b00      	cmp	r3, #0
 8009548:	d006      	beq.n	8009558 <tcp_input+0x614>
 800954a:	4b50      	ldr	r3, [pc, #320]	@ (800968c <tcp_input+0x748>)
 800954c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8009550:	494f      	ldr	r1, [pc, #316]	@ (8009690 <tcp_input+0x74c>)
 8009552:	4850      	ldr	r0, [pc, #320]	@ (8009694 <tcp_input+0x750>)
 8009554:	f006 fcaa 	bl	800feac <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	8b5b      	ldrh	r3, [r3, #26]
 800955c:	f003 0310 	and.w	r3, r3, #16
 8009560:	2b00      	cmp	r3, #0
 8009562:	d008      	beq.n	8009576 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009564:	4b42      	ldr	r3, [pc, #264]	@ (8009670 <tcp_input+0x72c>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4618      	mov	r0, r3
 800956a:	f7fd fe1f 	bl	80071ac <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800956e:	69f8      	ldr	r0, [r7, #28]
 8009570:	f7fe fc46 	bl	8007e00 <tcp_abort>
            goto aborted;
 8009574:	e091      	b.n	800969a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009576:	69fb      	ldr	r3, [r7, #28]
 8009578:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800957c:	2b00      	cmp	r3, #0
 800957e:	d00c      	beq.n	800959a <tcp_input+0x656>
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	6918      	ldr	r0, [r3, #16]
 800958a:	4b39      	ldr	r3, [pc, #228]	@ (8009670 <tcp_input+0x72c>)
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	2300      	movs	r3, #0
 8009590:	69f9      	ldr	r1, [r7, #28]
 8009592:	47a0      	blx	r4
 8009594:	4603      	mov	r3, r0
 8009596:	74fb      	strb	r3, [r7, #19]
 8009598:	e008      	b.n	80095ac <tcp_input+0x668>
 800959a:	4b35      	ldr	r3, [pc, #212]	@ (8009670 <tcp_input+0x72c>)
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	2300      	movs	r3, #0
 80095a0:	69f9      	ldr	r1, [r7, #28]
 80095a2:	2000      	movs	r0, #0
 80095a4:	f7ff f95e 	bl	8008864 <tcp_recv_null>
 80095a8:	4603      	mov	r3, r0
 80095aa:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80095ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80095b0:	f113 0f0d 	cmn.w	r3, #13
 80095b4:	d053      	beq.n	800965e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80095b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d003      	beq.n	80095c6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80095be:	4b2c      	ldr	r3, [pc, #176]	@ (8009670 <tcp_input+0x72c>)
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	69fb      	ldr	r3, [r7, #28]
 80095c4:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80095c6:	4b2b      	ldr	r3, [pc, #172]	@ (8009674 <tcp_input+0x730>)
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	f003 0320 	and.w	r3, r3, #32
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d030      	beq.n	8009634 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d009      	beq.n	80095ee <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095de:	7b5a      	ldrb	r2, [r3, #13]
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095e4:	f042 0220 	orr.w	r2, r2, #32
 80095e8:	b2d2      	uxtb	r2, r2
 80095ea:	735a      	strb	r2, [r3, #13]
 80095ec:	e022      	b.n	8009634 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80095ee:	69fb      	ldr	r3, [r7, #28]
 80095f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095f2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80095f6:	d005      	beq.n	8009604 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80095f8:	69fb      	ldr	r3, [r7, #28]
 80095fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095fc:	3301      	adds	r3, #1
 80095fe:	b29a      	uxth	r2, r3
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009604:	69fb      	ldr	r3, [r7, #28]
 8009606:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800960a:	2b00      	cmp	r3, #0
 800960c:	d00b      	beq.n	8009626 <tcp_input+0x6e2>
 800960e:	69fb      	ldr	r3, [r7, #28]
 8009610:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	6918      	ldr	r0, [r3, #16]
 8009618:	2300      	movs	r3, #0
 800961a:	2200      	movs	r2, #0
 800961c:	69f9      	ldr	r1, [r7, #28]
 800961e:	47a0      	blx	r4
 8009620:	4603      	mov	r3, r0
 8009622:	74fb      	strb	r3, [r7, #19]
 8009624:	e001      	b.n	800962a <tcp_input+0x6e6>
 8009626:	2300      	movs	r3, #0
 8009628:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800962a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800962e:	f113 0f0d 	cmn.w	r3, #13
 8009632:	d016      	beq.n	8009662 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009634:	4b13      	ldr	r3, [pc, #76]	@ (8009684 <tcp_input+0x740>)
 8009636:	2200      	movs	r2, #0
 8009638:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800963a:	69f8      	ldr	r0, [r7, #28]
 800963c:	f000 f88e 	bl	800975c <tcp_input_delayed_close>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d128      	bne.n	8009698 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8009646:	69f8      	ldr	r0, [r7, #28]
 8009648:	f002 fac2 	bl	800bbd0 <tcp_output>
 800964c:	e025      	b.n	800969a <tcp_input+0x756>
        goto aborted;
 800964e:	bf00      	nop
 8009650:	e023      	b.n	800969a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8009652:	bf00      	nop
 8009654:	e021      	b.n	800969a <tcp_input+0x756>
              goto aborted;
 8009656:	bf00      	nop
 8009658:	e01f      	b.n	800969a <tcp_input+0x756>
          goto aborted;
 800965a:	bf00      	nop
 800965c:	e01d      	b.n	800969a <tcp_input+0x756>
            goto aborted;
 800965e:	bf00      	nop
 8009660:	e01b      	b.n	800969a <tcp_input+0x756>
              goto aborted;
 8009662:	bf00      	nop
 8009664:	e019      	b.n	800969a <tcp_input+0x756>
 8009666:	bf00      	nop
 8009668:	200087e8 	.word	0x200087e8
 800966c:	200087f8 	.word	0x200087f8
 8009670:	20008818 	.word	0x20008818
 8009674:	20008815 	.word	0x20008815
 8009678:	20008810 	.word	0x20008810
 800967c:	20008814 	.word	0x20008814
 8009680:	20008812 	.word	0x20008812
 8009684:	2000881c 	.word	0x2000881c
 8009688:	200087dc 	.word	0x200087dc
 800968c:	080123cc 	.word	0x080123cc
 8009690:	08012580 	.word	0x08012580
 8009694:	08012418 	.word	0x08012418
          goto aborted;
 8009698:	bf00      	nop
    tcp_input_pcb = NULL;
 800969a:	4b27      	ldr	r3, [pc, #156]	@ (8009738 <tcp_input+0x7f4>)
 800969c:	2200      	movs	r2, #0
 800969e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80096a0:	4b26      	ldr	r3, [pc, #152]	@ (800973c <tcp_input+0x7f8>)
 80096a2:	2200      	movs	r2, #0
 80096a4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80096a6:	4b26      	ldr	r3, [pc, #152]	@ (8009740 <tcp_input+0x7fc>)
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d03f      	beq.n	800972e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80096ae:	4b24      	ldr	r3, [pc, #144]	@ (8009740 <tcp_input+0x7fc>)
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7fd fd7a 	bl	80071ac <pbuf_free>
      inseg.p = NULL;
 80096b8:	4b21      	ldr	r3, [pc, #132]	@ (8009740 <tcp_input+0x7fc>)
 80096ba:	2200      	movs	r2, #0
 80096bc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80096be:	e036      	b.n	800972e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80096c0:	4b20      	ldr	r3, [pc, #128]	@ (8009744 <tcp_input+0x800>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	899b      	ldrh	r3, [r3, #12]
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7fc fa11 	bl	8005af0 <lwip_htons>
 80096ce:	4603      	mov	r3, r0
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	f003 0304 	and.w	r3, r3, #4
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d118      	bne.n	800970c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80096da:	4b1b      	ldr	r3, [pc, #108]	@ (8009748 <tcp_input+0x804>)
 80096dc:	6819      	ldr	r1, [r3, #0]
 80096de:	4b1b      	ldr	r3, [pc, #108]	@ (800974c <tcp_input+0x808>)
 80096e0:	881b      	ldrh	r3, [r3, #0]
 80096e2:	461a      	mov	r2, r3
 80096e4:	4b1a      	ldr	r3, [pc, #104]	@ (8009750 <tcp_input+0x80c>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80096ea:	4b16      	ldr	r3, [pc, #88]	@ (8009744 <tcp_input+0x800>)
 80096ec:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80096ee:	885b      	ldrh	r3, [r3, #2]
 80096f0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80096f2:	4a14      	ldr	r2, [pc, #80]	@ (8009744 <tcp_input+0x800>)
 80096f4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80096f6:	8812      	ldrh	r2, [r2, #0]
 80096f8:	b292      	uxth	r2, r2
 80096fa:	9202      	str	r2, [sp, #8]
 80096fc:	9301      	str	r3, [sp, #4]
 80096fe:	4b15      	ldr	r3, [pc, #84]	@ (8009754 <tcp_input+0x810>)
 8009700:	9300      	str	r3, [sp, #0]
 8009702:	4b15      	ldr	r3, [pc, #84]	@ (8009758 <tcp_input+0x814>)
 8009704:	4602      	mov	r2, r0
 8009706:	2000      	movs	r0, #0
 8009708:	f003 f816 	bl	800c738 <tcp_rst>
    pbuf_free(p);
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f7fd fd4d 	bl	80071ac <pbuf_free>
  return;
 8009712:	e00c      	b.n	800972e <tcp_input+0x7ea>
    goto dropped;
 8009714:	bf00      	nop
 8009716:	e006      	b.n	8009726 <tcp_input+0x7e2>
    goto dropped;
 8009718:	bf00      	nop
 800971a:	e004      	b.n	8009726 <tcp_input+0x7e2>
    goto dropped;
 800971c:	bf00      	nop
 800971e:	e002      	b.n	8009726 <tcp_input+0x7e2>
      goto dropped;
 8009720:	bf00      	nop
 8009722:	e000      	b.n	8009726 <tcp_input+0x7e2>
      goto dropped;
 8009724:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f7fd fd40 	bl	80071ac <pbuf_free>
 800972c:	e000      	b.n	8009730 <tcp_input+0x7ec>
  return;
 800972e:	bf00      	nop
}
 8009730:	3724      	adds	r7, #36	@ 0x24
 8009732:	46bd      	mov	sp, r7
 8009734:	bd90      	pop	{r4, r7, pc}
 8009736:	bf00      	nop
 8009738:	2000881c 	.word	0x2000881c
 800973c:	20008818 	.word	0x20008818
 8009740:	200087e8 	.word	0x200087e8
 8009744:	200087f8 	.word	0x200087f8
 8009748:	2000880c 	.word	0x2000880c
 800974c:	20008812 	.word	0x20008812
 8009750:	20008808 	.word	0x20008808
 8009754:	20005270 	.word	0x20005270
 8009758:	20005274 	.word	0x20005274

0800975c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b082      	sub	sp, #8
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d106      	bne.n	8009778 <tcp_input_delayed_close+0x1c>
 800976a:	4b17      	ldr	r3, [pc, #92]	@ (80097c8 <tcp_input_delayed_close+0x6c>)
 800976c:	f240 225a 	movw	r2, #602	@ 0x25a
 8009770:	4916      	ldr	r1, [pc, #88]	@ (80097cc <tcp_input_delayed_close+0x70>)
 8009772:	4817      	ldr	r0, [pc, #92]	@ (80097d0 <tcp_input_delayed_close+0x74>)
 8009774:	f006 fb9a 	bl	800feac <iprintf>

  if (recv_flags & TF_CLOSED) {
 8009778:	4b16      	ldr	r3, [pc, #88]	@ (80097d4 <tcp_input_delayed_close+0x78>)
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	f003 0310 	and.w	r3, r3, #16
 8009780:	2b00      	cmp	r3, #0
 8009782:	d01c      	beq.n	80097be <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	8b5b      	ldrh	r3, [r3, #26]
 8009788:	f003 0310 	and.w	r3, r3, #16
 800978c:	2b00      	cmp	r3, #0
 800978e:	d10d      	bne.n	80097ac <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009796:	2b00      	cmp	r3, #0
 8009798:	d008      	beq.n	80097ac <tcp_input_delayed_close+0x50>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	6912      	ldr	r2, [r2, #16]
 80097a4:	f06f 010e 	mvn.w	r1, #14
 80097a8:	4610      	mov	r0, r2
 80097aa:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80097ac:	6879      	ldr	r1, [r7, #4]
 80097ae:	480a      	ldr	r0, [pc, #40]	@ (80097d8 <tcp_input_delayed_close+0x7c>)
 80097b0:	f7ff fa50 	bl	8008c54 <tcp_pcb_remove>
    tcp_free(pcb);
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f7fe f83b 	bl	8007830 <tcp_free>
    return 1;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e000      	b.n	80097c0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80097be:	2300      	movs	r3, #0
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3708      	adds	r7, #8
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}
 80097c8:	080123cc 	.word	0x080123cc
 80097cc:	0801259c 	.word	0x0801259c
 80097d0:	08012418 	.word	0x08012418
 80097d4:	20008815 	.word	0x20008815
 80097d8:	200087dc 	.word	0x200087dc

080097dc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80097dc:	b590      	push	{r4, r7, lr}
 80097de:	b08b      	sub	sp, #44	@ 0x2c
 80097e0:	af04      	add	r7, sp, #16
 80097e2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80097e4:	4b6f      	ldr	r3, [pc, #444]	@ (80099a4 <tcp_listen_input+0x1c8>)
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	f003 0304 	and.w	r3, r3, #4
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	f040 80d2 	bne.w	8009996 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d106      	bne.n	8009806 <tcp_listen_input+0x2a>
 80097f8:	4b6b      	ldr	r3, [pc, #428]	@ (80099a8 <tcp_listen_input+0x1cc>)
 80097fa:	f240 2281 	movw	r2, #641	@ 0x281
 80097fe:	496b      	ldr	r1, [pc, #428]	@ (80099ac <tcp_listen_input+0x1d0>)
 8009800:	486b      	ldr	r0, [pc, #428]	@ (80099b0 <tcp_listen_input+0x1d4>)
 8009802:	f006 fb53 	bl	800feac <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8009806:	4b67      	ldr	r3, [pc, #412]	@ (80099a4 <tcp_listen_input+0x1c8>)
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	f003 0310 	and.w	r3, r3, #16
 800980e:	2b00      	cmp	r3, #0
 8009810:	d019      	beq.n	8009846 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009812:	4b68      	ldr	r3, [pc, #416]	@ (80099b4 <tcp_listen_input+0x1d8>)
 8009814:	6819      	ldr	r1, [r3, #0]
 8009816:	4b68      	ldr	r3, [pc, #416]	@ (80099b8 <tcp_listen_input+0x1dc>)
 8009818:	881b      	ldrh	r3, [r3, #0]
 800981a:	461a      	mov	r2, r3
 800981c:	4b67      	ldr	r3, [pc, #412]	@ (80099bc <tcp_listen_input+0x1e0>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009822:	4b67      	ldr	r3, [pc, #412]	@ (80099c0 <tcp_listen_input+0x1e4>)
 8009824:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009826:	885b      	ldrh	r3, [r3, #2]
 8009828:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800982a:	4a65      	ldr	r2, [pc, #404]	@ (80099c0 <tcp_listen_input+0x1e4>)
 800982c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800982e:	8812      	ldrh	r2, [r2, #0]
 8009830:	b292      	uxth	r2, r2
 8009832:	9202      	str	r2, [sp, #8]
 8009834:	9301      	str	r3, [sp, #4]
 8009836:	4b63      	ldr	r3, [pc, #396]	@ (80099c4 <tcp_listen_input+0x1e8>)
 8009838:	9300      	str	r3, [sp, #0]
 800983a:	4b63      	ldr	r3, [pc, #396]	@ (80099c8 <tcp_listen_input+0x1ec>)
 800983c:	4602      	mov	r2, r0
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f002 ff7a 	bl	800c738 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8009844:	e0a9      	b.n	800999a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8009846:	4b57      	ldr	r3, [pc, #348]	@ (80099a4 <tcp_listen_input+0x1c8>)
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	f003 0302 	and.w	r3, r3, #2
 800984e:	2b00      	cmp	r3, #0
 8009850:	f000 80a3 	beq.w	800999a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	7d5b      	ldrb	r3, [r3, #21]
 8009858:	4618      	mov	r0, r3
 800985a:	f7ff f927 	bl	8008aac <tcp_alloc>
 800985e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d111      	bne.n	800988a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	699b      	ldr	r3, [r3, #24]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d00a      	beq.n	8009884 <tcp_listen_input+0xa8>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	699b      	ldr	r3, [r3, #24]
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	6910      	ldr	r0, [r2, #16]
 8009876:	f04f 32ff 	mov.w	r2, #4294967295
 800987a:	2100      	movs	r1, #0
 800987c:	4798      	blx	r3
 800987e:	4603      	mov	r3, r0
 8009880:	73bb      	strb	r3, [r7, #14]
      return;
 8009882:	e08b      	b.n	800999c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009884:	23f0      	movs	r3, #240	@ 0xf0
 8009886:	73bb      	strb	r3, [r7, #14]
      return;
 8009888:	e088      	b.n	800999c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800988a:	4b50      	ldr	r3, [pc, #320]	@ (80099cc <tcp_listen_input+0x1f0>)
 800988c:	695a      	ldr	r2, [r3, #20]
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8009892:	4b4e      	ldr	r3, [pc, #312]	@ (80099cc <tcp_listen_input+0x1f0>)
 8009894:	691a      	ldr	r2, [r3, #16]
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	8ada      	ldrh	r2, [r3, #22]
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80098a2:	4b47      	ldr	r3, [pc, #284]	@ (80099c0 <tcp_listen_input+0x1e4>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	881b      	ldrh	r3, [r3, #0]
 80098a8:	b29a      	uxth	r2, r3
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	2203      	movs	r2, #3
 80098b2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80098b4:	4b41      	ldr	r3, [pc, #260]	@ (80099bc <tcp_listen_input+0x1e0>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	1c5a      	adds	r2, r3, #1
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80098c6:	6978      	ldr	r0, [r7, #20]
 80098c8:	f7ff fa58 	bl	8008d7c <tcp_next_iss>
 80098cc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	693a      	ldr	r2, [r7, #16]
 80098d2:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	693a      	ldr	r2, [r7, #16]
 80098d8:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	693a      	ldr	r2, [r7, #16]
 80098de:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	693a      	ldr	r2, [r7, #16]
 80098e4:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80098e6:	4b35      	ldr	r3, [pc, #212]	@ (80099bc <tcp_listen_input+0x1e0>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	1e5a      	subs	r2, r3, #1
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	691a      	ldr	r2, [r3, #16]
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	7a5b      	ldrb	r3, [r3, #9]
 8009902:	f003 030c 	and.w	r3, r3, #12
 8009906:	b2da      	uxtb	r2, r3
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	7a1a      	ldrb	r2, [r3, #8]
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009914:	4b2e      	ldr	r3, [pc, #184]	@ (80099d0 <tcp_listen_input+0x1f4>)
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	60da      	str	r2, [r3, #12]
 800991c:	4a2c      	ldr	r2, [pc, #176]	@ (80099d0 <tcp_listen_input+0x1f4>)
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	6013      	str	r3, [r2, #0]
 8009922:	f003 f8cb 	bl	800cabc <tcp_timer_needed>
 8009926:	4b2b      	ldr	r3, [pc, #172]	@ (80099d4 <tcp_listen_input+0x1f8>)
 8009928:	2201      	movs	r2, #1
 800992a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800992c:	6978      	ldr	r0, [r7, #20]
 800992e:	f001 fd8b 	bl	800b448 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8009932:	4b23      	ldr	r3, [pc, #140]	@ (80099c0 <tcp_listen_input+0x1e4>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	89db      	ldrh	r3, [r3, #14]
 8009938:	b29a      	uxth	r2, r3
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	3304      	adds	r3, #4
 8009954:	4618      	mov	r0, r3
 8009956:	f004 ff3d 	bl	800e7d4 <ip4_route>
 800995a:	4601      	mov	r1, r0
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	3304      	adds	r3, #4
 8009960:	461a      	mov	r2, r3
 8009962:	4620      	mov	r0, r4
 8009964:	f7ff fa30 	bl	8008dc8 <tcp_eff_send_mss_netif>
 8009968:	4603      	mov	r3, r0
 800996a:	461a      	mov	r2, r3
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009970:	2112      	movs	r1, #18
 8009972:	6978      	ldr	r0, [r7, #20]
 8009974:	f002 f83e 	bl	800b9f4 <tcp_enqueue_flags>
 8009978:	4603      	mov	r3, r0
 800997a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800997c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d004      	beq.n	800998e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8009984:	2100      	movs	r1, #0
 8009986:	6978      	ldr	r0, [r7, #20]
 8009988:	f7fe f97c 	bl	8007c84 <tcp_abandon>
      return;
 800998c:	e006      	b.n	800999c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800998e:	6978      	ldr	r0, [r7, #20]
 8009990:	f002 f91e 	bl	800bbd0 <tcp_output>
  return;
 8009994:	e001      	b.n	800999a <tcp_listen_input+0x1be>
    return;
 8009996:	bf00      	nop
 8009998:	e000      	b.n	800999c <tcp_listen_input+0x1c0>
  return;
 800999a:	bf00      	nop
}
 800999c:	371c      	adds	r7, #28
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd90      	pop	{r4, r7, pc}
 80099a2:	bf00      	nop
 80099a4:	20008814 	.word	0x20008814
 80099a8:	080123cc 	.word	0x080123cc
 80099ac:	080125c4 	.word	0x080125c4
 80099b0:	08012418 	.word	0x08012418
 80099b4:	2000880c 	.word	0x2000880c
 80099b8:	20008812 	.word	0x20008812
 80099bc:	20008808 	.word	0x20008808
 80099c0:	200087f8 	.word	0x200087f8
 80099c4:	20005270 	.word	0x20005270
 80099c8:	20005274 	.word	0x20005274
 80099cc:	20005260 	.word	0x20005260
 80099d0:	200087dc 	.word	0x200087dc
 80099d4:	200087e4 	.word	0x200087e4

080099d8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b086      	sub	sp, #24
 80099dc:	af04      	add	r7, sp, #16
 80099de:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80099e0:	4b2f      	ldr	r3, [pc, #188]	@ (8009aa0 <tcp_timewait_input+0xc8>)
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	f003 0304 	and.w	r3, r3, #4
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d153      	bne.n	8009a94 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d106      	bne.n	8009a00 <tcp_timewait_input+0x28>
 80099f2:	4b2c      	ldr	r3, [pc, #176]	@ (8009aa4 <tcp_timewait_input+0xcc>)
 80099f4:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80099f8:	492b      	ldr	r1, [pc, #172]	@ (8009aa8 <tcp_timewait_input+0xd0>)
 80099fa:	482c      	ldr	r0, [pc, #176]	@ (8009aac <tcp_timewait_input+0xd4>)
 80099fc:	f006 fa56 	bl	800feac <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009a00:	4b27      	ldr	r3, [pc, #156]	@ (8009aa0 <tcp_timewait_input+0xc8>)
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	f003 0302 	and.w	r3, r3, #2
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d02a      	beq.n	8009a62 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009a0c:	4b28      	ldr	r3, [pc, #160]	@ (8009ab0 <tcp_timewait_input+0xd8>)
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a14:	1ad3      	subs	r3, r2, r3
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	db2d      	blt.n	8009a76 <tcp_timewait_input+0x9e>
 8009a1a:	4b25      	ldr	r3, [pc, #148]	@ (8009ab0 <tcp_timewait_input+0xd8>)
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a22:	6879      	ldr	r1, [r7, #4]
 8009a24:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009a26:	440b      	add	r3, r1
 8009a28:	1ad3      	subs	r3, r2, r3
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	dc23      	bgt.n	8009a76 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a2e:	4b21      	ldr	r3, [pc, #132]	@ (8009ab4 <tcp_timewait_input+0xdc>)
 8009a30:	6819      	ldr	r1, [r3, #0]
 8009a32:	4b21      	ldr	r3, [pc, #132]	@ (8009ab8 <tcp_timewait_input+0xe0>)
 8009a34:	881b      	ldrh	r3, [r3, #0]
 8009a36:	461a      	mov	r2, r3
 8009a38:	4b1d      	ldr	r3, [pc, #116]	@ (8009ab0 <tcp_timewait_input+0xd8>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8009abc <tcp_timewait_input+0xe4>)
 8009a40:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a42:	885b      	ldrh	r3, [r3, #2]
 8009a44:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009a46:	4a1d      	ldr	r2, [pc, #116]	@ (8009abc <tcp_timewait_input+0xe4>)
 8009a48:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a4a:	8812      	ldrh	r2, [r2, #0]
 8009a4c:	b292      	uxth	r2, r2
 8009a4e:	9202      	str	r2, [sp, #8]
 8009a50:	9301      	str	r3, [sp, #4]
 8009a52:	4b1b      	ldr	r3, [pc, #108]	@ (8009ac0 <tcp_timewait_input+0xe8>)
 8009a54:	9300      	str	r3, [sp, #0]
 8009a56:	4b1b      	ldr	r3, [pc, #108]	@ (8009ac4 <tcp_timewait_input+0xec>)
 8009a58:	4602      	mov	r2, r0
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f002 fe6c 	bl	800c738 <tcp_rst>
      return;
 8009a60:	e01b      	b.n	8009a9a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8009a62:	4b0f      	ldr	r3, [pc, #60]	@ (8009aa0 <tcp_timewait_input+0xc8>)
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	f003 0301 	and.w	r3, r3, #1
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d003      	beq.n	8009a76 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8009a6e:	4b16      	ldr	r3, [pc, #88]	@ (8009ac8 <tcp_timewait_input+0xf0>)
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8009a76:	4b10      	ldr	r3, [pc, #64]	@ (8009ab8 <tcp_timewait_input+0xe0>)
 8009a78:	881b      	ldrh	r3, [r3, #0]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d00c      	beq.n	8009a98 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	8b5b      	ldrh	r3, [r3, #26]
 8009a82:	f043 0302 	orr.w	r3, r3, #2
 8009a86:	b29a      	uxth	r2, r3
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f002 f89f 	bl	800bbd0 <tcp_output>
  }
  return;
 8009a92:	e001      	b.n	8009a98 <tcp_timewait_input+0xc0>
    return;
 8009a94:	bf00      	nop
 8009a96:	e000      	b.n	8009a9a <tcp_timewait_input+0xc2>
  return;
 8009a98:	bf00      	nop
}
 8009a9a:	3708      	adds	r7, #8
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	20008814 	.word	0x20008814
 8009aa4:	080123cc 	.word	0x080123cc
 8009aa8:	080125e4 	.word	0x080125e4
 8009aac:	08012418 	.word	0x08012418
 8009ab0:	20008808 	.word	0x20008808
 8009ab4:	2000880c 	.word	0x2000880c
 8009ab8:	20008812 	.word	0x20008812
 8009abc:	200087f8 	.word	0x200087f8
 8009ac0:	20005270 	.word	0x20005270
 8009ac4:	20005274 	.word	0x20005274
 8009ac8:	200087d0 	.word	0x200087d0

08009acc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009acc:	b590      	push	{r4, r7, lr}
 8009ace:	b08d      	sub	sp, #52	@ 0x34
 8009ad0:	af04      	add	r7, sp, #16
 8009ad2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d106      	bne.n	8009af0 <tcp_process+0x24>
 8009ae2:	4b9d      	ldr	r3, [pc, #628]	@ (8009d58 <tcp_process+0x28c>)
 8009ae4:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8009ae8:	499c      	ldr	r1, [pc, #624]	@ (8009d5c <tcp_process+0x290>)
 8009aea:	489d      	ldr	r0, [pc, #628]	@ (8009d60 <tcp_process+0x294>)
 8009aec:	f006 f9de 	bl	800feac <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8009af0:	4b9c      	ldr	r3, [pc, #624]	@ (8009d64 <tcp_process+0x298>)
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	f003 0304 	and.w	r3, r3, #4
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d04e      	beq.n	8009b9a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	7d1b      	ldrb	r3, [r3, #20]
 8009b00:	2b02      	cmp	r3, #2
 8009b02:	d108      	bne.n	8009b16 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009b08:	4b97      	ldr	r3, [pc, #604]	@ (8009d68 <tcp_process+0x29c>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d123      	bne.n	8009b58 <tcp_process+0x8c>
        acceptable = 1;
 8009b10:	2301      	movs	r3, #1
 8009b12:	76fb      	strb	r3, [r7, #27]
 8009b14:	e020      	b.n	8009b58 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009b1a:	4b94      	ldr	r3, [pc, #592]	@ (8009d6c <tcp_process+0x2a0>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d102      	bne.n	8009b28 <tcp_process+0x5c>
        acceptable = 1;
 8009b22:	2301      	movs	r3, #1
 8009b24:	76fb      	strb	r3, [r7, #27]
 8009b26:	e017      	b.n	8009b58 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009b28:	4b90      	ldr	r3, [pc, #576]	@ (8009d6c <tcp_process+0x2a0>)
 8009b2a:	681a      	ldr	r2, [r3, #0]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b30:	1ad3      	subs	r3, r2, r3
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	db10      	blt.n	8009b58 <tcp_process+0x8c>
 8009b36:	4b8d      	ldr	r3, [pc, #564]	@ (8009d6c <tcp_process+0x2a0>)
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b3e:	6879      	ldr	r1, [r7, #4]
 8009b40:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009b42:	440b      	add	r3, r1
 8009b44:	1ad3      	subs	r3, r2, r3
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	dc06      	bgt.n	8009b58 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	8b5b      	ldrh	r3, [r3, #26]
 8009b4e:	f043 0302 	orr.w	r3, r3, #2
 8009b52:	b29a      	uxth	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8009b58:	7efb      	ldrb	r3, [r7, #27]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d01b      	beq.n	8009b96 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	7d1b      	ldrb	r3, [r3, #20]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d106      	bne.n	8009b74 <tcp_process+0xa8>
 8009b66:	4b7c      	ldr	r3, [pc, #496]	@ (8009d58 <tcp_process+0x28c>)
 8009b68:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8009b6c:	4980      	ldr	r1, [pc, #512]	@ (8009d70 <tcp_process+0x2a4>)
 8009b6e:	487c      	ldr	r0, [pc, #496]	@ (8009d60 <tcp_process+0x294>)
 8009b70:	f006 f99c 	bl	800feac <iprintf>
      recv_flags |= TF_RESET;
 8009b74:	4b7f      	ldr	r3, [pc, #508]	@ (8009d74 <tcp_process+0x2a8>)
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	f043 0308 	orr.w	r3, r3, #8
 8009b7c:	b2da      	uxtb	r2, r3
 8009b7e:	4b7d      	ldr	r3, [pc, #500]	@ (8009d74 <tcp_process+0x2a8>)
 8009b80:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	8b5b      	ldrh	r3, [r3, #26]
 8009b86:	f023 0301 	bic.w	r3, r3, #1
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8009b90:	f06f 030d 	mvn.w	r3, #13
 8009b94:	e37a      	b.n	800a28c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8009b96:	2300      	movs	r3, #0
 8009b98:	e378      	b.n	800a28c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009b9a:	4b72      	ldr	r3, [pc, #456]	@ (8009d64 <tcp_process+0x298>)
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	f003 0302 	and.w	r3, r3, #2
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d010      	beq.n	8009bc8 <tcp_process+0xfc>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	7d1b      	ldrb	r3, [r3, #20]
 8009baa:	2b02      	cmp	r3, #2
 8009bac:	d00c      	beq.n	8009bc8 <tcp_process+0xfc>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	7d1b      	ldrb	r3, [r3, #20]
 8009bb2:	2b03      	cmp	r3, #3
 8009bb4:	d008      	beq.n	8009bc8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	8b5b      	ldrh	r3, [r3, #26]
 8009bba:	f043 0302 	orr.w	r3, r3, #2
 8009bbe:	b29a      	uxth	r2, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	e361      	b.n	800a28c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	8b5b      	ldrh	r3, [r3, #26]
 8009bcc:	f003 0310 	and.w	r3, r3, #16
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d103      	bne.n	8009bdc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8009bd4:	4b68      	ldr	r3, [pc, #416]	@ (8009d78 <tcp_process+0x2ac>)
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2200      	movs	r2, #0
 8009be0:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f001 fc2b 	bl	800b448 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	7d1b      	ldrb	r3, [r3, #20]
 8009bf6:	3b02      	subs	r3, #2
 8009bf8:	2b07      	cmp	r3, #7
 8009bfa:	f200 8337 	bhi.w	800a26c <tcp_process+0x7a0>
 8009bfe:	a201      	add	r2, pc, #4	@ (adr r2, 8009c04 <tcp_process+0x138>)
 8009c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c04:	08009c25 	.word	0x08009c25
 8009c08:	08009e55 	.word	0x08009e55
 8009c0c:	08009fcd 	.word	0x08009fcd
 8009c10:	08009ff7 	.word	0x08009ff7
 8009c14:	0800a11b 	.word	0x0800a11b
 8009c18:	08009fcd 	.word	0x08009fcd
 8009c1c:	0800a1a7 	.word	0x0800a1a7
 8009c20:	0800a237 	.word	0x0800a237
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009c24:	4b4f      	ldr	r3, [pc, #316]	@ (8009d64 <tcp_process+0x298>)
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	f003 0310 	and.w	r3, r3, #16
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	f000 80e4 	beq.w	8009dfa <tcp_process+0x32e>
 8009c32:	4b4c      	ldr	r3, [pc, #304]	@ (8009d64 <tcp_process+0x298>)
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	f003 0302 	and.w	r3, r3, #2
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	f000 80dd 	beq.w	8009dfa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c44:	1c5a      	adds	r2, r3, #1
 8009c46:	4b48      	ldr	r3, [pc, #288]	@ (8009d68 <tcp_process+0x29c>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	f040 80d5 	bne.w	8009dfa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8009c50:	4b46      	ldr	r3, [pc, #280]	@ (8009d6c <tcp_process+0x2a0>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	1c5a      	adds	r2, r3, #1
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8009c62:	4b41      	ldr	r3, [pc, #260]	@ (8009d68 <tcp_process+0x29c>)
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8009c6a:	4b44      	ldr	r3, [pc, #272]	@ (8009d7c <tcp_process+0x2b0>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	89db      	ldrh	r3, [r3, #14]
 8009c70:	b29a      	uxth	r2, r3
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009c84:	4b39      	ldr	r3, [pc, #228]	@ (8009d6c <tcp_process+0x2a0>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	1e5a      	subs	r2, r3, #1
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2204      	movs	r2, #4
 8009c92:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	3304      	adds	r3, #4
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f004 fd99 	bl	800e7d4 <ip4_route>
 8009ca2:	4601      	mov	r1, r0
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	3304      	adds	r3, #4
 8009ca8:	461a      	mov	r2, r3
 8009caa:	4620      	mov	r0, r4
 8009cac:	f7ff f88c 	bl	8008dc8 <tcp_eff_send_mss_netif>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009cbc:	009a      	lsls	r2, r3, #2
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009cc2:	005b      	lsls	r3, r3, #1
 8009cc4:	f241 111c 	movw	r1, #4380	@ 0x111c
 8009cc8:	428b      	cmp	r3, r1
 8009cca:	bf38      	it	cc
 8009ccc:	460b      	movcc	r3, r1
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d204      	bcs.n	8009cdc <tcp_process+0x210>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	e00d      	b.n	8009cf8 <tcp_process+0x22c>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009ce0:	005b      	lsls	r3, r3, #1
 8009ce2:	f241 121c 	movw	r2, #4380	@ 0x111c
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d904      	bls.n	8009cf4 <tcp_process+0x228>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009cee:	005b      	lsls	r3, r3, #1
 8009cf0:	b29b      	uxth	r3, r3
 8009cf2:	e001      	b.n	8009cf8 <tcp_process+0x22c>
 8009cf4:	f241 131c 	movw	r3, #4380	@ 0x111c
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d106      	bne.n	8009d16 <tcp_process+0x24a>
 8009d08:	4b13      	ldr	r3, [pc, #76]	@ (8009d58 <tcp_process+0x28c>)
 8009d0a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8009d0e:	491c      	ldr	r1, [pc, #112]	@ (8009d80 <tcp_process+0x2b4>)
 8009d10:	4813      	ldr	r0, [pc, #76]	@ (8009d60 <tcp_process+0x294>)
 8009d12:	f006 f8cb 	bl	800feac <iprintf>
        --pcb->snd_queuelen;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009d1c:	3b01      	subs	r3, #1
 8009d1e:	b29a      	uxth	r2, r3
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d2a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8009d2c:	69fb      	ldr	r3, [r7, #28]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d12a      	bne.n	8009d88 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d36:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009d38:	69fb      	ldr	r3, [r7, #28]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d106      	bne.n	8009d4c <tcp_process+0x280>
 8009d3e:	4b06      	ldr	r3, [pc, #24]	@ (8009d58 <tcp_process+0x28c>)
 8009d40:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8009d44:	490f      	ldr	r1, [pc, #60]	@ (8009d84 <tcp_process+0x2b8>)
 8009d46:	4806      	ldr	r0, [pc, #24]	@ (8009d60 <tcp_process+0x294>)
 8009d48:	f006 f8b0 	bl	800feac <iprintf>
          pcb->unsent = rseg->next;
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009d54:	e01c      	b.n	8009d90 <tcp_process+0x2c4>
 8009d56:	bf00      	nop
 8009d58:	080123cc 	.word	0x080123cc
 8009d5c:	08012604 	.word	0x08012604
 8009d60:	08012418 	.word	0x08012418
 8009d64:	20008814 	.word	0x20008814
 8009d68:	2000880c 	.word	0x2000880c
 8009d6c:	20008808 	.word	0x20008808
 8009d70:	08012620 	.word	0x08012620
 8009d74:	20008815 	.word	0x20008815
 8009d78:	200087d0 	.word	0x200087d0
 8009d7c:	200087f8 	.word	0x200087f8
 8009d80:	08012640 	.word	0x08012640
 8009d84:	08012658 	.word	0x08012658
        } else {
          pcb->unacked = rseg->next;
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8009d90:	69f8      	ldr	r0, [r7, #28]
 8009d92:	f7fe fd22 	bl	80087da <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d104      	bne.n	8009da8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009da4:	861a      	strh	r2, [r3, #48]	@ 0x30
 8009da6:	e006      	b.n	8009db6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2200      	movs	r2, #0
 8009db2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d00a      	beq.n	8009dd6 <tcp_process+0x30a>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	6910      	ldr	r0, [r2, #16]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	6879      	ldr	r1, [r7, #4]
 8009dce:	4798      	blx	r3
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	76bb      	strb	r3, [r7, #26]
 8009dd4:	e001      	b.n	8009dda <tcp_process+0x30e>
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8009dda:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009dde:	f113 0f0d 	cmn.w	r3, #13
 8009de2:	d102      	bne.n	8009dea <tcp_process+0x31e>
          return ERR_ABRT;
 8009de4:	f06f 030c 	mvn.w	r3, #12
 8009de8:	e250      	b.n	800a28c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	8b5b      	ldrh	r3, [r3, #26]
 8009dee:	f043 0302 	orr.w	r3, r3, #2
 8009df2:	b29a      	uxth	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009df8:	e23a      	b.n	800a270 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8009dfa:	4b98      	ldr	r3, [pc, #608]	@ (800a05c <tcp_process+0x590>)
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	f003 0310 	and.w	r3, r3, #16
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	f000 8234 	beq.w	800a270 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e08:	4b95      	ldr	r3, [pc, #596]	@ (800a060 <tcp_process+0x594>)
 8009e0a:	6819      	ldr	r1, [r3, #0]
 8009e0c:	4b95      	ldr	r3, [pc, #596]	@ (800a064 <tcp_process+0x598>)
 8009e0e:	881b      	ldrh	r3, [r3, #0]
 8009e10:	461a      	mov	r2, r3
 8009e12:	4b95      	ldr	r3, [pc, #596]	@ (800a068 <tcp_process+0x59c>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009e18:	4b94      	ldr	r3, [pc, #592]	@ (800a06c <tcp_process+0x5a0>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e1c:	885b      	ldrh	r3, [r3, #2]
 8009e1e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009e20:	4a92      	ldr	r2, [pc, #584]	@ (800a06c <tcp_process+0x5a0>)
 8009e22:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e24:	8812      	ldrh	r2, [r2, #0]
 8009e26:	b292      	uxth	r2, r2
 8009e28:	9202      	str	r2, [sp, #8]
 8009e2a:	9301      	str	r3, [sp, #4]
 8009e2c:	4b90      	ldr	r3, [pc, #576]	@ (800a070 <tcp_process+0x5a4>)
 8009e2e:	9300      	str	r3, [sp, #0]
 8009e30:	4b90      	ldr	r3, [pc, #576]	@ (800a074 <tcp_process+0x5a8>)
 8009e32:	4602      	mov	r2, r0
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f002 fc7f 	bl	800c738 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009e40:	2b05      	cmp	r3, #5
 8009e42:	f200 8215 	bhi.w	800a270 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f002 fa4b 	bl	800c2e8 <tcp_rexmit_rto>
      break;
 8009e52:	e20d      	b.n	800a270 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8009e54:	4b81      	ldr	r3, [pc, #516]	@ (800a05c <tcp_process+0x590>)
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	f003 0310 	and.w	r3, r3, #16
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	f000 80a1 	beq.w	8009fa4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009e62:	4b7f      	ldr	r3, [pc, #508]	@ (800a060 <tcp_process+0x594>)
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e6a:	1ad3      	subs	r3, r2, r3
 8009e6c:	3b01      	subs	r3, #1
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	db7e      	blt.n	8009f70 <tcp_process+0x4a4>
 8009e72:	4b7b      	ldr	r3, [pc, #492]	@ (800a060 <tcp_process+0x594>)
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e7a:	1ad3      	subs	r3, r2, r3
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	dc77      	bgt.n	8009f70 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2204      	movs	r2, #4
 8009e84:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d102      	bne.n	8009e94 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8009e8e:	23fa      	movs	r3, #250	@ 0xfa
 8009e90:	76bb      	strb	r3, [r7, #26]
 8009e92:	e01d      	b.n	8009ed0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e98:	699b      	ldr	r3, [r3, #24]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d106      	bne.n	8009eac <tcp_process+0x3e0>
 8009e9e:	4b76      	ldr	r3, [pc, #472]	@ (800a078 <tcp_process+0x5ac>)
 8009ea0:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8009ea4:	4975      	ldr	r1, [pc, #468]	@ (800a07c <tcp_process+0x5b0>)
 8009ea6:	4876      	ldr	r0, [pc, #472]	@ (800a080 <tcp_process+0x5b4>)
 8009ea8:	f006 f800 	bl	800feac <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009eb0:	699b      	ldr	r3, [r3, #24]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d00a      	beq.n	8009ecc <tcp_process+0x400>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009eba:	699b      	ldr	r3, [r3, #24]
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	6910      	ldr	r0, [r2, #16]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	6879      	ldr	r1, [r7, #4]
 8009ec4:	4798      	blx	r3
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	76bb      	strb	r3, [r7, #26]
 8009eca:	e001      	b.n	8009ed0 <tcp_process+0x404>
 8009ecc:	23f0      	movs	r3, #240	@ 0xf0
 8009ece:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8009ed0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d00a      	beq.n	8009eee <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009ed8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009edc:	f113 0f0d 	cmn.w	r3, #13
 8009ee0:	d002      	beq.n	8009ee8 <tcp_process+0x41c>
              tcp_abort(pcb);
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f7fd ff8c 	bl	8007e00 <tcp_abort>
            }
            return ERR_ABRT;
 8009ee8:	f06f 030c 	mvn.w	r3, #12
 8009eec:	e1ce      	b.n	800a28c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 fae0 	bl	800a4b4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8009ef4:	4b63      	ldr	r3, [pc, #396]	@ (800a084 <tcp_process+0x5b8>)
 8009ef6:	881b      	ldrh	r3, [r3, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d005      	beq.n	8009f08 <tcp_process+0x43c>
            recv_acked--;
 8009efc:	4b61      	ldr	r3, [pc, #388]	@ (800a084 <tcp_process+0x5b8>)
 8009efe:	881b      	ldrh	r3, [r3, #0]
 8009f00:	3b01      	subs	r3, #1
 8009f02:	b29a      	uxth	r2, r3
 8009f04:	4b5f      	ldr	r3, [pc, #380]	@ (800a084 <tcp_process+0x5b8>)
 8009f06:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009f0c:	009a      	lsls	r2, r3, #2
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009f12:	005b      	lsls	r3, r3, #1
 8009f14:	f241 111c 	movw	r1, #4380	@ 0x111c
 8009f18:	428b      	cmp	r3, r1
 8009f1a:	bf38      	it	cc
 8009f1c:	460b      	movcc	r3, r1
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d204      	bcs.n	8009f2c <tcp_process+0x460>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	e00d      	b.n	8009f48 <tcp_process+0x47c>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009f30:	005b      	lsls	r3, r3, #1
 8009f32:	f241 121c 	movw	r2, #4380	@ 0x111c
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d904      	bls.n	8009f44 <tcp_process+0x478>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009f3e:	005b      	lsls	r3, r3, #1
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	e001      	b.n	8009f48 <tcp_process+0x47c>
 8009f44:	f241 131c 	movw	r3, #4380	@ 0x111c
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8009f4e:	4b4e      	ldr	r3, [pc, #312]	@ (800a088 <tcp_process+0x5bc>)
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	f003 0320 	and.w	r3, r3, #32
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d037      	beq.n	8009fca <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	8b5b      	ldrh	r3, [r3, #26]
 8009f5e:	f043 0302 	orr.w	r3, r3, #2
 8009f62:	b29a      	uxth	r2, r3
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2207      	movs	r2, #7
 8009f6c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8009f6e:	e02c      	b.n	8009fca <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009f70:	4b3b      	ldr	r3, [pc, #236]	@ (800a060 <tcp_process+0x594>)
 8009f72:	6819      	ldr	r1, [r3, #0]
 8009f74:	4b3b      	ldr	r3, [pc, #236]	@ (800a064 <tcp_process+0x598>)
 8009f76:	881b      	ldrh	r3, [r3, #0]
 8009f78:	461a      	mov	r2, r3
 8009f7a:	4b3b      	ldr	r3, [pc, #236]	@ (800a068 <tcp_process+0x59c>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009f80:	4b3a      	ldr	r3, [pc, #232]	@ (800a06c <tcp_process+0x5a0>)
 8009f82:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009f84:	885b      	ldrh	r3, [r3, #2]
 8009f86:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009f88:	4a38      	ldr	r2, [pc, #224]	@ (800a06c <tcp_process+0x5a0>)
 8009f8a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009f8c:	8812      	ldrh	r2, [r2, #0]
 8009f8e:	b292      	uxth	r2, r2
 8009f90:	9202      	str	r2, [sp, #8]
 8009f92:	9301      	str	r3, [sp, #4]
 8009f94:	4b36      	ldr	r3, [pc, #216]	@ (800a070 <tcp_process+0x5a4>)
 8009f96:	9300      	str	r3, [sp, #0]
 8009f98:	4b36      	ldr	r3, [pc, #216]	@ (800a074 <tcp_process+0x5a8>)
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f002 fbcb 	bl	800c738 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8009fa2:	e167      	b.n	800a274 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009fa4:	4b2d      	ldr	r3, [pc, #180]	@ (800a05c <tcp_process+0x590>)
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	f003 0302 	and.w	r3, r3, #2
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	f000 8161 	beq.w	800a274 <tcp_process+0x7a8>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fb6:	1e5a      	subs	r2, r3, #1
 8009fb8:	4b2b      	ldr	r3, [pc, #172]	@ (800a068 <tcp_process+0x59c>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	f040 8159 	bne.w	800a274 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f002 f9b2 	bl	800c32c <tcp_rexmit>
      break;
 8009fc8:	e154      	b.n	800a274 <tcp_process+0x7a8>
 8009fca:	e153      	b.n	800a274 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 fa71 	bl	800a4b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009fd2:	4b2d      	ldr	r3, [pc, #180]	@ (800a088 <tcp_process+0x5bc>)
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	f003 0320 	and.w	r3, r3, #32
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	f000 814c 	beq.w	800a278 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	8b5b      	ldrh	r3, [r3, #26]
 8009fe4:	f043 0302 	orr.w	r3, r3, #2
 8009fe8:	b29a      	uxth	r2, r3
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2207      	movs	r2, #7
 8009ff2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009ff4:	e140      	b.n	800a278 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 fa5c 	bl	800a4b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009ffc:	4b22      	ldr	r3, [pc, #136]	@ (800a088 <tcp_process+0x5bc>)
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	f003 0320 	and.w	r3, r3, #32
 800a004:	2b00      	cmp	r3, #0
 800a006:	d071      	beq.n	800a0ec <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a008:	4b14      	ldr	r3, [pc, #80]	@ (800a05c <tcp_process+0x590>)
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	f003 0310 	and.w	r3, r3, #16
 800a010:	2b00      	cmp	r3, #0
 800a012:	d060      	beq.n	800a0d6 <tcp_process+0x60a>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a018:	4b11      	ldr	r3, [pc, #68]	@ (800a060 <tcp_process+0x594>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d15a      	bne.n	800a0d6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a024:	2b00      	cmp	r3, #0
 800a026:	d156      	bne.n	800a0d6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	8b5b      	ldrh	r3, [r3, #26]
 800a02c:	f043 0302 	orr.w	r3, r3, #2
 800a030:	b29a      	uxth	r2, r3
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f7fe fdbc 	bl	8008bb4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800a03c:	4b13      	ldr	r3, [pc, #76]	@ (800a08c <tcp_process+0x5c0>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	429a      	cmp	r2, r3
 800a044:	d105      	bne.n	800a052 <tcp_process+0x586>
 800a046:	4b11      	ldr	r3, [pc, #68]	@ (800a08c <tcp_process+0x5c0>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	68db      	ldr	r3, [r3, #12]
 800a04c:	4a0f      	ldr	r2, [pc, #60]	@ (800a08c <tcp_process+0x5c0>)
 800a04e:	6013      	str	r3, [r2, #0]
 800a050:	e02e      	b.n	800a0b0 <tcp_process+0x5e4>
 800a052:	4b0e      	ldr	r3, [pc, #56]	@ (800a08c <tcp_process+0x5c0>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	617b      	str	r3, [r7, #20]
 800a058:	e027      	b.n	800a0aa <tcp_process+0x5de>
 800a05a:	bf00      	nop
 800a05c:	20008814 	.word	0x20008814
 800a060:	2000880c 	.word	0x2000880c
 800a064:	20008812 	.word	0x20008812
 800a068:	20008808 	.word	0x20008808
 800a06c:	200087f8 	.word	0x200087f8
 800a070:	20005270 	.word	0x20005270
 800a074:	20005274 	.word	0x20005274
 800a078:	080123cc 	.word	0x080123cc
 800a07c:	0801266c 	.word	0x0801266c
 800a080:	08012418 	.word	0x08012418
 800a084:	20008810 	.word	0x20008810
 800a088:	20008815 	.word	0x20008815
 800a08c:	200087dc 	.word	0x200087dc
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	68db      	ldr	r3, [r3, #12]
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	429a      	cmp	r2, r3
 800a098:	d104      	bne.n	800a0a4 <tcp_process+0x5d8>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	68da      	ldr	r2, [r3, #12]
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	60da      	str	r2, [r3, #12]
 800a0a2:	e005      	b.n	800a0b0 <tcp_process+0x5e4>
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	68db      	ldr	r3, [r3, #12]
 800a0a8:	617b      	str	r3, [r7, #20]
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d1ef      	bne.n	800a090 <tcp_process+0x5c4>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	60da      	str	r2, [r3, #12]
 800a0b6:	4b77      	ldr	r3, [pc, #476]	@ (800a294 <tcp_process+0x7c8>)
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	220a      	movs	r2, #10
 800a0c0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800a0c2:	4b75      	ldr	r3, [pc, #468]	@ (800a298 <tcp_process+0x7cc>)
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	60da      	str	r2, [r3, #12]
 800a0ca:	4a73      	ldr	r2, [pc, #460]	@ (800a298 <tcp_process+0x7cc>)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6013      	str	r3, [r2, #0]
 800a0d0:	f002 fcf4 	bl	800cabc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800a0d4:	e0d2      	b.n	800a27c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	8b5b      	ldrh	r3, [r3, #26]
 800a0da:	f043 0302 	orr.w	r3, r3, #2
 800a0de:	b29a      	uxth	r2, r3
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2208      	movs	r2, #8
 800a0e8:	751a      	strb	r2, [r3, #20]
      break;
 800a0ea:	e0c7      	b.n	800a27c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a0ec:	4b6b      	ldr	r3, [pc, #428]	@ (800a29c <tcp_process+0x7d0>)
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	f003 0310 	and.w	r3, r3, #16
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	f000 80c1 	beq.w	800a27c <tcp_process+0x7b0>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a0fe:	4b68      	ldr	r3, [pc, #416]	@ (800a2a0 <tcp_process+0x7d4>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	429a      	cmp	r2, r3
 800a104:	f040 80ba 	bne.w	800a27c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	f040 80b5 	bne.w	800a27c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2206      	movs	r2, #6
 800a116:	751a      	strb	r2, [r3, #20]
      break;
 800a118:	e0b0      	b.n	800a27c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 f9ca 	bl	800a4b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a120:	4b60      	ldr	r3, [pc, #384]	@ (800a2a4 <tcp_process+0x7d8>)
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	f003 0320 	and.w	r3, r3, #32
 800a128:	2b00      	cmp	r3, #0
 800a12a:	f000 80a9 	beq.w	800a280 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	8b5b      	ldrh	r3, [r3, #26]
 800a132:	f043 0302 	orr.w	r3, r3, #2
 800a136:	b29a      	uxth	r2, r3
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f7fe fd39 	bl	8008bb4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a142:	4b59      	ldr	r3, [pc, #356]	@ (800a2a8 <tcp_process+0x7dc>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	429a      	cmp	r2, r3
 800a14a:	d105      	bne.n	800a158 <tcp_process+0x68c>
 800a14c:	4b56      	ldr	r3, [pc, #344]	@ (800a2a8 <tcp_process+0x7dc>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	68db      	ldr	r3, [r3, #12]
 800a152:	4a55      	ldr	r2, [pc, #340]	@ (800a2a8 <tcp_process+0x7dc>)
 800a154:	6013      	str	r3, [r2, #0]
 800a156:	e013      	b.n	800a180 <tcp_process+0x6b4>
 800a158:	4b53      	ldr	r3, [pc, #332]	@ (800a2a8 <tcp_process+0x7dc>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	613b      	str	r3, [r7, #16]
 800a15e:	e00c      	b.n	800a17a <tcp_process+0x6ae>
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	429a      	cmp	r2, r3
 800a168:	d104      	bne.n	800a174 <tcp_process+0x6a8>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	68da      	ldr	r2, [r3, #12]
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	60da      	str	r2, [r3, #12]
 800a172:	e005      	b.n	800a180 <tcp_process+0x6b4>
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	613b      	str	r3, [r7, #16]
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d1ef      	bne.n	800a160 <tcp_process+0x694>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	60da      	str	r2, [r3, #12]
 800a186:	4b43      	ldr	r3, [pc, #268]	@ (800a294 <tcp_process+0x7c8>)
 800a188:	2201      	movs	r2, #1
 800a18a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	220a      	movs	r2, #10
 800a190:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a192:	4b41      	ldr	r3, [pc, #260]	@ (800a298 <tcp_process+0x7cc>)
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	60da      	str	r2, [r3, #12]
 800a19a:	4a3f      	ldr	r2, [pc, #252]	@ (800a298 <tcp_process+0x7cc>)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6013      	str	r3, [r2, #0]
 800a1a0:	f002 fc8c 	bl	800cabc <tcp_timer_needed>
      }
      break;
 800a1a4:	e06c      	b.n	800a280 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 f984 	bl	800a4b4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a1ac:	4b3b      	ldr	r3, [pc, #236]	@ (800a29c <tcp_process+0x7d0>)
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	f003 0310 	and.w	r3, r3, #16
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d065      	beq.n	800a284 <tcp_process+0x7b8>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a1bc:	4b38      	ldr	r3, [pc, #224]	@ (800a2a0 <tcp_process+0x7d4>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d15f      	bne.n	800a284 <tcp_process+0x7b8>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d15b      	bne.n	800a284 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f7fe fcf1 	bl	8008bb4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a1d2:	4b35      	ldr	r3, [pc, #212]	@ (800a2a8 <tcp_process+0x7dc>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d105      	bne.n	800a1e8 <tcp_process+0x71c>
 800a1dc:	4b32      	ldr	r3, [pc, #200]	@ (800a2a8 <tcp_process+0x7dc>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	4a31      	ldr	r2, [pc, #196]	@ (800a2a8 <tcp_process+0x7dc>)
 800a1e4:	6013      	str	r3, [r2, #0]
 800a1e6:	e013      	b.n	800a210 <tcp_process+0x744>
 800a1e8:	4b2f      	ldr	r3, [pc, #188]	@ (800a2a8 <tcp_process+0x7dc>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	60fb      	str	r3, [r7, #12]
 800a1ee:	e00c      	b.n	800a20a <tcp_process+0x73e>
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	68db      	ldr	r3, [r3, #12]
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d104      	bne.n	800a204 <tcp_process+0x738>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	68da      	ldr	r2, [r3, #12]
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	60da      	str	r2, [r3, #12]
 800a202:	e005      	b.n	800a210 <tcp_process+0x744>
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	68db      	ldr	r3, [r3, #12]
 800a208:	60fb      	str	r3, [r7, #12]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d1ef      	bne.n	800a1f0 <tcp_process+0x724>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2200      	movs	r2, #0
 800a214:	60da      	str	r2, [r3, #12]
 800a216:	4b1f      	ldr	r3, [pc, #124]	@ (800a294 <tcp_process+0x7c8>)
 800a218:	2201      	movs	r2, #1
 800a21a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	220a      	movs	r2, #10
 800a220:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a222:	4b1d      	ldr	r3, [pc, #116]	@ (800a298 <tcp_process+0x7cc>)
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	60da      	str	r2, [r3, #12]
 800a22a:	4a1b      	ldr	r2, [pc, #108]	@ (800a298 <tcp_process+0x7cc>)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6013      	str	r3, [r2, #0]
 800a230:	f002 fc44 	bl	800cabc <tcp_timer_needed>
      }
      break;
 800a234:	e026      	b.n	800a284 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f000 f93c 	bl	800a4b4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a23c:	4b17      	ldr	r3, [pc, #92]	@ (800a29c <tcp_process+0x7d0>)
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	f003 0310 	and.w	r3, r3, #16
 800a244:	2b00      	cmp	r3, #0
 800a246:	d01f      	beq.n	800a288 <tcp_process+0x7bc>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a24c:	4b14      	ldr	r3, [pc, #80]	@ (800a2a0 <tcp_process+0x7d4>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	429a      	cmp	r2, r3
 800a252:	d119      	bne.n	800a288 <tcp_process+0x7bc>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d115      	bne.n	800a288 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800a25c:	4b11      	ldr	r3, [pc, #68]	@ (800a2a4 <tcp_process+0x7d8>)
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	f043 0310 	orr.w	r3, r3, #16
 800a264:	b2da      	uxtb	r2, r3
 800a266:	4b0f      	ldr	r3, [pc, #60]	@ (800a2a4 <tcp_process+0x7d8>)
 800a268:	701a      	strb	r2, [r3, #0]
      }
      break;
 800a26a:	e00d      	b.n	800a288 <tcp_process+0x7bc>
    default:
      break;
 800a26c:	bf00      	nop
 800a26e:	e00c      	b.n	800a28a <tcp_process+0x7be>
      break;
 800a270:	bf00      	nop
 800a272:	e00a      	b.n	800a28a <tcp_process+0x7be>
      break;
 800a274:	bf00      	nop
 800a276:	e008      	b.n	800a28a <tcp_process+0x7be>
      break;
 800a278:	bf00      	nop
 800a27a:	e006      	b.n	800a28a <tcp_process+0x7be>
      break;
 800a27c:	bf00      	nop
 800a27e:	e004      	b.n	800a28a <tcp_process+0x7be>
      break;
 800a280:	bf00      	nop
 800a282:	e002      	b.n	800a28a <tcp_process+0x7be>
      break;
 800a284:	bf00      	nop
 800a286:	e000      	b.n	800a28a <tcp_process+0x7be>
      break;
 800a288:	bf00      	nop
  }
  return ERR_OK;
 800a28a:	2300      	movs	r3, #0
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3724      	adds	r7, #36	@ 0x24
 800a290:	46bd      	mov	sp, r7
 800a292:	bd90      	pop	{r4, r7, pc}
 800a294:	200087e4 	.word	0x200087e4
 800a298:	200087e0 	.word	0x200087e0
 800a29c:	20008814 	.word	0x20008814
 800a2a0:	2000880c 	.word	0x2000880c
 800a2a4:	20008815 	.word	0x20008815
 800a2a8:	200087dc 	.word	0x200087dc

0800a2ac <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800a2ac:	b590      	push	{r4, r7, lr}
 800a2ae:	b085      	sub	sp, #20
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d106      	bne.n	800a2ca <tcp_oos_insert_segment+0x1e>
 800a2bc:	4b3b      	ldr	r3, [pc, #236]	@ (800a3ac <tcp_oos_insert_segment+0x100>)
 800a2be:	f240 421f 	movw	r2, #1055	@ 0x41f
 800a2c2:	493b      	ldr	r1, [pc, #236]	@ (800a3b0 <tcp_oos_insert_segment+0x104>)
 800a2c4:	483b      	ldr	r0, [pc, #236]	@ (800a3b4 <tcp_oos_insert_segment+0x108>)
 800a2c6:	f005 fdf1 	bl	800feac <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	68db      	ldr	r3, [r3, #12]
 800a2ce:	899b      	ldrh	r3, [r3, #12]
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f7fb fc0c 	bl	8005af0 <lwip_htons>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	f003 0301 	and.w	r3, r3, #1
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d028      	beq.n	800a336 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800a2e4:	6838      	ldr	r0, [r7, #0]
 800a2e6:	f7fe fa63 	bl	80087b0 <tcp_segs_free>
    next = NULL;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	603b      	str	r3, [r7, #0]
 800a2ee:	e056      	b.n	800a39e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	899b      	ldrh	r3, [r3, #12]
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f7fb fbf9 	bl	8005af0 <lwip_htons>
 800a2fe:	4603      	mov	r3, r0
 800a300:	b2db      	uxtb	r3, r3
 800a302:	f003 0301 	and.w	r3, r3, #1
 800a306:	2b00      	cmp	r3, #0
 800a308:	d00d      	beq.n	800a326 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	68db      	ldr	r3, [r3, #12]
 800a30e:	899b      	ldrh	r3, [r3, #12]
 800a310:	b29c      	uxth	r4, r3
 800a312:	2001      	movs	r0, #1
 800a314:	f7fb fbec 	bl	8005af0 <lwip_htons>
 800a318:	4603      	mov	r3, r0
 800a31a:	461a      	mov	r2, r3
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	68db      	ldr	r3, [r3, #12]
 800a320:	4322      	orrs	r2, r4
 800a322:	b292      	uxth	r2, r2
 800a324:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800a330:	68f8      	ldr	r0, [r7, #12]
 800a332:	f7fe fa52 	bl	80087da <tcp_seg_free>
    while (next &&
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d00e      	beq.n	800a35a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	891b      	ldrh	r3, [r3, #8]
 800a340:	461a      	mov	r2, r3
 800a342:	4b1d      	ldr	r3, [pc, #116]	@ (800a3b8 <tcp_oos_insert_segment+0x10c>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	441a      	add	r2, r3
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	68db      	ldr	r3, [r3, #12]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	6839      	ldr	r1, [r7, #0]
 800a350:	8909      	ldrh	r1, [r1, #8]
 800a352:	440b      	add	r3, r1
 800a354:	1ad3      	subs	r3, r2, r3
    while (next &&
 800a356:	2b00      	cmp	r3, #0
 800a358:	daca      	bge.n	800a2f0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d01e      	beq.n	800a39e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	891b      	ldrh	r3, [r3, #8]
 800a364:	461a      	mov	r2, r3
 800a366:	4b14      	ldr	r3, [pc, #80]	@ (800a3b8 <tcp_oos_insert_segment+0x10c>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	441a      	add	r2, r3
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	1ad3      	subs	r3, r2, r3
    if (next &&
 800a374:	2b00      	cmp	r3, #0
 800a376:	dd12      	ble.n	800a39e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	b29a      	uxth	r2, r3
 800a380:	4b0d      	ldr	r3, [pc, #52]	@ (800a3b8 <tcp_oos_insert_segment+0x10c>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	b29b      	uxth	r3, r3
 800a386:	1ad3      	subs	r3, r2, r3
 800a388:	b29a      	uxth	r2, r3
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	685a      	ldr	r2, [r3, #4]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	891b      	ldrh	r3, [r3, #8]
 800a396:	4619      	mov	r1, r3
 800a398:	4610      	mov	r0, r2
 800a39a:	f7fc fd81 	bl	8006ea0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	683a      	ldr	r2, [r7, #0]
 800a3a2:	601a      	str	r2, [r3, #0]
}
 800a3a4:	bf00      	nop
 800a3a6:	3714      	adds	r7, #20
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd90      	pop	{r4, r7, pc}
 800a3ac:	080123cc 	.word	0x080123cc
 800a3b0:	0801268c 	.word	0x0801268c
 800a3b4:	08012418 	.word	0x08012418
 800a3b8:	20008808 	.word	0x20008808

0800a3bc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800a3bc:	b5b0      	push	{r4, r5, r7, lr}
 800a3be:	b086      	sub	sp, #24
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	60f8      	str	r0, [r7, #12]
 800a3c4:	60b9      	str	r1, [r7, #8]
 800a3c6:	607a      	str	r2, [r7, #4]
 800a3c8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800a3ca:	e03e      	b.n	800a44a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7fc ff6e 	bl	80072bc <pbuf_clen>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a3ea:	8a7a      	ldrh	r2, [r7, #18]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d906      	bls.n	800a3fe <tcp_free_acked_segments+0x42>
 800a3f0:	4b2a      	ldr	r3, [pc, #168]	@ (800a49c <tcp_free_acked_segments+0xe0>)
 800a3f2:	f240 4257 	movw	r2, #1111	@ 0x457
 800a3f6:	492a      	ldr	r1, [pc, #168]	@ (800a4a0 <tcp_free_acked_segments+0xe4>)
 800a3f8:	482a      	ldr	r0, [pc, #168]	@ (800a4a4 <tcp_free_acked_segments+0xe8>)
 800a3fa:	f005 fd57 	bl	800feac <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800a404:	8a7b      	ldrh	r3, [r7, #18]
 800a406:	1ad3      	subs	r3, r2, r3
 800a408:	b29a      	uxth	r2, r3
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	891a      	ldrh	r2, [r3, #8]
 800a414:	4b24      	ldr	r3, [pc, #144]	@ (800a4a8 <tcp_free_acked_segments+0xec>)
 800a416:	881b      	ldrh	r3, [r3, #0]
 800a418:	4413      	add	r3, r2
 800a41a:	b29a      	uxth	r2, r3
 800a41c:	4b22      	ldr	r3, [pc, #136]	@ (800a4a8 <tcp_free_acked_segments+0xec>)
 800a41e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800a420:	6978      	ldr	r0, [r7, #20]
 800a422:	f7fe f9da 	bl	80087da <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d00c      	beq.n	800a44a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d109      	bne.n	800a44a <tcp_free_acked_segments+0x8e>
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d106      	bne.n	800a44a <tcp_free_acked_segments+0x8e>
 800a43c:	4b17      	ldr	r3, [pc, #92]	@ (800a49c <tcp_free_acked_segments+0xe0>)
 800a43e:	f240 4261 	movw	r2, #1121	@ 0x461
 800a442:	491a      	ldr	r1, [pc, #104]	@ (800a4ac <tcp_free_acked_segments+0xf0>)
 800a444:	4817      	ldr	r0, [pc, #92]	@ (800a4a4 <tcp_free_acked_segments+0xe8>)
 800a446:	f005 fd31 	bl	800feac <iprintf>
  while (seg_list != NULL &&
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d020      	beq.n	800a492 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	68db      	ldr	r3, [r3, #12]
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	4618      	mov	r0, r3
 800a458:	f7fb fb5f 	bl	8005b1a <lwip_htonl>
 800a45c:	4604      	mov	r4, r0
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	891b      	ldrh	r3, [r3, #8]
 800a462:	461d      	mov	r5, r3
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	899b      	ldrh	r3, [r3, #12]
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7fb fb3f 	bl	8005af0 <lwip_htons>
 800a472:	4603      	mov	r3, r0
 800a474:	b2db      	uxtb	r3, r3
 800a476:	f003 0303 	and.w	r3, r3, #3
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d001      	beq.n	800a482 <tcp_free_acked_segments+0xc6>
 800a47e:	2301      	movs	r3, #1
 800a480:	e000      	b.n	800a484 <tcp_free_acked_segments+0xc8>
 800a482:	2300      	movs	r3, #0
 800a484:	442b      	add	r3, r5
 800a486:	18e2      	adds	r2, r4, r3
 800a488:	4b09      	ldr	r3, [pc, #36]	@ (800a4b0 <tcp_free_acked_segments+0xf4>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800a48e:	2b00      	cmp	r3, #0
 800a490:	dd9c      	ble.n	800a3cc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800a492:	68bb      	ldr	r3, [r7, #8]
}
 800a494:	4618      	mov	r0, r3
 800a496:	3718      	adds	r7, #24
 800a498:	46bd      	mov	sp, r7
 800a49a:	bdb0      	pop	{r4, r5, r7, pc}
 800a49c:	080123cc 	.word	0x080123cc
 800a4a0:	080126b4 	.word	0x080126b4
 800a4a4:	08012418 	.word	0x08012418
 800a4a8:	20008810 	.word	0x20008810
 800a4ac:	080126dc 	.word	0x080126dc
 800a4b0:	2000880c 	.word	0x2000880c

0800a4b4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800a4b4:	b5b0      	push	{r4, r5, r7, lr}
 800a4b6:	b094      	sub	sp, #80	@ 0x50
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d106      	bne.n	800a4d4 <tcp_receive+0x20>
 800a4c6:	4b91      	ldr	r3, [pc, #580]	@ (800a70c <tcp_receive+0x258>)
 800a4c8:	f240 427b 	movw	r2, #1147	@ 0x47b
 800a4cc:	4990      	ldr	r1, [pc, #576]	@ (800a710 <tcp_receive+0x25c>)
 800a4ce:	4891      	ldr	r0, [pc, #580]	@ (800a714 <tcp_receive+0x260>)
 800a4d0:	f005 fcec 	bl	800feac <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	7d1b      	ldrb	r3, [r3, #20]
 800a4d8:	2b03      	cmp	r3, #3
 800a4da:	d806      	bhi.n	800a4ea <tcp_receive+0x36>
 800a4dc:	4b8b      	ldr	r3, [pc, #556]	@ (800a70c <tcp_receive+0x258>)
 800a4de:	f240 427c 	movw	r2, #1148	@ 0x47c
 800a4e2:	498d      	ldr	r1, [pc, #564]	@ (800a718 <tcp_receive+0x264>)
 800a4e4:	488b      	ldr	r0, [pc, #556]	@ (800a714 <tcp_receive+0x260>)
 800a4e6:	f005 fce1 	bl	800feac <iprintf>

  if (flags & TCP_ACK) {
 800a4ea:	4b8c      	ldr	r3, [pc, #560]	@ (800a71c <tcp_receive+0x268>)
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	f003 0310 	and.w	r3, r3, #16
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	f000 8264 	beq.w	800a9c0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a4fe:	461a      	mov	r2, r3
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a504:	4413      	add	r3, r2
 800a506:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a50c:	4b84      	ldr	r3, [pc, #528]	@ (800a720 <tcp_receive+0x26c>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	1ad3      	subs	r3, r2, r3
 800a512:	2b00      	cmp	r3, #0
 800a514:	db1b      	blt.n	800a54e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a51a:	4b81      	ldr	r3, [pc, #516]	@ (800a720 <tcp_receive+0x26c>)
 800a51c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a51e:	429a      	cmp	r2, r3
 800a520:	d106      	bne.n	800a530 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a526:	4b7f      	ldr	r3, [pc, #508]	@ (800a724 <tcp_receive+0x270>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	1ad3      	subs	r3, r2, r3
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	db0e      	blt.n	800a54e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a534:	4b7b      	ldr	r3, [pc, #492]	@ (800a724 <tcp_receive+0x270>)
 800a536:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a538:	429a      	cmp	r2, r3
 800a53a:	d125      	bne.n	800a588 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a53c:	4b7a      	ldr	r3, [pc, #488]	@ (800a728 <tcp_receive+0x274>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	89db      	ldrh	r3, [r3, #14]
 800a542:	b29a      	uxth	r2, r3
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d91c      	bls.n	800a588 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a54e:	4b76      	ldr	r3, [pc, #472]	@ (800a728 <tcp_receive+0x274>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	89db      	ldrh	r3, [r3, #14]
 800a554:	b29a      	uxth	r2, r3
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a568:	429a      	cmp	r2, r3
 800a56a:	d205      	bcs.n	800a578 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800a578:	4b69      	ldr	r3, [pc, #420]	@ (800a720 <tcp_receive+0x26c>)
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800a580:	4b68      	ldr	r3, [pc, #416]	@ (800a724 <tcp_receive+0x270>)
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a588:	4b66      	ldr	r3, [pc, #408]	@ (800a724 <tcp_receive+0x270>)
 800a58a:	681a      	ldr	r2, [r3, #0]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a590:	1ad3      	subs	r3, r2, r3
 800a592:	2b00      	cmp	r3, #0
 800a594:	dc58      	bgt.n	800a648 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800a596:	4b65      	ldr	r3, [pc, #404]	@ (800a72c <tcp_receive+0x278>)
 800a598:	881b      	ldrh	r3, [r3, #0]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d14b      	bne.n	800a636 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800a5a8:	4413      	add	r3, r2
 800a5aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d142      	bne.n	800a636 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	db3d      	blt.n	800a636 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a5be:	4b59      	ldr	r3, [pc, #356]	@ (800a724 <tcp_receive+0x270>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d137      	bne.n	800a636 <tcp_receive+0x182>
              found_dupack = 1;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a5d0:	2bff      	cmp	r3, #255	@ 0xff
 800a5d2:	d007      	beq.n	800a5e4 <tcp_receive+0x130>
                ++pcb->dupacks;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a5da:	3301      	adds	r3, #1
 800a5dc:	b2da      	uxtb	r2, r3
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a5ea:	2b03      	cmp	r3, #3
 800a5ec:	d91b      	bls.n	800a626 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a5f8:	4413      	add	r3, r2
 800a5fa:	b29a      	uxth	r2, r3
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a602:	429a      	cmp	r2, r3
 800a604:	d30a      	bcc.n	800a61c <tcp_receive+0x168>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a610:	4413      	add	r3, r2
 800a612:	b29a      	uxth	r2, r3
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800a61a:	e004      	b.n	800a626 <tcp_receive+0x172>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a622:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a62c:	2b02      	cmp	r3, #2
 800a62e:	d902      	bls.n	800a636 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f001 fee7 	bl	800c404 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800a636:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a638:	2b00      	cmp	r3, #0
 800a63a:	f040 8161 	bne.w	800a900 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2200      	movs	r2, #0
 800a642:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a646:	e15b      	b.n	800a900 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a648:	4b36      	ldr	r3, [pc, #216]	@ (800a724 <tcp_receive+0x270>)
 800a64a:	681a      	ldr	r2, [r3, #0]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a650:	1ad3      	subs	r3, r2, r3
 800a652:	3b01      	subs	r3, #1
 800a654:	2b00      	cmp	r3, #0
 800a656:	f2c0 814e 	blt.w	800a8f6 <tcp_receive+0x442>
 800a65a:	4b32      	ldr	r3, [pc, #200]	@ (800a724 <tcp_receive+0x270>)
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a662:	1ad3      	subs	r3, r2, r3
 800a664:	2b00      	cmp	r3, #0
 800a666:	f300 8146 	bgt.w	800a8f6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	8b5b      	ldrh	r3, [r3, #26]
 800a66e:	f003 0304 	and.w	r3, r3, #4
 800a672:	2b00      	cmp	r3, #0
 800a674:	d010      	beq.n	800a698 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	8b5b      	ldrh	r3, [r3, #26]
 800a67a:	f023 0304 	bic.w	r3, r3, #4
 800a67e:	b29a      	uxth	r2, r3
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2200      	movs	r2, #0
 800a694:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2200      	movs	r2, #0
 800a69c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800a6a6:	10db      	asrs	r3, r3, #3
 800a6a8:	b21b      	sxth	r3, r3
 800a6aa:	b29a      	uxth	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	4413      	add	r3, r2
 800a6b6:	b29b      	uxth	r3, r3
 800a6b8:	b21a      	sxth	r2, r3
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a6c0:	4b18      	ldr	r3, [pc, #96]	@ (800a724 <tcp_receive+0x270>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	b29a      	uxth	r2, r3
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	1ad3      	subs	r3, r2, r3
 800a6ce:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800a6d8:	4b12      	ldr	r3, [pc, #72]	@ (800a724 <tcp_receive+0x270>)
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	7d1b      	ldrb	r3, [r3, #20]
 800a6e4:	2b03      	cmp	r3, #3
 800a6e6:	f240 8097 	bls.w	800a818 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d245      	bcs.n	800a786 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	8b5b      	ldrh	r3, [r3, #26]
 800a6fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a702:	2b00      	cmp	r3, #0
 800a704:	d014      	beq.n	800a730 <tcp_receive+0x27c>
 800a706:	2301      	movs	r3, #1
 800a708:	e013      	b.n	800a732 <tcp_receive+0x27e>
 800a70a:	bf00      	nop
 800a70c:	080123cc 	.word	0x080123cc
 800a710:	080126fc 	.word	0x080126fc
 800a714:	08012418 	.word	0x08012418
 800a718:	08012718 	.word	0x08012718
 800a71c:	20008814 	.word	0x20008814
 800a720:	20008808 	.word	0x20008808
 800a724:	2000880c 	.word	0x2000880c
 800a728:	200087f8 	.word	0x200087f8
 800a72c:	20008812 	.word	0x20008812
 800a730:	2302      	movs	r3, #2
 800a732:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a736:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800a73a:	b29a      	uxth	r2, r3
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a740:	fb12 f303 	smulbb	r3, r2, r3
 800a744:	b29b      	uxth	r3, r3
 800a746:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a748:	4293      	cmp	r3, r2
 800a74a:	bf28      	it	cs
 800a74c:	4613      	movcs	r3, r2
 800a74e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a756:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a758:	4413      	add	r3, r2
 800a75a:	b29a      	uxth	r2, r3
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a762:	429a      	cmp	r2, r3
 800a764:	d309      	bcc.n	800a77a <tcp_receive+0x2c6>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a76c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a76e:	4413      	add	r3, r2
 800a770:	b29a      	uxth	r2, r3
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800a778:	e04e      	b.n	800a818 <tcp_receive+0x364>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a780:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800a784:	e048      	b.n	800a818 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800a78c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a78e:	4413      	add	r3, r2
 800a790:	b29a      	uxth	r2, r3
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a798:	429a      	cmp	r2, r3
 800a79a:	d309      	bcc.n	800a7b0 <tcp_receive+0x2fc>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800a7a2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a7a4:	4413      	add	r3, r2
 800a7a6:	b29a      	uxth	r2, r3
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a7ae:	e004      	b.n	800a7ba <tcp_receive+0x306>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a7b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d326      	bcc.n	800a818 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a7d6:	1ad3      	subs	r3, r2, r3
 800a7d8:	b29a      	uxth	r2, r3
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a7ea:	4413      	add	r3, r2
 800a7ec:	b29a      	uxth	r2, r3
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d30a      	bcc.n	800a80e <tcp_receive+0x35a>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a802:	4413      	add	r3, r2
 800a804:	b29a      	uxth	r2, r3
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800a80c:	e004      	b.n	800a818 <tcp_receive+0x364>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a814:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a820:	4a98      	ldr	r2, [pc, #608]	@ (800aa84 <tcp_receive+0x5d0>)
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f7ff fdca 	bl	800a3bc <tcp_free_acked_segments>
 800a828:	4602      	mov	r2, r0
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a836:	4a94      	ldr	r2, [pc, #592]	@ (800aa88 <tcp_receive+0x5d4>)
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f7ff fdbf 	bl	800a3bc <tcp_free_acked_segments>
 800a83e:	4602      	mov	r2, r0
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d104      	bne.n	800a856 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a852:	861a      	strh	r2, [r3, #48]	@ 0x30
 800a854:	e002      	b.n	800a85c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a866:	2b00      	cmp	r3, #0
 800a868:	d103      	bne.n	800a872 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2200      	movs	r2, #0
 800a86e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800a878:	4b84      	ldr	r3, [pc, #528]	@ (800aa8c <tcp_receive+0x5d8>)
 800a87a:	881b      	ldrh	r3, [r3, #0]
 800a87c:	4413      	add	r3, r2
 800a87e:	b29a      	uxth	r2, r3
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	8b5b      	ldrh	r3, [r3, #26]
 800a88a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d035      	beq.n	800a8fe <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a896:	2b00      	cmp	r3, #0
 800a898:	d118      	bne.n	800a8cc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d00c      	beq.n	800a8bc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f7fb f933 	bl	8005b1a <lwip_htonl>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	dc20      	bgt.n	800a8fe <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	8b5b      	ldrh	r3, [r3, #26]
 800a8c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a8c4:	b29a      	uxth	r2, r3
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a8ca:	e018      	b.n	800a8fe <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a8d4:	68db      	ldr	r3, [r3, #12]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f7fb f91e 	bl	8005b1a <lwip_htonl>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	1ae3      	subs	r3, r4, r3
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	dc0b      	bgt.n	800a8fe <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	8b5b      	ldrh	r3, [r3, #26]
 800a8ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a8ee:	b29a      	uxth	r2, r3
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a8f4:	e003      	b.n	800a8fe <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f001 ff70 	bl	800c7dc <tcp_send_empty_ack>
 800a8fc:	e000      	b.n	800a900 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a8fe:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a904:	2b00      	cmp	r3, #0
 800a906:	d05b      	beq.n	800a9c0 <tcp_receive+0x50c>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a90c:	4b60      	ldr	r3, [pc, #384]	@ (800aa90 <tcp_receive+0x5dc>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	1ad3      	subs	r3, r2, r3
 800a912:	2b00      	cmp	r3, #0
 800a914:	da54      	bge.n	800a9c0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a916:	4b5f      	ldr	r3, [pc, #380]	@ (800aa94 <tcp_receive+0x5e0>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	b29a      	uxth	r2, r3
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a920:	b29b      	uxth	r3, r3
 800a922:	1ad3      	subs	r3, r2, r3
 800a924:	b29b      	uxth	r3, r3
 800a926:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800a92a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800a934:	10db      	asrs	r3, r3, #3
 800a936:	b21b      	sxth	r3, r3
 800a938:	b29b      	uxth	r3, r3
 800a93a:	1ad3      	subs	r3, r2, r3
 800a93c:	b29b      	uxth	r3, r3
 800a93e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800a948:	b29a      	uxth	r2, r3
 800a94a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a94e:	4413      	add	r3, r2
 800a950:	b29b      	uxth	r3, r3
 800a952:	b21a      	sxth	r2, r3
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800a958:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	da05      	bge.n	800a96c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800a960:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a964:	425b      	negs	r3, r3
 800a966:	b29b      	uxth	r3, r3
 800a968:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800a96c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800a976:	109b      	asrs	r3, r3, #2
 800a978:	b21b      	sxth	r3, r3
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	1ad3      	subs	r3, r2, r3
 800a97e:	b29b      	uxth	r3, r3
 800a980:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800a98a:	b29a      	uxth	r2, r3
 800a98c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a990:	4413      	add	r3, r2
 800a992:	b29b      	uxth	r3, r3
 800a994:	b21a      	sxth	r2, r3
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800a9a0:	10db      	asrs	r3, r3, #3
 800a9a2:	b21b      	sxth	r3, r3
 800a9a4:	b29a      	uxth	r2, r3
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800a9ac:	b29b      	uxth	r3, r3
 800a9ae:	4413      	add	r3, r2
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	b21a      	sxth	r2, r3
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a9c0:	4b35      	ldr	r3, [pc, #212]	@ (800aa98 <tcp_receive+0x5e4>)
 800a9c2:	881b      	ldrh	r3, [r3, #0]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	f000 84df 	beq.w	800b388 <tcp_receive+0xed4>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	7d1b      	ldrb	r3, [r3, #20]
 800a9ce:	2b06      	cmp	r3, #6
 800a9d0:	f200 84da 	bhi.w	800b388 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a9d8:	4b30      	ldr	r3, [pc, #192]	@ (800aa9c <tcp_receive+0x5e8>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	1ad3      	subs	r3, r2, r3
 800a9de:	3b01      	subs	r3, #1
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	f2c0 808f 	blt.w	800ab04 <tcp_receive+0x650>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a9ea:	4b2b      	ldr	r3, [pc, #172]	@ (800aa98 <tcp_receive+0x5e4>)
 800a9ec:	881b      	ldrh	r3, [r3, #0]
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	4b2a      	ldr	r3, [pc, #168]	@ (800aa9c <tcp_receive+0x5e8>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	440b      	add	r3, r1
 800a9f6:	1ad3      	subs	r3, r2, r3
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	f300 8082 	bgt.w	800ab04 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800aa00:	4b27      	ldr	r3, [pc, #156]	@ (800aaa0 <tcp_receive+0x5ec>)
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aa0a:	4b24      	ldr	r3, [pc, #144]	@ (800aa9c <tcp_receive+0x5e8>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	1ad3      	subs	r3, r2, r3
 800aa10:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800aa12:	4b23      	ldr	r3, [pc, #140]	@ (800aaa0 <tcp_receive+0x5ec>)
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d106      	bne.n	800aa28 <tcp_receive+0x574>
 800aa1a:	4b22      	ldr	r3, [pc, #136]	@ (800aaa4 <tcp_receive+0x5f0>)
 800aa1c:	f240 5294 	movw	r2, #1428	@ 0x594
 800aa20:	4921      	ldr	r1, [pc, #132]	@ (800aaa8 <tcp_receive+0x5f4>)
 800aa22:	4822      	ldr	r0, [pc, #136]	@ (800aaac <tcp_receive+0x5f8>)
 800aa24:	f005 fa42 	bl	800feac <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800aa28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa2a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d906      	bls.n	800aa40 <tcp_receive+0x58c>
 800aa32:	4b1c      	ldr	r3, [pc, #112]	@ (800aaa4 <tcp_receive+0x5f0>)
 800aa34:	f240 5295 	movw	r2, #1429	@ 0x595
 800aa38:	491d      	ldr	r1, [pc, #116]	@ (800aab0 <tcp_receive+0x5fc>)
 800aa3a:	481c      	ldr	r0, [pc, #112]	@ (800aaac <tcp_receive+0x5f8>)
 800aa3c:	f005 fa36 	bl	800feac <iprintf>
      off = (u16_t)off32;
 800aa40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa42:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800aa46:	4b16      	ldr	r3, [pc, #88]	@ (800aaa0 <tcp_receive+0x5ec>)
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	891b      	ldrh	r3, [r3, #8]
 800aa4c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d906      	bls.n	800aa62 <tcp_receive+0x5ae>
 800aa54:	4b13      	ldr	r3, [pc, #76]	@ (800aaa4 <tcp_receive+0x5f0>)
 800aa56:	f240 5297 	movw	r2, #1431	@ 0x597
 800aa5a:	4916      	ldr	r1, [pc, #88]	@ (800aab4 <tcp_receive+0x600>)
 800aa5c:	4813      	ldr	r0, [pc, #76]	@ (800aaac <tcp_receive+0x5f8>)
 800aa5e:	f005 fa25 	bl	800feac <iprintf>
      inseg.len -= off;
 800aa62:	4b0f      	ldr	r3, [pc, #60]	@ (800aaa0 <tcp_receive+0x5ec>)
 800aa64:	891a      	ldrh	r2, [r3, #8]
 800aa66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800aa6a:	1ad3      	subs	r3, r2, r3
 800aa6c:	b29a      	uxth	r2, r3
 800aa6e:	4b0c      	ldr	r3, [pc, #48]	@ (800aaa0 <tcp_receive+0x5ec>)
 800aa70:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800aa72:	4b0b      	ldr	r3, [pc, #44]	@ (800aaa0 <tcp_receive+0x5ec>)
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	891a      	ldrh	r2, [r3, #8]
 800aa78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800aa7c:	1ad3      	subs	r3, r2, r3
 800aa7e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800aa80:	e02a      	b.n	800aad8 <tcp_receive+0x624>
 800aa82:	bf00      	nop
 800aa84:	08012734 	.word	0x08012734
 800aa88:	0801273c 	.word	0x0801273c
 800aa8c:	20008810 	.word	0x20008810
 800aa90:	2000880c 	.word	0x2000880c
 800aa94:	200087d0 	.word	0x200087d0
 800aa98:	20008812 	.word	0x20008812
 800aa9c:	20008808 	.word	0x20008808
 800aaa0:	200087e8 	.word	0x200087e8
 800aaa4:	080123cc 	.word	0x080123cc
 800aaa8:	08012744 	.word	0x08012744
 800aaac:	08012418 	.word	0x08012418
 800aab0:	08012754 	.word	0x08012754
 800aab4:	08012764 	.word	0x08012764
        off -= p->len;
 800aab8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aaba:	895b      	ldrh	r3, [r3, #10]
 800aabc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800aac0:	1ad3      	subs	r3, r2, r3
 800aac2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800aac6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aac8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800aaca:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800aacc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aace:	2200      	movs	r2, #0
 800aad0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800aad2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800aad8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aada:	895b      	ldrh	r3, [r3, #10]
 800aadc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d8e9      	bhi.n	800aab8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800aae4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800aae8:	4619      	mov	r1, r3
 800aaea:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800aaec:	f7fc fad8 	bl	80070a0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaf4:	4a90      	ldr	r2, [pc, #576]	@ (800ad38 <tcp_receive+0x884>)
 800aaf6:	6013      	str	r3, [r2, #0]
 800aaf8:	4b90      	ldr	r3, [pc, #576]	@ (800ad3c <tcp_receive+0x888>)
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	4a8e      	ldr	r2, [pc, #568]	@ (800ad38 <tcp_receive+0x884>)
 800aafe:	6812      	ldr	r2, [r2, #0]
 800ab00:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ab02:	e00d      	b.n	800ab20 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ab04:	4b8c      	ldr	r3, [pc, #560]	@ (800ad38 <tcp_receive+0x884>)
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab0c:	1ad3      	subs	r3, r2, r3
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	da06      	bge.n	800ab20 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	8b5b      	ldrh	r3, [r3, #26]
 800ab16:	f043 0302 	orr.w	r3, r3, #2
 800ab1a:	b29a      	uxth	r2, r3
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ab20:	4b85      	ldr	r3, [pc, #532]	@ (800ad38 <tcp_receive+0x884>)
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab28:	1ad3      	subs	r3, r2, r3
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	f2c0 8427 	blt.w	800b37e <tcp_receive+0xeca>
 800ab30:	4b81      	ldr	r3, [pc, #516]	@ (800ad38 <tcp_receive+0x884>)
 800ab32:	681a      	ldr	r2, [r3, #0]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab38:	6879      	ldr	r1, [r7, #4]
 800ab3a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ab3c:	440b      	add	r3, r1
 800ab3e:	1ad3      	subs	r3, r2, r3
 800ab40:	3301      	adds	r3, #1
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	f300 841b 	bgt.w	800b37e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ab4c:	4b7a      	ldr	r3, [pc, #488]	@ (800ad38 <tcp_receive+0x884>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	429a      	cmp	r2, r3
 800ab52:	f040 8298 	bne.w	800b086 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ab56:	4b79      	ldr	r3, [pc, #484]	@ (800ad3c <tcp_receive+0x888>)
 800ab58:	891c      	ldrh	r4, [r3, #8]
 800ab5a:	4b78      	ldr	r3, [pc, #480]	@ (800ad3c <tcp_receive+0x888>)
 800ab5c:	68db      	ldr	r3, [r3, #12]
 800ab5e:	899b      	ldrh	r3, [r3, #12]
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7fa ffc4 	bl	8005af0 <lwip_htons>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	f003 0303 	and.w	r3, r3, #3
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d001      	beq.n	800ab78 <tcp_receive+0x6c4>
 800ab74:	2301      	movs	r3, #1
 800ab76:	e000      	b.n	800ab7a <tcp_receive+0x6c6>
 800ab78:	2300      	movs	r3, #0
 800ab7a:	4423      	add	r3, r4
 800ab7c:	b29a      	uxth	r2, r3
 800ab7e:	4b70      	ldr	r3, [pc, #448]	@ (800ad40 <tcp_receive+0x88c>)
 800ab80:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ab86:	4b6e      	ldr	r3, [pc, #440]	@ (800ad40 <tcp_receive+0x88c>)
 800ab88:	881b      	ldrh	r3, [r3, #0]
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	d274      	bcs.n	800ac78 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ab8e:	4b6b      	ldr	r3, [pc, #428]	@ (800ad3c <tcp_receive+0x888>)
 800ab90:	68db      	ldr	r3, [r3, #12]
 800ab92:	899b      	ldrh	r3, [r3, #12]
 800ab94:	b29b      	uxth	r3, r3
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7fa ffaa 	bl	8005af0 <lwip_htons>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	b2db      	uxtb	r3, r3
 800aba0:	f003 0301 	and.w	r3, r3, #1
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d01e      	beq.n	800abe6 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800aba8:	4b64      	ldr	r3, [pc, #400]	@ (800ad3c <tcp_receive+0x888>)
 800abaa:	68db      	ldr	r3, [r3, #12]
 800abac:	899b      	ldrh	r3, [r3, #12]
 800abae:	b29b      	uxth	r3, r3
 800abb0:	b21b      	sxth	r3, r3
 800abb2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800abb6:	b21c      	sxth	r4, r3
 800abb8:	4b60      	ldr	r3, [pc, #384]	@ (800ad3c <tcp_receive+0x888>)
 800abba:	68db      	ldr	r3, [r3, #12]
 800abbc:	899b      	ldrh	r3, [r3, #12]
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7fa ff95 	bl	8005af0 <lwip_htons>
 800abc6:	4603      	mov	r3, r0
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800abce:	b29b      	uxth	r3, r3
 800abd0:	4618      	mov	r0, r3
 800abd2:	f7fa ff8d 	bl	8005af0 <lwip_htons>
 800abd6:	4603      	mov	r3, r0
 800abd8:	b21b      	sxth	r3, r3
 800abda:	4323      	orrs	r3, r4
 800abdc:	b21a      	sxth	r2, r3
 800abde:	4b57      	ldr	r3, [pc, #348]	@ (800ad3c <tcp_receive+0x888>)
 800abe0:	68db      	ldr	r3, [r3, #12]
 800abe2:	b292      	uxth	r2, r2
 800abe4:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800abea:	4b54      	ldr	r3, [pc, #336]	@ (800ad3c <tcp_receive+0x888>)
 800abec:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800abee:	4b53      	ldr	r3, [pc, #332]	@ (800ad3c <tcp_receive+0x888>)
 800abf0:	68db      	ldr	r3, [r3, #12]
 800abf2:	899b      	ldrh	r3, [r3, #12]
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7fa ff7a 	bl	8005af0 <lwip_htons>
 800abfc:	4603      	mov	r3, r0
 800abfe:	b2db      	uxtb	r3, r3
 800ac00:	f003 0302 	and.w	r3, r3, #2
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d005      	beq.n	800ac14 <tcp_receive+0x760>
            inseg.len -= 1;
 800ac08:	4b4c      	ldr	r3, [pc, #304]	@ (800ad3c <tcp_receive+0x888>)
 800ac0a:	891b      	ldrh	r3, [r3, #8]
 800ac0c:	3b01      	subs	r3, #1
 800ac0e:	b29a      	uxth	r2, r3
 800ac10:	4b4a      	ldr	r3, [pc, #296]	@ (800ad3c <tcp_receive+0x888>)
 800ac12:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ac14:	4b49      	ldr	r3, [pc, #292]	@ (800ad3c <tcp_receive+0x888>)
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	4a48      	ldr	r2, [pc, #288]	@ (800ad3c <tcp_receive+0x888>)
 800ac1a:	8912      	ldrh	r2, [r2, #8]
 800ac1c:	4611      	mov	r1, r2
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7fc f93e 	bl	8006ea0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ac24:	4b45      	ldr	r3, [pc, #276]	@ (800ad3c <tcp_receive+0x888>)
 800ac26:	891c      	ldrh	r4, [r3, #8]
 800ac28:	4b44      	ldr	r3, [pc, #272]	@ (800ad3c <tcp_receive+0x888>)
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	899b      	ldrh	r3, [r3, #12]
 800ac2e:	b29b      	uxth	r3, r3
 800ac30:	4618      	mov	r0, r3
 800ac32:	f7fa ff5d 	bl	8005af0 <lwip_htons>
 800ac36:	4603      	mov	r3, r0
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	f003 0303 	and.w	r3, r3, #3
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d001      	beq.n	800ac46 <tcp_receive+0x792>
 800ac42:	2301      	movs	r3, #1
 800ac44:	e000      	b.n	800ac48 <tcp_receive+0x794>
 800ac46:	2300      	movs	r3, #0
 800ac48:	4423      	add	r3, r4
 800ac4a:	b29a      	uxth	r2, r3
 800ac4c:	4b3c      	ldr	r3, [pc, #240]	@ (800ad40 <tcp_receive+0x88c>)
 800ac4e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ac50:	4b3b      	ldr	r3, [pc, #236]	@ (800ad40 <tcp_receive+0x88c>)
 800ac52:	881b      	ldrh	r3, [r3, #0]
 800ac54:	461a      	mov	r2, r3
 800ac56:	4b38      	ldr	r3, [pc, #224]	@ (800ad38 <tcp_receive+0x884>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	441a      	add	r2, r3
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac60:	6879      	ldr	r1, [r7, #4]
 800ac62:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ac64:	440b      	add	r3, r1
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d006      	beq.n	800ac78 <tcp_receive+0x7c4>
 800ac6a:	4b36      	ldr	r3, [pc, #216]	@ (800ad44 <tcp_receive+0x890>)
 800ac6c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800ac70:	4935      	ldr	r1, [pc, #212]	@ (800ad48 <tcp_receive+0x894>)
 800ac72:	4836      	ldr	r0, [pc, #216]	@ (800ad4c <tcp_receive+0x898>)
 800ac74:	f005 f91a 	bl	800feac <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	f000 80e6 	beq.w	800ae4e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ac82:	4b2e      	ldr	r3, [pc, #184]	@ (800ad3c <tcp_receive+0x888>)
 800ac84:	68db      	ldr	r3, [r3, #12]
 800ac86:	899b      	ldrh	r3, [r3, #12]
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7fa ff30 	bl	8005af0 <lwip_htons>
 800ac90:	4603      	mov	r3, r0
 800ac92:	b2db      	uxtb	r3, r3
 800ac94:	f003 0301 	and.w	r3, r3, #1
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d010      	beq.n	800acbe <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ac9c:	e00a      	b.n	800acb4 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aca2:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800acae:	68f8      	ldr	r0, [r7, #12]
 800acb0:	f7fd fd93 	bl	80087da <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d1f0      	bne.n	800ac9e <tcp_receive+0x7ea>
 800acbc:	e0c7      	b.n	800ae4e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800acc4:	e051      	b.n	800ad6a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800acc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acc8:	68db      	ldr	r3, [r3, #12]
 800acca:	899b      	ldrh	r3, [r3, #12]
 800accc:	b29b      	uxth	r3, r3
 800acce:	4618      	mov	r0, r3
 800acd0:	f7fa ff0e 	bl	8005af0 <lwip_htons>
 800acd4:	4603      	mov	r3, r0
 800acd6:	b2db      	uxtb	r3, r3
 800acd8:	f003 0301 	and.w	r3, r3, #1
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d03c      	beq.n	800ad5a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800ace0:	4b16      	ldr	r3, [pc, #88]	@ (800ad3c <tcp_receive+0x888>)
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	899b      	ldrh	r3, [r3, #12]
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	4618      	mov	r0, r3
 800acea:	f7fa ff01 	bl	8005af0 <lwip_htons>
 800acee:	4603      	mov	r3, r0
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d12f      	bne.n	800ad5a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800acfa:	4b10      	ldr	r3, [pc, #64]	@ (800ad3c <tcp_receive+0x888>)
 800acfc:	68db      	ldr	r3, [r3, #12]
 800acfe:	899b      	ldrh	r3, [r3, #12]
 800ad00:	b29c      	uxth	r4, r3
 800ad02:	2001      	movs	r0, #1
 800ad04:	f7fa fef4 	bl	8005af0 <lwip_htons>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	4b0b      	ldr	r3, [pc, #44]	@ (800ad3c <tcp_receive+0x888>)
 800ad0e:	68db      	ldr	r3, [r3, #12]
 800ad10:	4322      	orrs	r2, r4
 800ad12:	b292      	uxth	r2, r2
 800ad14:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800ad16:	4b09      	ldr	r3, [pc, #36]	@ (800ad3c <tcp_receive+0x888>)
 800ad18:	891c      	ldrh	r4, [r3, #8]
 800ad1a:	4b08      	ldr	r3, [pc, #32]	@ (800ad3c <tcp_receive+0x888>)
 800ad1c:	68db      	ldr	r3, [r3, #12]
 800ad1e:	899b      	ldrh	r3, [r3, #12]
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7fa fee4 	bl	8005af0 <lwip_htons>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	f003 0303 	and.w	r3, r3, #3
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d00d      	beq.n	800ad50 <tcp_receive+0x89c>
 800ad34:	2301      	movs	r3, #1
 800ad36:	e00c      	b.n	800ad52 <tcp_receive+0x89e>
 800ad38:	20008808 	.word	0x20008808
 800ad3c:	200087e8 	.word	0x200087e8
 800ad40:	20008812 	.word	0x20008812
 800ad44:	080123cc 	.word	0x080123cc
 800ad48:	08012774 	.word	0x08012774
 800ad4c:	08012418 	.word	0x08012418
 800ad50:	2300      	movs	r3, #0
 800ad52:	4423      	add	r3, r4
 800ad54:	b29a      	uxth	r2, r3
 800ad56:	4b98      	ldr	r3, [pc, #608]	@ (800afb8 <tcp_receive+0xb04>)
 800ad58:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800ad5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad5c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800ad5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800ad64:	6938      	ldr	r0, [r7, #16]
 800ad66:	f7fd fd38 	bl	80087da <tcp_seg_free>
            while (next &&
 800ad6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d00e      	beq.n	800ad8e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ad70:	4b91      	ldr	r3, [pc, #580]	@ (800afb8 <tcp_receive+0xb04>)
 800ad72:	881b      	ldrh	r3, [r3, #0]
 800ad74:	461a      	mov	r2, r3
 800ad76:	4b91      	ldr	r3, [pc, #580]	@ (800afbc <tcp_receive+0xb08>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	441a      	add	r2, r3
 800ad7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad7e:	68db      	ldr	r3, [r3, #12]
 800ad80:	685b      	ldr	r3, [r3, #4]
 800ad82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ad84:	8909      	ldrh	r1, [r1, #8]
 800ad86:	440b      	add	r3, r1
 800ad88:	1ad3      	subs	r3, r2, r3
            while (next &&
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	da9b      	bge.n	800acc6 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ad8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d059      	beq.n	800ae48 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800ad94:	4b88      	ldr	r3, [pc, #544]	@ (800afb8 <tcp_receive+0xb04>)
 800ad96:	881b      	ldrh	r3, [r3, #0]
 800ad98:	461a      	mov	r2, r3
 800ad9a:	4b88      	ldr	r3, [pc, #544]	@ (800afbc <tcp_receive+0xb08>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	441a      	add	r2, r3
 800ada0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ada2:	68db      	ldr	r3, [r3, #12]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	dd4d      	ble.n	800ae48 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800adac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adae:	68db      	ldr	r3, [r3, #12]
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	b29a      	uxth	r2, r3
 800adb4:	4b81      	ldr	r3, [pc, #516]	@ (800afbc <tcp_receive+0xb08>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	b29b      	uxth	r3, r3
 800adba:	1ad3      	subs	r3, r2, r3
 800adbc:	b29a      	uxth	r2, r3
 800adbe:	4b80      	ldr	r3, [pc, #512]	@ (800afc0 <tcp_receive+0xb0c>)
 800adc0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800adc2:	4b7f      	ldr	r3, [pc, #508]	@ (800afc0 <tcp_receive+0xb0c>)
 800adc4:	68db      	ldr	r3, [r3, #12]
 800adc6:	899b      	ldrh	r3, [r3, #12]
 800adc8:	b29b      	uxth	r3, r3
 800adca:	4618      	mov	r0, r3
 800adcc:	f7fa fe90 	bl	8005af0 <lwip_htons>
 800add0:	4603      	mov	r3, r0
 800add2:	b2db      	uxtb	r3, r3
 800add4:	f003 0302 	and.w	r3, r3, #2
 800add8:	2b00      	cmp	r3, #0
 800adda:	d005      	beq.n	800ade8 <tcp_receive+0x934>
                inseg.len -= 1;
 800addc:	4b78      	ldr	r3, [pc, #480]	@ (800afc0 <tcp_receive+0xb0c>)
 800adde:	891b      	ldrh	r3, [r3, #8]
 800ade0:	3b01      	subs	r3, #1
 800ade2:	b29a      	uxth	r2, r3
 800ade4:	4b76      	ldr	r3, [pc, #472]	@ (800afc0 <tcp_receive+0xb0c>)
 800ade6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ade8:	4b75      	ldr	r3, [pc, #468]	@ (800afc0 <tcp_receive+0xb0c>)
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	4a74      	ldr	r2, [pc, #464]	@ (800afc0 <tcp_receive+0xb0c>)
 800adee:	8912      	ldrh	r2, [r2, #8]
 800adf0:	4611      	mov	r1, r2
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7fc f854 	bl	8006ea0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800adf8:	4b71      	ldr	r3, [pc, #452]	@ (800afc0 <tcp_receive+0xb0c>)
 800adfa:	891c      	ldrh	r4, [r3, #8]
 800adfc:	4b70      	ldr	r3, [pc, #448]	@ (800afc0 <tcp_receive+0xb0c>)
 800adfe:	68db      	ldr	r3, [r3, #12]
 800ae00:	899b      	ldrh	r3, [r3, #12]
 800ae02:	b29b      	uxth	r3, r3
 800ae04:	4618      	mov	r0, r3
 800ae06:	f7fa fe73 	bl	8005af0 <lwip_htons>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	f003 0303 	and.w	r3, r3, #3
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d001      	beq.n	800ae1a <tcp_receive+0x966>
 800ae16:	2301      	movs	r3, #1
 800ae18:	e000      	b.n	800ae1c <tcp_receive+0x968>
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	4423      	add	r3, r4
 800ae1e:	b29a      	uxth	r2, r3
 800ae20:	4b65      	ldr	r3, [pc, #404]	@ (800afb8 <tcp_receive+0xb04>)
 800ae22:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ae24:	4b64      	ldr	r3, [pc, #400]	@ (800afb8 <tcp_receive+0xb04>)
 800ae26:	881b      	ldrh	r3, [r3, #0]
 800ae28:	461a      	mov	r2, r3
 800ae2a:	4b64      	ldr	r3, [pc, #400]	@ (800afbc <tcp_receive+0xb08>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	441a      	add	r2, r3
 800ae30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae32:	68db      	ldr	r3, [r3, #12]
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d006      	beq.n	800ae48 <tcp_receive+0x994>
 800ae3a:	4b62      	ldr	r3, [pc, #392]	@ (800afc4 <tcp_receive+0xb10>)
 800ae3c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800ae40:	4961      	ldr	r1, [pc, #388]	@ (800afc8 <tcp_receive+0xb14>)
 800ae42:	4862      	ldr	r0, [pc, #392]	@ (800afcc <tcp_receive+0xb18>)
 800ae44:	f005 f832 	bl	800feac <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ae4c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ae4e:	4b5a      	ldr	r3, [pc, #360]	@ (800afb8 <tcp_receive+0xb04>)
 800ae50:	881b      	ldrh	r3, [r3, #0]
 800ae52:	461a      	mov	r2, r3
 800ae54:	4b59      	ldr	r3, [pc, #356]	@ (800afbc <tcp_receive+0xb08>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	441a      	add	r2, r3
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ae62:	4b55      	ldr	r3, [pc, #340]	@ (800afb8 <tcp_receive+0xb04>)
 800ae64:	881b      	ldrh	r3, [r3, #0]
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d206      	bcs.n	800ae78 <tcp_receive+0x9c4>
 800ae6a:	4b56      	ldr	r3, [pc, #344]	@ (800afc4 <tcp_receive+0xb10>)
 800ae6c:	f240 6207 	movw	r2, #1543	@ 0x607
 800ae70:	4957      	ldr	r1, [pc, #348]	@ (800afd0 <tcp_receive+0xb1c>)
 800ae72:	4856      	ldr	r0, [pc, #344]	@ (800afcc <tcp_receive+0xb18>)
 800ae74:	f005 f81a 	bl	800feac <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ae7c:	4b4e      	ldr	r3, [pc, #312]	@ (800afb8 <tcp_receive+0xb04>)
 800ae7e:	881b      	ldrh	r3, [r3, #0]
 800ae80:	1ad3      	subs	r3, r2, r3
 800ae82:	b29a      	uxth	r2, r3
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f7fc ffc5 	bl	8007e18 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800ae8e:	4b4c      	ldr	r3, [pc, #304]	@ (800afc0 <tcp_receive+0xb0c>)
 800ae90:	685b      	ldr	r3, [r3, #4]
 800ae92:	891b      	ldrh	r3, [r3, #8]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d006      	beq.n	800aea6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800ae98:	4b49      	ldr	r3, [pc, #292]	@ (800afc0 <tcp_receive+0xb0c>)
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	4a4d      	ldr	r2, [pc, #308]	@ (800afd4 <tcp_receive+0xb20>)
 800ae9e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800aea0:	4b47      	ldr	r3, [pc, #284]	@ (800afc0 <tcp_receive+0xb0c>)
 800aea2:	2200      	movs	r2, #0
 800aea4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800aea6:	4b46      	ldr	r3, [pc, #280]	@ (800afc0 <tcp_receive+0xb0c>)
 800aea8:	68db      	ldr	r3, [r3, #12]
 800aeaa:	899b      	ldrh	r3, [r3, #12]
 800aeac:	b29b      	uxth	r3, r3
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f7fa fe1e 	bl	8005af0 <lwip_htons>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	b2db      	uxtb	r3, r3
 800aeb8:	f003 0301 	and.w	r3, r3, #1
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	f000 80b8 	beq.w	800b032 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800aec2:	4b45      	ldr	r3, [pc, #276]	@ (800afd8 <tcp_receive+0xb24>)
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	f043 0320 	orr.w	r3, r3, #32
 800aeca:	b2da      	uxtb	r2, r3
 800aecc:	4b42      	ldr	r3, [pc, #264]	@ (800afd8 <tcp_receive+0xb24>)
 800aece:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800aed0:	e0af      	b.n	800b032 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aed6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	4a36      	ldr	r2, [pc, #216]	@ (800afbc <tcp_receive+0xb08>)
 800aee2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	891b      	ldrh	r3, [r3, #8]
 800aee8:	461c      	mov	r4, r3
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	68db      	ldr	r3, [r3, #12]
 800aeee:	899b      	ldrh	r3, [r3, #12]
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7fa fdfc 	bl	8005af0 <lwip_htons>
 800aef8:	4603      	mov	r3, r0
 800aefa:	b2db      	uxtb	r3, r3
 800aefc:	f003 0303 	and.w	r3, r3, #3
 800af00:	2b00      	cmp	r3, #0
 800af02:	d001      	beq.n	800af08 <tcp_receive+0xa54>
 800af04:	2301      	movs	r3, #1
 800af06:	e000      	b.n	800af0a <tcp_receive+0xa56>
 800af08:	2300      	movs	r3, #0
 800af0a:	191a      	adds	r2, r3, r4
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af10:	441a      	add	r2, r3
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af1a:	461c      	mov	r4, r3
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	891b      	ldrh	r3, [r3, #8]
 800af20:	461d      	mov	r5, r3
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	68db      	ldr	r3, [r3, #12]
 800af26:	899b      	ldrh	r3, [r3, #12]
 800af28:	b29b      	uxth	r3, r3
 800af2a:	4618      	mov	r0, r3
 800af2c:	f7fa fde0 	bl	8005af0 <lwip_htons>
 800af30:	4603      	mov	r3, r0
 800af32:	b2db      	uxtb	r3, r3
 800af34:	f003 0303 	and.w	r3, r3, #3
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d001      	beq.n	800af40 <tcp_receive+0xa8c>
 800af3c:	2301      	movs	r3, #1
 800af3e:	e000      	b.n	800af42 <tcp_receive+0xa8e>
 800af40:	2300      	movs	r3, #0
 800af42:	442b      	add	r3, r5
 800af44:	429c      	cmp	r4, r3
 800af46:	d206      	bcs.n	800af56 <tcp_receive+0xaa2>
 800af48:	4b1e      	ldr	r3, [pc, #120]	@ (800afc4 <tcp_receive+0xb10>)
 800af4a:	f240 622b 	movw	r2, #1579	@ 0x62b
 800af4e:	4923      	ldr	r1, [pc, #140]	@ (800afdc <tcp_receive+0xb28>)
 800af50:	481e      	ldr	r0, [pc, #120]	@ (800afcc <tcp_receive+0xb18>)
 800af52:	f004 ffab 	bl	800feac <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	891b      	ldrh	r3, [r3, #8]
 800af5a:	461c      	mov	r4, r3
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	68db      	ldr	r3, [r3, #12]
 800af60:	899b      	ldrh	r3, [r3, #12]
 800af62:	b29b      	uxth	r3, r3
 800af64:	4618      	mov	r0, r3
 800af66:	f7fa fdc3 	bl	8005af0 <lwip_htons>
 800af6a:	4603      	mov	r3, r0
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	f003 0303 	and.w	r3, r3, #3
 800af72:	2b00      	cmp	r3, #0
 800af74:	d001      	beq.n	800af7a <tcp_receive+0xac6>
 800af76:	2301      	movs	r3, #1
 800af78:	e000      	b.n	800af7c <tcp_receive+0xac8>
 800af7a:	2300      	movs	r3, #0
 800af7c:	1919      	adds	r1, r3, r4
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800af82:	b28b      	uxth	r3, r1
 800af84:	1ad3      	subs	r3, r2, r3
 800af86:	b29a      	uxth	r2, r3
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f7fc ff43 	bl	8007e18 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	891b      	ldrh	r3, [r3, #8]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d028      	beq.n	800afee <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800af9c:	4b0d      	ldr	r3, [pc, #52]	@ (800afd4 <tcp_receive+0xb20>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d01d      	beq.n	800afe0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800afa4:	4b0b      	ldr	r3, [pc, #44]	@ (800afd4 <tcp_receive+0xb20>)
 800afa6:	681a      	ldr	r2, [r3, #0]
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	4619      	mov	r1, r3
 800afae:	4610      	mov	r0, r2
 800afb0:	f7fc f9be 	bl	8007330 <pbuf_cat>
 800afb4:	e018      	b.n	800afe8 <tcp_receive+0xb34>
 800afb6:	bf00      	nop
 800afb8:	20008812 	.word	0x20008812
 800afbc:	20008808 	.word	0x20008808
 800afc0:	200087e8 	.word	0x200087e8
 800afc4:	080123cc 	.word	0x080123cc
 800afc8:	080127ac 	.word	0x080127ac
 800afcc:	08012418 	.word	0x08012418
 800afd0:	080127e8 	.word	0x080127e8
 800afd4:	20008818 	.word	0x20008818
 800afd8:	20008815 	.word	0x20008815
 800afdc:	08012808 	.word	0x08012808
            } else {
              recv_data = cseg->p;
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	4a70      	ldr	r2, [pc, #448]	@ (800b1a8 <tcp_receive+0xcf4>)
 800afe6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	2200      	movs	r2, #0
 800afec:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	68db      	ldr	r3, [r3, #12]
 800aff2:	899b      	ldrh	r3, [r3, #12]
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7fa fd7a 	bl	8005af0 <lwip_htons>
 800affc:	4603      	mov	r3, r0
 800affe:	b2db      	uxtb	r3, r3
 800b000:	f003 0301 	and.w	r3, r3, #1
 800b004:	2b00      	cmp	r3, #0
 800b006:	d00d      	beq.n	800b024 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800b008:	4b68      	ldr	r3, [pc, #416]	@ (800b1ac <tcp_receive+0xcf8>)
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	f043 0320 	orr.w	r3, r3, #32
 800b010:	b2da      	uxtb	r2, r3
 800b012:	4b66      	ldr	r3, [pc, #408]	@ (800b1ac <tcp_receive+0xcf8>)
 800b014:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	7d1b      	ldrb	r3, [r3, #20]
 800b01a:	2b04      	cmp	r3, #4
 800b01c:	d102      	bne.n	800b024 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2207      	movs	r2, #7
 800b022:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	681a      	ldr	r2, [r3, #0]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800b02c:	68b8      	ldr	r0, [r7, #8]
 800b02e:	f7fd fbd4 	bl	80087da <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b036:	2b00      	cmp	r3, #0
 800b038:	d008      	beq.n	800b04c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b03e:	68db      	ldr	r3, [r3, #12]
 800b040:	685a      	ldr	r2, [r3, #4]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800b046:	429a      	cmp	r2, r3
 800b048:	f43f af43 	beq.w	800aed2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	8b5b      	ldrh	r3, [r3, #26]
 800b050:	f003 0301 	and.w	r3, r3, #1
 800b054:	2b00      	cmp	r3, #0
 800b056:	d00e      	beq.n	800b076 <tcp_receive+0xbc2>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	8b5b      	ldrh	r3, [r3, #26]
 800b05c:	f023 0301 	bic.w	r3, r3, #1
 800b060:	b29a      	uxth	r2, r3
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	835a      	strh	r2, [r3, #26]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	8b5b      	ldrh	r3, [r3, #26]
 800b06a:	f043 0302 	orr.w	r3, r3, #2
 800b06e:	b29a      	uxth	r2, r3
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b074:	e187      	b.n	800b386 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	8b5b      	ldrh	r3, [r3, #26]
 800b07a:	f043 0301 	orr.w	r3, r3, #1
 800b07e:	b29a      	uxth	r2, r3
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b084:	e17f      	b.n	800b386 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d106      	bne.n	800b09c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800b08e:	4848      	ldr	r0, [pc, #288]	@ (800b1b0 <tcp_receive+0xcfc>)
 800b090:	f7fd fbbc 	bl	800880c <tcp_seg_copy>
 800b094:	4602      	mov	r2, r0
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	675a      	str	r2, [r3, #116]	@ 0x74
 800b09a:	e16c      	b.n	800b376 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800b09c:	2300      	movs	r3, #0
 800b09e:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b0a6:	e156      	b.n	800b356 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800b0a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0aa:	68db      	ldr	r3, [r3, #12]
 800b0ac:	685a      	ldr	r2, [r3, #4]
 800b0ae:	4b41      	ldr	r3, [pc, #260]	@ (800b1b4 <tcp_receive+0xd00>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d11d      	bne.n	800b0f2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800b0b6:	4b3e      	ldr	r3, [pc, #248]	@ (800b1b0 <tcp_receive+0xcfc>)
 800b0b8:	891a      	ldrh	r2, [r3, #8]
 800b0ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0bc:	891b      	ldrh	r3, [r3, #8]
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	f240 814e 	bls.w	800b360 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b0c4:	483a      	ldr	r0, [pc, #232]	@ (800b1b0 <tcp_receive+0xcfc>)
 800b0c6:	f7fd fba1 	bl	800880c <tcp_seg_copy>
 800b0ca:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	f000 8148 	beq.w	800b364 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800b0d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d003      	beq.n	800b0e2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800b0da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0dc:	697a      	ldr	r2, [r7, #20]
 800b0de:	601a      	str	r2, [r3, #0]
 800b0e0:	e002      	b.n	800b0e8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	697a      	ldr	r2, [r7, #20]
 800b0e6:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800b0e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b0ea:	6978      	ldr	r0, [r7, #20]
 800b0ec:	f7ff f8de 	bl	800a2ac <tcp_oos_insert_segment>
                }
                break;
 800b0f0:	e138      	b.n	800b364 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800b0f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d117      	bne.n	800b128 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800b0f8:	4b2e      	ldr	r3, [pc, #184]	@ (800b1b4 <tcp_receive+0xd00>)
 800b0fa:	681a      	ldr	r2, [r3, #0]
 800b0fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0fe:	68db      	ldr	r3, [r3, #12]
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	1ad3      	subs	r3, r2, r3
 800b104:	2b00      	cmp	r3, #0
 800b106:	da57      	bge.n	800b1b8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b108:	4829      	ldr	r0, [pc, #164]	@ (800b1b0 <tcp_receive+0xcfc>)
 800b10a:	f7fd fb7f 	bl	800880c <tcp_seg_copy>
 800b10e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800b110:	69bb      	ldr	r3, [r7, #24]
 800b112:	2b00      	cmp	r3, #0
 800b114:	f000 8128 	beq.w	800b368 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	69ba      	ldr	r2, [r7, #24]
 800b11c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800b11e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b120:	69b8      	ldr	r0, [r7, #24]
 800b122:	f7ff f8c3 	bl	800a2ac <tcp_oos_insert_segment>
                  }
                  break;
 800b126:	e11f      	b.n	800b368 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800b128:	4b22      	ldr	r3, [pc, #136]	@ (800b1b4 <tcp_receive+0xd00>)
 800b12a:	681a      	ldr	r2, [r3, #0]
 800b12c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b12e:	68db      	ldr	r3, [r3, #12]
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	1ad3      	subs	r3, r2, r3
 800b134:	3b01      	subs	r3, #1
 800b136:	2b00      	cmp	r3, #0
 800b138:	db3e      	blt.n	800b1b8 <tcp_receive+0xd04>
 800b13a:	4b1e      	ldr	r3, [pc, #120]	@ (800b1b4 <tcp_receive+0xd00>)
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	685b      	ldr	r3, [r3, #4]
 800b144:	1ad3      	subs	r3, r2, r3
 800b146:	3301      	adds	r3, #1
 800b148:	2b00      	cmp	r3, #0
 800b14a:	dc35      	bgt.n	800b1b8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b14c:	4818      	ldr	r0, [pc, #96]	@ (800b1b0 <tcp_receive+0xcfc>)
 800b14e:	f7fd fb5d 	bl	800880c <tcp_seg_copy>
 800b152:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800b154:	69fb      	ldr	r3, [r7, #28]
 800b156:	2b00      	cmp	r3, #0
 800b158:	f000 8108 	beq.w	800b36c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800b15c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b15e:	68db      	ldr	r3, [r3, #12]
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b164:	8912      	ldrh	r2, [r2, #8]
 800b166:	441a      	add	r2, r3
 800b168:	4b12      	ldr	r3, [pc, #72]	@ (800b1b4 <tcp_receive+0xd00>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	1ad3      	subs	r3, r2, r3
 800b16e:	2b00      	cmp	r3, #0
 800b170:	dd12      	ble.n	800b198 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800b172:	4b10      	ldr	r3, [pc, #64]	@ (800b1b4 <tcp_receive+0xd00>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	b29a      	uxth	r2, r3
 800b178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b17a:	68db      	ldr	r3, [r3, #12]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	b29b      	uxth	r3, r3
 800b180:	1ad3      	subs	r3, r2, r3
 800b182:	b29a      	uxth	r2, r3
 800b184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b186:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800b188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b18a:	685a      	ldr	r2, [r3, #4]
 800b18c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b18e:	891b      	ldrh	r3, [r3, #8]
 800b190:	4619      	mov	r1, r3
 800b192:	4610      	mov	r0, r2
 800b194:	f7fb fe84 	bl	8006ea0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800b198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b19a:	69fa      	ldr	r2, [r7, #28]
 800b19c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800b19e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b1a0:	69f8      	ldr	r0, [r7, #28]
 800b1a2:	f7ff f883 	bl	800a2ac <tcp_oos_insert_segment>
                  }
                  break;
 800b1a6:	e0e1      	b.n	800b36c <tcp_receive+0xeb8>
 800b1a8:	20008818 	.word	0x20008818
 800b1ac:	20008815 	.word	0x20008815
 800b1b0:	200087e8 	.word	0x200087e8
 800b1b4:	20008808 	.word	0x20008808
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800b1b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ba:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800b1bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	f040 80c5 	bne.w	800b350 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800b1c6:	4b7f      	ldr	r3, [pc, #508]	@ (800b3c4 <tcp_receive+0xf10>)
 800b1c8:	681a      	ldr	r2, [r3, #0]
 800b1ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	f340 80bc 	ble.w	800b350 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b1d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1da:	68db      	ldr	r3, [r3, #12]
 800b1dc:	899b      	ldrh	r3, [r3, #12]
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f7fa fc85 	bl	8005af0 <lwip_htons>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	b2db      	uxtb	r3, r3
 800b1ea:	f003 0301 	and.w	r3, r3, #1
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	f040 80be 	bne.w	800b370 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800b1f4:	4874      	ldr	r0, [pc, #464]	@ (800b3c8 <tcp_receive+0xf14>)
 800b1f6:	f7fd fb09 	bl	800880c <tcp_seg_copy>
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1fe:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800b200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	2b00      	cmp	r3, #0
 800b206:	f000 80b5 	beq.w	800b374 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800b20a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b20c:	68db      	ldr	r3, [r3, #12]
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b212:	8912      	ldrh	r2, [r2, #8]
 800b214:	441a      	add	r2, r3
 800b216:	4b6b      	ldr	r3, [pc, #428]	@ (800b3c4 <tcp_receive+0xf10>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	1ad3      	subs	r3, r2, r3
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	dd12      	ble.n	800b246 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800b220:	4b68      	ldr	r3, [pc, #416]	@ (800b3c4 <tcp_receive+0xf10>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	b29a      	uxth	r2, r3
 800b226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b228:	68db      	ldr	r3, [r3, #12]
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	1ad3      	subs	r3, r2, r3
 800b230:	b29a      	uxth	r2, r3
 800b232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b234:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800b236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b238:	685a      	ldr	r2, [r3, #4]
 800b23a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b23c:	891b      	ldrh	r3, [r3, #8]
 800b23e:	4619      	mov	r1, r3
 800b240:	4610      	mov	r0, r2
 800b242:	f7fb fe2d 	bl	8006ea0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800b246:	4b61      	ldr	r3, [pc, #388]	@ (800b3cc <tcp_receive+0xf18>)
 800b248:	881b      	ldrh	r3, [r3, #0]
 800b24a:	461a      	mov	r2, r3
 800b24c:	4b5d      	ldr	r3, [pc, #372]	@ (800b3c4 <tcp_receive+0xf10>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	441a      	add	r2, r3
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b256:	6879      	ldr	r1, [r7, #4]
 800b258:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b25a:	440b      	add	r3, r1
 800b25c:	1ad3      	subs	r3, r2, r3
 800b25e:	2b00      	cmp	r3, #0
 800b260:	f340 8088 	ble.w	800b374 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800b264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	68db      	ldr	r3, [r3, #12]
 800b26a:	899b      	ldrh	r3, [r3, #12]
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	4618      	mov	r0, r3
 800b270:	f7fa fc3e 	bl	8005af0 <lwip_htons>
 800b274:	4603      	mov	r3, r0
 800b276:	b2db      	uxtb	r3, r3
 800b278:	f003 0301 	and.w	r3, r3, #1
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d021      	beq.n	800b2c4 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800b280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	68db      	ldr	r3, [r3, #12]
 800b286:	899b      	ldrh	r3, [r3, #12]
 800b288:	b29b      	uxth	r3, r3
 800b28a:	b21b      	sxth	r3, r3
 800b28c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b290:	b21c      	sxth	r4, r3
 800b292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	68db      	ldr	r3, [r3, #12]
 800b298:	899b      	ldrh	r3, [r3, #12]
 800b29a:	b29b      	uxth	r3, r3
 800b29c:	4618      	mov	r0, r3
 800b29e:	f7fa fc27 	bl	8005af0 <lwip_htons>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	b2db      	uxtb	r3, r3
 800b2a6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f7fa fc1f 	bl	8005af0 <lwip_htons>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	b21b      	sxth	r3, r3
 800b2b6:	4323      	orrs	r3, r4
 800b2b8:	b21a      	sxth	r2, r3
 800b2ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	68db      	ldr	r3, [r3, #12]
 800b2c0:	b292      	uxth	r2, r2
 800b2c2:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2c8:	b29a      	uxth	r2, r3
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b2ce:	4413      	add	r3, r2
 800b2d0:	b299      	uxth	r1, r3
 800b2d2:	4b3c      	ldr	r3, [pc, #240]	@ (800b3c4 <tcp_receive+0xf10>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	b29a      	uxth	r2, r3
 800b2d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	1a8a      	subs	r2, r1, r2
 800b2de:	b292      	uxth	r2, r2
 800b2e0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800b2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	685a      	ldr	r2, [r3, #4]
 800b2e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	891b      	ldrh	r3, [r3, #8]
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	4610      	mov	r0, r2
 800b2f2:	f7fb fdd5 	bl	8006ea0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800b2f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	891c      	ldrh	r4, [r3, #8]
 800b2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	68db      	ldr	r3, [r3, #12]
 800b302:	899b      	ldrh	r3, [r3, #12]
 800b304:	b29b      	uxth	r3, r3
 800b306:	4618      	mov	r0, r3
 800b308:	f7fa fbf2 	bl	8005af0 <lwip_htons>
 800b30c:	4603      	mov	r3, r0
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	f003 0303 	and.w	r3, r3, #3
 800b314:	2b00      	cmp	r3, #0
 800b316:	d001      	beq.n	800b31c <tcp_receive+0xe68>
 800b318:	2301      	movs	r3, #1
 800b31a:	e000      	b.n	800b31e <tcp_receive+0xe6a>
 800b31c:	2300      	movs	r3, #0
 800b31e:	4423      	add	r3, r4
 800b320:	b29a      	uxth	r2, r3
 800b322:	4b2a      	ldr	r3, [pc, #168]	@ (800b3cc <tcp_receive+0xf18>)
 800b324:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b326:	4b29      	ldr	r3, [pc, #164]	@ (800b3cc <tcp_receive+0xf18>)
 800b328:	881b      	ldrh	r3, [r3, #0]
 800b32a:	461a      	mov	r2, r3
 800b32c:	4b25      	ldr	r3, [pc, #148]	@ (800b3c4 <tcp_receive+0xf10>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	441a      	add	r2, r3
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b336:	6879      	ldr	r1, [r7, #4]
 800b338:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b33a:	440b      	add	r3, r1
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d019      	beq.n	800b374 <tcp_receive+0xec0>
 800b340:	4b23      	ldr	r3, [pc, #140]	@ (800b3d0 <tcp_receive+0xf1c>)
 800b342:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800b346:	4923      	ldr	r1, [pc, #140]	@ (800b3d4 <tcp_receive+0xf20>)
 800b348:	4823      	ldr	r0, [pc, #140]	@ (800b3d8 <tcp_receive+0xf24>)
 800b34a:	f004 fdaf 	bl	800feac <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800b34e:	e011      	b.n	800b374 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b358:	2b00      	cmp	r3, #0
 800b35a:	f47f aea5 	bne.w	800b0a8 <tcp_receive+0xbf4>
 800b35e:	e00a      	b.n	800b376 <tcp_receive+0xec2>
                break;
 800b360:	bf00      	nop
 800b362:	e008      	b.n	800b376 <tcp_receive+0xec2>
                break;
 800b364:	bf00      	nop
 800b366:	e006      	b.n	800b376 <tcp_receive+0xec2>
                  break;
 800b368:	bf00      	nop
 800b36a:	e004      	b.n	800b376 <tcp_receive+0xec2>
                  break;
 800b36c:	bf00      	nop
 800b36e:	e002      	b.n	800b376 <tcp_receive+0xec2>
                  break;
 800b370:	bf00      	nop
 800b372:	e000      	b.n	800b376 <tcp_receive+0xec2>
                break;
 800b374:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f001 fa30 	bl	800c7dc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800b37c:	e003      	b.n	800b386 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f001 fa2c 	bl	800c7dc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b384:	e01a      	b.n	800b3bc <tcp_receive+0xf08>
 800b386:	e019      	b.n	800b3bc <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800b388:	4b0e      	ldr	r3, [pc, #56]	@ (800b3c4 <tcp_receive+0xf10>)
 800b38a:	681a      	ldr	r2, [r3, #0]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b390:	1ad3      	subs	r3, r2, r3
 800b392:	2b00      	cmp	r3, #0
 800b394:	db0a      	blt.n	800b3ac <tcp_receive+0xef8>
 800b396:	4b0b      	ldr	r3, [pc, #44]	@ (800b3c4 <tcp_receive+0xf10>)
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b39e:	6879      	ldr	r1, [r7, #4]
 800b3a0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b3a2:	440b      	add	r3, r1
 800b3a4:	1ad3      	subs	r3, r2, r3
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	dd07      	ble.n	800b3bc <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	8b5b      	ldrh	r3, [r3, #26]
 800b3b0:	f043 0302 	orr.w	r3, r3, #2
 800b3b4:	b29a      	uxth	r2, r3
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800b3ba:	e7ff      	b.n	800b3bc <tcp_receive+0xf08>
 800b3bc:	bf00      	nop
 800b3be:	3750      	adds	r7, #80	@ 0x50
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bdb0      	pop	{r4, r5, r7, pc}
 800b3c4:	20008808 	.word	0x20008808
 800b3c8:	200087e8 	.word	0x200087e8
 800b3cc:	20008812 	.word	0x20008812
 800b3d0:	080123cc 	.word	0x080123cc
 800b3d4:	08012774 	.word	0x08012774
 800b3d8:	08012418 	.word	0x08012418

0800b3dc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b083      	sub	sp, #12
 800b3e0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800b3e2:	4b15      	ldr	r3, [pc, #84]	@ (800b438 <tcp_get_next_optbyte+0x5c>)
 800b3e4:	881b      	ldrh	r3, [r3, #0]
 800b3e6:	1c5a      	adds	r2, r3, #1
 800b3e8:	b291      	uxth	r1, r2
 800b3ea:	4a13      	ldr	r2, [pc, #76]	@ (800b438 <tcp_get_next_optbyte+0x5c>)
 800b3ec:	8011      	strh	r1, [r2, #0]
 800b3ee:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800b3f0:	4b12      	ldr	r3, [pc, #72]	@ (800b43c <tcp_get_next_optbyte+0x60>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d004      	beq.n	800b402 <tcp_get_next_optbyte+0x26>
 800b3f8:	4b11      	ldr	r3, [pc, #68]	@ (800b440 <tcp_get_next_optbyte+0x64>)
 800b3fa:	881b      	ldrh	r3, [r3, #0]
 800b3fc:	88fa      	ldrh	r2, [r7, #6]
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d208      	bcs.n	800b414 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800b402:	4b10      	ldr	r3, [pc, #64]	@ (800b444 <tcp_get_next_optbyte+0x68>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	3314      	adds	r3, #20
 800b408:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800b40a:	88fb      	ldrh	r3, [r7, #6]
 800b40c:	683a      	ldr	r2, [r7, #0]
 800b40e:	4413      	add	r3, r2
 800b410:	781b      	ldrb	r3, [r3, #0]
 800b412:	e00b      	b.n	800b42c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800b414:	88fb      	ldrh	r3, [r7, #6]
 800b416:	b2da      	uxtb	r2, r3
 800b418:	4b09      	ldr	r3, [pc, #36]	@ (800b440 <tcp_get_next_optbyte+0x64>)
 800b41a:	881b      	ldrh	r3, [r3, #0]
 800b41c:	b2db      	uxtb	r3, r3
 800b41e:	1ad3      	subs	r3, r2, r3
 800b420:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800b422:	4b06      	ldr	r3, [pc, #24]	@ (800b43c <tcp_get_next_optbyte+0x60>)
 800b424:	681a      	ldr	r2, [r3, #0]
 800b426:	797b      	ldrb	r3, [r7, #5]
 800b428:	4413      	add	r3, r2
 800b42a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	370c      	adds	r7, #12
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr
 800b438:	20008804 	.word	0x20008804
 800b43c:	20008800 	.word	0x20008800
 800b440:	200087fe 	.word	0x200087fe
 800b444:	200087f8 	.word	0x200087f8

0800b448 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b084      	sub	sp, #16
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d106      	bne.n	800b464 <tcp_parseopt+0x1c>
 800b456:	4b32      	ldr	r3, [pc, #200]	@ (800b520 <tcp_parseopt+0xd8>)
 800b458:	f240 727d 	movw	r2, #1917	@ 0x77d
 800b45c:	4931      	ldr	r1, [pc, #196]	@ (800b524 <tcp_parseopt+0xdc>)
 800b45e:	4832      	ldr	r0, [pc, #200]	@ (800b528 <tcp_parseopt+0xe0>)
 800b460:	f004 fd24 	bl	800feac <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800b464:	4b31      	ldr	r3, [pc, #196]	@ (800b52c <tcp_parseopt+0xe4>)
 800b466:	881b      	ldrh	r3, [r3, #0]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d056      	beq.n	800b51a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b46c:	4b30      	ldr	r3, [pc, #192]	@ (800b530 <tcp_parseopt+0xe8>)
 800b46e:	2200      	movs	r2, #0
 800b470:	801a      	strh	r2, [r3, #0]
 800b472:	e046      	b.n	800b502 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800b474:	f7ff ffb2 	bl	800b3dc <tcp_get_next_optbyte>
 800b478:	4603      	mov	r3, r0
 800b47a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800b47c:	7bfb      	ldrb	r3, [r7, #15]
 800b47e:	2b02      	cmp	r3, #2
 800b480:	d006      	beq.n	800b490 <tcp_parseopt+0x48>
 800b482:	2b02      	cmp	r3, #2
 800b484:	dc2a      	bgt.n	800b4dc <tcp_parseopt+0x94>
 800b486:	2b00      	cmp	r3, #0
 800b488:	d042      	beq.n	800b510 <tcp_parseopt+0xc8>
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	d038      	beq.n	800b500 <tcp_parseopt+0xb8>
 800b48e:	e025      	b.n	800b4dc <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b490:	f7ff ffa4 	bl	800b3dc <tcp_get_next_optbyte>
 800b494:	4603      	mov	r3, r0
 800b496:	2b04      	cmp	r3, #4
 800b498:	d13c      	bne.n	800b514 <tcp_parseopt+0xcc>
 800b49a:	4b25      	ldr	r3, [pc, #148]	@ (800b530 <tcp_parseopt+0xe8>)
 800b49c:	881b      	ldrh	r3, [r3, #0]
 800b49e:	3301      	adds	r3, #1
 800b4a0:	4a22      	ldr	r2, [pc, #136]	@ (800b52c <tcp_parseopt+0xe4>)
 800b4a2:	8812      	ldrh	r2, [r2, #0]
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	da35      	bge.n	800b514 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800b4a8:	f7ff ff98 	bl	800b3dc <tcp_get_next_optbyte>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	021b      	lsls	r3, r3, #8
 800b4b0:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800b4b2:	f7ff ff93 	bl	800b3dc <tcp_get_next_optbyte>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	461a      	mov	r2, r3
 800b4ba:	89bb      	ldrh	r3, [r7, #12]
 800b4bc:	4313      	orrs	r3, r2
 800b4be:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b4c0:	89bb      	ldrh	r3, [r7, #12]
 800b4c2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800b4c6:	d804      	bhi.n	800b4d2 <tcp_parseopt+0x8a>
 800b4c8:	89bb      	ldrh	r3, [r7, #12]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d001      	beq.n	800b4d2 <tcp_parseopt+0x8a>
 800b4ce:	89ba      	ldrh	r2, [r7, #12]
 800b4d0:	e001      	b.n	800b4d6 <tcp_parseopt+0x8e>
 800b4d2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800b4da:	e012      	b.n	800b502 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800b4dc:	f7ff ff7e 	bl	800b3dc <tcp_get_next_optbyte>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800b4e4:	7afb      	ldrb	r3, [r7, #11]
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	d916      	bls.n	800b518 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800b4ea:	7afb      	ldrb	r3, [r7, #11]
 800b4ec:	b29a      	uxth	r2, r3
 800b4ee:	4b10      	ldr	r3, [pc, #64]	@ (800b530 <tcp_parseopt+0xe8>)
 800b4f0:	881b      	ldrh	r3, [r3, #0]
 800b4f2:	4413      	add	r3, r2
 800b4f4:	b29b      	uxth	r3, r3
 800b4f6:	3b02      	subs	r3, #2
 800b4f8:	b29a      	uxth	r2, r3
 800b4fa:	4b0d      	ldr	r3, [pc, #52]	@ (800b530 <tcp_parseopt+0xe8>)
 800b4fc:	801a      	strh	r2, [r3, #0]
 800b4fe:	e000      	b.n	800b502 <tcp_parseopt+0xba>
          break;
 800b500:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b502:	4b0b      	ldr	r3, [pc, #44]	@ (800b530 <tcp_parseopt+0xe8>)
 800b504:	881a      	ldrh	r2, [r3, #0]
 800b506:	4b09      	ldr	r3, [pc, #36]	@ (800b52c <tcp_parseopt+0xe4>)
 800b508:	881b      	ldrh	r3, [r3, #0]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d3b2      	bcc.n	800b474 <tcp_parseopt+0x2c>
 800b50e:	e004      	b.n	800b51a <tcp_parseopt+0xd2>
          return;
 800b510:	bf00      	nop
 800b512:	e002      	b.n	800b51a <tcp_parseopt+0xd2>
            return;
 800b514:	bf00      	nop
 800b516:	e000      	b.n	800b51a <tcp_parseopt+0xd2>
            return;
 800b518:	bf00      	nop
      }
    }
  }
}
 800b51a:	3710      	adds	r7, #16
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}
 800b520:	080123cc 	.word	0x080123cc
 800b524:	08012830 	.word	0x08012830
 800b528:	08012418 	.word	0x08012418
 800b52c:	200087fc 	.word	0x200087fc
 800b530:	20008804 	.word	0x20008804

0800b534 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800b534:	b480      	push	{r7}
 800b536:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800b538:	4b05      	ldr	r3, [pc, #20]	@ (800b550 <tcp_trigger_input_pcb_close+0x1c>)
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	f043 0310 	orr.w	r3, r3, #16
 800b540:	b2da      	uxtb	r2, r3
 800b542:	4b03      	ldr	r3, [pc, #12]	@ (800b550 <tcp_trigger_input_pcb_close+0x1c>)
 800b544:	701a      	strb	r2, [r3, #0]
}
 800b546:	bf00      	nop
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr
 800b550:	20008815 	.word	0x20008815

0800b554 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b084      	sub	sp, #16
 800b558:	af00      	add	r7, sp, #0
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	60b9      	str	r1, [r7, #8]
 800b55e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d00a      	beq.n	800b57c <tcp_route+0x28>
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	7a1b      	ldrb	r3, [r3, #8]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d006      	beq.n	800b57c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	7a1b      	ldrb	r3, [r3, #8]
 800b572:	4618      	mov	r0, r3
 800b574:	f7fb faba 	bl	8006aec <netif_get_by_index>
 800b578:	4603      	mov	r3, r0
 800b57a:	e003      	b.n	800b584 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f003 f929 	bl	800e7d4 <ip4_route>
 800b582:	4603      	mov	r3, r0
  }
}
 800b584:	4618      	mov	r0, r3
 800b586:	3710      	adds	r7, #16
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}

0800b58c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800b58c:	b590      	push	{r4, r7, lr}
 800b58e:	b087      	sub	sp, #28
 800b590:	af00      	add	r7, sp, #0
 800b592:	60f8      	str	r0, [r7, #12]
 800b594:	60b9      	str	r1, [r7, #8]
 800b596:	603b      	str	r3, [r7, #0]
 800b598:	4613      	mov	r3, r2
 800b59a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d105      	bne.n	800b5ae <tcp_create_segment+0x22>
 800b5a2:	4b43      	ldr	r3, [pc, #268]	@ (800b6b0 <tcp_create_segment+0x124>)
 800b5a4:	22a3      	movs	r2, #163	@ 0xa3
 800b5a6:	4943      	ldr	r1, [pc, #268]	@ (800b6b4 <tcp_create_segment+0x128>)
 800b5a8:	4843      	ldr	r0, [pc, #268]	@ (800b6b8 <tcp_create_segment+0x12c>)
 800b5aa:	f004 fc7f 	bl	800feac <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d105      	bne.n	800b5c0 <tcp_create_segment+0x34>
 800b5b4:	4b3e      	ldr	r3, [pc, #248]	@ (800b6b0 <tcp_create_segment+0x124>)
 800b5b6:	22a4      	movs	r2, #164	@ 0xa4
 800b5b8:	4940      	ldr	r1, [pc, #256]	@ (800b6bc <tcp_create_segment+0x130>)
 800b5ba:	483f      	ldr	r0, [pc, #252]	@ (800b6b8 <tcp_create_segment+0x12c>)
 800b5bc:	f004 fc76 	bl	800feac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b5c0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b5c4:	009b      	lsls	r3, r3, #2
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	f003 0304 	and.w	r3, r3, #4
 800b5cc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b5ce:	2003      	movs	r0, #3
 800b5d0:	f7fa ff06 	bl	80063e0 <memp_malloc>
 800b5d4:	6138      	str	r0, [r7, #16]
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d104      	bne.n	800b5e6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b5dc:	68b8      	ldr	r0, [r7, #8]
 800b5de:	f7fb fde5 	bl	80071ac <pbuf_free>
    return NULL;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	e060      	b.n	800b6a8 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800b5ec:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	68ba      	ldr	r2, [r7, #8]
 800b5f8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	891a      	ldrh	r2, [r3, #8]
 800b5fe:	7dfb      	ldrb	r3, [r7, #23]
 800b600:	b29b      	uxth	r3, r3
 800b602:	429a      	cmp	r2, r3
 800b604:	d205      	bcs.n	800b612 <tcp_create_segment+0x86>
 800b606:	4b2a      	ldr	r3, [pc, #168]	@ (800b6b0 <tcp_create_segment+0x124>)
 800b608:	22b0      	movs	r2, #176	@ 0xb0
 800b60a:	492d      	ldr	r1, [pc, #180]	@ (800b6c0 <tcp_create_segment+0x134>)
 800b60c:	482a      	ldr	r0, [pc, #168]	@ (800b6b8 <tcp_create_segment+0x12c>)
 800b60e:	f004 fc4d 	bl	800feac <iprintf>
  seg->len = p->tot_len - optlen;
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	891a      	ldrh	r2, [r3, #8]
 800b616:	7dfb      	ldrb	r3, [r7, #23]
 800b618:	b29b      	uxth	r3, r3
 800b61a:	1ad3      	subs	r3, r2, r3
 800b61c:	b29a      	uxth	r2, r3
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b622:	2114      	movs	r1, #20
 800b624:	68b8      	ldr	r0, [r7, #8]
 800b626:	f7fb fd2b 	bl	8007080 <pbuf_add_header>
 800b62a:	4603      	mov	r3, r0
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d004      	beq.n	800b63a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800b630:	6938      	ldr	r0, [r7, #16]
 800b632:	f7fd f8d2 	bl	80087da <tcp_seg_free>
    return NULL;
 800b636:	2300      	movs	r3, #0
 800b638:	e036      	b.n	800b6a8 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	685a      	ldr	r2, [r3, #4]
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	8ada      	ldrh	r2, [r3, #22]
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	68dc      	ldr	r4, [r3, #12]
 800b64c:	4610      	mov	r0, r2
 800b64e:	f7fa fa4f 	bl	8005af0 <lwip_htons>
 800b652:	4603      	mov	r3, r0
 800b654:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	8b1a      	ldrh	r2, [r3, #24]
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	68dc      	ldr	r4, [r3, #12]
 800b65e:	4610      	mov	r0, r2
 800b660:	f7fa fa46 	bl	8005af0 <lwip_htons>
 800b664:	4603      	mov	r3, r0
 800b666:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	68dc      	ldr	r4, [r3, #12]
 800b66c:	6838      	ldr	r0, [r7, #0]
 800b66e:	f7fa fa54 	bl	8005b1a <lwip_htonl>
 800b672:	4603      	mov	r3, r0
 800b674:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b676:	7dfb      	ldrb	r3, [r7, #23]
 800b678:	089b      	lsrs	r3, r3, #2
 800b67a:	b2db      	uxtb	r3, r3
 800b67c:	3305      	adds	r3, #5
 800b67e:	b29b      	uxth	r3, r3
 800b680:	031b      	lsls	r3, r3, #12
 800b682:	b29a      	uxth	r2, r3
 800b684:	79fb      	ldrb	r3, [r7, #7]
 800b686:	b29b      	uxth	r3, r3
 800b688:	4313      	orrs	r3, r2
 800b68a:	b29a      	uxth	r2, r3
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	68dc      	ldr	r4, [r3, #12]
 800b690:	4610      	mov	r0, r2
 800b692:	f7fa fa2d 	bl	8005af0 <lwip_htons>
 800b696:	4603      	mov	r3, r0
 800b698:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	68db      	ldr	r3, [r3, #12]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	749a      	strb	r2, [r3, #18]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	74da      	strb	r2, [r3, #19]
  return seg;
 800b6a6:	693b      	ldr	r3, [r7, #16]
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	371c      	adds	r7, #28
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd90      	pop	{r4, r7, pc}
 800b6b0:	0801284c 	.word	0x0801284c
 800b6b4:	08012880 	.word	0x08012880
 800b6b8:	080128a0 	.word	0x080128a0
 800b6bc:	080128c8 	.word	0x080128c8
 800b6c0:	080128ec 	.word	0x080128ec

0800b6c4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800b6c4:	b590      	push	{r4, r7, lr}
 800b6c6:	b08b      	sub	sp, #44	@ 0x2c
 800b6c8:	af02      	add	r7, sp, #8
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	460b      	mov	r3, r1
 800b6ce:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	61fb      	str	r3, [r7, #28]
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d106      	bne.n	800b6f0 <tcp_split_unsent_seg+0x2c>
 800b6e2:	4b95      	ldr	r3, [pc, #596]	@ (800b938 <tcp_split_unsent_seg+0x274>)
 800b6e4:	f240 324b 	movw	r2, #843	@ 0x34b
 800b6e8:	4994      	ldr	r1, [pc, #592]	@ (800b93c <tcp_split_unsent_seg+0x278>)
 800b6ea:	4895      	ldr	r0, [pc, #596]	@ (800b940 <tcp_split_unsent_seg+0x27c>)
 800b6ec:	f004 fbde 	bl	800feac <iprintf>

  useg = pcb->unsent;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6f4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d102      	bne.n	800b702 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800b6fc:	f04f 33ff 	mov.w	r3, #4294967295
 800b700:	e116      	b.n	800b930 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800b702:	887b      	ldrh	r3, [r7, #2]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d109      	bne.n	800b71c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b708:	4b8b      	ldr	r3, [pc, #556]	@ (800b938 <tcp_split_unsent_seg+0x274>)
 800b70a:	f240 3253 	movw	r2, #851	@ 0x353
 800b70e:	498d      	ldr	r1, [pc, #564]	@ (800b944 <tcp_split_unsent_seg+0x280>)
 800b710:	488b      	ldr	r0, [pc, #556]	@ (800b940 <tcp_split_unsent_seg+0x27c>)
 800b712:	f004 fbcb 	bl	800feac <iprintf>
    return ERR_VAL;
 800b716:	f06f 0305 	mvn.w	r3, #5
 800b71a:	e109      	b.n	800b930 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	891b      	ldrh	r3, [r3, #8]
 800b720:	887a      	ldrh	r2, [r7, #2]
 800b722:	429a      	cmp	r2, r3
 800b724:	d301      	bcc.n	800b72a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800b726:	2300      	movs	r3, #0
 800b728:	e102      	b.n	800b930 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b72e:	887a      	ldrh	r2, [r7, #2]
 800b730:	429a      	cmp	r2, r3
 800b732:	d906      	bls.n	800b742 <tcp_split_unsent_seg+0x7e>
 800b734:	4b80      	ldr	r3, [pc, #512]	@ (800b938 <tcp_split_unsent_seg+0x274>)
 800b736:	f240 325b 	movw	r2, #859	@ 0x35b
 800b73a:	4983      	ldr	r1, [pc, #524]	@ (800b948 <tcp_split_unsent_seg+0x284>)
 800b73c:	4880      	ldr	r0, [pc, #512]	@ (800b940 <tcp_split_unsent_seg+0x27c>)
 800b73e:	f004 fbb5 	bl	800feac <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	891b      	ldrh	r3, [r3, #8]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d106      	bne.n	800b758 <tcp_split_unsent_seg+0x94>
 800b74a:	4b7b      	ldr	r3, [pc, #492]	@ (800b938 <tcp_split_unsent_seg+0x274>)
 800b74c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800b750:	497e      	ldr	r1, [pc, #504]	@ (800b94c <tcp_split_unsent_seg+0x288>)
 800b752:	487b      	ldr	r0, [pc, #492]	@ (800b940 <tcp_split_unsent_seg+0x27c>)
 800b754:	f004 fbaa 	bl	800feac <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	7a9b      	ldrb	r3, [r3, #10]
 800b75c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b75e:	7bfb      	ldrb	r3, [r7, #15]
 800b760:	009b      	lsls	r3, r3, #2
 800b762:	b2db      	uxtb	r3, r3
 800b764:	f003 0304 	and.w	r3, r3, #4
 800b768:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	891a      	ldrh	r2, [r3, #8]
 800b76e:	887b      	ldrh	r3, [r7, #2]
 800b770:	1ad3      	subs	r3, r2, r3
 800b772:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b774:	7bbb      	ldrb	r3, [r7, #14]
 800b776:	b29a      	uxth	r2, r3
 800b778:	89bb      	ldrh	r3, [r7, #12]
 800b77a:	4413      	add	r3, r2
 800b77c:	b29b      	uxth	r3, r3
 800b77e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b782:	4619      	mov	r1, r3
 800b784:	2036      	movs	r0, #54	@ 0x36
 800b786:	f7fb fa2d 	bl	8006be4 <pbuf_alloc>
 800b78a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	f000 80b7 	beq.w	800b902 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	891a      	ldrh	r2, [r3, #8]
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	891b      	ldrh	r3, [r3, #8]
 800b79e:	1ad3      	subs	r3, r2, r3
 800b7a0:	b29a      	uxth	r2, r3
 800b7a2:	887b      	ldrh	r3, [r7, #2]
 800b7a4:	4413      	add	r3, r2
 800b7a6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	6858      	ldr	r0, [r3, #4]
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	685a      	ldr	r2, [r3, #4]
 800b7b0:	7bbb      	ldrb	r3, [r7, #14]
 800b7b2:	18d1      	adds	r1, r2, r3
 800b7b4:	897b      	ldrh	r3, [r7, #10]
 800b7b6:	89ba      	ldrh	r2, [r7, #12]
 800b7b8:	f7fb fef2 	bl	80075a0 <pbuf_copy_partial>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	461a      	mov	r2, r3
 800b7c0:	89bb      	ldrh	r3, [r7, #12]
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	f040 809f 	bne.w	800b906 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	68db      	ldr	r3, [r3, #12]
 800b7cc:	899b      	ldrh	r3, [r3, #12]
 800b7ce:	b29b      	uxth	r3, r3
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f7fa f98d 	bl	8005af0 <lwip_htons>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	b2db      	uxtb	r3, r3
 800b7da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b7de:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800b7e4:	7efb      	ldrb	r3, [r7, #27]
 800b7e6:	f003 0308 	and.w	r3, r3, #8
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d007      	beq.n	800b7fe <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800b7ee:	7efb      	ldrb	r3, [r7, #27]
 800b7f0:	f023 0308 	bic.w	r3, r3, #8
 800b7f4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800b7f6:	7ebb      	ldrb	r3, [r7, #26]
 800b7f8:	f043 0308 	orr.w	r3, r3, #8
 800b7fc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800b7fe:	7efb      	ldrb	r3, [r7, #27]
 800b800:	f003 0301 	and.w	r3, r3, #1
 800b804:	2b00      	cmp	r3, #0
 800b806:	d007      	beq.n	800b818 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800b808:	7efb      	ldrb	r3, [r7, #27]
 800b80a:	f023 0301 	bic.w	r3, r3, #1
 800b80e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800b810:	7ebb      	ldrb	r3, [r7, #26]
 800b812:	f043 0301 	orr.w	r3, r3, #1
 800b816:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	68db      	ldr	r3, [r3, #12]
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	4618      	mov	r0, r3
 800b820:	f7fa f97b 	bl	8005b1a <lwip_htonl>
 800b824:	4602      	mov	r2, r0
 800b826:	887b      	ldrh	r3, [r7, #2]
 800b828:	18d1      	adds	r1, r2, r3
 800b82a:	7eba      	ldrb	r2, [r7, #26]
 800b82c:	7bfb      	ldrb	r3, [r7, #15]
 800b82e:	9300      	str	r3, [sp, #0]
 800b830:	460b      	mov	r3, r1
 800b832:	6939      	ldr	r1, [r7, #16]
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f7ff fea9 	bl	800b58c <tcp_create_segment>
 800b83a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800b83c:	69fb      	ldr	r3, [r7, #28]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d063      	beq.n	800b90a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	4618      	mov	r0, r3
 800b848:	f7fb fd38 	bl	80072bc <pbuf_clen>
 800b84c:	4603      	mov	r3, r0
 800b84e:	461a      	mov	r2, r3
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b856:	1a9b      	subs	r3, r3, r2
 800b858:	b29a      	uxth	r2, r3
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	6858      	ldr	r0, [r3, #4]
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	891a      	ldrh	r2, [r3, #8]
 800b86a:	89bb      	ldrh	r3, [r7, #12]
 800b86c:	1ad3      	subs	r3, r2, r3
 800b86e:	b29b      	uxth	r3, r3
 800b870:	4619      	mov	r1, r3
 800b872:	f7fb fb15 	bl	8006ea0 <pbuf_realloc>
  useg->len -= remainder;
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	891a      	ldrh	r2, [r3, #8]
 800b87a:	89bb      	ldrh	r3, [r7, #12]
 800b87c:	1ad3      	subs	r3, r2, r3
 800b87e:	b29a      	uxth	r2, r3
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	68db      	ldr	r3, [r3, #12]
 800b888:	899b      	ldrh	r3, [r3, #12]
 800b88a:	b29c      	uxth	r4, r3
 800b88c:	7efb      	ldrb	r3, [r7, #27]
 800b88e:	b29b      	uxth	r3, r3
 800b890:	4618      	mov	r0, r3
 800b892:	f7fa f92d 	bl	8005af0 <lwip_htons>
 800b896:	4603      	mov	r3, r0
 800b898:	461a      	mov	r2, r3
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	68db      	ldr	r3, [r3, #12]
 800b89e:	4322      	orrs	r2, r4
 800b8a0:	b292      	uxth	r2, r2
 800b8a2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	685b      	ldr	r3, [r3, #4]
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f7fb fd07 	bl	80072bc <pbuf_clen>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b8b8:	4413      	add	r3, r2
 800b8ba:	b29a      	uxth	r2, r3
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b8c2:	69fb      	ldr	r3, [r7, #28]
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7fb fcf8 	bl	80072bc <pbuf_clen>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b8d6:	4413      	add	r3, r2
 800b8d8:	b29a      	uxth	r2, r3
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	681a      	ldr	r2, [r3, #0]
 800b8e4:	69fb      	ldr	r3, [r7, #28]
 800b8e6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	69fa      	ldr	r2, [r7, #28]
 800b8ec:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800b8ee:	69fb      	ldr	r3, [r7, #28]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d103      	bne.n	800b8fe <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800b8fe:	2300      	movs	r3, #0
 800b900:	e016      	b.n	800b930 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800b902:	bf00      	nop
 800b904:	e002      	b.n	800b90c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b906:	bf00      	nop
 800b908:	e000      	b.n	800b90c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b90a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800b90c:	69fb      	ldr	r3, [r7, #28]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d006      	beq.n	800b920 <tcp_split_unsent_seg+0x25c>
 800b912:	4b09      	ldr	r3, [pc, #36]	@ (800b938 <tcp_split_unsent_seg+0x274>)
 800b914:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800b918:	490d      	ldr	r1, [pc, #52]	@ (800b950 <tcp_split_unsent_seg+0x28c>)
 800b91a:	4809      	ldr	r0, [pc, #36]	@ (800b940 <tcp_split_unsent_seg+0x27c>)
 800b91c:	f004 fac6 	bl	800feac <iprintf>
  if (p != NULL) {
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d002      	beq.n	800b92c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800b926:	6938      	ldr	r0, [r7, #16]
 800b928:	f7fb fc40 	bl	80071ac <pbuf_free>
  }

  return ERR_MEM;
 800b92c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b930:	4618      	mov	r0, r3
 800b932:	3724      	adds	r7, #36	@ 0x24
 800b934:	46bd      	mov	sp, r7
 800b936:	bd90      	pop	{r4, r7, pc}
 800b938:	0801284c 	.word	0x0801284c
 800b93c:	08012be0 	.word	0x08012be0
 800b940:	080128a0 	.word	0x080128a0
 800b944:	08012c04 	.word	0x08012c04
 800b948:	08012c28 	.word	0x08012c28
 800b94c:	08012c38 	.word	0x08012c38
 800b950:	08012c48 	.word	0x08012c48

0800b954 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b954:	b590      	push	{r4, r7, lr}
 800b956:	b085      	sub	sp, #20
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d106      	bne.n	800b970 <tcp_send_fin+0x1c>
 800b962:	4b21      	ldr	r3, [pc, #132]	@ (800b9e8 <tcp_send_fin+0x94>)
 800b964:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800b968:	4920      	ldr	r1, [pc, #128]	@ (800b9ec <tcp_send_fin+0x98>)
 800b96a:	4821      	ldr	r0, [pc, #132]	@ (800b9f0 <tcp_send_fin+0x9c>)
 800b96c:	f004 fa9e 	bl	800feac <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b974:	2b00      	cmp	r3, #0
 800b976:	d02e      	beq.n	800b9d6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b97c:	60fb      	str	r3, [r7, #12]
 800b97e:	e002      	b.n	800b986 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d1f8      	bne.n	800b980 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	68db      	ldr	r3, [r3, #12]
 800b992:	899b      	ldrh	r3, [r3, #12]
 800b994:	b29b      	uxth	r3, r3
 800b996:	4618      	mov	r0, r3
 800b998:	f7fa f8aa 	bl	8005af0 <lwip_htons>
 800b99c:	4603      	mov	r3, r0
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	f003 0307 	and.w	r3, r3, #7
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d116      	bne.n	800b9d6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	68db      	ldr	r3, [r3, #12]
 800b9ac:	899b      	ldrh	r3, [r3, #12]
 800b9ae:	b29c      	uxth	r4, r3
 800b9b0:	2001      	movs	r0, #1
 800b9b2:	f7fa f89d 	bl	8005af0 <lwip_htons>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	461a      	mov	r2, r3
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	68db      	ldr	r3, [r3, #12]
 800b9be:	4322      	orrs	r2, r4
 800b9c0:	b292      	uxth	r2, r2
 800b9c2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	8b5b      	ldrh	r3, [r3, #26]
 800b9c8:	f043 0320 	orr.w	r3, r3, #32
 800b9cc:	b29a      	uxth	r2, r3
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	e004      	b.n	800b9e0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b9d6:	2101      	movs	r1, #1
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f000 f80b 	bl	800b9f4 <tcp_enqueue_flags>
 800b9de:	4603      	mov	r3, r0
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3714      	adds	r7, #20
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd90      	pop	{r4, r7, pc}
 800b9e8:	0801284c 	.word	0x0801284c
 800b9ec:	08012c54 	.word	0x08012c54
 800b9f0:	080128a0 	.word	0x080128a0

0800b9f4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b08a      	sub	sp, #40	@ 0x28
 800b9f8:	af02      	add	r7, sp, #8
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	460b      	mov	r3, r1
 800b9fe:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ba00:	2300      	movs	r3, #0
 800ba02:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800ba04:	2300      	movs	r3, #0
 800ba06:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ba08:	78fb      	ldrb	r3, [r7, #3]
 800ba0a:	f003 0303 	and.w	r3, r3, #3
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d106      	bne.n	800ba20 <tcp_enqueue_flags+0x2c>
 800ba12:	4b67      	ldr	r3, [pc, #412]	@ (800bbb0 <tcp_enqueue_flags+0x1bc>)
 800ba14:	f240 4211 	movw	r2, #1041	@ 0x411
 800ba18:	4966      	ldr	r1, [pc, #408]	@ (800bbb4 <tcp_enqueue_flags+0x1c0>)
 800ba1a:	4867      	ldr	r0, [pc, #412]	@ (800bbb8 <tcp_enqueue_flags+0x1c4>)
 800ba1c:	f004 fa46 	bl	800feac <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d106      	bne.n	800ba34 <tcp_enqueue_flags+0x40>
 800ba26:	4b62      	ldr	r3, [pc, #392]	@ (800bbb0 <tcp_enqueue_flags+0x1bc>)
 800ba28:	f240 4213 	movw	r2, #1043	@ 0x413
 800ba2c:	4963      	ldr	r1, [pc, #396]	@ (800bbbc <tcp_enqueue_flags+0x1c8>)
 800ba2e:	4862      	ldr	r0, [pc, #392]	@ (800bbb8 <tcp_enqueue_flags+0x1c4>)
 800ba30:	f004 fa3c 	bl	800feac <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800ba34:	78fb      	ldrb	r3, [r7, #3]
 800ba36:	f003 0302 	and.w	r3, r3, #2
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d001      	beq.n	800ba42 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800ba3e:	2301      	movs	r3, #1
 800ba40:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ba42:	7ffb      	ldrb	r3, [r7, #31]
 800ba44:	009b      	lsls	r3, r3, #2
 800ba46:	b2db      	uxtb	r3, r3
 800ba48:	f003 0304 	and.w	r3, r3, #4
 800ba4c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ba4e:	7dfb      	ldrb	r3, [r7, #23]
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ba56:	4619      	mov	r1, r3
 800ba58:	2036      	movs	r0, #54	@ 0x36
 800ba5a:	f7fb f8c3 	bl	8006be4 <pbuf_alloc>
 800ba5e:	6138      	str	r0, [r7, #16]
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d109      	bne.n	800ba7a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	8b5b      	ldrh	r3, [r3, #26]
 800ba6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba6e:	b29a      	uxth	r2, r3
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ba74:	f04f 33ff 	mov.w	r3, #4294967295
 800ba78:	e095      	b.n	800bba6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ba7a:	693b      	ldr	r3, [r7, #16]
 800ba7c:	895a      	ldrh	r2, [r3, #10]
 800ba7e:	7dfb      	ldrb	r3, [r7, #23]
 800ba80:	b29b      	uxth	r3, r3
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d206      	bcs.n	800ba94 <tcp_enqueue_flags+0xa0>
 800ba86:	4b4a      	ldr	r3, [pc, #296]	@ (800bbb0 <tcp_enqueue_flags+0x1bc>)
 800ba88:	f240 4239 	movw	r2, #1081	@ 0x439
 800ba8c:	494c      	ldr	r1, [pc, #304]	@ (800bbc0 <tcp_enqueue_flags+0x1cc>)
 800ba8e:	484a      	ldr	r0, [pc, #296]	@ (800bbb8 <tcp_enqueue_flags+0x1c4>)
 800ba90:	f004 fa0c 	bl	800feac <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800ba98:	78fa      	ldrb	r2, [r7, #3]
 800ba9a:	7ffb      	ldrb	r3, [r7, #31]
 800ba9c:	9300      	str	r3, [sp, #0]
 800ba9e:	460b      	mov	r3, r1
 800baa0:	6939      	ldr	r1, [r7, #16]
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f7ff fd72 	bl	800b58c <tcp_create_segment>
 800baa8:	60f8      	str	r0, [r7, #12]
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d109      	bne.n	800bac4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	8b5b      	ldrh	r3, [r3, #26]
 800bab4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bab8:	b29a      	uxth	r2, r3
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800babe:	f04f 33ff 	mov.w	r3, #4294967295
 800bac2:	e070      	b.n	800bba6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	68db      	ldr	r3, [r3, #12]
 800bac8:	f003 0303 	and.w	r3, r3, #3
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d006      	beq.n	800bade <tcp_enqueue_flags+0xea>
 800bad0:	4b37      	ldr	r3, [pc, #220]	@ (800bbb0 <tcp_enqueue_flags+0x1bc>)
 800bad2:	f240 4242 	movw	r2, #1090	@ 0x442
 800bad6:	493b      	ldr	r1, [pc, #236]	@ (800bbc4 <tcp_enqueue_flags+0x1d0>)
 800bad8:	4837      	ldr	r0, [pc, #220]	@ (800bbb8 <tcp_enqueue_flags+0x1c4>)
 800bada:	f004 f9e7 	bl	800feac <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	891b      	ldrh	r3, [r3, #8]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d006      	beq.n	800baf4 <tcp_enqueue_flags+0x100>
 800bae6:	4b32      	ldr	r3, [pc, #200]	@ (800bbb0 <tcp_enqueue_flags+0x1bc>)
 800bae8:	f240 4243 	movw	r2, #1091	@ 0x443
 800baec:	4936      	ldr	r1, [pc, #216]	@ (800bbc8 <tcp_enqueue_flags+0x1d4>)
 800baee:	4832      	ldr	r0, [pc, #200]	@ (800bbb8 <tcp_enqueue_flags+0x1c4>)
 800baf0:	f004 f9dc 	bl	800feac <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d103      	bne.n	800bb04 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	68fa      	ldr	r2, [r7, #12]
 800bb00:	66da      	str	r2, [r3, #108]	@ 0x6c
 800bb02:	e00d      	b.n	800bb20 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb08:	61bb      	str	r3, [r7, #24]
 800bb0a:	e002      	b.n	800bb12 <tcp_enqueue_flags+0x11e>
 800bb0c:	69bb      	ldr	r3, [r7, #24]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	61bb      	str	r3, [r7, #24]
 800bb12:	69bb      	ldr	r3, [r7, #24]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d1f8      	bne.n	800bb0c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800bb1a:	69bb      	ldr	r3, [r7, #24]
 800bb1c:	68fa      	ldr	r2, [r7, #12]
 800bb1e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2200      	movs	r2, #0
 800bb24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800bb28:	78fb      	ldrb	r3, [r7, #3]
 800bb2a:	f003 0302 	and.w	r3, r3, #2
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d104      	bne.n	800bb3c <tcp_enqueue_flags+0x148>
 800bb32:	78fb      	ldrb	r3, [r7, #3]
 800bb34:	f003 0301 	and.w	r3, r3, #1
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d004      	beq.n	800bb46 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb40:	1c5a      	adds	r2, r3, #1
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800bb46:	78fb      	ldrb	r3, [r7, #3]
 800bb48:	f003 0301 	and.w	r3, r3, #1
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d006      	beq.n	800bb5e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	8b5b      	ldrh	r3, [r3, #26]
 800bb54:	f043 0320 	orr.w	r3, r3, #32
 800bb58:	b29a      	uxth	r2, r3
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7fb fbaa 	bl	80072bc <pbuf_clen>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	461a      	mov	r2, r3
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bb72:	4413      	add	r3, r2
 800bb74:	b29a      	uxth	r2, r3
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d00e      	beq.n	800bba4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d10a      	bne.n	800bba4 <tcp_enqueue_flags+0x1b0>
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d106      	bne.n	800bba4 <tcp_enqueue_flags+0x1b0>
 800bb96:	4b06      	ldr	r3, [pc, #24]	@ (800bbb0 <tcp_enqueue_flags+0x1bc>)
 800bb98:	f240 4265 	movw	r2, #1125	@ 0x465
 800bb9c:	490b      	ldr	r1, [pc, #44]	@ (800bbcc <tcp_enqueue_flags+0x1d8>)
 800bb9e:	4806      	ldr	r0, [pc, #24]	@ (800bbb8 <tcp_enqueue_flags+0x1c4>)
 800bba0:	f004 f984 	bl	800feac <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800bba4:	2300      	movs	r3, #0
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3720      	adds	r7, #32
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	0801284c 	.word	0x0801284c
 800bbb4:	08012c70 	.word	0x08012c70
 800bbb8:	080128a0 	.word	0x080128a0
 800bbbc:	08012cc8 	.word	0x08012cc8
 800bbc0:	08012ce8 	.word	0x08012ce8
 800bbc4:	08012d24 	.word	0x08012d24
 800bbc8:	08012d3c 	.word	0x08012d3c
 800bbcc:	08012d68 	.word	0x08012d68

0800bbd0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800bbd0:	b5b0      	push	{r4, r5, r7, lr}
 800bbd2:	b08a      	sub	sp, #40	@ 0x28
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d106      	bne.n	800bbec <tcp_output+0x1c>
 800bbde:	4b8a      	ldr	r3, [pc, #552]	@ (800be08 <tcp_output+0x238>)
 800bbe0:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800bbe4:	4989      	ldr	r1, [pc, #548]	@ (800be0c <tcp_output+0x23c>)
 800bbe6:	488a      	ldr	r0, [pc, #552]	@ (800be10 <tcp_output+0x240>)
 800bbe8:	f004 f960 	bl	800feac <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	7d1b      	ldrb	r3, [r3, #20]
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d106      	bne.n	800bc02 <tcp_output+0x32>
 800bbf4:	4b84      	ldr	r3, [pc, #528]	@ (800be08 <tcp_output+0x238>)
 800bbf6:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800bbfa:	4986      	ldr	r1, [pc, #536]	@ (800be14 <tcp_output+0x244>)
 800bbfc:	4884      	ldr	r0, [pc, #528]	@ (800be10 <tcp_output+0x240>)
 800bbfe:	f004 f955 	bl	800feac <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800bc02:	4b85      	ldr	r3, [pc, #532]	@ (800be18 <tcp_output+0x248>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	687a      	ldr	r2, [r7, #4]
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d101      	bne.n	800bc10 <tcp_output+0x40>
    return ERR_OK;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	e1ce      	b.n	800bfae <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	bf28      	it	cs
 800bc20:	4613      	movcs	r3, r2
 800bc22:	b29b      	uxth	r3, r3
 800bc24:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc2a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800bc2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d10b      	bne.n	800bc4a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	8b5b      	ldrh	r3, [r3, #26]
 800bc36:	f003 0302 	and.w	r3, r3, #2
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	f000 81aa 	beq.w	800bf94 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f000 fdcb 	bl	800c7dc <tcp_send_empty_ack>
 800bc46:	4603      	mov	r3, r0
 800bc48:	e1b1      	b.n	800bfae <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800bc4a:	6879      	ldr	r1, [r7, #4]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	3304      	adds	r3, #4
 800bc50:	461a      	mov	r2, r3
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f7ff fc7e 	bl	800b554 <tcp_route>
 800bc58:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d102      	bne.n	800bc66 <tcp_output+0x96>
    return ERR_RTE;
 800bc60:	f06f 0303 	mvn.w	r3, #3
 800bc64:	e1a3      	b.n	800bfae <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d003      	beq.n	800bc74 <tcp_output+0xa4>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d111      	bne.n	800bc98 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d002      	beq.n	800bc80 <tcp_output+0xb0>
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	3304      	adds	r3, #4
 800bc7e:	e000      	b.n	800bc82 <tcp_output+0xb2>
 800bc80:	2300      	movs	r3, #0
 800bc82:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d102      	bne.n	800bc90 <tcp_output+0xc0>
      return ERR_RTE;
 800bc8a:	f06f 0303 	mvn.w	r3, #3
 800bc8e:	e18e      	b.n	800bfae <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	681a      	ldr	r2, [r3, #0]
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800bc98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc9a:	68db      	ldr	r3, [r3, #12]
 800bc9c:	685b      	ldr	r3, [r3, #4]
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f7f9 ff3b 	bl	8005b1a <lwip_htonl>
 800bca4:	4602      	mov	r2, r0
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcaa:	1ad3      	subs	r3, r2, r3
 800bcac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bcae:	8912      	ldrh	r2, [r2, #8]
 800bcb0:	4413      	add	r3, r2
 800bcb2:	69ba      	ldr	r2, [r7, #24]
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d227      	bcs.n	800bd08 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bcbe:	461a      	mov	r2, r3
 800bcc0:	69bb      	ldr	r3, [r7, #24]
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d114      	bne.n	800bcf0 <tcp_output+0x120>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d110      	bne.n	800bcf0 <tcp_output+0x120>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d10b      	bne.n	800bcf0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2201      	movs	r2, #1
 800bce4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2200      	movs	r2, #0
 800bcec:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	8b5b      	ldrh	r3, [r3, #26]
 800bcf4:	f003 0302 	and.w	r3, r3, #2
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	f000 814d 	beq.w	800bf98 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f000 fd6c 	bl	800c7dc <tcp_send_empty_ack>
 800bd04:	4603      	mov	r3, r0
 800bd06:	e152      	b.n	800bfae <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd14:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800bd16:	6a3b      	ldr	r3, [r7, #32]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	f000 811c 	beq.w	800bf56 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800bd1e:	e002      	b.n	800bd26 <tcp_output+0x156>
 800bd20:	6a3b      	ldr	r3, [r7, #32]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	623b      	str	r3, [r7, #32]
 800bd26:	6a3b      	ldr	r3, [r7, #32]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d1f8      	bne.n	800bd20 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800bd2e:	e112      	b.n	800bf56 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800bd30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd32:	68db      	ldr	r3, [r3, #12]
 800bd34:	899b      	ldrh	r3, [r3, #12]
 800bd36:	b29b      	uxth	r3, r3
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f7f9 fed9 	bl	8005af0 <lwip_htons>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	b2db      	uxtb	r3, r3
 800bd42:	f003 0304 	and.w	r3, r3, #4
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d006      	beq.n	800bd58 <tcp_output+0x188>
 800bd4a:	4b2f      	ldr	r3, [pc, #188]	@ (800be08 <tcp_output+0x238>)
 800bd4c:	f240 5236 	movw	r2, #1334	@ 0x536
 800bd50:	4932      	ldr	r1, [pc, #200]	@ (800be1c <tcp_output+0x24c>)
 800bd52:	482f      	ldr	r0, [pc, #188]	@ (800be10 <tcp_output+0x240>)
 800bd54:	f004 f8aa 	bl	800feac <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d01f      	beq.n	800bda0 <tcp_output+0x1d0>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	8b5b      	ldrh	r3, [r3, #26]
 800bd64:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d119      	bne.n	800bda0 <tcp_output+0x1d0>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d00b      	beq.n	800bd8c <tcp_output+0x1bc>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d110      	bne.n	800bda0 <tcp_output+0x1d0>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd82:	891a      	ldrh	r2, [r3, #8]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d209      	bcs.n	800bda0 <tcp_output+0x1d0>
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d004      	beq.n	800bda0 <tcp_output+0x1d0>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bd9c:	2b08      	cmp	r3, #8
 800bd9e:	d901      	bls.n	800bda4 <tcp_output+0x1d4>
 800bda0:	2301      	movs	r3, #1
 800bda2:	e000      	b.n	800bda6 <tcp_output+0x1d6>
 800bda4:	2300      	movs	r3, #0
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d106      	bne.n	800bdb8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	8b5b      	ldrh	r3, [r3, #26]
 800bdae:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	f000 80e4 	beq.w	800bf80 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	7d1b      	ldrb	r3, [r3, #20]
 800bdbc:	2b02      	cmp	r3, #2
 800bdbe:	d00d      	beq.n	800bddc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800bdc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdc2:	68db      	ldr	r3, [r3, #12]
 800bdc4:	899b      	ldrh	r3, [r3, #12]
 800bdc6:	b29c      	uxth	r4, r3
 800bdc8:	2010      	movs	r0, #16
 800bdca:	f7f9 fe91 	bl	8005af0 <lwip_htons>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdd4:	68db      	ldr	r3, [r3, #12]
 800bdd6:	4322      	orrs	r2, r4
 800bdd8:	b292      	uxth	r2, r2
 800bdda:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800bddc:	697a      	ldr	r2, [r7, #20]
 800bdde:	6879      	ldr	r1, [r7, #4]
 800bde0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bde2:	f000 f909 	bl	800bff8 <tcp_output_segment>
 800bde6:	4603      	mov	r3, r0
 800bde8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800bdea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d016      	beq.n	800be20 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	8b5b      	ldrh	r3, [r3, #26]
 800bdf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bdfa:	b29a      	uxth	r2, r3
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	835a      	strh	r2, [r3, #26]
      return err;
 800be00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be04:	e0d3      	b.n	800bfae <tcp_output+0x3de>
 800be06:	bf00      	nop
 800be08:	0801284c 	.word	0x0801284c
 800be0c:	08012d90 	.word	0x08012d90
 800be10:	080128a0 	.word	0x080128a0
 800be14:	08012da8 	.word	0x08012da8
 800be18:	2000881c 	.word	0x2000881c
 800be1c:	08012dd0 	.word	0x08012dd0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800be20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be22:	681a      	ldr	r2, [r3, #0]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	7d1b      	ldrb	r3, [r3, #20]
 800be2c:	2b02      	cmp	r3, #2
 800be2e:	d006      	beq.n	800be3e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	8b5b      	ldrh	r3, [r3, #26]
 800be34:	f023 0303 	bic.w	r3, r3, #3
 800be38:	b29a      	uxth	r2, r3
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800be3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be40:	68db      	ldr	r3, [r3, #12]
 800be42:	685b      	ldr	r3, [r3, #4]
 800be44:	4618      	mov	r0, r3
 800be46:	f7f9 fe68 	bl	8005b1a <lwip_htonl>
 800be4a:	4604      	mov	r4, r0
 800be4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be4e:	891b      	ldrh	r3, [r3, #8]
 800be50:	461d      	mov	r5, r3
 800be52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be54:	68db      	ldr	r3, [r3, #12]
 800be56:	899b      	ldrh	r3, [r3, #12]
 800be58:	b29b      	uxth	r3, r3
 800be5a:	4618      	mov	r0, r3
 800be5c:	f7f9 fe48 	bl	8005af0 <lwip_htons>
 800be60:	4603      	mov	r3, r0
 800be62:	b2db      	uxtb	r3, r3
 800be64:	f003 0303 	and.w	r3, r3, #3
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d001      	beq.n	800be70 <tcp_output+0x2a0>
 800be6c:	2301      	movs	r3, #1
 800be6e:	e000      	b.n	800be72 <tcp_output+0x2a2>
 800be70:	2300      	movs	r3, #0
 800be72:	442b      	add	r3, r5
 800be74:	4423      	add	r3, r4
 800be76:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	1ad3      	subs	r3, r2, r3
 800be80:	2b00      	cmp	r3, #0
 800be82:	da02      	bge.n	800be8a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	68ba      	ldr	r2, [r7, #8]
 800be88:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800be8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be8c:	891b      	ldrh	r3, [r3, #8]
 800be8e:	461c      	mov	r4, r3
 800be90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be92:	68db      	ldr	r3, [r3, #12]
 800be94:	899b      	ldrh	r3, [r3, #12]
 800be96:	b29b      	uxth	r3, r3
 800be98:	4618      	mov	r0, r3
 800be9a:	f7f9 fe29 	bl	8005af0 <lwip_htons>
 800be9e:	4603      	mov	r3, r0
 800bea0:	b2db      	uxtb	r3, r3
 800bea2:	f003 0303 	and.w	r3, r3, #3
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d001      	beq.n	800beae <tcp_output+0x2de>
 800beaa:	2301      	movs	r3, #1
 800beac:	e000      	b.n	800beb0 <tcp_output+0x2e0>
 800beae:	2300      	movs	r3, #0
 800beb0:	4423      	add	r3, r4
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d049      	beq.n	800bf4a <tcp_output+0x37a>
      seg->next = NULL;
 800beb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beb8:	2200      	movs	r2, #0
 800beba:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d105      	bne.n	800bed0 <tcp_output+0x300>
        pcb->unacked = seg;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bec8:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800beca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800becc:	623b      	str	r3, [r7, #32]
 800bece:	e03f      	b.n	800bf50 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800bed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bed2:	68db      	ldr	r3, [r3, #12]
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7f9 fe1f 	bl	8005b1a <lwip_htonl>
 800bedc:	4604      	mov	r4, r0
 800bede:	6a3b      	ldr	r3, [r7, #32]
 800bee0:	68db      	ldr	r3, [r3, #12]
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	4618      	mov	r0, r3
 800bee6:	f7f9 fe18 	bl	8005b1a <lwip_htonl>
 800beea:	4603      	mov	r3, r0
 800beec:	1ae3      	subs	r3, r4, r3
 800beee:	2b00      	cmp	r3, #0
 800bef0:	da24      	bge.n	800bf3c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	3370      	adds	r3, #112	@ 0x70
 800bef6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800bef8:	e002      	b.n	800bf00 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800befa:	69fb      	ldr	r3, [r7, #28]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800bf00:	69fb      	ldr	r3, [r7, #28]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d011      	beq.n	800bf2c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bf08:	69fb      	ldr	r3, [r7, #28]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	68db      	ldr	r3, [r3, #12]
 800bf0e:	685b      	ldr	r3, [r3, #4]
 800bf10:	4618      	mov	r0, r3
 800bf12:	f7f9 fe02 	bl	8005b1a <lwip_htonl>
 800bf16:	4604      	mov	r4, r0
 800bf18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf1a:	68db      	ldr	r3, [r3, #12]
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f7f9 fdfb 	bl	8005b1a <lwip_htonl>
 800bf24:	4603      	mov	r3, r0
 800bf26:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	dbe6      	blt.n	800befa <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800bf2c:	69fb      	ldr	r3, [r7, #28]
 800bf2e:	681a      	ldr	r2, [r3, #0]
 800bf30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf32:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800bf34:	69fb      	ldr	r3, [r7, #28]
 800bf36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf38:	601a      	str	r2, [r3, #0]
 800bf3a:	e009      	b.n	800bf50 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800bf3c:	6a3b      	ldr	r3, [r7, #32]
 800bf3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf40:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800bf42:	6a3b      	ldr	r3, [r7, #32]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	623b      	str	r3, [r7, #32]
 800bf48:	e002      	b.n	800bf50 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800bf4a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bf4c:	f7fc fc45 	bl	80087da <tcp_seg_free>
    }
    seg = pcb->unsent;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf54:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800bf56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d012      	beq.n	800bf82 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800bf5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf5e:	68db      	ldr	r3, [r3, #12]
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	4618      	mov	r0, r3
 800bf64:	f7f9 fdd9 	bl	8005b1a <lwip_htonl>
 800bf68:	4602      	mov	r2, r0
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf6e:	1ad3      	subs	r3, r2, r3
 800bf70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf72:	8912      	ldrh	r2, [r2, #8]
 800bf74:	4413      	add	r3, r2
  while (seg != NULL &&
 800bf76:	69ba      	ldr	r2, [r7, #24]
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	f4bf aed9 	bcs.w	800bd30 <tcp_output+0x160>
 800bf7e:	e000      	b.n	800bf82 <tcp_output+0x3b2>
      break;
 800bf80:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d108      	bne.n	800bf9c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800bf92:	e004      	b.n	800bf9e <tcp_output+0x3ce>
    goto output_done;
 800bf94:	bf00      	nop
 800bf96:	e002      	b.n	800bf9e <tcp_output+0x3ce>
    goto output_done;
 800bf98:	bf00      	nop
 800bf9a:	e000      	b.n	800bf9e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800bf9c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	8b5b      	ldrh	r3, [r3, #26]
 800bfa2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bfa6:	b29a      	uxth	r2, r3
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800bfac:	2300      	movs	r3, #0
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3728      	adds	r7, #40	@ 0x28
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bdb0      	pop	{r4, r5, r7, pc}
 800bfb6:	bf00      	nop

0800bfb8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b082      	sub	sp, #8
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d106      	bne.n	800bfd4 <tcp_output_segment_busy+0x1c>
 800bfc6:	4b09      	ldr	r3, [pc, #36]	@ (800bfec <tcp_output_segment_busy+0x34>)
 800bfc8:	f240 529a 	movw	r2, #1434	@ 0x59a
 800bfcc:	4908      	ldr	r1, [pc, #32]	@ (800bff0 <tcp_output_segment_busy+0x38>)
 800bfce:	4809      	ldr	r0, [pc, #36]	@ (800bff4 <tcp_output_segment_busy+0x3c>)
 800bfd0:	f003 ff6c 	bl	800feac <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	685b      	ldr	r3, [r3, #4]
 800bfd8:	7b9b      	ldrb	r3, [r3, #14]
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d001      	beq.n	800bfe2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800bfde:	2301      	movs	r3, #1
 800bfe0:	e000      	b.n	800bfe4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800bfe2:	2300      	movs	r3, #0
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3708      	adds	r7, #8
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}
 800bfec:	0801284c 	.word	0x0801284c
 800bff0:	08012de8 	.word	0x08012de8
 800bff4:	080128a0 	.word	0x080128a0

0800bff8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800bff8:	b5b0      	push	{r4, r5, r7, lr}
 800bffa:	b08c      	sub	sp, #48	@ 0x30
 800bffc:	af04      	add	r7, sp, #16
 800bffe:	60f8      	str	r0, [r7, #12]
 800c000:	60b9      	str	r1, [r7, #8]
 800c002:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d106      	bne.n	800c018 <tcp_output_segment+0x20>
 800c00a:	4b64      	ldr	r3, [pc, #400]	@ (800c19c <tcp_output_segment+0x1a4>)
 800c00c:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800c010:	4963      	ldr	r1, [pc, #396]	@ (800c1a0 <tcp_output_segment+0x1a8>)
 800c012:	4864      	ldr	r0, [pc, #400]	@ (800c1a4 <tcp_output_segment+0x1ac>)
 800c014:	f003 ff4a 	bl	800feac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d106      	bne.n	800c02c <tcp_output_segment+0x34>
 800c01e:	4b5f      	ldr	r3, [pc, #380]	@ (800c19c <tcp_output_segment+0x1a4>)
 800c020:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800c024:	4960      	ldr	r1, [pc, #384]	@ (800c1a8 <tcp_output_segment+0x1b0>)
 800c026:	485f      	ldr	r0, [pc, #380]	@ (800c1a4 <tcp_output_segment+0x1ac>)
 800c028:	f003 ff40 	bl	800feac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d106      	bne.n	800c040 <tcp_output_segment+0x48>
 800c032:	4b5a      	ldr	r3, [pc, #360]	@ (800c19c <tcp_output_segment+0x1a4>)
 800c034:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800c038:	495c      	ldr	r1, [pc, #368]	@ (800c1ac <tcp_output_segment+0x1b4>)
 800c03a:	485a      	ldr	r0, [pc, #360]	@ (800c1a4 <tcp_output_segment+0x1ac>)
 800c03c:	f003 ff36 	bl	800feac <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800c040:	68f8      	ldr	r0, [r7, #12]
 800c042:	f7ff ffb9 	bl	800bfb8 <tcp_output_segment_busy>
 800c046:	4603      	mov	r3, r0
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d001      	beq.n	800c050 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800c04c:	2300      	movs	r3, #0
 800c04e:	e0a1      	b.n	800c194 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	68dc      	ldr	r4, [r3, #12]
 800c058:	4610      	mov	r0, r2
 800c05a:	f7f9 fd5e 	bl	8005b1a <lwip_htonl>
 800c05e:	4603      	mov	r3, r0
 800c060:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	68dc      	ldr	r4, [r3, #12]
 800c06a:	4610      	mov	r0, r2
 800c06c:	f7f9 fd40 	bl	8005af0 <lwip_htons>
 800c070:	4603      	mov	r3, r0
 800c072:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c078:	68ba      	ldr	r2, [r7, #8]
 800c07a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800c07c:	441a      	add	r2, r3
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	68db      	ldr	r3, [r3, #12]
 800c086:	3314      	adds	r3, #20
 800c088:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	7a9b      	ldrb	r3, [r3, #10]
 800c08e:	f003 0301 	and.w	r3, r3, #1
 800c092:	2b00      	cmp	r3, #0
 800c094:	d015      	beq.n	800c0c2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	3304      	adds	r3, #4
 800c09a:	461a      	mov	r2, r3
 800c09c:	6879      	ldr	r1, [r7, #4]
 800c09e:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800c0a2:	f7fc fe91 	bl	8008dc8 <tcp_eff_send_mss_netif>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c0aa:	8b7b      	ldrh	r3, [r7, #26]
 800c0ac:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f7f9 fd32 	bl	8005b1a <lwip_htonl>
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	69fb      	ldr	r3, [r7, #28]
 800c0ba:	601a      	str	r2, [r3, #0]
    opts += 1;
 800c0bc:	69fb      	ldr	r3, [r7, #28]
 800c0be:	3304      	adds	r3, #4
 800c0c0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	da02      	bge.n	800c0d2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d10c      	bne.n	800c0f4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800c0da:	4b35      	ldr	r3, [pc, #212]	@ (800c1b0 <tcp_output_segment+0x1b8>)
 800c0dc:	681a      	ldr	r2, [r3, #0]
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	68db      	ldr	r3, [r3, #12]
 800c0e6:	685b      	ldr	r3, [r3, #4]
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f7f9 fd16 	bl	8005b1a <lwip_htonl>
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	68da      	ldr	r2, [r3, #12]
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	685b      	ldr	r3, [r3, #4]
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	1ad3      	subs	r3, r2, r3
 800c100:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	685b      	ldr	r3, [r3, #4]
 800c106:	8959      	ldrh	r1, [r3, #10]
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	8b3a      	ldrh	r2, [r7, #24]
 800c10e:	1a8a      	subs	r2, r1, r2
 800c110:	b292      	uxth	r2, r2
 800c112:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	685b      	ldr	r3, [r3, #4]
 800c118:	8919      	ldrh	r1, [r3, #8]
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	8b3a      	ldrh	r2, [r7, #24]
 800c120:	1a8a      	subs	r2, r1, r2
 800c122:	b292      	uxth	r2, r2
 800c124:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	685b      	ldr	r3, [r3, #4]
 800c12a:	68fa      	ldr	r2, [r7, #12]
 800c12c:	68d2      	ldr	r2, [r2, #12]
 800c12e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	68db      	ldr	r3, [r3, #12]
 800c134:	2200      	movs	r2, #0
 800c136:	741a      	strb	r2, [r3, #16]
 800c138:	2200      	movs	r2, #0
 800c13a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	68da      	ldr	r2, [r3, #12]
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	7a9b      	ldrb	r3, [r3, #10]
 800c144:	f003 0301 	and.w	r3, r3, #1
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d001      	beq.n	800c150 <tcp_output_segment+0x158>
 800c14c:	2318      	movs	r3, #24
 800c14e:	e000      	b.n	800c152 <tcp_output_segment+0x15a>
 800c150:	2314      	movs	r3, #20
 800c152:	4413      	add	r3, r2
 800c154:	69fa      	ldr	r2, [r7, #28]
 800c156:	429a      	cmp	r2, r3
 800c158:	d006      	beq.n	800c168 <tcp_output_segment+0x170>
 800c15a:	4b10      	ldr	r3, [pc, #64]	@ (800c19c <tcp_output_segment+0x1a4>)
 800c15c:	f240 621c 	movw	r2, #1564	@ 0x61c
 800c160:	4914      	ldr	r1, [pc, #80]	@ (800c1b4 <tcp_output_segment+0x1bc>)
 800c162:	4810      	ldr	r0, [pc, #64]	@ (800c1a4 <tcp_output_segment+0x1ac>)
 800c164:	f003 fea2 	bl	800feac <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	6858      	ldr	r0, [r3, #4]
 800c16c:	68b9      	ldr	r1, [r7, #8]
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	1d1c      	adds	r4, r3, #4
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	7add      	ldrb	r5, [r3, #11]
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	7a9b      	ldrb	r3, [r3, #10]
 800c17a:	687a      	ldr	r2, [r7, #4]
 800c17c:	9202      	str	r2, [sp, #8]
 800c17e:	2206      	movs	r2, #6
 800c180:	9201      	str	r2, [sp, #4]
 800c182:	9300      	str	r3, [sp, #0]
 800c184:	462b      	mov	r3, r5
 800c186:	4622      	mov	r2, r4
 800c188:	f002 fce2 	bl	800eb50 <ip4_output_if>
 800c18c:	4603      	mov	r3, r0
 800c18e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800c190:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c194:	4618      	mov	r0, r3
 800c196:	3720      	adds	r7, #32
 800c198:	46bd      	mov	sp, r7
 800c19a:	bdb0      	pop	{r4, r5, r7, pc}
 800c19c:	0801284c 	.word	0x0801284c
 800c1a0:	08012e10 	.word	0x08012e10
 800c1a4:	080128a0 	.word	0x080128a0
 800c1a8:	08012e30 	.word	0x08012e30
 800c1ac:	08012e50 	.word	0x08012e50
 800c1b0:	200087d0 	.word	0x200087d0
 800c1b4:	08012e74 	.word	0x08012e74

0800c1b8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800c1b8:	b5b0      	push	{r4, r5, r7, lr}
 800c1ba:	b084      	sub	sp, #16
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d106      	bne.n	800c1d4 <tcp_rexmit_rto_prepare+0x1c>
 800c1c6:	4b31      	ldr	r3, [pc, #196]	@ (800c28c <tcp_rexmit_rto_prepare+0xd4>)
 800c1c8:	f240 6263 	movw	r2, #1635	@ 0x663
 800c1cc:	4930      	ldr	r1, [pc, #192]	@ (800c290 <tcp_rexmit_rto_prepare+0xd8>)
 800c1ce:	4831      	ldr	r0, [pc, #196]	@ (800c294 <tcp_rexmit_rto_prepare+0xdc>)
 800c1d0:	f003 fe6c 	bl	800feac <iprintf>

  if (pcb->unacked == NULL) {
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d102      	bne.n	800c1e2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800c1dc:	f06f 0305 	mvn.w	r3, #5
 800c1e0:	e050      	b.n	800c284 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1e6:	60fb      	str	r3, [r7, #12]
 800c1e8:	e00b      	b.n	800c202 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800c1ea:	68f8      	ldr	r0, [r7, #12]
 800c1ec:	f7ff fee4 	bl	800bfb8 <tcp_output_segment_busy>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d002      	beq.n	800c1fc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800c1f6:	f06f 0305 	mvn.w	r3, #5
 800c1fa:	e043      	b.n	800c284 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	60fb      	str	r3, [r7, #12]
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d1ef      	bne.n	800c1ea <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800c20a:	68f8      	ldr	r0, [r7, #12]
 800c20c:	f7ff fed4 	bl	800bfb8 <tcp_output_segment_busy>
 800c210:	4603      	mov	r3, r0
 800c212:	2b00      	cmp	r3, #0
 800c214:	d002      	beq.n	800c21c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800c216:	f06f 0305 	mvn.w	r3, #5
 800c21a:	e033      	b.n	800c284 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2200      	movs	r2, #0
 800c230:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	8b5b      	ldrh	r3, [r3, #26]
 800c236:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800c23a:	b29a      	uxth	r2, r3
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	68db      	ldr	r3, [r3, #12]
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	4618      	mov	r0, r3
 800c248:	f7f9 fc67 	bl	8005b1a <lwip_htonl>
 800c24c:	4604      	mov	r4, r0
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	891b      	ldrh	r3, [r3, #8]
 800c252:	461d      	mov	r5, r3
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	68db      	ldr	r3, [r3, #12]
 800c258:	899b      	ldrh	r3, [r3, #12]
 800c25a:	b29b      	uxth	r3, r3
 800c25c:	4618      	mov	r0, r3
 800c25e:	f7f9 fc47 	bl	8005af0 <lwip_htons>
 800c262:	4603      	mov	r3, r0
 800c264:	b2db      	uxtb	r3, r3
 800c266:	f003 0303 	and.w	r3, r3, #3
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d001      	beq.n	800c272 <tcp_rexmit_rto_prepare+0xba>
 800c26e:	2301      	movs	r3, #1
 800c270:	e000      	b.n	800c274 <tcp_rexmit_rto_prepare+0xbc>
 800c272:	2300      	movs	r3, #0
 800c274:	442b      	add	r3, r5
 800c276:	18e2      	adds	r2, r4, r3
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2200      	movs	r2, #0
 800c280:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800c282:	2300      	movs	r3, #0
}
 800c284:	4618      	mov	r0, r3
 800c286:	3710      	adds	r7, #16
 800c288:	46bd      	mov	sp, r7
 800c28a:	bdb0      	pop	{r4, r5, r7, pc}
 800c28c:	0801284c 	.word	0x0801284c
 800c290:	08012e88 	.word	0x08012e88
 800c294:	080128a0 	.word	0x080128a0

0800c298 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d106      	bne.n	800c2b4 <tcp_rexmit_rto_commit+0x1c>
 800c2a6:	4b0d      	ldr	r3, [pc, #52]	@ (800c2dc <tcp_rexmit_rto_commit+0x44>)
 800c2a8:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800c2ac:	490c      	ldr	r1, [pc, #48]	@ (800c2e0 <tcp_rexmit_rto_commit+0x48>)
 800c2ae:	480d      	ldr	r0, [pc, #52]	@ (800c2e4 <tcp_rexmit_rto_commit+0x4c>)
 800c2b0:	f003 fdfc 	bl	800feac <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c2ba:	2bff      	cmp	r3, #255	@ 0xff
 800c2bc:	d007      	beq.n	800c2ce <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c2c4:	3301      	adds	r3, #1
 800c2c6:	b2da      	uxtb	r2, r3
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f7ff fc7e 	bl	800bbd0 <tcp_output>
}
 800c2d4:	bf00      	nop
 800c2d6:	3708      	adds	r7, #8
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}
 800c2dc:	0801284c 	.word	0x0801284c
 800c2e0:	08012eac 	.word	0x08012eac
 800c2e4:	080128a0 	.word	0x080128a0

0800c2e8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b082      	sub	sp, #8
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d106      	bne.n	800c304 <tcp_rexmit_rto+0x1c>
 800c2f6:	4b0a      	ldr	r3, [pc, #40]	@ (800c320 <tcp_rexmit_rto+0x38>)
 800c2f8:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800c2fc:	4909      	ldr	r1, [pc, #36]	@ (800c324 <tcp_rexmit_rto+0x3c>)
 800c2fe:	480a      	ldr	r0, [pc, #40]	@ (800c328 <tcp_rexmit_rto+0x40>)
 800c300:	f003 fdd4 	bl	800feac <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f7ff ff57 	bl	800c1b8 <tcp_rexmit_rto_prepare>
 800c30a:	4603      	mov	r3, r0
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d102      	bne.n	800c316 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f7ff ffc1 	bl	800c298 <tcp_rexmit_rto_commit>
  }
}
 800c316:	bf00      	nop
 800c318:	3708      	adds	r7, #8
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}
 800c31e:	bf00      	nop
 800c320:	0801284c 	.word	0x0801284c
 800c324:	08012ed0 	.word	0x08012ed0
 800c328:	080128a0 	.word	0x080128a0

0800c32c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800c32c:	b590      	push	{r4, r7, lr}
 800c32e:	b085      	sub	sp, #20
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d106      	bne.n	800c348 <tcp_rexmit+0x1c>
 800c33a:	4b2f      	ldr	r3, [pc, #188]	@ (800c3f8 <tcp_rexmit+0xcc>)
 800c33c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800c340:	492e      	ldr	r1, [pc, #184]	@ (800c3fc <tcp_rexmit+0xd0>)
 800c342:	482f      	ldr	r0, [pc, #188]	@ (800c400 <tcp_rexmit+0xd4>)
 800c344:	f003 fdb2 	bl	800feac <iprintf>

  if (pcb->unacked == NULL) {
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d102      	bne.n	800c356 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800c350:	f06f 0305 	mvn.w	r3, #5
 800c354:	e04c      	b.n	800c3f0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c35a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800c35c:	68b8      	ldr	r0, [r7, #8]
 800c35e:	f7ff fe2b 	bl	800bfb8 <tcp_output_segment_busy>
 800c362:	4603      	mov	r3, r0
 800c364:	2b00      	cmp	r3, #0
 800c366:	d002      	beq.n	800c36e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800c368:	f06f 0305 	mvn.w	r3, #5
 800c36c:	e040      	b.n	800c3f0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	681a      	ldr	r2, [r3, #0]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	336c      	adds	r3, #108	@ 0x6c
 800c37a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c37c:	e002      	b.n	800c384 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d011      	beq.n	800c3b0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	68db      	ldr	r3, [r3, #12]
 800c392:	685b      	ldr	r3, [r3, #4]
 800c394:	4618      	mov	r0, r3
 800c396:	f7f9 fbc0 	bl	8005b1a <lwip_htonl>
 800c39a:	4604      	mov	r4, r0
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	68db      	ldr	r3, [r3, #12]
 800c3a0:	685b      	ldr	r3, [r3, #4]
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f7f9 fbb9 	bl	8005b1a <lwip_htonl>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	dbe6      	blt.n	800c37e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	681a      	ldr	r2, [r3, #0]
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	68ba      	ldr	r2, [r7, #8]
 800c3bc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d103      	bne.n	800c3ce <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c3d4:	2bff      	cmp	r3, #255	@ 0xff
 800c3d6:	d007      	beq.n	800c3e8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c3de:	3301      	adds	r3, #1
 800c3e0:	b2da      	uxtb	r2, r3
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800c3ee:	2300      	movs	r3, #0
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3714      	adds	r7, #20
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd90      	pop	{r4, r7, pc}
 800c3f8:	0801284c 	.word	0x0801284c
 800c3fc:	08012eec 	.word	0x08012eec
 800c400:	080128a0 	.word	0x080128a0

0800c404 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b082      	sub	sp, #8
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d106      	bne.n	800c420 <tcp_rexmit_fast+0x1c>
 800c412:	4b2a      	ldr	r3, [pc, #168]	@ (800c4bc <tcp_rexmit_fast+0xb8>)
 800c414:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800c418:	4929      	ldr	r1, [pc, #164]	@ (800c4c0 <tcp_rexmit_fast+0xbc>)
 800c41a:	482a      	ldr	r0, [pc, #168]	@ (800c4c4 <tcp_rexmit_fast+0xc0>)
 800c41c:	f003 fd46 	bl	800feac <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c424:	2b00      	cmp	r3, #0
 800c426:	d045      	beq.n	800c4b4 <tcp_rexmit_fast+0xb0>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	8b5b      	ldrh	r3, [r3, #26]
 800c42c:	f003 0304 	and.w	r3, r3, #4
 800c430:	2b00      	cmp	r3, #0
 800c432:	d13f      	bne.n	800c4b4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f7ff ff79 	bl	800c32c <tcp_rexmit>
 800c43a:	4603      	mov	r3, r0
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d139      	bne.n	800c4b4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c44c:	4293      	cmp	r3, r2
 800c44e:	bf28      	it	cs
 800c450:	4613      	movcs	r3, r2
 800c452:	b29b      	uxth	r3, r3
 800c454:	2b00      	cmp	r3, #0
 800c456:	da00      	bge.n	800c45a <tcp_rexmit_fast+0x56>
 800c458:	3301      	adds	r3, #1
 800c45a:	105b      	asrs	r3, r3, #1
 800c45c:	b29a      	uxth	r2, r3
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800c46a:	461a      	mov	r2, r3
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c470:	005b      	lsls	r3, r3, #1
 800c472:	429a      	cmp	r2, r3
 800c474:	d206      	bcs.n	800c484 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c47a:	005b      	lsls	r3, r3, #1
 800c47c:	b29a      	uxth	r2, r3
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c48e:	4619      	mov	r1, r3
 800c490:	0049      	lsls	r1, r1, #1
 800c492:	440b      	add	r3, r1
 800c494:	b29b      	uxth	r3, r3
 800c496:	4413      	add	r3, r2
 800c498:	b29a      	uxth	r2, r3
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	8b5b      	ldrh	r3, [r3, #26]
 800c4a4:	f043 0304 	orr.w	r3, r3, #4
 800c4a8:	b29a      	uxth	r2, r3
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800c4b4:	bf00      	nop
 800c4b6:	3708      	adds	r7, #8
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}
 800c4bc:	0801284c 	.word	0x0801284c
 800c4c0:	08012f04 	.word	0x08012f04
 800c4c4:	080128a0 	.word	0x080128a0

0800c4c8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b086      	sub	sp, #24
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	60f8      	str	r0, [r7, #12]
 800c4d0:	607b      	str	r3, [r7, #4]
 800c4d2:	460b      	mov	r3, r1
 800c4d4:	817b      	strh	r3, [r7, #10]
 800c4d6:	4613      	mov	r3, r2
 800c4d8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c4da:	897a      	ldrh	r2, [r7, #10]
 800c4dc:	893b      	ldrh	r3, [r7, #8]
 800c4de:	4413      	add	r3, r2
 800c4e0:	b29b      	uxth	r3, r3
 800c4e2:	3314      	adds	r3, #20
 800c4e4:	b29b      	uxth	r3, r3
 800c4e6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	2022      	movs	r0, #34	@ 0x22
 800c4ee:	f7fa fb79 	bl	8006be4 <pbuf_alloc>
 800c4f2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800c4f4:	697b      	ldr	r3, [r7, #20]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d04d      	beq.n	800c596 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c4fa:	897b      	ldrh	r3, [r7, #10]
 800c4fc:	3313      	adds	r3, #19
 800c4fe:	697a      	ldr	r2, [r7, #20]
 800c500:	8952      	ldrh	r2, [r2, #10]
 800c502:	4293      	cmp	r3, r2
 800c504:	db06      	blt.n	800c514 <tcp_output_alloc_header_common+0x4c>
 800c506:	4b26      	ldr	r3, [pc, #152]	@ (800c5a0 <tcp_output_alloc_header_common+0xd8>)
 800c508:	f240 7223 	movw	r2, #1827	@ 0x723
 800c50c:	4925      	ldr	r1, [pc, #148]	@ (800c5a4 <tcp_output_alloc_header_common+0xdc>)
 800c50e:	4826      	ldr	r0, [pc, #152]	@ (800c5a8 <tcp_output_alloc_header_common+0xe0>)
 800c510:	f003 fccc 	bl	800feac <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800c514:	697b      	ldr	r3, [r7, #20]
 800c516:	685b      	ldr	r3, [r3, #4]
 800c518:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800c51a:	8c3b      	ldrh	r3, [r7, #32]
 800c51c:	4618      	mov	r0, r3
 800c51e:	f7f9 fae7 	bl	8005af0 <lwip_htons>
 800c522:	4603      	mov	r3, r0
 800c524:	461a      	mov	r2, r3
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c52a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c52c:	4618      	mov	r0, r3
 800c52e:	f7f9 fadf 	bl	8005af0 <lwip_htons>
 800c532:	4603      	mov	r3, r0
 800c534:	461a      	mov	r2, r3
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	687a      	ldr	r2, [r7, #4]
 800c53e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800c540:	68f8      	ldr	r0, [r7, #12]
 800c542:	f7f9 faea 	bl	8005b1a <lwip_htonl>
 800c546:	4602      	mov	r2, r0
 800c548:	693b      	ldr	r3, [r7, #16]
 800c54a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c54c:	897b      	ldrh	r3, [r7, #10]
 800c54e:	089b      	lsrs	r3, r3, #2
 800c550:	b29b      	uxth	r3, r3
 800c552:	3305      	adds	r3, #5
 800c554:	b29b      	uxth	r3, r3
 800c556:	031b      	lsls	r3, r3, #12
 800c558:	b29a      	uxth	r2, r3
 800c55a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c55e:	b29b      	uxth	r3, r3
 800c560:	4313      	orrs	r3, r2
 800c562:	b29b      	uxth	r3, r3
 800c564:	4618      	mov	r0, r3
 800c566:	f7f9 fac3 	bl	8005af0 <lwip_htons>
 800c56a:	4603      	mov	r3, r0
 800c56c:	461a      	mov	r2, r3
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c572:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c574:	4618      	mov	r0, r3
 800c576:	f7f9 fabb 	bl	8005af0 <lwip_htons>
 800c57a:	4603      	mov	r3, r0
 800c57c:	461a      	mov	r2, r3
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	2200      	movs	r2, #0
 800c586:	741a      	strb	r2, [r3, #16]
 800c588:	2200      	movs	r2, #0
 800c58a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800c58c:	693b      	ldr	r3, [r7, #16]
 800c58e:	2200      	movs	r2, #0
 800c590:	749a      	strb	r2, [r3, #18]
 800c592:	2200      	movs	r2, #0
 800c594:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800c596:	697b      	ldr	r3, [r7, #20]
}
 800c598:	4618      	mov	r0, r3
 800c59a:	3718      	adds	r7, #24
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}
 800c5a0:	0801284c 	.word	0x0801284c
 800c5a4:	08012f24 	.word	0x08012f24
 800c5a8:	080128a0 	.word	0x080128a0

0800c5ac <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800c5ac:	b5b0      	push	{r4, r5, r7, lr}
 800c5ae:	b08a      	sub	sp, #40	@ 0x28
 800c5b0:	af04      	add	r7, sp, #16
 800c5b2:	60f8      	str	r0, [r7, #12]
 800c5b4:	607b      	str	r3, [r7, #4]
 800c5b6:	460b      	mov	r3, r1
 800c5b8:	817b      	strh	r3, [r7, #10]
 800c5ba:	4613      	mov	r3, r2
 800c5bc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d106      	bne.n	800c5d2 <tcp_output_alloc_header+0x26>
 800c5c4:	4b15      	ldr	r3, [pc, #84]	@ (800c61c <tcp_output_alloc_header+0x70>)
 800c5c6:	f240 7242 	movw	r2, #1858	@ 0x742
 800c5ca:	4915      	ldr	r1, [pc, #84]	@ (800c620 <tcp_output_alloc_header+0x74>)
 800c5cc:	4815      	ldr	r0, [pc, #84]	@ (800c624 <tcp_output_alloc_header+0x78>)
 800c5ce:	f003 fc6d 	bl	800feac <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	8adb      	ldrh	r3, [r3, #22]
 800c5da:	68fa      	ldr	r2, [r7, #12]
 800c5dc:	8b12      	ldrh	r2, [r2, #24]
 800c5de:	68f9      	ldr	r1, [r7, #12]
 800c5e0:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800c5e2:	893d      	ldrh	r5, [r7, #8]
 800c5e4:	897c      	ldrh	r4, [r7, #10]
 800c5e6:	9103      	str	r1, [sp, #12]
 800c5e8:	2110      	movs	r1, #16
 800c5ea:	9102      	str	r1, [sp, #8]
 800c5ec:	9201      	str	r2, [sp, #4]
 800c5ee:	9300      	str	r3, [sp, #0]
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	462a      	mov	r2, r5
 800c5f4:	4621      	mov	r1, r4
 800c5f6:	f7ff ff67 	bl	800c4c8 <tcp_output_alloc_header_common>
 800c5fa:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d006      	beq.n	800c610 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c606:	68fa      	ldr	r2, [r7, #12]
 800c608:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800c60a:	441a      	add	r2, r3
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800c610:	697b      	ldr	r3, [r7, #20]
}
 800c612:	4618      	mov	r0, r3
 800c614:	3718      	adds	r7, #24
 800c616:	46bd      	mov	sp, r7
 800c618:	bdb0      	pop	{r4, r5, r7, pc}
 800c61a:	bf00      	nop
 800c61c:	0801284c 	.word	0x0801284c
 800c620:	08012f54 	.word	0x08012f54
 800c624:	080128a0 	.word	0x080128a0

0800c628 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b088      	sub	sp, #32
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	60f8      	str	r0, [r7, #12]
 800c630:	60b9      	str	r1, [r7, #8]
 800c632:	4611      	mov	r1, r2
 800c634:	461a      	mov	r2, r3
 800c636:	460b      	mov	r3, r1
 800c638:	71fb      	strb	r3, [r7, #7]
 800c63a:	4613      	mov	r3, r2
 800c63c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800c63e:	2300      	movs	r3, #0
 800c640:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d106      	bne.n	800c656 <tcp_output_fill_options+0x2e>
 800c648:	4b12      	ldr	r3, [pc, #72]	@ (800c694 <tcp_output_fill_options+0x6c>)
 800c64a:	f240 7256 	movw	r2, #1878	@ 0x756
 800c64e:	4912      	ldr	r1, [pc, #72]	@ (800c698 <tcp_output_fill_options+0x70>)
 800c650:	4812      	ldr	r0, [pc, #72]	@ (800c69c <tcp_output_fill_options+0x74>)
 800c652:	f003 fc2b 	bl	800feac <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	685b      	ldr	r3, [r3, #4]
 800c65a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800c65c:	69bb      	ldr	r3, [r7, #24]
 800c65e:	3314      	adds	r3, #20
 800c660:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800c662:	8bfb      	ldrh	r3, [r7, #30]
 800c664:	009b      	lsls	r3, r3, #2
 800c666:	461a      	mov	r2, r3
 800c668:	79fb      	ldrb	r3, [r7, #7]
 800c66a:	009b      	lsls	r3, r3, #2
 800c66c:	f003 0304 	and.w	r3, r3, #4
 800c670:	4413      	add	r3, r2
 800c672:	3314      	adds	r3, #20
 800c674:	69ba      	ldr	r2, [r7, #24]
 800c676:	4413      	add	r3, r2
 800c678:	697a      	ldr	r2, [r7, #20]
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d006      	beq.n	800c68c <tcp_output_fill_options+0x64>
 800c67e:	4b05      	ldr	r3, [pc, #20]	@ (800c694 <tcp_output_fill_options+0x6c>)
 800c680:	f240 7275 	movw	r2, #1909	@ 0x775
 800c684:	4906      	ldr	r1, [pc, #24]	@ (800c6a0 <tcp_output_fill_options+0x78>)
 800c686:	4805      	ldr	r0, [pc, #20]	@ (800c69c <tcp_output_fill_options+0x74>)
 800c688:	f003 fc10 	bl	800feac <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800c68c:	bf00      	nop
 800c68e:	3720      	adds	r7, #32
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}
 800c694:	0801284c 	.word	0x0801284c
 800c698:	08012f7c 	.word	0x08012f7c
 800c69c:	080128a0 	.word	0x080128a0
 800c6a0:	08012e74 	.word	0x08012e74

0800c6a4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b08a      	sub	sp, #40	@ 0x28
 800c6a8:	af04      	add	r7, sp, #16
 800c6aa:	60f8      	str	r0, [r7, #12]
 800c6ac:	60b9      	str	r1, [r7, #8]
 800c6ae:	607a      	str	r2, [r7, #4]
 800c6b0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d106      	bne.n	800c6c6 <tcp_output_control_segment+0x22>
 800c6b8:	4b1c      	ldr	r3, [pc, #112]	@ (800c72c <tcp_output_control_segment+0x88>)
 800c6ba:	f240 7287 	movw	r2, #1927	@ 0x787
 800c6be:	491c      	ldr	r1, [pc, #112]	@ (800c730 <tcp_output_control_segment+0x8c>)
 800c6c0:	481c      	ldr	r0, [pc, #112]	@ (800c734 <tcp_output_control_segment+0x90>)
 800c6c2:	f003 fbf3 	bl	800feac <iprintf>

  netif = tcp_route(pcb, src, dst);
 800c6c6:	683a      	ldr	r2, [r7, #0]
 800c6c8:	6879      	ldr	r1, [r7, #4]
 800c6ca:	68f8      	ldr	r0, [r7, #12]
 800c6cc:	f7fe ff42 	bl	800b554 <tcp_route>
 800c6d0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d102      	bne.n	800c6de <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800c6d8:	23fc      	movs	r3, #252	@ 0xfc
 800c6da:	75fb      	strb	r3, [r7, #23]
 800c6dc:	e01c      	b.n	800c718 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d006      	beq.n	800c6f2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	7adb      	ldrb	r3, [r3, #11]
 800c6e8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	7a9b      	ldrb	r3, [r3, #10]
 800c6ee:	757b      	strb	r3, [r7, #21]
 800c6f0:	e003      	b.n	800c6fa <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800c6f2:	23ff      	movs	r3, #255	@ 0xff
 800c6f4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c6fa:	7dba      	ldrb	r2, [r7, #22]
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	9302      	str	r3, [sp, #8]
 800c700:	2306      	movs	r3, #6
 800c702:	9301      	str	r3, [sp, #4]
 800c704:	7d7b      	ldrb	r3, [r7, #21]
 800c706:	9300      	str	r3, [sp, #0]
 800c708:	4613      	mov	r3, r2
 800c70a:	683a      	ldr	r2, [r7, #0]
 800c70c:	6879      	ldr	r1, [r7, #4]
 800c70e:	68b8      	ldr	r0, [r7, #8]
 800c710:	f002 fa1e 	bl	800eb50 <ip4_output_if>
 800c714:	4603      	mov	r3, r0
 800c716:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c718:	68b8      	ldr	r0, [r7, #8]
 800c71a:	f7fa fd47 	bl	80071ac <pbuf_free>
  return err;
 800c71e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c722:	4618      	mov	r0, r3
 800c724:	3718      	adds	r7, #24
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}
 800c72a:	bf00      	nop
 800c72c:	0801284c 	.word	0x0801284c
 800c730:	08012fa4 	.word	0x08012fa4
 800c734:	080128a0 	.word	0x080128a0

0800c738 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c738:	b590      	push	{r4, r7, lr}
 800c73a:	b08b      	sub	sp, #44	@ 0x2c
 800c73c:	af04      	add	r7, sp, #16
 800c73e:	60f8      	str	r0, [r7, #12]
 800c740:	60b9      	str	r1, [r7, #8]
 800c742:	607a      	str	r2, [r7, #4]
 800c744:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d106      	bne.n	800c75a <tcp_rst+0x22>
 800c74c:	4b1f      	ldr	r3, [pc, #124]	@ (800c7cc <tcp_rst+0x94>)
 800c74e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800c752:	491f      	ldr	r1, [pc, #124]	@ (800c7d0 <tcp_rst+0x98>)
 800c754:	481f      	ldr	r0, [pc, #124]	@ (800c7d4 <tcp_rst+0x9c>)
 800c756:	f003 fba9 	bl	800feac <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c75a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d106      	bne.n	800c76e <tcp_rst+0x36>
 800c760:	4b1a      	ldr	r3, [pc, #104]	@ (800c7cc <tcp_rst+0x94>)
 800c762:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800c766:	491c      	ldr	r1, [pc, #112]	@ (800c7d8 <tcp_rst+0xa0>)
 800c768:	481a      	ldr	r0, [pc, #104]	@ (800c7d4 <tcp_rst+0x9c>)
 800c76a:	f003 fb9f 	bl	800feac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c76e:	2300      	movs	r3, #0
 800c770:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800c772:	f246 0308 	movw	r3, #24584	@ 0x6008
 800c776:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c778:	7dfb      	ldrb	r3, [r7, #23]
 800c77a:	b29c      	uxth	r4, r3
 800c77c:	68b8      	ldr	r0, [r7, #8]
 800c77e:	f7f9 f9cc 	bl	8005b1a <lwip_htonl>
 800c782:	4602      	mov	r2, r0
 800c784:	8abb      	ldrh	r3, [r7, #20]
 800c786:	9303      	str	r3, [sp, #12]
 800c788:	2314      	movs	r3, #20
 800c78a:	9302      	str	r3, [sp, #8]
 800c78c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800c78e:	9301      	str	r3, [sp, #4]
 800c790:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c792:	9300      	str	r3, [sp, #0]
 800c794:	4613      	mov	r3, r2
 800c796:	2200      	movs	r2, #0
 800c798:	4621      	mov	r1, r4
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f7ff fe94 	bl	800c4c8 <tcp_output_alloc_header_common>
 800c7a0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d00c      	beq.n	800c7c2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c7a8:	7dfb      	ldrb	r3, [r7, #23]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	6939      	ldr	r1, [r7, #16]
 800c7ae:	68f8      	ldr	r0, [r7, #12]
 800c7b0:	f7ff ff3a 	bl	800c628 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c7b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7b6:	683a      	ldr	r2, [r7, #0]
 800c7b8:	6939      	ldr	r1, [r7, #16]
 800c7ba:	68f8      	ldr	r0, [r7, #12]
 800c7bc:	f7ff ff72 	bl	800c6a4 <tcp_output_control_segment>
 800c7c0:	e000      	b.n	800c7c4 <tcp_rst+0x8c>
    return;
 800c7c2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c7c4:	371c      	adds	r7, #28
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd90      	pop	{r4, r7, pc}
 800c7ca:	bf00      	nop
 800c7cc:	0801284c 	.word	0x0801284c
 800c7d0:	08012fd0 	.word	0x08012fd0
 800c7d4:	080128a0 	.word	0x080128a0
 800c7d8:	08012fec 	.word	0x08012fec

0800c7dc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c7dc:	b590      	push	{r4, r7, lr}
 800c7de:	b087      	sub	sp, #28
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d106      	bne.n	800c800 <tcp_send_empty_ack+0x24>
 800c7f2:	4b28      	ldr	r3, [pc, #160]	@ (800c894 <tcp_send_empty_ack+0xb8>)
 800c7f4:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800c7f8:	4927      	ldr	r1, [pc, #156]	@ (800c898 <tcp_send_empty_ack+0xbc>)
 800c7fa:	4828      	ldr	r0, [pc, #160]	@ (800c89c <tcp_send_empty_ack+0xc0>)
 800c7fc:	f003 fb56 	bl	800feac <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c800:	7dfb      	ldrb	r3, [r7, #23]
 800c802:	009b      	lsls	r3, r3, #2
 800c804:	b2db      	uxtb	r3, r3
 800c806:	f003 0304 	and.w	r3, r3, #4
 800c80a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c80c:	7d7b      	ldrb	r3, [r7, #21]
 800c80e:	b29c      	uxth	r4, r3
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c814:	4618      	mov	r0, r3
 800c816:	f7f9 f980 	bl	8005b1a <lwip_htonl>
 800c81a:	4603      	mov	r3, r0
 800c81c:	2200      	movs	r2, #0
 800c81e:	4621      	mov	r1, r4
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f7ff fec3 	bl	800c5ac <tcp_output_alloc_header>
 800c826:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d109      	bne.n	800c842 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	8b5b      	ldrh	r3, [r3, #26]
 800c832:	f043 0303 	orr.w	r3, r3, #3
 800c836:	b29a      	uxth	r2, r3
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c83c:	f06f 0301 	mvn.w	r3, #1
 800c840:	e023      	b.n	800c88a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c842:	7dbb      	ldrb	r3, [r7, #22]
 800c844:	7dfa      	ldrb	r2, [r7, #23]
 800c846:	6939      	ldr	r1, [r7, #16]
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f7ff feed 	bl	800c628 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c84e:	687a      	ldr	r2, [r7, #4]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	3304      	adds	r3, #4
 800c854:	6939      	ldr	r1, [r7, #16]
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f7ff ff24 	bl	800c6a4 <tcp_output_control_segment>
 800c85c:	4603      	mov	r3, r0
 800c85e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d007      	beq.n	800c878 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	8b5b      	ldrh	r3, [r3, #26]
 800c86c:	f043 0303 	orr.w	r3, r3, #3
 800c870:	b29a      	uxth	r2, r3
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	835a      	strh	r2, [r3, #26]
 800c876:	e006      	b.n	800c886 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	8b5b      	ldrh	r3, [r3, #26]
 800c87c:	f023 0303 	bic.w	r3, r3, #3
 800c880:	b29a      	uxth	r2, r3
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800c886:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	371c      	adds	r7, #28
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd90      	pop	{r4, r7, pc}
 800c892:	bf00      	nop
 800c894:	0801284c 	.word	0x0801284c
 800c898:	08013008 	.word	0x08013008
 800c89c:	080128a0 	.word	0x080128a0

0800c8a0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c8a0:	b590      	push	{r4, r7, lr}
 800c8a2:	b087      	sub	sp, #28
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d106      	bne.n	800c8c0 <tcp_keepalive+0x20>
 800c8b2:	4b18      	ldr	r3, [pc, #96]	@ (800c914 <tcp_keepalive+0x74>)
 800c8b4:	f640 0224 	movw	r2, #2084	@ 0x824
 800c8b8:	4917      	ldr	r1, [pc, #92]	@ (800c918 <tcp_keepalive+0x78>)
 800c8ba:	4818      	ldr	r0, [pc, #96]	@ (800c91c <tcp_keepalive+0x7c>)
 800c8bc:	f003 faf6 	bl	800feac <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c8c0:	7dfb      	ldrb	r3, [r7, #23]
 800c8c2:	b29c      	uxth	r4, r3
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8c8:	3b01      	subs	r3, #1
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f7f9 f925 	bl	8005b1a <lwip_htonl>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	4621      	mov	r1, r4
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f7ff fe68 	bl	800c5ac <tcp_output_alloc_header>
 800c8dc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c8de:	693b      	ldr	r3, [r7, #16]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d102      	bne.n	800c8ea <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c8e4:	f04f 33ff 	mov.w	r3, #4294967295
 800c8e8:	e010      	b.n	800c90c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c8ea:	7dfb      	ldrb	r3, [r7, #23]
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	6939      	ldr	r1, [r7, #16]
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f7ff fe99 	bl	800c628 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c8f6:	687a      	ldr	r2, [r7, #4]
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	3304      	adds	r3, #4
 800c8fc:	6939      	ldr	r1, [r7, #16]
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f7ff fed0 	bl	800c6a4 <tcp_output_control_segment>
 800c904:	4603      	mov	r3, r0
 800c906:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c908:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	371c      	adds	r7, #28
 800c910:	46bd      	mov	sp, r7
 800c912:	bd90      	pop	{r4, r7, pc}
 800c914:	0801284c 	.word	0x0801284c
 800c918:	08013028 	.word	0x08013028
 800c91c:	080128a0 	.word	0x080128a0

0800c920 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c920:	b590      	push	{r4, r7, lr}
 800c922:	b08b      	sub	sp, #44	@ 0x2c
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c928:	2300      	movs	r3, #0
 800c92a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d106      	bne.n	800c942 <tcp_zero_window_probe+0x22>
 800c934:	4b4c      	ldr	r3, [pc, #304]	@ (800ca68 <tcp_zero_window_probe+0x148>)
 800c936:	f640 024f 	movw	r2, #2127	@ 0x84f
 800c93a:	494c      	ldr	r1, [pc, #304]	@ (800ca6c <tcp_zero_window_probe+0x14c>)
 800c93c:	484c      	ldr	r0, [pc, #304]	@ (800ca70 <tcp_zero_window_probe+0x150>)
 800c93e:	f003 fab5 	bl	800feac <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c946:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800c948:	6a3b      	ldr	r3, [r7, #32]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d101      	bne.n	800c952 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800c94e:	2300      	movs	r3, #0
 800c950:	e086      	b.n	800ca60 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800c958:	2bff      	cmp	r3, #255	@ 0xff
 800c95a:	d007      	beq.n	800c96c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800c962:	3301      	adds	r3, #1
 800c964:	b2da      	uxtb	r2, r3
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c96c:	6a3b      	ldr	r3, [r7, #32]
 800c96e:	68db      	ldr	r3, [r3, #12]
 800c970:	899b      	ldrh	r3, [r3, #12]
 800c972:	b29b      	uxth	r3, r3
 800c974:	4618      	mov	r0, r3
 800c976:	f7f9 f8bb 	bl	8005af0 <lwip_htons>
 800c97a:	4603      	mov	r3, r0
 800c97c:	b2db      	uxtb	r3, r3
 800c97e:	f003 0301 	and.w	r3, r3, #1
 800c982:	2b00      	cmp	r3, #0
 800c984:	d005      	beq.n	800c992 <tcp_zero_window_probe+0x72>
 800c986:	6a3b      	ldr	r3, [r7, #32]
 800c988:	891b      	ldrh	r3, [r3, #8]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d101      	bne.n	800c992 <tcp_zero_window_probe+0x72>
 800c98e:	2301      	movs	r3, #1
 800c990:	e000      	b.n	800c994 <tcp_zero_window_probe+0x74>
 800c992:	2300      	movs	r3, #0
 800c994:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c996:	7ffb      	ldrb	r3, [r7, #31]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	bf0c      	ite	eq
 800c99c:	2301      	moveq	r3, #1
 800c99e:	2300      	movne	r3, #0
 800c9a0:	b2db      	uxtb	r3, r3
 800c9a2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c9a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c9a8:	b299      	uxth	r1, r3
 800c9aa:	6a3b      	ldr	r3, [r7, #32]
 800c9ac:	68db      	ldr	r3, [r3, #12]
 800c9ae:	685b      	ldr	r3, [r3, #4]
 800c9b0:	8bba      	ldrh	r2, [r7, #28]
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f7ff fdfa 	bl	800c5ac <tcp_output_alloc_header>
 800c9b8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c9ba:	69bb      	ldr	r3, [r7, #24]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d102      	bne.n	800c9c6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c9c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c9c4:	e04c      	b.n	800ca60 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c9c6:	69bb      	ldr	r3, [r7, #24]
 800c9c8:	685b      	ldr	r3, [r3, #4]
 800c9ca:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c9cc:	7ffb      	ldrb	r3, [r7, #31]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d011      	beq.n	800c9f6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	899b      	ldrh	r3, [r3, #12]
 800c9d6:	b29b      	uxth	r3, r3
 800c9d8:	b21b      	sxth	r3, r3
 800c9da:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c9de:	b21c      	sxth	r4, r3
 800c9e0:	2011      	movs	r0, #17
 800c9e2:	f7f9 f885 	bl	8005af0 <lwip_htons>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	b21b      	sxth	r3, r3
 800c9ea:	4323      	orrs	r3, r4
 800c9ec:	b21b      	sxth	r3, r3
 800c9ee:	b29a      	uxth	r2, r3
 800c9f0:	697b      	ldr	r3, [r7, #20]
 800c9f2:	819a      	strh	r2, [r3, #12]
 800c9f4:	e010      	b.n	800ca18 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c9f6:	69bb      	ldr	r3, [r7, #24]
 800c9f8:	685b      	ldr	r3, [r3, #4]
 800c9fa:	3314      	adds	r3, #20
 800c9fc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c9fe:	6a3b      	ldr	r3, [r7, #32]
 800ca00:	6858      	ldr	r0, [r3, #4]
 800ca02:	6a3b      	ldr	r3, [r7, #32]
 800ca04:	685b      	ldr	r3, [r3, #4]
 800ca06:	891a      	ldrh	r2, [r3, #8]
 800ca08:	6a3b      	ldr	r3, [r7, #32]
 800ca0a:	891b      	ldrh	r3, [r3, #8]
 800ca0c:	1ad3      	subs	r3, r2, r3
 800ca0e:	b29b      	uxth	r3, r3
 800ca10:	2201      	movs	r2, #1
 800ca12:	6939      	ldr	r1, [r7, #16]
 800ca14:	f7fa fdc4 	bl	80075a0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ca18:	6a3b      	ldr	r3, [r7, #32]
 800ca1a:	68db      	ldr	r3, [r3, #12]
 800ca1c:	685b      	ldr	r3, [r3, #4]
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f7f9 f87b 	bl	8005b1a <lwip_htonl>
 800ca24:	4603      	mov	r3, r0
 800ca26:	3301      	adds	r3, #1
 800ca28:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	1ad3      	subs	r3, r2, r3
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	da02      	bge.n	800ca3c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	68fa      	ldr	r2, [r7, #12]
 800ca3a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ca3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca40:	2200      	movs	r2, #0
 800ca42:	69b9      	ldr	r1, [r7, #24]
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f7ff fdef 	bl	800c628 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ca4a:	687a      	ldr	r2, [r7, #4]
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	3304      	adds	r3, #4
 800ca50:	69b9      	ldr	r1, [r7, #24]
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f7ff fe26 	bl	800c6a4 <tcp_output_control_segment>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ca5c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	372c      	adds	r7, #44	@ 0x2c
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd90      	pop	{r4, r7, pc}
 800ca68:	0801284c 	.word	0x0801284c
 800ca6c:	08013044 	.word	0x08013044
 800ca70:	080128a0 	.word	0x080128a0

0800ca74 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b082      	sub	sp, #8
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ca7c:	f7fa ff10 	bl	80078a0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ca80:	4b0a      	ldr	r3, [pc, #40]	@ (800caac <tcpip_tcp_timer+0x38>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d103      	bne.n	800ca90 <tcpip_tcp_timer+0x1c>
 800ca88:	4b09      	ldr	r3, [pc, #36]	@ (800cab0 <tcpip_tcp_timer+0x3c>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d005      	beq.n	800ca9c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ca90:	2200      	movs	r2, #0
 800ca92:	4908      	ldr	r1, [pc, #32]	@ (800cab4 <tcpip_tcp_timer+0x40>)
 800ca94:	20fa      	movs	r0, #250	@ 0xfa
 800ca96:	f000 f8f3 	bl	800cc80 <sys_timeout>
 800ca9a:	e003      	b.n	800caa4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ca9c:	4b06      	ldr	r3, [pc, #24]	@ (800cab8 <tcpip_tcp_timer+0x44>)
 800ca9e:	2200      	movs	r2, #0
 800caa0:	601a      	str	r2, [r3, #0]
  }
}
 800caa2:	bf00      	nop
 800caa4:	bf00      	nop
 800caa6:	3708      	adds	r7, #8
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}
 800caac:	200087dc 	.word	0x200087dc
 800cab0:	200087e0 	.word	0x200087e0
 800cab4:	0800ca75 	.word	0x0800ca75
 800cab8:	20008828 	.word	0x20008828

0800cabc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800cac0:	4b0a      	ldr	r3, [pc, #40]	@ (800caec <tcp_timer_needed+0x30>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d10f      	bne.n	800cae8 <tcp_timer_needed+0x2c>
 800cac8:	4b09      	ldr	r3, [pc, #36]	@ (800caf0 <tcp_timer_needed+0x34>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d103      	bne.n	800cad8 <tcp_timer_needed+0x1c>
 800cad0:	4b08      	ldr	r3, [pc, #32]	@ (800caf4 <tcp_timer_needed+0x38>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d007      	beq.n	800cae8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800cad8:	4b04      	ldr	r3, [pc, #16]	@ (800caec <tcp_timer_needed+0x30>)
 800cada:	2201      	movs	r2, #1
 800cadc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800cade:	2200      	movs	r2, #0
 800cae0:	4905      	ldr	r1, [pc, #20]	@ (800caf8 <tcp_timer_needed+0x3c>)
 800cae2:	20fa      	movs	r0, #250	@ 0xfa
 800cae4:	f000 f8cc 	bl	800cc80 <sys_timeout>
  }
}
 800cae8:	bf00      	nop
 800caea:	bd80      	pop	{r7, pc}
 800caec:	20008828 	.word	0x20008828
 800caf0:	200087dc 	.word	0x200087dc
 800caf4:	200087e0 	.word	0x200087e0
 800caf8:	0800ca75 	.word	0x0800ca75

0800cafc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b086      	sub	sp, #24
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	60f8      	str	r0, [r7, #12]
 800cb04:	60b9      	str	r1, [r7, #8]
 800cb06:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800cb08:	2006      	movs	r0, #6
 800cb0a:	f7f9 fc69 	bl	80063e0 <memp_malloc>
 800cb0e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d109      	bne.n	800cb2a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800cb16:	693b      	ldr	r3, [r7, #16]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d151      	bne.n	800cbc0 <sys_timeout_abs+0xc4>
 800cb1c:	4b2a      	ldr	r3, [pc, #168]	@ (800cbc8 <sys_timeout_abs+0xcc>)
 800cb1e:	22be      	movs	r2, #190	@ 0xbe
 800cb20:	492a      	ldr	r1, [pc, #168]	@ (800cbcc <sys_timeout_abs+0xd0>)
 800cb22:	482b      	ldr	r0, [pc, #172]	@ (800cbd0 <sys_timeout_abs+0xd4>)
 800cb24:	f003 f9c2 	bl	800feac <iprintf>
    return;
 800cb28:	e04a      	b.n	800cbc0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800cb2a:	693b      	ldr	r3, [r7, #16]
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	68ba      	ldr	r2, [r7, #8]
 800cb34:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	687a      	ldr	r2, [r7, #4]
 800cb3a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	68fa      	ldr	r2, [r7, #12]
 800cb40:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800cb42:	4b24      	ldr	r3, [pc, #144]	@ (800cbd4 <sys_timeout_abs+0xd8>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d103      	bne.n	800cb52 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800cb4a:	4a22      	ldr	r2, [pc, #136]	@ (800cbd4 <sys_timeout_abs+0xd8>)
 800cb4c:	693b      	ldr	r3, [r7, #16]
 800cb4e:	6013      	str	r3, [r2, #0]
    return;
 800cb50:	e037      	b.n	800cbc2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	685a      	ldr	r2, [r3, #4]
 800cb56:	4b1f      	ldr	r3, [pc, #124]	@ (800cbd4 <sys_timeout_abs+0xd8>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	685b      	ldr	r3, [r3, #4]
 800cb5c:	1ad3      	subs	r3, r2, r3
 800cb5e:	0fdb      	lsrs	r3, r3, #31
 800cb60:	f003 0301 	and.w	r3, r3, #1
 800cb64:	b2db      	uxtb	r3, r3
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d007      	beq.n	800cb7a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800cb6a:	4b1a      	ldr	r3, [pc, #104]	@ (800cbd4 <sys_timeout_abs+0xd8>)
 800cb6c:	681a      	ldr	r2, [r3, #0]
 800cb6e:	693b      	ldr	r3, [r7, #16]
 800cb70:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800cb72:	4a18      	ldr	r2, [pc, #96]	@ (800cbd4 <sys_timeout_abs+0xd8>)
 800cb74:	693b      	ldr	r3, [r7, #16]
 800cb76:	6013      	str	r3, [r2, #0]
 800cb78:	e023      	b.n	800cbc2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800cb7a:	4b16      	ldr	r3, [pc, #88]	@ (800cbd4 <sys_timeout_abs+0xd8>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	617b      	str	r3, [r7, #20]
 800cb80:	e01a      	b.n	800cbb8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d00b      	beq.n	800cba2 <sys_timeout_abs+0xa6>
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	685a      	ldr	r2, [r3, #4]
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	1ad3      	subs	r3, r2, r3
 800cb96:	0fdb      	lsrs	r3, r3, #31
 800cb98:	f003 0301 	and.w	r3, r3, #1
 800cb9c:	b2db      	uxtb	r3, r3
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d007      	beq.n	800cbb2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	681a      	ldr	r2, [r3, #0]
 800cba6:	693b      	ldr	r3, [r7, #16]
 800cba8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	693a      	ldr	r2, [r7, #16]
 800cbae:	601a      	str	r2, [r3, #0]
        break;
 800cbb0:	e007      	b.n	800cbc2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800cbb2:	697b      	ldr	r3, [r7, #20]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	617b      	str	r3, [r7, #20]
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d1e1      	bne.n	800cb82 <sys_timeout_abs+0x86>
 800cbbe:	e000      	b.n	800cbc2 <sys_timeout_abs+0xc6>
    return;
 800cbc0:	bf00      	nop
      }
    }
  }
}
 800cbc2:	3718      	adds	r7, #24
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}
 800cbc8:	08013068 	.word	0x08013068
 800cbcc:	0801309c 	.word	0x0801309c
 800cbd0:	080130dc 	.word	0x080130dc
 800cbd4:	20008820 	.word	0x20008820

0800cbd8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b086      	sub	sp, #24
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	685b      	ldr	r3, [r3, #4]
 800cbe8:	4798      	blx	r3

  now = sys_now();
 800cbea:	f7f8 fd75 	bl	80056d8 <sys_now>
 800cbee:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800cbf0:	697b      	ldr	r3, [r7, #20]
 800cbf2:	681a      	ldr	r2, [r3, #0]
 800cbf4:	4b0f      	ldr	r3, [pc, #60]	@ (800cc34 <lwip_cyclic_timer+0x5c>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	4413      	add	r3, r2
 800cbfa:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800cbfc:	68fa      	ldr	r2, [r7, #12]
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	1ad3      	subs	r3, r2, r3
 800cc02:	0fdb      	lsrs	r3, r3, #31
 800cc04:	f003 0301 	and.w	r3, r3, #1
 800cc08:	b2db      	uxtb	r3, r3
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d009      	beq.n	800cc22 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	681a      	ldr	r2, [r3, #0]
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	4413      	add	r3, r2
 800cc16:	687a      	ldr	r2, [r7, #4]
 800cc18:	4907      	ldr	r1, [pc, #28]	@ (800cc38 <lwip_cyclic_timer+0x60>)
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f7ff ff6e 	bl	800cafc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800cc20:	e004      	b.n	800cc2c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800cc22:	687a      	ldr	r2, [r7, #4]
 800cc24:	4904      	ldr	r1, [pc, #16]	@ (800cc38 <lwip_cyclic_timer+0x60>)
 800cc26:	68f8      	ldr	r0, [r7, #12]
 800cc28:	f7ff ff68 	bl	800cafc <sys_timeout_abs>
}
 800cc2c:	bf00      	nop
 800cc2e:	3718      	adds	r7, #24
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}
 800cc34:	20008824 	.word	0x20008824
 800cc38:	0800cbd9 	.word	0x0800cbd9

0800cc3c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b082      	sub	sp, #8
 800cc40:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800cc42:	2301      	movs	r3, #1
 800cc44:	607b      	str	r3, [r7, #4]
 800cc46:	e00e      	b.n	800cc66 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800cc48:	4a0b      	ldr	r2, [pc, #44]	@ (800cc78 <sys_timeouts_init+0x3c>)
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	00db      	lsls	r3, r3, #3
 800cc54:	4a08      	ldr	r2, [pc, #32]	@ (800cc78 <sys_timeouts_init+0x3c>)
 800cc56:	4413      	add	r3, r2
 800cc58:	461a      	mov	r2, r3
 800cc5a:	4908      	ldr	r1, [pc, #32]	@ (800cc7c <sys_timeouts_init+0x40>)
 800cc5c:	f000 f810 	bl	800cc80 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	3301      	adds	r3, #1
 800cc64:	607b      	str	r3, [r7, #4]
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2b02      	cmp	r3, #2
 800cc6a:	d9ed      	bls.n	800cc48 <sys_timeouts_init+0xc>
  }
}
 800cc6c:	bf00      	nop
 800cc6e:	bf00      	nop
 800cc70:	3708      	adds	r7, #8
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}
 800cc76:	bf00      	nop
 800cc78:	08013c54 	.word	0x08013c54
 800cc7c:	0800cbd9 	.word	0x0800cbd9

0800cc80 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b086      	sub	sp, #24
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	60f8      	str	r0, [r7, #12]
 800cc88:	60b9      	str	r1, [r7, #8]
 800cc8a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc92:	d306      	bcc.n	800cca2 <sys_timeout+0x22>
 800cc94:	4b0a      	ldr	r3, [pc, #40]	@ (800ccc0 <sys_timeout+0x40>)
 800cc96:	f240 1229 	movw	r2, #297	@ 0x129
 800cc9a:	490a      	ldr	r1, [pc, #40]	@ (800ccc4 <sys_timeout+0x44>)
 800cc9c:	480a      	ldr	r0, [pc, #40]	@ (800ccc8 <sys_timeout+0x48>)
 800cc9e:	f003 f905 	bl	800feac <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800cca2:	f7f8 fd19 	bl	80056d8 <sys_now>
 800cca6:	4602      	mov	r2, r0
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	4413      	add	r3, r2
 800ccac:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ccae:	687a      	ldr	r2, [r7, #4]
 800ccb0:	68b9      	ldr	r1, [r7, #8]
 800ccb2:	6978      	ldr	r0, [r7, #20]
 800ccb4:	f7ff ff22 	bl	800cafc <sys_timeout_abs>
#endif
}
 800ccb8:	bf00      	nop
 800ccba:	3718      	adds	r7, #24
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd80      	pop	{r7, pc}
 800ccc0:	08013068 	.word	0x08013068
 800ccc4:	08013104 	.word	0x08013104
 800ccc8:	080130dc 	.word	0x080130dc

0800cccc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b084      	sub	sp, #16
 800ccd0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800ccd2:	f7f8 fd01 	bl	80056d8 <sys_now>
 800ccd6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800ccd8:	4b1a      	ldr	r3, [pc, #104]	@ (800cd44 <sys_check_timeouts+0x78>)
 800ccda:	781b      	ldrb	r3, [r3, #0]
 800ccdc:	b2db      	uxtb	r3, r3
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d001      	beq.n	800cce6 <sys_check_timeouts+0x1a>
 800cce2:	f7f9 ff29 	bl	8006b38 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800cce6:	4b18      	ldr	r3, [pc, #96]	@ (800cd48 <sys_check_timeouts+0x7c>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d022      	beq.n	800cd38 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	68fa      	ldr	r2, [r7, #12]
 800ccf8:	1ad3      	subs	r3, r2, r3
 800ccfa:	0fdb      	lsrs	r3, r3, #31
 800ccfc:	f003 0301 	and.w	r3, r3, #1
 800cd00:	b2db      	uxtb	r3, r3
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d11a      	bne.n	800cd3c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800cd06:	68bb      	ldr	r3, [r7, #8]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	4a0f      	ldr	r2, [pc, #60]	@ (800cd48 <sys_check_timeouts+0x7c>)
 800cd0c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	689b      	ldr	r3, [r3, #8]
 800cd12:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	68db      	ldr	r3, [r3, #12]
 800cd18:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	685b      	ldr	r3, [r3, #4]
 800cd1e:	4a0b      	ldr	r2, [pc, #44]	@ (800cd4c <sys_check_timeouts+0x80>)
 800cd20:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800cd22:	68b9      	ldr	r1, [r7, #8]
 800cd24:	2006      	movs	r0, #6
 800cd26:	f7f9 fbcb 	bl	80064c0 <memp_free>
    if (handler != NULL) {
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d0d3      	beq.n	800ccd8 <sys_check_timeouts+0xc>
      handler(arg);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6838      	ldr	r0, [r7, #0]
 800cd34:	4798      	blx	r3
  do {
 800cd36:	e7cf      	b.n	800ccd8 <sys_check_timeouts+0xc>
      return;
 800cd38:	bf00      	nop
 800cd3a:	e000      	b.n	800cd3e <sys_check_timeouts+0x72>
      return;
 800cd3c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800cd3e:	3710      	adds	r7, #16
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}
 800cd44:	200087cd 	.word	0x200087cd
 800cd48:	20008820 	.word	0x20008820
 800cd4c:	20008824 	.word	0x20008824

0800cd50 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800cd54:	f002 ffaa 	bl	800fcac <rand>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	b29b      	uxth	r3, r3
 800cd5c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800cd60:	b29b      	uxth	r3, r3
 800cd62:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800cd66:	b29a      	uxth	r2, r3
 800cd68:	4b01      	ldr	r3, [pc, #4]	@ (800cd70 <udp_init+0x20>)
 800cd6a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800cd6c:	bf00      	nop
 800cd6e:	bd80      	pop	{r7, pc}
 800cd70:	20000028 	.word	0x20000028

0800cd74 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800cd74:	b480      	push	{r7}
 800cd76:	b083      	sub	sp, #12
 800cd78:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800cd7e:	4b17      	ldr	r3, [pc, #92]	@ (800cddc <udp_new_port+0x68>)
 800cd80:	881b      	ldrh	r3, [r3, #0]
 800cd82:	1c5a      	adds	r2, r3, #1
 800cd84:	b291      	uxth	r1, r2
 800cd86:	4a15      	ldr	r2, [pc, #84]	@ (800cddc <udp_new_port+0x68>)
 800cd88:	8011      	strh	r1, [r2, #0]
 800cd8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d103      	bne.n	800cd9a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800cd92:	4b12      	ldr	r3, [pc, #72]	@ (800cddc <udp_new_port+0x68>)
 800cd94:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800cd98:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cd9a:	4b11      	ldr	r3, [pc, #68]	@ (800cde0 <udp_new_port+0x6c>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	603b      	str	r3, [r7, #0]
 800cda0:	e011      	b.n	800cdc6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	8a5a      	ldrh	r2, [r3, #18]
 800cda6:	4b0d      	ldr	r3, [pc, #52]	@ (800cddc <udp_new_port+0x68>)
 800cda8:	881b      	ldrh	r3, [r3, #0]
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	d108      	bne.n	800cdc0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800cdae:	88fb      	ldrh	r3, [r7, #6]
 800cdb0:	3301      	adds	r3, #1
 800cdb2:	80fb      	strh	r3, [r7, #6]
 800cdb4:	88fb      	ldrh	r3, [r7, #6]
 800cdb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cdba:	d3e0      	bcc.n	800cd7e <udp_new_port+0xa>
        return 0;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	e007      	b.n	800cdd0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	68db      	ldr	r3, [r3, #12]
 800cdc4:	603b      	str	r3, [r7, #0]
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d1ea      	bne.n	800cda2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800cdcc:	4b03      	ldr	r3, [pc, #12]	@ (800cddc <udp_new_port+0x68>)
 800cdce:	881b      	ldrh	r3, [r3, #0]
}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	370c      	adds	r7, #12
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdda:	4770      	bx	lr
 800cddc:	20000028 	.word	0x20000028
 800cde0:	2000882c 	.word	0x2000882c

0800cde4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b084      	sub	sp, #16
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	60f8      	str	r0, [r7, #12]
 800cdec:	60b9      	str	r1, [r7, #8]
 800cdee:	4613      	mov	r3, r2
 800cdf0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d105      	bne.n	800ce04 <udp_input_local_match+0x20>
 800cdf8:	4b27      	ldr	r3, [pc, #156]	@ (800ce98 <udp_input_local_match+0xb4>)
 800cdfa:	2287      	movs	r2, #135	@ 0x87
 800cdfc:	4927      	ldr	r1, [pc, #156]	@ (800ce9c <udp_input_local_match+0xb8>)
 800cdfe:	4828      	ldr	r0, [pc, #160]	@ (800cea0 <udp_input_local_match+0xbc>)
 800ce00:	f003 f854 	bl	800feac <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d105      	bne.n	800ce16 <udp_input_local_match+0x32>
 800ce0a:	4b23      	ldr	r3, [pc, #140]	@ (800ce98 <udp_input_local_match+0xb4>)
 800ce0c:	2288      	movs	r2, #136	@ 0x88
 800ce0e:	4925      	ldr	r1, [pc, #148]	@ (800cea4 <udp_input_local_match+0xc0>)
 800ce10:	4823      	ldr	r0, [pc, #140]	@ (800cea0 <udp_input_local_match+0xbc>)
 800ce12:	f003 f84b 	bl	800feac <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	7a1b      	ldrb	r3, [r3, #8]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d00b      	beq.n	800ce36 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	7a1a      	ldrb	r2, [r3, #8]
 800ce22:	4b21      	ldr	r3, [pc, #132]	@ (800cea8 <udp_input_local_match+0xc4>)
 800ce24:	685b      	ldr	r3, [r3, #4]
 800ce26:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ce2e:	429a      	cmp	r2, r3
 800ce30:	d001      	beq.n	800ce36 <udp_input_local_match+0x52>
    return 0;
 800ce32:	2300      	movs	r3, #0
 800ce34:	e02b      	b.n	800ce8e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ce36:	79fb      	ldrb	r3, [r7, #7]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d018      	beq.n	800ce6e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d013      	beq.n	800ce6a <udp_input_local_match+0x86>
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d00f      	beq.n	800ce6a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ce4a:	4b17      	ldr	r3, [pc, #92]	@ (800cea8 <udp_input_local_match+0xc4>)
 800ce4c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ce4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce52:	d00a      	beq.n	800ce6a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	681a      	ldr	r2, [r3, #0]
 800ce58:	4b13      	ldr	r3, [pc, #76]	@ (800cea8 <udp_input_local_match+0xc4>)
 800ce5a:	695b      	ldr	r3, [r3, #20]
 800ce5c:	405a      	eors	r2, r3
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	3308      	adds	r3, #8
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d110      	bne.n	800ce8c <udp_input_local_match+0xa8>
          return 1;
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	e00f      	b.n	800ce8e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d009      	beq.n	800ce88 <udp_input_local_match+0xa4>
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d005      	beq.n	800ce88 <udp_input_local_match+0xa4>
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	681a      	ldr	r2, [r3, #0]
 800ce80:	4b09      	ldr	r3, [pc, #36]	@ (800cea8 <udp_input_local_match+0xc4>)
 800ce82:	695b      	ldr	r3, [r3, #20]
 800ce84:	429a      	cmp	r2, r3
 800ce86:	d101      	bne.n	800ce8c <udp_input_local_match+0xa8>
        return 1;
 800ce88:	2301      	movs	r3, #1
 800ce8a:	e000      	b.n	800ce8e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800ce8c:	2300      	movs	r3, #0
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3710      	adds	r7, #16
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}
 800ce96:	bf00      	nop
 800ce98:	08013150 	.word	0x08013150
 800ce9c:	08013180 	.word	0x08013180
 800cea0:	080131a4 	.word	0x080131a4
 800cea4:	080131cc 	.word	0x080131cc
 800cea8:	20005260 	.word	0x20005260

0800ceac <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ceac:	b590      	push	{r4, r7, lr}
 800ceae:	b08d      	sub	sp, #52	@ 0x34
 800ceb0:	af02      	add	r7, sp, #8
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d105      	bne.n	800cecc <udp_input+0x20>
 800cec0:	4b7c      	ldr	r3, [pc, #496]	@ (800d0b4 <udp_input+0x208>)
 800cec2:	22cf      	movs	r2, #207	@ 0xcf
 800cec4:	497c      	ldr	r1, [pc, #496]	@ (800d0b8 <udp_input+0x20c>)
 800cec6:	487d      	ldr	r0, [pc, #500]	@ (800d0bc <udp_input+0x210>)
 800cec8:	f002 fff0 	bl	800feac <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d105      	bne.n	800cede <udp_input+0x32>
 800ced2:	4b78      	ldr	r3, [pc, #480]	@ (800d0b4 <udp_input+0x208>)
 800ced4:	22d0      	movs	r2, #208	@ 0xd0
 800ced6:	497a      	ldr	r1, [pc, #488]	@ (800d0c0 <udp_input+0x214>)
 800ced8:	4878      	ldr	r0, [pc, #480]	@ (800d0bc <udp_input+0x210>)
 800ceda:	f002 ffe7 	bl	800feac <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	895b      	ldrh	r3, [r3, #10]
 800cee2:	2b07      	cmp	r3, #7
 800cee4:	d803      	bhi.n	800ceee <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f7fa f960 	bl	80071ac <pbuf_free>
    goto end;
 800ceec:	e0de      	b.n	800d0ac <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	685b      	ldr	r3, [r3, #4]
 800cef2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800cef4:	4b73      	ldr	r3, [pc, #460]	@ (800d0c4 <udp_input+0x218>)
 800cef6:	695b      	ldr	r3, [r3, #20]
 800cef8:	4a72      	ldr	r2, [pc, #456]	@ (800d0c4 <udp_input+0x218>)
 800cefa:	6812      	ldr	r2, [r2, #0]
 800cefc:	4611      	mov	r1, r2
 800cefe:	4618      	mov	r0, r3
 800cf00:	f001 fefe 	bl	800ed00 <ip4_addr_isbroadcast_u32>
 800cf04:	4603      	mov	r3, r0
 800cf06:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	881b      	ldrh	r3, [r3, #0]
 800cf0c:	b29b      	uxth	r3, r3
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f7f8 fdee 	bl	8005af0 <lwip_htons>
 800cf14:	4603      	mov	r3, r0
 800cf16:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	885b      	ldrh	r3, [r3, #2]
 800cf1c:	b29b      	uxth	r3, r3
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7f8 fde6 	bl	8005af0 <lwip_htons>
 800cf24:	4603      	mov	r3, r0
 800cf26:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800cf28:	2300      	movs	r3, #0
 800cf2a:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800cf30:	2300      	movs	r3, #0
 800cf32:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cf34:	4b64      	ldr	r3, [pc, #400]	@ (800d0c8 <udp_input+0x21c>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf3a:	e054      	b.n	800cfe6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800cf3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf3e:	8a5b      	ldrh	r3, [r3, #18]
 800cf40:	89fa      	ldrh	r2, [r7, #14]
 800cf42:	429a      	cmp	r2, r3
 800cf44:	d14a      	bne.n	800cfdc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800cf46:	7cfb      	ldrb	r3, [r7, #19]
 800cf48:	461a      	mov	r2, r3
 800cf4a:	6839      	ldr	r1, [r7, #0]
 800cf4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cf4e:	f7ff ff49 	bl	800cde4 <udp_input_local_match>
 800cf52:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d041      	beq.n	800cfdc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800cf58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf5a:	7c1b      	ldrb	r3, [r3, #16]
 800cf5c:	f003 0304 	and.w	r3, r3, #4
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d11d      	bne.n	800cfa0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800cf64:	69fb      	ldr	r3, [r7, #28]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d102      	bne.n	800cf70 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800cf6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf6c:	61fb      	str	r3, [r7, #28]
 800cf6e:	e017      	b.n	800cfa0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800cf70:	7cfb      	ldrb	r3, [r7, #19]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d014      	beq.n	800cfa0 <udp_input+0xf4>
 800cf76:	4b53      	ldr	r3, [pc, #332]	@ (800d0c4 <udp_input+0x218>)
 800cf78:	695b      	ldr	r3, [r3, #20]
 800cf7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf7e:	d10f      	bne.n	800cfa0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800cf80:	69fb      	ldr	r3, [r7, #28]
 800cf82:	681a      	ldr	r2, [r3, #0]
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	3304      	adds	r3, #4
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d008      	beq.n	800cfa0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800cf8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf90:	681a      	ldr	r2, [r3, #0]
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	3304      	adds	r3, #4
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d101      	bne.n	800cfa0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800cf9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf9e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800cfa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfa2:	8a9b      	ldrh	r3, [r3, #20]
 800cfa4:	8a3a      	ldrh	r2, [r7, #16]
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d118      	bne.n	800cfdc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cfaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfac:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d005      	beq.n	800cfbe <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800cfb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfb4:	685a      	ldr	r2, [r3, #4]
 800cfb6:	4b43      	ldr	r3, [pc, #268]	@ (800d0c4 <udp_input+0x218>)
 800cfb8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	d10e      	bne.n	800cfdc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800cfbe:	6a3b      	ldr	r3, [r7, #32]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d014      	beq.n	800cfee <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800cfc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfc6:	68da      	ldr	r2, [r3, #12]
 800cfc8:	6a3b      	ldr	r3, [r7, #32]
 800cfca:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800cfcc:	4b3e      	ldr	r3, [pc, #248]	@ (800d0c8 <udp_input+0x21c>)
 800cfce:	681a      	ldr	r2, [r3, #0]
 800cfd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfd2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800cfd4:	4a3c      	ldr	r2, [pc, #240]	@ (800d0c8 <udp_input+0x21c>)
 800cfd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfd8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800cfda:	e008      	b.n	800cfee <udp_input+0x142>
      }
    }

    prev = pcb;
 800cfdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfde:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cfe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfe2:	68db      	ldr	r3, [r3, #12]
 800cfe4:	627b      	str	r3, [r7, #36]	@ 0x24
 800cfe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d1a7      	bne.n	800cf3c <udp_input+0x90>
 800cfec:	e000      	b.n	800cff0 <udp_input+0x144>
        break;
 800cfee:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800cff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d101      	bne.n	800cffa <udp_input+0x14e>
    pcb = uncon_pcb;
 800cff6:	69fb      	ldr	r3, [r7, #28]
 800cff8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800cffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d002      	beq.n	800d006 <udp_input+0x15a>
    for_us = 1;
 800d000:	2301      	movs	r3, #1
 800d002:	76fb      	strb	r3, [r7, #27]
 800d004:	e00a      	b.n	800d01c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	3304      	adds	r3, #4
 800d00a:	681a      	ldr	r2, [r3, #0]
 800d00c:	4b2d      	ldr	r3, [pc, #180]	@ (800d0c4 <udp_input+0x218>)
 800d00e:	695b      	ldr	r3, [r3, #20]
 800d010:	429a      	cmp	r2, r3
 800d012:	bf0c      	ite	eq
 800d014:	2301      	moveq	r3, #1
 800d016:	2300      	movne	r3, #0
 800d018:	b2db      	uxtb	r3, r3
 800d01a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800d01c:	7efb      	ldrb	r3, [r7, #27]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d041      	beq.n	800d0a6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800d022:	2108      	movs	r1, #8
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f7fa f83b 	bl	80070a0 <pbuf_remove_header>
 800d02a:	4603      	mov	r3, r0
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d00a      	beq.n	800d046 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800d030:	4b20      	ldr	r3, [pc, #128]	@ (800d0b4 <udp_input+0x208>)
 800d032:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800d036:	4925      	ldr	r1, [pc, #148]	@ (800d0cc <udp_input+0x220>)
 800d038:	4820      	ldr	r0, [pc, #128]	@ (800d0bc <udp_input+0x210>)
 800d03a:	f002 ff37 	bl	800feac <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f7fa f8b4 	bl	80071ac <pbuf_free>
      goto end;
 800d044:	e032      	b.n	800d0ac <udp_input+0x200>
    }

    if (pcb != NULL) {
 800d046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d012      	beq.n	800d072 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800d04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d04e:	699b      	ldr	r3, [r3, #24]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d00a      	beq.n	800d06a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d056:	699c      	ldr	r4, [r3, #24]
 800d058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d05a:	69d8      	ldr	r0, [r3, #28]
 800d05c:	8a3b      	ldrh	r3, [r7, #16]
 800d05e:	9300      	str	r3, [sp, #0]
 800d060:	4b1b      	ldr	r3, [pc, #108]	@ (800d0d0 <udp_input+0x224>)
 800d062:	687a      	ldr	r2, [r7, #4]
 800d064:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d066:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800d068:	e021      	b.n	800d0ae <udp_input+0x202>
        pbuf_free(p);
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f7fa f89e 	bl	80071ac <pbuf_free>
        goto end;
 800d070:	e01c      	b.n	800d0ac <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d072:	7cfb      	ldrb	r3, [r7, #19]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d112      	bne.n	800d09e <udp_input+0x1f2>
 800d078:	4b12      	ldr	r3, [pc, #72]	@ (800d0c4 <udp_input+0x218>)
 800d07a:	695b      	ldr	r3, [r3, #20]
 800d07c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d080:	2be0      	cmp	r3, #224	@ 0xe0
 800d082:	d00c      	beq.n	800d09e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800d084:	4b0f      	ldr	r3, [pc, #60]	@ (800d0c4 <udp_input+0x218>)
 800d086:	899b      	ldrh	r3, [r3, #12]
 800d088:	3308      	adds	r3, #8
 800d08a:	b29b      	uxth	r3, r3
 800d08c:	b21b      	sxth	r3, r3
 800d08e:	4619      	mov	r1, r3
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f7fa f878 	bl	8007186 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d096:	2103      	movs	r1, #3
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f001 fb11 	bl	800e6c0 <icmp_dest_unreach>
      pbuf_free(p);
 800d09e:	6878      	ldr	r0, [r7, #4]
 800d0a0:	f7fa f884 	bl	80071ac <pbuf_free>
  return;
 800d0a4:	e003      	b.n	800d0ae <udp_input+0x202>
    pbuf_free(p);
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f7fa f880 	bl	80071ac <pbuf_free>
  return;
 800d0ac:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d0ae:	372c      	adds	r7, #44	@ 0x2c
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd90      	pop	{r4, r7, pc}
 800d0b4:	08013150 	.word	0x08013150
 800d0b8:	080131f4 	.word	0x080131f4
 800d0bc:	080131a4 	.word	0x080131a4
 800d0c0:	0801320c 	.word	0x0801320c
 800d0c4:	20005260 	.word	0x20005260
 800d0c8:	2000882c 	.word	0x2000882c
 800d0cc:	08013228 	.word	0x08013228
 800d0d0:	20005270 	.word	0x20005270

0800d0d4 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b088      	sub	sp, #32
 800d0d8:	af02      	add	r7, sp, #8
 800d0da:	60f8      	str	r0, [r7, #12]
 800d0dc:	60b9      	str	r1, [r7, #8]
 800d0de:	607a      	str	r2, [r7, #4]
 800d0e0:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d109      	bne.n	800d0fc <udp_sendto+0x28>
 800d0e8:	4b23      	ldr	r3, [pc, #140]	@ (800d178 <udp_sendto+0xa4>)
 800d0ea:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800d0ee:	4923      	ldr	r1, [pc, #140]	@ (800d17c <udp_sendto+0xa8>)
 800d0f0:	4823      	ldr	r0, [pc, #140]	@ (800d180 <udp_sendto+0xac>)
 800d0f2:	f002 fedb 	bl	800feac <iprintf>
 800d0f6:	f06f 030f 	mvn.w	r3, #15
 800d0fa:	e038      	b.n	800d16e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d109      	bne.n	800d116 <udp_sendto+0x42>
 800d102:	4b1d      	ldr	r3, [pc, #116]	@ (800d178 <udp_sendto+0xa4>)
 800d104:	f240 2219 	movw	r2, #537	@ 0x219
 800d108:	491e      	ldr	r1, [pc, #120]	@ (800d184 <udp_sendto+0xb0>)
 800d10a:	481d      	ldr	r0, [pc, #116]	@ (800d180 <udp_sendto+0xac>)
 800d10c:	f002 fece 	bl	800feac <iprintf>
 800d110:	f06f 030f 	mvn.w	r3, #15
 800d114:	e02b      	b.n	800d16e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d109      	bne.n	800d130 <udp_sendto+0x5c>
 800d11c:	4b16      	ldr	r3, [pc, #88]	@ (800d178 <udp_sendto+0xa4>)
 800d11e:	f240 221a 	movw	r2, #538	@ 0x21a
 800d122:	4919      	ldr	r1, [pc, #100]	@ (800d188 <udp_sendto+0xb4>)
 800d124:	4816      	ldr	r0, [pc, #88]	@ (800d180 <udp_sendto+0xac>)
 800d126:	f002 fec1 	bl	800feac <iprintf>
 800d12a:	f06f 030f 	mvn.w	r3, #15
 800d12e:	e01e      	b.n	800d16e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	7a1b      	ldrb	r3, [r3, #8]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d006      	beq.n	800d146 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	7a1b      	ldrb	r3, [r3, #8]
 800d13c:	4618      	mov	r0, r3
 800d13e:	f7f9 fcd5 	bl	8006aec <netif_get_by_index>
 800d142:	6178      	str	r0, [r7, #20]
 800d144:	e003      	b.n	800d14e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f001 fb44 	bl	800e7d4 <ip4_route>
 800d14c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d102      	bne.n	800d15a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800d154:	f06f 0303 	mvn.w	r3, #3
 800d158:	e009      	b.n	800d16e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800d15a:	887a      	ldrh	r2, [r7, #2]
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	9300      	str	r3, [sp, #0]
 800d160:	4613      	mov	r3, r2
 800d162:	687a      	ldr	r2, [r7, #4]
 800d164:	68b9      	ldr	r1, [r7, #8]
 800d166:	68f8      	ldr	r0, [r7, #12]
 800d168:	f000 f810 	bl	800d18c <udp_sendto_if>
 800d16c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3718      	adds	r7, #24
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}
 800d176:	bf00      	nop
 800d178:	08013150 	.word	0x08013150
 800d17c:	08013274 	.word	0x08013274
 800d180:	080131a4 	.word	0x080131a4
 800d184:	0801328c 	.word	0x0801328c
 800d188:	080132a8 	.word	0x080132a8

0800d18c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b088      	sub	sp, #32
 800d190:	af02      	add	r7, sp, #8
 800d192:	60f8      	str	r0, [r7, #12]
 800d194:	60b9      	str	r1, [r7, #8]
 800d196:	607a      	str	r2, [r7, #4]
 800d198:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d109      	bne.n	800d1b4 <udp_sendto_if+0x28>
 800d1a0:	4b2e      	ldr	r3, [pc, #184]	@ (800d25c <udp_sendto_if+0xd0>)
 800d1a2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d1a6:	492e      	ldr	r1, [pc, #184]	@ (800d260 <udp_sendto_if+0xd4>)
 800d1a8:	482e      	ldr	r0, [pc, #184]	@ (800d264 <udp_sendto_if+0xd8>)
 800d1aa:	f002 fe7f 	bl	800feac <iprintf>
 800d1ae:	f06f 030f 	mvn.w	r3, #15
 800d1b2:	e04f      	b.n	800d254 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d109      	bne.n	800d1ce <udp_sendto_if+0x42>
 800d1ba:	4b28      	ldr	r3, [pc, #160]	@ (800d25c <udp_sendto_if+0xd0>)
 800d1bc:	f240 2281 	movw	r2, #641	@ 0x281
 800d1c0:	4929      	ldr	r1, [pc, #164]	@ (800d268 <udp_sendto_if+0xdc>)
 800d1c2:	4828      	ldr	r0, [pc, #160]	@ (800d264 <udp_sendto_if+0xd8>)
 800d1c4:	f002 fe72 	bl	800feac <iprintf>
 800d1c8:	f06f 030f 	mvn.w	r3, #15
 800d1cc:	e042      	b.n	800d254 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d109      	bne.n	800d1e8 <udp_sendto_if+0x5c>
 800d1d4:	4b21      	ldr	r3, [pc, #132]	@ (800d25c <udp_sendto_if+0xd0>)
 800d1d6:	f240 2282 	movw	r2, #642	@ 0x282
 800d1da:	4924      	ldr	r1, [pc, #144]	@ (800d26c <udp_sendto_if+0xe0>)
 800d1dc:	4821      	ldr	r0, [pc, #132]	@ (800d264 <udp_sendto_if+0xd8>)
 800d1de:	f002 fe65 	bl	800feac <iprintf>
 800d1e2:	f06f 030f 	mvn.w	r3, #15
 800d1e6:	e035      	b.n	800d254 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800d1e8:	6a3b      	ldr	r3, [r7, #32]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d109      	bne.n	800d202 <udp_sendto_if+0x76>
 800d1ee:	4b1b      	ldr	r3, [pc, #108]	@ (800d25c <udp_sendto_if+0xd0>)
 800d1f0:	f240 2283 	movw	r2, #643	@ 0x283
 800d1f4:	491e      	ldr	r1, [pc, #120]	@ (800d270 <udp_sendto_if+0xe4>)
 800d1f6:	481b      	ldr	r0, [pc, #108]	@ (800d264 <udp_sendto_if+0xd8>)
 800d1f8:	f002 fe58 	bl	800feac <iprintf>
 800d1fc:	f06f 030f 	mvn.w	r3, #15
 800d200:	e028      	b.n	800d254 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d009      	beq.n	800d21c <udp_sendto_if+0x90>
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d005      	beq.n	800d21c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d218:	2be0      	cmp	r3, #224	@ 0xe0
 800d21a:	d103      	bne.n	800d224 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800d21c:	6a3b      	ldr	r3, [r7, #32]
 800d21e:	3304      	adds	r3, #4
 800d220:	617b      	str	r3, [r7, #20]
 800d222:	e00b      	b.n	800d23c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681a      	ldr	r2, [r3, #0]
 800d228:	6a3b      	ldr	r3, [r7, #32]
 800d22a:	3304      	adds	r3, #4
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	429a      	cmp	r2, r3
 800d230:	d002      	beq.n	800d238 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800d232:	f06f 0303 	mvn.w	r3, #3
 800d236:	e00d      	b.n	800d254 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800d23c:	887a      	ldrh	r2, [r7, #2]
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	9301      	str	r3, [sp, #4]
 800d242:	6a3b      	ldr	r3, [r7, #32]
 800d244:	9300      	str	r3, [sp, #0]
 800d246:	4613      	mov	r3, r2
 800d248:	687a      	ldr	r2, [r7, #4]
 800d24a:	68b9      	ldr	r1, [r7, #8]
 800d24c:	68f8      	ldr	r0, [r7, #12]
 800d24e:	f000 f811 	bl	800d274 <udp_sendto_if_src>
 800d252:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800d254:	4618      	mov	r0, r3
 800d256:	3718      	adds	r7, #24
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}
 800d25c:	08013150 	.word	0x08013150
 800d260:	080132c4 	.word	0x080132c4
 800d264:	080131a4 	.word	0x080131a4
 800d268:	080132e0 	.word	0x080132e0
 800d26c:	080132fc 	.word	0x080132fc
 800d270:	0801331c 	.word	0x0801331c

0800d274 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b08c      	sub	sp, #48	@ 0x30
 800d278:	af04      	add	r7, sp, #16
 800d27a:	60f8      	str	r0, [r7, #12]
 800d27c:	60b9      	str	r1, [r7, #8]
 800d27e:	607a      	str	r2, [r7, #4]
 800d280:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d109      	bne.n	800d29c <udp_sendto_if_src+0x28>
 800d288:	4b65      	ldr	r3, [pc, #404]	@ (800d420 <udp_sendto_if_src+0x1ac>)
 800d28a:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800d28e:	4965      	ldr	r1, [pc, #404]	@ (800d424 <udp_sendto_if_src+0x1b0>)
 800d290:	4865      	ldr	r0, [pc, #404]	@ (800d428 <udp_sendto_if_src+0x1b4>)
 800d292:	f002 fe0b 	bl	800feac <iprintf>
 800d296:	f06f 030f 	mvn.w	r3, #15
 800d29a:	e0bc      	b.n	800d416 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d109      	bne.n	800d2b6 <udp_sendto_if_src+0x42>
 800d2a2:	4b5f      	ldr	r3, [pc, #380]	@ (800d420 <udp_sendto_if_src+0x1ac>)
 800d2a4:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800d2a8:	4960      	ldr	r1, [pc, #384]	@ (800d42c <udp_sendto_if_src+0x1b8>)
 800d2aa:	485f      	ldr	r0, [pc, #380]	@ (800d428 <udp_sendto_if_src+0x1b4>)
 800d2ac:	f002 fdfe 	bl	800feac <iprintf>
 800d2b0:	f06f 030f 	mvn.w	r3, #15
 800d2b4:	e0af      	b.n	800d416 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d109      	bne.n	800d2d0 <udp_sendto_if_src+0x5c>
 800d2bc:	4b58      	ldr	r3, [pc, #352]	@ (800d420 <udp_sendto_if_src+0x1ac>)
 800d2be:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800d2c2:	495b      	ldr	r1, [pc, #364]	@ (800d430 <udp_sendto_if_src+0x1bc>)
 800d2c4:	4858      	ldr	r0, [pc, #352]	@ (800d428 <udp_sendto_if_src+0x1b4>)
 800d2c6:	f002 fdf1 	bl	800feac <iprintf>
 800d2ca:	f06f 030f 	mvn.w	r3, #15
 800d2ce:	e0a2      	b.n	800d416 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800d2d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d109      	bne.n	800d2ea <udp_sendto_if_src+0x76>
 800d2d6:	4b52      	ldr	r3, [pc, #328]	@ (800d420 <udp_sendto_if_src+0x1ac>)
 800d2d8:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800d2dc:	4955      	ldr	r1, [pc, #340]	@ (800d434 <udp_sendto_if_src+0x1c0>)
 800d2de:	4852      	ldr	r0, [pc, #328]	@ (800d428 <udp_sendto_if_src+0x1b4>)
 800d2e0:	f002 fde4 	bl	800feac <iprintf>
 800d2e4:	f06f 030f 	mvn.w	r3, #15
 800d2e8:	e095      	b.n	800d416 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800d2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d109      	bne.n	800d304 <udp_sendto_if_src+0x90>
 800d2f0:	4b4b      	ldr	r3, [pc, #300]	@ (800d420 <udp_sendto_if_src+0x1ac>)
 800d2f2:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800d2f6:	4950      	ldr	r1, [pc, #320]	@ (800d438 <udp_sendto_if_src+0x1c4>)
 800d2f8:	484b      	ldr	r0, [pc, #300]	@ (800d428 <udp_sendto_if_src+0x1b4>)
 800d2fa:	f002 fdd7 	bl	800feac <iprintf>
 800d2fe:	f06f 030f 	mvn.w	r3, #15
 800d302:	e088      	b.n	800d416 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	8a5b      	ldrh	r3, [r3, #18]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d10f      	bne.n	800d32c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d30c:	68f9      	ldr	r1, [r7, #12]
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	8a5b      	ldrh	r3, [r3, #18]
 800d312:	461a      	mov	r2, r3
 800d314:	68f8      	ldr	r0, [r7, #12]
 800d316:	f000 f893 	bl	800d440 <udp_bind>
 800d31a:	4603      	mov	r3, r0
 800d31c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800d31e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d002      	beq.n	800d32c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800d326:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d32a:	e074      	b.n	800d416 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	891b      	ldrh	r3, [r3, #8]
 800d330:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800d334:	4293      	cmp	r3, r2
 800d336:	d902      	bls.n	800d33e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800d338:	f04f 33ff 	mov.w	r3, #4294967295
 800d33c:	e06b      	b.n	800d416 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800d33e:	2108      	movs	r1, #8
 800d340:	68b8      	ldr	r0, [r7, #8]
 800d342:	f7f9 fe9d 	bl	8007080 <pbuf_add_header>
 800d346:	4603      	mov	r3, r0
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d015      	beq.n	800d378 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800d34c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d350:	2108      	movs	r1, #8
 800d352:	2022      	movs	r0, #34	@ 0x22
 800d354:	f7f9 fc46 	bl	8006be4 <pbuf_alloc>
 800d358:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800d35a:	69fb      	ldr	r3, [r7, #28]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d102      	bne.n	800d366 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800d360:	f04f 33ff 	mov.w	r3, #4294967295
 800d364:	e057      	b.n	800d416 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	891b      	ldrh	r3, [r3, #8]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d006      	beq.n	800d37c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800d36e:	68b9      	ldr	r1, [r7, #8]
 800d370:	69f8      	ldr	r0, [r7, #28]
 800d372:	f7fa f833 	bl	80073dc <pbuf_chain>
 800d376:	e001      	b.n	800d37c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800d37c:	69fb      	ldr	r3, [r7, #28]
 800d37e:	895b      	ldrh	r3, [r3, #10]
 800d380:	2b07      	cmp	r3, #7
 800d382:	d806      	bhi.n	800d392 <udp_sendto_if_src+0x11e>
 800d384:	4b26      	ldr	r3, [pc, #152]	@ (800d420 <udp_sendto_if_src+0x1ac>)
 800d386:	f240 320d 	movw	r2, #781	@ 0x30d
 800d38a:	492c      	ldr	r1, [pc, #176]	@ (800d43c <udp_sendto_if_src+0x1c8>)
 800d38c:	4826      	ldr	r0, [pc, #152]	@ (800d428 <udp_sendto_if_src+0x1b4>)
 800d38e:	f002 fd8d 	bl	800feac <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800d392:	69fb      	ldr	r3, [r7, #28]
 800d394:	685b      	ldr	r3, [r3, #4]
 800d396:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	8a5b      	ldrh	r3, [r3, #18]
 800d39c:	4618      	mov	r0, r3
 800d39e:	f7f8 fba7 	bl	8005af0 <lwip_htons>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	461a      	mov	r2, r3
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800d3aa:	887b      	ldrh	r3, [r7, #2]
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f7f8 fb9f 	bl	8005af0 <lwip_htons>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	461a      	mov	r2, r3
 800d3b6:	697b      	ldr	r3, [r7, #20]
 800d3b8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800d3ba:	697b      	ldr	r3, [r7, #20]
 800d3bc:	2200      	movs	r2, #0
 800d3be:	719a      	strb	r2, [r3, #6]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800d3c4:	69fb      	ldr	r3, [r7, #28]
 800d3c6:	891b      	ldrh	r3, [r3, #8]
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7f8 fb91 	bl	8005af0 <lwip_htons>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	697b      	ldr	r3, [r7, #20]
 800d3d4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800d3d6:	2311      	movs	r3, #17
 800d3d8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	7adb      	ldrb	r3, [r3, #11]
 800d3de:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	7a9b      	ldrb	r3, [r3, #10]
 800d3e4:	7cb9      	ldrb	r1, [r7, #18]
 800d3e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d3e8:	9202      	str	r2, [sp, #8]
 800d3ea:	7cfa      	ldrb	r2, [r7, #19]
 800d3ec:	9201      	str	r2, [sp, #4]
 800d3ee:	9300      	str	r3, [sp, #0]
 800d3f0:	460b      	mov	r3, r1
 800d3f2:	687a      	ldr	r2, [r7, #4]
 800d3f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d3f6:	69f8      	ldr	r0, [r7, #28]
 800d3f8:	f001 fbd4 	bl	800eba4 <ip4_output_if_src>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800d400:	69fa      	ldr	r2, [r7, #28]
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	429a      	cmp	r2, r3
 800d406:	d004      	beq.n	800d412 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800d408:	69f8      	ldr	r0, [r7, #28]
 800d40a:	f7f9 fecf 	bl	80071ac <pbuf_free>
    q = NULL;
 800d40e:	2300      	movs	r3, #0
 800d410:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800d412:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800d416:	4618      	mov	r0, r3
 800d418:	3720      	adds	r7, #32
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
 800d41e:	bf00      	nop
 800d420:	08013150 	.word	0x08013150
 800d424:	0801333c 	.word	0x0801333c
 800d428:	080131a4 	.word	0x080131a4
 800d42c:	0801335c 	.word	0x0801335c
 800d430:	0801337c 	.word	0x0801337c
 800d434:	080133a0 	.word	0x080133a0
 800d438:	080133c4 	.word	0x080133c4
 800d43c:	080133e8 	.word	0x080133e8

0800d440 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b086      	sub	sp, #24
 800d444:	af00      	add	r7, sp, #0
 800d446:	60f8      	str	r0, [r7, #12]
 800d448:	60b9      	str	r1, [r7, #8]
 800d44a:	4613      	mov	r3, r2
 800d44c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d101      	bne.n	800d458 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800d454:	4b39      	ldr	r3, [pc, #228]	@ (800d53c <udp_bind+0xfc>)
 800d456:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d109      	bne.n	800d472 <udp_bind+0x32>
 800d45e:	4b38      	ldr	r3, [pc, #224]	@ (800d540 <udp_bind+0x100>)
 800d460:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800d464:	4937      	ldr	r1, [pc, #220]	@ (800d544 <udp_bind+0x104>)
 800d466:	4838      	ldr	r0, [pc, #224]	@ (800d548 <udp_bind+0x108>)
 800d468:	f002 fd20 	bl	800feac <iprintf>
 800d46c:	f06f 030f 	mvn.w	r3, #15
 800d470:	e060      	b.n	800d534 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800d472:	2300      	movs	r3, #0
 800d474:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d476:	4b35      	ldr	r3, [pc, #212]	@ (800d54c <udp_bind+0x10c>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	617b      	str	r3, [r7, #20]
 800d47c:	e009      	b.n	800d492 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800d47e:	68fa      	ldr	r2, [r7, #12]
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	429a      	cmp	r2, r3
 800d484:	d102      	bne.n	800d48c <udp_bind+0x4c>
      rebind = 1;
 800d486:	2301      	movs	r3, #1
 800d488:	74fb      	strb	r3, [r7, #19]
      break;
 800d48a:	e005      	b.n	800d498 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	68db      	ldr	r3, [r3, #12]
 800d490:	617b      	str	r3, [r7, #20]
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d1f2      	bne.n	800d47e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800d498:	88fb      	ldrh	r3, [r7, #6]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d109      	bne.n	800d4b2 <udp_bind+0x72>
    port = udp_new_port();
 800d49e:	f7ff fc69 	bl	800cd74 <udp_new_port>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d4a6:	88fb      	ldrh	r3, [r7, #6]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d12c      	bne.n	800d506 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800d4ac:	f06f 0307 	mvn.w	r3, #7
 800d4b0:	e040      	b.n	800d534 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d4b2:	4b26      	ldr	r3, [pc, #152]	@ (800d54c <udp_bind+0x10c>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	617b      	str	r3, [r7, #20]
 800d4b8:	e022      	b.n	800d500 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800d4ba:	68fa      	ldr	r2, [r7, #12]
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	429a      	cmp	r2, r3
 800d4c0:	d01b      	beq.n	800d4fa <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	8a5b      	ldrh	r3, [r3, #18]
 800d4c6:	88fa      	ldrh	r2, [r7, #6]
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d116      	bne.n	800d4fa <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d4cc:	697b      	ldr	r3, [r7, #20]
 800d4ce:	681a      	ldr	r2, [r3, #0]
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	d00d      	beq.n	800d4f4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d00a      	beq.n	800d4f4 <udp_bind+0xb4>
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d006      	beq.n	800d4f4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800d4e6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d003      	beq.n	800d4f4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d102      	bne.n	800d4fa <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800d4f4:	f06f 0307 	mvn.w	r3, #7
 800d4f8:	e01c      	b.n	800d534 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d4fa:	697b      	ldr	r3, [r7, #20]
 800d4fc:	68db      	ldr	r3, [r3, #12]
 800d4fe:	617b      	str	r3, [r7, #20]
 800d500:	697b      	ldr	r3, [r7, #20]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d1d9      	bne.n	800d4ba <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d506:	68bb      	ldr	r3, [r7, #8]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d002      	beq.n	800d512 <udp_bind+0xd2>
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	e000      	b.n	800d514 <udp_bind+0xd4>
 800d512:	2300      	movs	r3, #0
 800d514:	68fa      	ldr	r2, [r7, #12]
 800d516:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	88fa      	ldrh	r2, [r7, #6]
 800d51c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800d51e:	7cfb      	ldrb	r3, [r7, #19]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d106      	bne.n	800d532 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800d524:	4b09      	ldr	r3, [pc, #36]	@ (800d54c <udp_bind+0x10c>)
 800d526:	681a      	ldr	r2, [r3, #0]
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800d52c:	4a07      	ldr	r2, [pc, #28]	@ (800d54c <udp_bind+0x10c>)
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800d532:	2300      	movs	r3, #0
}
 800d534:	4618      	mov	r0, r3
 800d536:	3718      	adds	r7, #24
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}
 800d53c:	08013c6c 	.word	0x08013c6c
 800d540:	08013150 	.word	0x08013150
 800d544:	08013418 	.word	0x08013418
 800d548:	080131a4 	.word	0x080131a4
 800d54c:	2000882c 	.word	0x2000882c

0800d550 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b084      	sub	sp, #16
 800d554:	af00      	add	r7, sp, #0
 800d556:	60f8      	str	r0, [r7, #12]
 800d558:	60b9      	str	r1, [r7, #8]
 800d55a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d107      	bne.n	800d572 <udp_recv+0x22>
 800d562:	4b08      	ldr	r3, [pc, #32]	@ (800d584 <udp_recv+0x34>)
 800d564:	f240 428a 	movw	r2, #1162	@ 0x48a
 800d568:	4907      	ldr	r1, [pc, #28]	@ (800d588 <udp_recv+0x38>)
 800d56a:	4808      	ldr	r0, [pc, #32]	@ (800d58c <udp_recv+0x3c>)
 800d56c:	f002 fc9e 	bl	800feac <iprintf>
 800d570:	e005      	b.n	800d57e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	68ba      	ldr	r2, [r7, #8]
 800d576:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	687a      	ldr	r2, [r7, #4]
 800d57c:	61da      	str	r2, [r3, #28]
}
 800d57e:	3710      	adds	r7, #16
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}
 800d584:	08013150 	.word	0x08013150
 800d588:	08013484 	.word	0x08013484
 800d58c:	080131a4 	.word	0x080131a4

0800d590 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b082      	sub	sp, #8
 800d594:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800d596:	2000      	movs	r0, #0
 800d598:	f7f8 ff22 	bl	80063e0 <memp_malloc>
 800d59c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d007      	beq.n	800d5b4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800d5a4:	2220      	movs	r2, #32
 800d5a6:	2100      	movs	r1, #0
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f002 fd1e 	bl	800ffea <memset>
    pcb->ttl = UDP_TTL;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	22ff      	movs	r2, #255	@ 0xff
 800d5b2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800d5b4:	687b      	ldr	r3, [r7, #4]
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3708      	adds	r7, #8
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}
	...

0800d5c0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d5c0:	b480      	push	{r7}
 800d5c2:	b085      	sub	sp, #20
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
 800d5c8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d01e      	beq.n	800d60e <udp_netif_ip_addr_changed+0x4e>
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d01a      	beq.n	800d60e <udp_netif_ip_addr_changed+0x4e>
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d017      	beq.n	800d60e <udp_netif_ip_addr_changed+0x4e>
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d013      	beq.n	800d60e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d5e6:	4b0d      	ldr	r3, [pc, #52]	@ (800d61c <udp_netif_ip_addr_changed+0x5c>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	60fb      	str	r3, [r7, #12]
 800d5ec:	e00c      	b.n	800d608 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	681a      	ldr	r2, [r3, #0]
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d103      	bne.n	800d602 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	681a      	ldr	r2, [r3, #0]
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	68db      	ldr	r3, [r3, #12]
 800d606:	60fb      	str	r3, [r7, #12]
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d1ef      	bne.n	800d5ee <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800d60e:	bf00      	nop
 800d610:	3714      	adds	r7, #20
 800d612:	46bd      	mov	sp, r7
 800d614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d618:	4770      	bx	lr
 800d61a:	bf00      	nop
 800d61c:	2000882c 	.word	0x2000882c

0800d620 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b082      	sub	sp, #8
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d628:	4915      	ldr	r1, [pc, #84]	@ (800d680 <etharp_free_entry+0x60>)
 800d62a:	687a      	ldr	r2, [r7, #4]
 800d62c:	4613      	mov	r3, r2
 800d62e:	005b      	lsls	r3, r3, #1
 800d630:	4413      	add	r3, r2
 800d632:	00db      	lsls	r3, r3, #3
 800d634:	440b      	add	r3, r1
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d013      	beq.n	800d664 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d63c:	4910      	ldr	r1, [pc, #64]	@ (800d680 <etharp_free_entry+0x60>)
 800d63e:	687a      	ldr	r2, [r7, #4]
 800d640:	4613      	mov	r3, r2
 800d642:	005b      	lsls	r3, r3, #1
 800d644:	4413      	add	r3, r2
 800d646:	00db      	lsls	r3, r3, #3
 800d648:	440b      	add	r3, r1
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	4618      	mov	r0, r3
 800d64e:	f7f9 fdad 	bl	80071ac <pbuf_free>
    arp_table[i].q = NULL;
 800d652:	490b      	ldr	r1, [pc, #44]	@ (800d680 <etharp_free_entry+0x60>)
 800d654:	687a      	ldr	r2, [r7, #4]
 800d656:	4613      	mov	r3, r2
 800d658:	005b      	lsls	r3, r3, #1
 800d65a:	4413      	add	r3, r2
 800d65c:	00db      	lsls	r3, r3, #3
 800d65e:	440b      	add	r3, r1
 800d660:	2200      	movs	r2, #0
 800d662:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d664:	4906      	ldr	r1, [pc, #24]	@ (800d680 <etharp_free_entry+0x60>)
 800d666:	687a      	ldr	r2, [r7, #4]
 800d668:	4613      	mov	r3, r2
 800d66a:	005b      	lsls	r3, r3, #1
 800d66c:	4413      	add	r3, r2
 800d66e:	00db      	lsls	r3, r3, #3
 800d670:	440b      	add	r3, r1
 800d672:	3314      	adds	r3, #20
 800d674:	2200      	movs	r2, #0
 800d676:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800d678:	bf00      	nop
 800d67a:	3708      	adds	r7, #8
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}
 800d680:	20008830 	.word	0x20008830

0800d684 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b082      	sub	sp, #8
 800d688:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d68a:	2300      	movs	r3, #0
 800d68c:	607b      	str	r3, [r7, #4]
 800d68e:	e096      	b.n	800d7be <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800d690:	494f      	ldr	r1, [pc, #316]	@ (800d7d0 <etharp_tmr+0x14c>)
 800d692:	687a      	ldr	r2, [r7, #4]
 800d694:	4613      	mov	r3, r2
 800d696:	005b      	lsls	r3, r3, #1
 800d698:	4413      	add	r3, r2
 800d69a:	00db      	lsls	r3, r3, #3
 800d69c:	440b      	add	r3, r1
 800d69e:	3314      	adds	r3, #20
 800d6a0:	781b      	ldrb	r3, [r3, #0]
 800d6a2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800d6a4:	78fb      	ldrb	r3, [r7, #3]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	f000 8086 	beq.w	800d7b8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800d6ac:	4948      	ldr	r1, [pc, #288]	@ (800d7d0 <etharp_tmr+0x14c>)
 800d6ae:	687a      	ldr	r2, [r7, #4]
 800d6b0:	4613      	mov	r3, r2
 800d6b2:	005b      	lsls	r3, r3, #1
 800d6b4:	4413      	add	r3, r2
 800d6b6:	00db      	lsls	r3, r3, #3
 800d6b8:	440b      	add	r3, r1
 800d6ba:	3312      	adds	r3, #18
 800d6bc:	881b      	ldrh	r3, [r3, #0]
 800d6be:	3301      	adds	r3, #1
 800d6c0:	b298      	uxth	r0, r3
 800d6c2:	4943      	ldr	r1, [pc, #268]	@ (800d7d0 <etharp_tmr+0x14c>)
 800d6c4:	687a      	ldr	r2, [r7, #4]
 800d6c6:	4613      	mov	r3, r2
 800d6c8:	005b      	lsls	r3, r3, #1
 800d6ca:	4413      	add	r3, r2
 800d6cc:	00db      	lsls	r3, r3, #3
 800d6ce:	440b      	add	r3, r1
 800d6d0:	3312      	adds	r3, #18
 800d6d2:	4602      	mov	r2, r0
 800d6d4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d6d6:	493e      	ldr	r1, [pc, #248]	@ (800d7d0 <etharp_tmr+0x14c>)
 800d6d8:	687a      	ldr	r2, [r7, #4]
 800d6da:	4613      	mov	r3, r2
 800d6dc:	005b      	lsls	r3, r3, #1
 800d6de:	4413      	add	r3, r2
 800d6e0:	00db      	lsls	r3, r3, #3
 800d6e2:	440b      	add	r3, r1
 800d6e4:	3312      	adds	r3, #18
 800d6e6:	881b      	ldrh	r3, [r3, #0]
 800d6e8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800d6ec:	d215      	bcs.n	800d71a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d6ee:	4938      	ldr	r1, [pc, #224]	@ (800d7d0 <etharp_tmr+0x14c>)
 800d6f0:	687a      	ldr	r2, [r7, #4]
 800d6f2:	4613      	mov	r3, r2
 800d6f4:	005b      	lsls	r3, r3, #1
 800d6f6:	4413      	add	r3, r2
 800d6f8:	00db      	lsls	r3, r3, #3
 800d6fa:	440b      	add	r3, r1
 800d6fc:	3314      	adds	r3, #20
 800d6fe:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d700:	2b01      	cmp	r3, #1
 800d702:	d10e      	bne.n	800d722 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800d704:	4932      	ldr	r1, [pc, #200]	@ (800d7d0 <etharp_tmr+0x14c>)
 800d706:	687a      	ldr	r2, [r7, #4]
 800d708:	4613      	mov	r3, r2
 800d70a:	005b      	lsls	r3, r3, #1
 800d70c:	4413      	add	r3, r2
 800d70e:	00db      	lsls	r3, r3, #3
 800d710:	440b      	add	r3, r1
 800d712:	3312      	adds	r3, #18
 800d714:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d716:	2b04      	cmp	r3, #4
 800d718:	d903      	bls.n	800d722 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f7ff ff80 	bl	800d620 <etharp_free_entry>
 800d720:	e04a      	b.n	800d7b8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d722:	492b      	ldr	r1, [pc, #172]	@ (800d7d0 <etharp_tmr+0x14c>)
 800d724:	687a      	ldr	r2, [r7, #4]
 800d726:	4613      	mov	r3, r2
 800d728:	005b      	lsls	r3, r3, #1
 800d72a:	4413      	add	r3, r2
 800d72c:	00db      	lsls	r3, r3, #3
 800d72e:	440b      	add	r3, r1
 800d730:	3314      	adds	r3, #20
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	2b03      	cmp	r3, #3
 800d736:	d10a      	bne.n	800d74e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d738:	4925      	ldr	r1, [pc, #148]	@ (800d7d0 <etharp_tmr+0x14c>)
 800d73a:	687a      	ldr	r2, [r7, #4]
 800d73c:	4613      	mov	r3, r2
 800d73e:	005b      	lsls	r3, r3, #1
 800d740:	4413      	add	r3, r2
 800d742:	00db      	lsls	r3, r3, #3
 800d744:	440b      	add	r3, r1
 800d746:	3314      	adds	r3, #20
 800d748:	2204      	movs	r2, #4
 800d74a:	701a      	strb	r2, [r3, #0]
 800d74c:	e034      	b.n	800d7b8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d74e:	4920      	ldr	r1, [pc, #128]	@ (800d7d0 <etharp_tmr+0x14c>)
 800d750:	687a      	ldr	r2, [r7, #4]
 800d752:	4613      	mov	r3, r2
 800d754:	005b      	lsls	r3, r3, #1
 800d756:	4413      	add	r3, r2
 800d758:	00db      	lsls	r3, r3, #3
 800d75a:	440b      	add	r3, r1
 800d75c:	3314      	adds	r3, #20
 800d75e:	781b      	ldrb	r3, [r3, #0]
 800d760:	2b04      	cmp	r3, #4
 800d762:	d10a      	bne.n	800d77a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d764:	491a      	ldr	r1, [pc, #104]	@ (800d7d0 <etharp_tmr+0x14c>)
 800d766:	687a      	ldr	r2, [r7, #4]
 800d768:	4613      	mov	r3, r2
 800d76a:	005b      	lsls	r3, r3, #1
 800d76c:	4413      	add	r3, r2
 800d76e:	00db      	lsls	r3, r3, #3
 800d770:	440b      	add	r3, r1
 800d772:	3314      	adds	r3, #20
 800d774:	2202      	movs	r2, #2
 800d776:	701a      	strb	r2, [r3, #0]
 800d778:	e01e      	b.n	800d7b8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d77a:	4915      	ldr	r1, [pc, #84]	@ (800d7d0 <etharp_tmr+0x14c>)
 800d77c:	687a      	ldr	r2, [r7, #4]
 800d77e:	4613      	mov	r3, r2
 800d780:	005b      	lsls	r3, r3, #1
 800d782:	4413      	add	r3, r2
 800d784:	00db      	lsls	r3, r3, #3
 800d786:	440b      	add	r3, r1
 800d788:	3314      	adds	r3, #20
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	2b01      	cmp	r3, #1
 800d78e:	d113      	bne.n	800d7b8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d790:	490f      	ldr	r1, [pc, #60]	@ (800d7d0 <etharp_tmr+0x14c>)
 800d792:	687a      	ldr	r2, [r7, #4]
 800d794:	4613      	mov	r3, r2
 800d796:	005b      	lsls	r3, r3, #1
 800d798:	4413      	add	r3, r2
 800d79a:	00db      	lsls	r3, r3, #3
 800d79c:	440b      	add	r3, r1
 800d79e:	3308      	adds	r3, #8
 800d7a0:	6818      	ldr	r0, [r3, #0]
 800d7a2:	687a      	ldr	r2, [r7, #4]
 800d7a4:	4613      	mov	r3, r2
 800d7a6:	005b      	lsls	r3, r3, #1
 800d7a8:	4413      	add	r3, r2
 800d7aa:	00db      	lsls	r3, r3, #3
 800d7ac:	4a08      	ldr	r2, [pc, #32]	@ (800d7d0 <etharp_tmr+0x14c>)
 800d7ae:	4413      	add	r3, r2
 800d7b0:	3304      	adds	r3, #4
 800d7b2:	4619      	mov	r1, r3
 800d7b4:	f000 fe6e 	bl	800e494 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	3301      	adds	r3, #1
 800d7bc:	607b      	str	r3, [r7, #4]
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2b09      	cmp	r3, #9
 800d7c2:	f77f af65 	ble.w	800d690 <etharp_tmr+0xc>
      }
    }
  }
}
 800d7c6:	bf00      	nop
 800d7c8:	bf00      	nop
 800d7ca:	3708      	adds	r7, #8
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}
 800d7d0:	20008830 	.word	0x20008830

0800d7d4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b08a      	sub	sp, #40	@ 0x28
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	60f8      	str	r0, [r7, #12]
 800d7dc:	460b      	mov	r3, r1
 800d7de:	607a      	str	r2, [r7, #4]
 800d7e0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d7e2:	230a      	movs	r3, #10
 800d7e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d7e6:	230a      	movs	r3, #10
 800d7e8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800d7ea:	230a      	movs	r3, #10
 800d7ec:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800d7f2:	230a      	movs	r3, #10
 800d7f4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	83bb      	strh	r3, [r7, #28]
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	837b      	strh	r3, [r7, #26]
 800d7fe:	2300      	movs	r3, #0
 800d800:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d802:	2300      	movs	r3, #0
 800d804:	843b      	strh	r3, [r7, #32]
 800d806:	e0ae      	b.n	800d966 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800d808:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d80c:	49a6      	ldr	r1, [pc, #664]	@ (800daa8 <etharp_find_entry+0x2d4>)
 800d80e:	4613      	mov	r3, r2
 800d810:	005b      	lsls	r3, r3, #1
 800d812:	4413      	add	r3, r2
 800d814:	00db      	lsls	r3, r3, #3
 800d816:	440b      	add	r3, r1
 800d818:	3314      	adds	r3, #20
 800d81a:	781b      	ldrb	r3, [r3, #0]
 800d81c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d81e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800d822:	2b0a      	cmp	r3, #10
 800d824:	d105      	bne.n	800d832 <etharp_find_entry+0x5e>
 800d826:	7dfb      	ldrb	r3, [r7, #23]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d102      	bne.n	800d832 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800d82c:	8c3b      	ldrh	r3, [r7, #32]
 800d82e:	847b      	strh	r3, [r7, #34]	@ 0x22
 800d830:	e095      	b.n	800d95e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800d832:	7dfb      	ldrb	r3, [r7, #23]
 800d834:	2b00      	cmp	r3, #0
 800d836:	f000 8092 	beq.w	800d95e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800d83a:	7dfb      	ldrb	r3, [r7, #23]
 800d83c:	2b01      	cmp	r3, #1
 800d83e:	d009      	beq.n	800d854 <etharp_find_entry+0x80>
 800d840:	7dfb      	ldrb	r3, [r7, #23]
 800d842:	2b01      	cmp	r3, #1
 800d844:	d806      	bhi.n	800d854 <etharp_find_entry+0x80>
 800d846:	4b99      	ldr	r3, [pc, #612]	@ (800daac <etharp_find_entry+0x2d8>)
 800d848:	f240 1223 	movw	r2, #291	@ 0x123
 800d84c:	4998      	ldr	r1, [pc, #608]	@ (800dab0 <etharp_find_entry+0x2dc>)
 800d84e:	4899      	ldr	r0, [pc, #612]	@ (800dab4 <etharp_find_entry+0x2e0>)
 800d850:	f002 fb2c 	bl	800feac <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d020      	beq.n	800d89c <etharp_find_entry+0xc8>
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	6819      	ldr	r1, [r3, #0]
 800d85e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d862:	4891      	ldr	r0, [pc, #580]	@ (800daa8 <etharp_find_entry+0x2d4>)
 800d864:	4613      	mov	r3, r2
 800d866:	005b      	lsls	r3, r3, #1
 800d868:	4413      	add	r3, r2
 800d86a:	00db      	lsls	r3, r3, #3
 800d86c:	4403      	add	r3, r0
 800d86e:	3304      	adds	r3, #4
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	4299      	cmp	r1, r3
 800d874:	d112      	bne.n	800d89c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d00c      	beq.n	800d896 <etharp_find_entry+0xc2>
 800d87c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d880:	4989      	ldr	r1, [pc, #548]	@ (800daa8 <etharp_find_entry+0x2d4>)
 800d882:	4613      	mov	r3, r2
 800d884:	005b      	lsls	r3, r3, #1
 800d886:	4413      	add	r3, r2
 800d888:	00db      	lsls	r3, r3, #3
 800d88a:	440b      	add	r3, r1
 800d88c:	3308      	adds	r3, #8
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	687a      	ldr	r2, [r7, #4]
 800d892:	429a      	cmp	r2, r3
 800d894:	d102      	bne.n	800d89c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800d896:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d89a:	e100      	b.n	800da9e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d89c:	7dfb      	ldrb	r3, [r7, #23]
 800d89e:	2b01      	cmp	r3, #1
 800d8a0:	d140      	bne.n	800d924 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800d8a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d8a6:	4980      	ldr	r1, [pc, #512]	@ (800daa8 <etharp_find_entry+0x2d4>)
 800d8a8:	4613      	mov	r3, r2
 800d8aa:	005b      	lsls	r3, r3, #1
 800d8ac:	4413      	add	r3, r2
 800d8ae:	00db      	lsls	r3, r3, #3
 800d8b0:	440b      	add	r3, r1
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d01a      	beq.n	800d8ee <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800d8b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d8bc:	497a      	ldr	r1, [pc, #488]	@ (800daa8 <etharp_find_entry+0x2d4>)
 800d8be:	4613      	mov	r3, r2
 800d8c0:	005b      	lsls	r3, r3, #1
 800d8c2:	4413      	add	r3, r2
 800d8c4:	00db      	lsls	r3, r3, #3
 800d8c6:	440b      	add	r3, r1
 800d8c8:	3312      	adds	r3, #18
 800d8ca:	881b      	ldrh	r3, [r3, #0]
 800d8cc:	8bba      	ldrh	r2, [r7, #28]
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	d845      	bhi.n	800d95e <etharp_find_entry+0x18a>
            old_queue = i;
 800d8d2:	8c3b      	ldrh	r3, [r7, #32]
 800d8d4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800d8d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d8da:	4973      	ldr	r1, [pc, #460]	@ (800daa8 <etharp_find_entry+0x2d4>)
 800d8dc:	4613      	mov	r3, r2
 800d8de:	005b      	lsls	r3, r3, #1
 800d8e0:	4413      	add	r3, r2
 800d8e2:	00db      	lsls	r3, r3, #3
 800d8e4:	440b      	add	r3, r1
 800d8e6:	3312      	adds	r3, #18
 800d8e8:	881b      	ldrh	r3, [r3, #0]
 800d8ea:	83bb      	strh	r3, [r7, #28]
 800d8ec:	e037      	b.n	800d95e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800d8ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d8f2:	496d      	ldr	r1, [pc, #436]	@ (800daa8 <etharp_find_entry+0x2d4>)
 800d8f4:	4613      	mov	r3, r2
 800d8f6:	005b      	lsls	r3, r3, #1
 800d8f8:	4413      	add	r3, r2
 800d8fa:	00db      	lsls	r3, r3, #3
 800d8fc:	440b      	add	r3, r1
 800d8fe:	3312      	adds	r3, #18
 800d900:	881b      	ldrh	r3, [r3, #0]
 800d902:	8b7a      	ldrh	r2, [r7, #26]
 800d904:	429a      	cmp	r2, r3
 800d906:	d82a      	bhi.n	800d95e <etharp_find_entry+0x18a>
            old_pending = i;
 800d908:	8c3b      	ldrh	r3, [r7, #32]
 800d90a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800d90c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d910:	4965      	ldr	r1, [pc, #404]	@ (800daa8 <etharp_find_entry+0x2d4>)
 800d912:	4613      	mov	r3, r2
 800d914:	005b      	lsls	r3, r3, #1
 800d916:	4413      	add	r3, r2
 800d918:	00db      	lsls	r3, r3, #3
 800d91a:	440b      	add	r3, r1
 800d91c:	3312      	adds	r3, #18
 800d91e:	881b      	ldrh	r3, [r3, #0]
 800d920:	837b      	strh	r3, [r7, #26]
 800d922:	e01c      	b.n	800d95e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800d924:	7dfb      	ldrb	r3, [r7, #23]
 800d926:	2b01      	cmp	r3, #1
 800d928:	d919      	bls.n	800d95e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d92a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d92e:	495e      	ldr	r1, [pc, #376]	@ (800daa8 <etharp_find_entry+0x2d4>)
 800d930:	4613      	mov	r3, r2
 800d932:	005b      	lsls	r3, r3, #1
 800d934:	4413      	add	r3, r2
 800d936:	00db      	lsls	r3, r3, #3
 800d938:	440b      	add	r3, r1
 800d93a:	3312      	adds	r3, #18
 800d93c:	881b      	ldrh	r3, [r3, #0]
 800d93e:	8b3a      	ldrh	r2, [r7, #24]
 800d940:	429a      	cmp	r2, r3
 800d942:	d80c      	bhi.n	800d95e <etharp_find_entry+0x18a>
            old_stable = i;
 800d944:	8c3b      	ldrh	r3, [r7, #32]
 800d946:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800d948:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d94c:	4956      	ldr	r1, [pc, #344]	@ (800daa8 <etharp_find_entry+0x2d4>)
 800d94e:	4613      	mov	r3, r2
 800d950:	005b      	lsls	r3, r3, #1
 800d952:	4413      	add	r3, r2
 800d954:	00db      	lsls	r3, r3, #3
 800d956:	440b      	add	r3, r1
 800d958:	3312      	adds	r3, #18
 800d95a:	881b      	ldrh	r3, [r3, #0]
 800d95c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d95e:	8c3b      	ldrh	r3, [r7, #32]
 800d960:	3301      	adds	r3, #1
 800d962:	b29b      	uxth	r3, r3
 800d964:	843b      	strh	r3, [r7, #32]
 800d966:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d96a:	2b09      	cmp	r3, #9
 800d96c:	f77f af4c 	ble.w	800d808 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d970:	7afb      	ldrb	r3, [r7, #11]
 800d972:	f003 0302 	and.w	r3, r3, #2
 800d976:	2b00      	cmp	r3, #0
 800d978:	d108      	bne.n	800d98c <etharp_find_entry+0x1b8>
 800d97a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800d97e:	2b0a      	cmp	r3, #10
 800d980:	d107      	bne.n	800d992 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d982:	7afb      	ldrb	r3, [r7, #11]
 800d984:	f003 0301 	and.w	r3, r3, #1
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d102      	bne.n	800d992 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800d98c:	f04f 33ff 	mov.w	r3, #4294967295
 800d990:	e085      	b.n	800da9e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d992:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800d996:	2b09      	cmp	r3, #9
 800d998:	dc02      	bgt.n	800d9a0 <etharp_find_entry+0x1cc>
    i = empty;
 800d99a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d99c:	843b      	strh	r3, [r7, #32]
 800d99e:	e039      	b.n	800da14 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d9a0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800d9a4:	2b09      	cmp	r3, #9
 800d9a6:	dc14      	bgt.n	800d9d2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800d9a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d9aa:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d9ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d9b0:	493d      	ldr	r1, [pc, #244]	@ (800daa8 <etharp_find_entry+0x2d4>)
 800d9b2:	4613      	mov	r3, r2
 800d9b4:	005b      	lsls	r3, r3, #1
 800d9b6:	4413      	add	r3, r2
 800d9b8:	00db      	lsls	r3, r3, #3
 800d9ba:	440b      	add	r3, r1
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d018      	beq.n	800d9f4 <etharp_find_entry+0x220>
 800d9c2:	4b3a      	ldr	r3, [pc, #232]	@ (800daac <etharp_find_entry+0x2d8>)
 800d9c4:	f240 126d 	movw	r2, #365	@ 0x16d
 800d9c8:	493b      	ldr	r1, [pc, #236]	@ (800dab8 <etharp_find_entry+0x2e4>)
 800d9ca:	483a      	ldr	r0, [pc, #232]	@ (800dab4 <etharp_find_entry+0x2e0>)
 800d9cc:	f002 fa6e 	bl	800feac <iprintf>
 800d9d0:	e010      	b.n	800d9f4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d9d2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800d9d6:	2b09      	cmp	r3, #9
 800d9d8:	dc02      	bgt.n	800d9e0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800d9da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d9dc:	843b      	strh	r3, [r7, #32]
 800d9de:	e009      	b.n	800d9f4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d9e0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d9e4:	2b09      	cmp	r3, #9
 800d9e6:	dc02      	bgt.n	800d9ee <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d9e8:	8bfb      	ldrh	r3, [r7, #30]
 800d9ea:	843b      	strh	r3, [r7, #32]
 800d9ec:	e002      	b.n	800d9f4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800d9ee:	f04f 33ff 	mov.w	r3, #4294967295
 800d9f2:	e054      	b.n	800da9e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d9f4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d9f8:	2b09      	cmp	r3, #9
 800d9fa:	dd06      	ble.n	800da0a <etharp_find_entry+0x236>
 800d9fc:	4b2b      	ldr	r3, [pc, #172]	@ (800daac <etharp_find_entry+0x2d8>)
 800d9fe:	f240 127f 	movw	r2, #383	@ 0x17f
 800da02:	492e      	ldr	r1, [pc, #184]	@ (800dabc <etharp_find_entry+0x2e8>)
 800da04:	482b      	ldr	r0, [pc, #172]	@ (800dab4 <etharp_find_entry+0x2e0>)
 800da06:	f002 fa51 	bl	800feac <iprintf>
    etharp_free_entry(i);
 800da0a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800da0e:	4618      	mov	r0, r3
 800da10:	f7ff fe06 	bl	800d620 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800da14:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800da18:	2b09      	cmp	r3, #9
 800da1a:	dd06      	ble.n	800da2a <etharp_find_entry+0x256>
 800da1c:	4b23      	ldr	r3, [pc, #140]	@ (800daac <etharp_find_entry+0x2d8>)
 800da1e:	f240 1283 	movw	r2, #387	@ 0x183
 800da22:	4926      	ldr	r1, [pc, #152]	@ (800dabc <etharp_find_entry+0x2e8>)
 800da24:	4823      	ldr	r0, [pc, #140]	@ (800dab4 <etharp_find_entry+0x2e0>)
 800da26:	f002 fa41 	bl	800feac <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800da2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800da2e:	491e      	ldr	r1, [pc, #120]	@ (800daa8 <etharp_find_entry+0x2d4>)
 800da30:	4613      	mov	r3, r2
 800da32:	005b      	lsls	r3, r3, #1
 800da34:	4413      	add	r3, r2
 800da36:	00db      	lsls	r3, r3, #3
 800da38:	440b      	add	r3, r1
 800da3a:	3314      	adds	r3, #20
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d006      	beq.n	800da50 <etharp_find_entry+0x27c>
 800da42:	4b1a      	ldr	r3, [pc, #104]	@ (800daac <etharp_find_entry+0x2d8>)
 800da44:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800da48:	491d      	ldr	r1, [pc, #116]	@ (800dac0 <etharp_find_entry+0x2ec>)
 800da4a:	481a      	ldr	r0, [pc, #104]	@ (800dab4 <etharp_find_entry+0x2e0>)
 800da4c:	f002 fa2e 	bl	800feac <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d00b      	beq.n	800da6e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800da56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	6819      	ldr	r1, [r3, #0]
 800da5e:	4812      	ldr	r0, [pc, #72]	@ (800daa8 <etharp_find_entry+0x2d4>)
 800da60:	4613      	mov	r3, r2
 800da62:	005b      	lsls	r3, r3, #1
 800da64:	4413      	add	r3, r2
 800da66:	00db      	lsls	r3, r3, #3
 800da68:	4403      	add	r3, r0
 800da6a:	3304      	adds	r3, #4
 800da6c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800da6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800da72:	490d      	ldr	r1, [pc, #52]	@ (800daa8 <etharp_find_entry+0x2d4>)
 800da74:	4613      	mov	r3, r2
 800da76:	005b      	lsls	r3, r3, #1
 800da78:	4413      	add	r3, r2
 800da7a:	00db      	lsls	r3, r3, #3
 800da7c:	440b      	add	r3, r1
 800da7e:	3312      	adds	r3, #18
 800da80:	2200      	movs	r2, #0
 800da82:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800da84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800da88:	4907      	ldr	r1, [pc, #28]	@ (800daa8 <etharp_find_entry+0x2d4>)
 800da8a:	4613      	mov	r3, r2
 800da8c:	005b      	lsls	r3, r3, #1
 800da8e:	4413      	add	r3, r2
 800da90:	00db      	lsls	r3, r3, #3
 800da92:	440b      	add	r3, r1
 800da94:	3308      	adds	r3, #8
 800da96:	687a      	ldr	r2, [r7, #4]
 800da98:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800da9a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3728      	adds	r7, #40	@ 0x28
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}
 800daa6:	bf00      	nop
 800daa8:	20008830 	.word	0x20008830
 800daac:	080134b4 	.word	0x080134b4
 800dab0:	080134ec 	.word	0x080134ec
 800dab4:	0801352c 	.word	0x0801352c
 800dab8:	08013554 	.word	0x08013554
 800dabc:	0801356c 	.word	0x0801356c
 800dac0:	08013580 	.word	0x08013580

0800dac4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b088      	sub	sp, #32
 800dac8:	af02      	add	r7, sp, #8
 800daca:	60f8      	str	r0, [r7, #12]
 800dacc:	60b9      	str	r1, [r7, #8]
 800dace:	607a      	str	r2, [r7, #4]
 800dad0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800dad8:	2b06      	cmp	r3, #6
 800dada:	d006      	beq.n	800daea <etharp_update_arp_entry+0x26>
 800dadc:	4b48      	ldr	r3, [pc, #288]	@ (800dc00 <etharp_update_arp_entry+0x13c>)
 800dade:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800dae2:	4948      	ldr	r1, [pc, #288]	@ (800dc04 <etharp_update_arp_entry+0x140>)
 800dae4:	4848      	ldr	r0, [pc, #288]	@ (800dc08 <etharp_update_arp_entry+0x144>)
 800dae6:	f002 f9e1 	bl	800feac <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d012      	beq.n	800db16 <etharp_update_arp_entry+0x52>
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d00e      	beq.n	800db16 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800daf8:	68bb      	ldr	r3, [r7, #8]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	68f9      	ldr	r1, [r7, #12]
 800dafe:	4618      	mov	r0, r3
 800db00:	f001 f8fe 	bl	800ed00 <ip4_addr_isbroadcast_u32>
 800db04:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800db06:	2b00      	cmp	r3, #0
 800db08:	d105      	bne.n	800db16 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800db12:	2be0      	cmp	r3, #224	@ 0xe0
 800db14:	d102      	bne.n	800db1c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800db16:	f06f 030f 	mvn.w	r3, #15
 800db1a:	e06c      	b.n	800dbf6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800db1c:	78fb      	ldrb	r3, [r7, #3]
 800db1e:	68fa      	ldr	r2, [r7, #12]
 800db20:	4619      	mov	r1, r3
 800db22:	68b8      	ldr	r0, [r7, #8]
 800db24:	f7ff fe56 	bl	800d7d4 <etharp_find_entry>
 800db28:	4603      	mov	r3, r0
 800db2a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800db2c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800db30:	2b00      	cmp	r3, #0
 800db32:	da02      	bge.n	800db3a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800db34:	8afb      	ldrh	r3, [r7, #22]
 800db36:	b25b      	sxtb	r3, r3
 800db38:	e05d      	b.n	800dbf6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800db3a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800db3e:	4933      	ldr	r1, [pc, #204]	@ (800dc0c <etharp_update_arp_entry+0x148>)
 800db40:	4613      	mov	r3, r2
 800db42:	005b      	lsls	r3, r3, #1
 800db44:	4413      	add	r3, r2
 800db46:	00db      	lsls	r3, r3, #3
 800db48:	440b      	add	r3, r1
 800db4a:	3314      	adds	r3, #20
 800db4c:	2202      	movs	r2, #2
 800db4e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800db50:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800db54:	492d      	ldr	r1, [pc, #180]	@ (800dc0c <etharp_update_arp_entry+0x148>)
 800db56:	4613      	mov	r3, r2
 800db58:	005b      	lsls	r3, r3, #1
 800db5a:	4413      	add	r3, r2
 800db5c:	00db      	lsls	r3, r3, #3
 800db5e:	440b      	add	r3, r1
 800db60:	3308      	adds	r3, #8
 800db62:	68fa      	ldr	r2, [r7, #12]
 800db64:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800db66:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800db6a:	4613      	mov	r3, r2
 800db6c:	005b      	lsls	r3, r3, #1
 800db6e:	4413      	add	r3, r2
 800db70:	00db      	lsls	r3, r3, #3
 800db72:	3308      	adds	r3, #8
 800db74:	4a25      	ldr	r2, [pc, #148]	@ (800dc0c <etharp_update_arp_entry+0x148>)
 800db76:	4413      	add	r3, r2
 800db78:	3304      	adds	r3, #4
 800db7a:	2206      	movs	r2, #6
 800db7c:	6879      	ldr	r1, [r7, #4]
 800db7e:	4618      	mov	r0, r3
 800db80:	f002 fae5 	bl	801014e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800db84:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800db88:	4920      	ldr	r1, [pc, #128]	@ (800dc0c <etharp_update_arp_entry+0x148>)
 800db8a:	4613      	mov	r3, r2
 800db8c:	005b      	lsls	r3, r3, #1
 800db8e:	4413      	add	r3, r2
 800db90:	00db      	lsls	r3, r3, #3
 800db92:	440b      	add	r3, r1
 800db94:	3312      	adds	r3, #18
 800db96:	2200      	movs	r2, #0
 800db98:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800db9a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800db9e:	491b      	ldr	r1, [pc, #108]	@ (800dc0c <etharp_update_arp_entry+0x148>)
 800dba0:	4613      	mov	r3, r2
 800dba2:	005b      	lsls	r3, r3, #1
 800dba4:	4413      	add	r3, r2
 800dba6:	00db      	lsls	r3, r3, #3
 800dba8:	440b      	add	r3, r1
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d021      	beq.n	800dbf4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800dbb0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dbb4:	4915      	ldr	r1, [pc, #84]	@ (800dc0c <etharp_update_arp_entry+0x148>)
 800dbb6:	4613      	mov	r3, r2
 800dbb8:	005b      	lsls	r3, r3, #1
 800dbba:	4413      	add	r3, r2
 800dbbc:	00db      	lsls	r3, r3, #3
 800dbbe:	440b      	add	r3, r1
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800dbc4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dbc8:	4910      	ldr	r1, [pc, #64]	@ (800dc0c <etharp_update_arp_entry+0x148>)
 800dbca:	4613      	mov	r3, r2
 800dbcc:	005b      	lsls	r3, r3, #1
 800dbce:	4413      	add	r3, r2
 800dbd0:	00db      	lsls	r3, r3, #3
 800dbd2:	440b      	add	r3, r1
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800dbde:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dbe2:	9300      	str	r3, [sp, #0]
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6939      	ldr	r1, [r7, #16]
 800dbe8:	68f8      	ldr	r0, [r7, #12]
 800dbea:	f002 f817 	bl	800fc1c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800dbee:	6938      	ldr	r0, [r7, #16]
 800dbf0:	f7f9 fadc 	bl	80071ac <pbuf_free>
  }
  return ERR_OK;
 800dbf4:	2300      	movs	r3, #0
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3718      	adds	r7, #24
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}
 800dbfe:	bf00      	nop
 800dc00:	080134b4 	.word	0x080134b4
 800dc04:	080135ac 	.word	0x080135ac
 800dc08:	0801352c 	.word	0x0801352c
 800dc0c:	20008830 	.word	0x20008830

0800dc10 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b084      	sub	sp, #16
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dc18:	2300      	movs	r3, #0
 800dc1a:	60fb      	str	r3, [r7, #12]
 800dc1c:	e01e      	b.n	800dc5c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800dc1e:	4913      	ldr	r1, [pc, #76]	@ (800dc6c <etharp_cleanup_netif+0x5c>)
 800dc20:	68fa      	ldr	r2, [r7, #12]
 800dc22:	4613      	mov	r3, r2
 800dc24:	005b      	lsls	r3, r3, #1
 800dc26:	4413      	add	r3, r2
 800dc28:	00db      	lsls	r3, r3, #3
 800dc2a:	440b      	add	r3, r1
 800dc2c:	3314      	adds	r3, #20
 800dc2e:	781b      	ldrb	r3, [r3, #0]
 800dc30:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800dc32:	7afb      	ldrb	r3, [r7, #11]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d00e      	beq.n	800dc56 <etharp_cleanup_netif+0x46>
 800dc38:	490c      	ldr	r1, [pc, #48]	@ (800dc6c <etharp_cleanup_netif+0x5c>)
 800dc3a:	68fa      	ldr	r2, [r7, #12]
 800dc3c:	4613      	mov	r3, r2
 800dc3e:	005b      	lsls	r3, r3, #1
 800dc40:	4413      	add	r3, r2
 800dc42:	00db      	lsls	r3, r3, #3
 800dc44:	440b      	add	r3, r1
 800dc46:	3308      	adds	r3, #8
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	687a      	ldr	r2, [r7, #4]
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d102      	bne.n	800dc56 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800dc50:	68f8      	ldr	r0, [r7, #12]
 800dc52:	f7ff fce5 	bl	800d620 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	3301      	adds	r3, #1
 800dc5a:	60fb      	str	r3, [r7, #12]
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	2b09      	cmp	r3, #9
 800dc60:	dddd      	ble.n	800dc1e <etharp_cleanup_netif+0xe>
    }
  }
}
 800dc62:	bf00      	nop
 800dc64:	bf00      	nop
 800dc66:	3710      	adds	r7, #16
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd80      	pop	{r7, pc}
 800dc6c:	20008830 	.word	0x20008830

0800dc70 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800dc70:	b5b0      	push	{r4, r5, r7, lr}
 800dc72:	b08a      	sub	sp, #40	@ 0x28
 800dc74:	af04      	add	r7, sp, #16
 800dc76:	6078      	str	r0, [r7, #4]
 800dc78:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d107      	bne.n	800dc90 <etharp_input+0x20>
 800dc80:	4b3d      	ldr	r3, [pc, #244]	@ (800dd78 <etharp_input+0x108>)
 800dc82:	f240 228a 	movw	r2, #650	@ 0x28a
 800dc86:	493d      	ldr	r1, [pc, #244]	@ (800dd7c <etharp_input+0x10c>)
 800dc88:	483d      	ldr	r0, [pc, #244]	@ (800dd80 <etharp_input+0x110>)
 800dc8a:	f002 f90f 	bl	800feac <iprintf>
 800dc8e:	e06f      	b.n	800dd70 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	685b      	ldr	r3, [r3, #4]
 800dc94:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	881b      	ldrh	r3, [r3, #0]
 800dc9a:	b29b      	uxth	r3, r3
 800dc9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dca0:	d10c      	bne.n	800dcbc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800dca2:	693b      	ldr	r3, [r7, #16]
 800dca4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800dca6:	2b06      	cmp	r3, #6
 800dca8:	d108      	bne.n	800dcbc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800dcae:	2b04      	cmp	r3, #4
 800dcb0:	d104      	bne.n	800dcbc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800dcb2:	693b      	ldr	r3, [r7, #16]
 800dcb4:	885b      	ldrh	r3, [r3, #2]
 800dcb6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800dcb8:	2b08      	cmp	r3, #8
 800dcba:	d003      	beq.n	800dcc4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f7f9 fa75 	bl	80071ac <pbuf_free>
    return;
 800dcc2:	e055      	b.n	800dd70 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	330e      	adds	r3, #14
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	3318      	adds	r3, #24
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dcd4:	683b      	ldr	r3, [r7, #0]
 800dcd6:	3304      	adds	r3, #4
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d102      	bne.n	800dce4 <etharp_input+0x74>
    for_us = 0;
 800dcde:	2300      	movs	r3, #0
 800dce0:	75fb      	strb	r3, [r7, #23]
 800dce2:	e009      	b.n	800dcf8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800dce4:	68ba      	ldr	r2, [r7, #8]
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	3304      	adds	r3, #4
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	429a      	cmp	r2, r3
 800dcee:	bf0c      	ite	eq
 800dcf0:	2301      	moveq	r3, #1
 800dcf2:	2300      	movne	r3, #0
 800dcf4:	b2db      	uxtb	r3, r3
 800dcf6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	f103 0208 	add.w	r2, r3, #8
 800dcfe:	7dfb      	ldrb	r3, [r7, #23]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d001      	beq.n	800dd08 <etharp_input+0x98>
 800dd04:	2301      	movs	r3, #1
 800dd06:	e000      	b.n	800dd0a <etharp_input+0x9a>
 800dd08:	2302      	movs	r3, #2
 800dd0a:	f107 010c 	add.w	r1, r7, #12
 800dd0e:	6838      	ldr	r0, [r7, #0]
 800dd10:	f7ff fed8 	bl	800dac4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	88db      	ldrh	r3, [r3, #6]
 800dd18:	b29b      	uxth	r3, r3
 800dd1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dd1e:	d003      	beq.n	800dd28 <etharp_input+0xb8>
 800dd20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd24:	d01e      	beq.n	800dd64 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800dd26:	e020      	b.n	800dd6a <etharp_input+0xfa>
      if (for_us) {
 800dd28:	7dfb      	ldrb	r3, [r7, #23]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d01c      	beq.n	800dd68 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800dd44:	693a      	ldr	r2, [r7, #16]
 800dd46:	3208      	adds	r2, #8
        etharp_raw(netif,
 800dd48:	2102      	movs	r1, #2
 800dd4a:	9103      	str	r1, [sp, #12]
 800dd4c:	f107 010c 	add.w	r1, r7, #12
 800dd50:	9102      	str	r1, [sp, #8]
 800dd52:	9201      	str	r2, [sp, #4]
 800dd54:	9300      	str	r3, [sp, #0]
 800dd56:	462b      	mov	r3, r5
 800dd58:	4622      	mov	r2, r4
 800dd5a:	4601      	mov	r1, r0
 800dd5c:	6838      	ldr	r0, [r7, #0]
 800dd5e:	f000 faeb 	bl	800e338 <etharp_raw>
      break;
 800dd62:	e001      	b.n	800dd68 <etharp_input+0xf8>
      break;
 800dd64:	bf00      	nop
 800dd66:	e000      	b.n	800dd6a <etharp_input+0xfa>
      break;
 800dd68:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f7f9 fa1e 	bl	80071ac <pbuf_free>
}
 800dd70:	3718      	adds	r7, #24
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bdb0      	pop	{r4, r5, r7, pc}
 800dd76:	bf00      	nop
 800dd78:	080134b4 	.word	0x080134b4
 800dd7c:	08013604 	.word	0x08013604
 800dd80:	0801352c 	.word	0x0801352c

0800dd84 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b086      	sub	sp, #24
 800dd88:	af02      	add	r7, sp, #8
 800dd8a:	60f8      	str	r0, [r7, #12]
 800dd8c:	60b9      	str	r1, [r7, #8]
 800dd8e:	4613      	mov	r3, r2
 800dd90:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800dd92:	79fa      	ldrb	r2, [r7, #7]
 800dd94:	4944      	ldr	r1, [pc, #272]	@ (800dea8 <etharp_output_to_arp_index+0x124>)
 800dd96:	4613      	mov	r3, r2
 800dd98:	005b      	lsls	r3, r3, #1
 800dd9a:	4413      	add	r3, r2
 800dd9c:	00db      	lsls	r3, r3, #3
 800dd9e:	440b      	add	r3, r1
 800dda0:	3314      	adds	r3, #20
 800dda2:	781b      	ldrb	r3, [r3, #0]
 800dda4:	2b01      	cmp	r3, #1
 800dda6:	d806      	bhi.n	800ddb6 <etharp_output_to_arp_index+0x32>
 800dda8:	4b40      	ldr	r3, [pc, #256]	@ (800deac <etharp_output_to_arp_index+0x128>)
 800ddaa:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800ddae:	4940      	ldr	r1, [pc, #256]	@ (800deb0 <etharp_output_to_arp_index+0x12c>)
 800ddb0:	4840      	ldr	r0, [pc, #256]	@ (800deb4 <etharp_output_to_arp_index+0x130>)
 800ddb2:	f002 f87b 	bl	800feac <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800ddb6:	79fa      	ldrb	r2, [r7, #7]
 800ddb8:	493b      	ldr	r1, [pc, #236]	@ (800dea8 <etharp_output_to_arp_index+0x124>)
 800ddba:	4613      	mov	r3, r2
 800ddbc:	005b      	lsls	r3, r3, #1
 800ddbe:	4413      	add	r3, r2
 800ddc0:	00db      	lsls	r3, r3, #3
 800ddc2:	440b      	add	r3, r1
 800ddc4:	3314      	adds	r3, #20
 800ddc6:	781b      	ldrb	r3, [r3, #0]
 800ddc8:	2b02      	cmp	r3, #2
 800ddca:	d153      	bne.n	800de74 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800ddcc:	79fa      	ldrb	r2, [r7, #7]
 800ddce:	4936      	ldr	r1, [pc, #216]	@ (800dea8 <etharp_output_to_arp_index+0x124>)
 800ddd0:	4613      	mov	r3, r2
 800ddd2:	005b      	lsls	r3, r3, #1
 800ddd4:	4413      	add	r3, r2
 800ddd6:	00db      	lsls	r3, r3, #3
 800ddd8:	440b      	add	r3, r1
 800ddda:	3312      	adds	r3, #18
 800dddc:	881b      	ldrh	r3, [r3, #0]
 800ddde:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800dde2:	d919      	bls.n	800de18 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800dde4:	79fa      	ldrb	r2, [r7, #7]
 800dde6:	4613      	mov	r3, r2
 800dde8:	005b      	lsls	r3, r3, #1
 800ddea:	4413      	add	r3, r2
 800ddec:	00db      	lsls	r3, r3, #3
 800ddee:	4a2e      	ldr	r2, [pc, #184]	@ (800dea8 <etharp_output_to_arp_index+0x124>)
 800ddf0:	4413      	add	r3, r2
 800ddf2:	3304      	adds	r3, #4
 800ddf4:	4619      	mov	r1, r3
 800ddf6:	68f8      	ldr	r0, [r7, #12]
 800ddf8:	f000 fb4c 	bl	800e494 <etharp_request>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d138      	bne.n	800de74 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800de02:	79fa      	ldrb	r2, [r7, #7]
 800de04:	4928      	ldr	r1, [pc, #160]	@ (800dea8 <etharp_output_to_arp_index+0x124>)
 800de06:	4613      	mov	r3, r2
 800de08:	005b      	lsls	r3, r3, #1
 800de0a:	4413      	add	r3, r2
 800de0c:	00db      	lsls	r3, r3, #3
 800de0e:	440b      	add	r3, r1
 800de10:	3314      	adds	r3, #20
 800de12:	2203      	movs	r2, #3
 800de14:	701a      	strb	r2, [r3, #0]
 800de16:	e02d      	b.n	800de74 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800de18:	79fa      	ldrb	r2, [r7, #7]
 800de1a:	4923      	ldr	r1, [pc, #140]	@ (800dea8 <etharp_output_to_arp_index+0x124>)
 800de1c:	4613      	mov	r3, r2
 800de1e:	005b      	lsls	r3, r3, #1
 800de20:	4413      	add	r3, r2
 800de22:	00db      	lsls	r3, r3, #3
 800de24:	440b      	add	r3, r1
 800de26:	3312      	adds	r3, #18
 800de28:	881b      	ldrh	r3, [r3, #0]
 800de2a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800de2e:	d321      	bcc.n	800de74 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800de30:	79fa      	ldrb	r2, [r7, #7]
 800de32:	4613      	mov	r3, r2
 800de34:	005b      	lsls	r3, r3, #1
 800de36:	4413      	add	r3, r2
 800de38:	00db      	lsls	r3, r3, #3
 800de3a:	4a1b      	ldr	r2, [pc, #108]	@ (800dea8 <etharp_output_to_arp_index+0x124>)
 800de3c:	4413      	add	r3, r2
 800de3e:	1d19      	adds	r1, r3, #4
 800de40:	79fa      	ldrb	r2, [r7, #7]
 800de42:	4613      	mov	r3, r2
 800de44:	005b      	lsls	r3, r3, #1
 800de46:	4413      	add	r3, r2
 800de48:	00db      	lsls	r3, r3, #3
 800de4a:	3308      	adds	r3, #8
 800de4c:	4a16      	ldr	r2, [pc, #88]	@ (800dea8 <etharp_output_to_arp_index+0x124>)
 800de4e:	4413      	add	r3, r2
 800de50:	3304      	adds	r3, #4
 800de52:	461a      	mov	r2, r3
 800de54:	68f8      	ldr	r0, [r7, #12]
 800de56:	f000 fafb 	bl	800e450 <etharp_request_dst>
 800de5a:	4603      	mov	r3, r0
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d109      	bne.n	800de74 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800de60:	79fa      	ldrb	r2, [r7, #7]
 800de62:	4911      	ldr	r1, [pc, #68]	@ (800dea8 <etharp_output_to_arp_index+0x124>)
 800de64:	4613      	mov	r3, r2
 800de66:	005b      	lsls	r3, r3, #1
 800de68:	4413      	add	r3, r2
 800de6a:	00db      	lsls	r3, r3, #3
 800de6c:	440b      	add	r3, r1
 800de6e:	3314      	adds	r3, #20
 800de70:	2203      	movs	r2, #3
 800de72:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800de7a:	79fa      	ldrb	r2, [r7, #7]
 800de7c:	4613      	mov	r3, r2
 800de7e:	005b      	lsls	r3, r3, #1
 800de80:	4413      	add	r3, r2
 800de82:	00db      	lsls	r3, r3, #3
 800de84:	3308      	adds	r3, #8
 800de86:	4a08      	ldr	r2, [pc, #32]	@ (800dea8 <etharp_output_to_arp_index+0x124>)
 800de88:	4413      	add	r3, r2
 800de8a:	3304      	adds	r3, #4
 800de8c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800de90:	9200      	str	r2, [sp, #0]
 800de92:	460a      	mov	r2, r1
 800de94:	68b9      	ldr	r1, [r7, #8]
 800de96:	68f8      	ldr	r0, [r7, #12]
 800de98:	f001 fec0 	bl	800fc1c <ethernet_output>
 800de9c:	4603      	mov	r3, r0
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	3710      	adds	r7, #16
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}
 800dea6:	bf00      	nop
 800dea8:	20008830 	.word	0x20008830
 800deac:	080134b4 	.word	0x080134b4
 800deb0:	08013624 	.word	0x08013624
 800deb4:	0801352c 	.word	0x0801352c

0800deb8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b08a      	sub	sp, #40	@ 0x28
 800debc:	af02      	add	r7, sp, #8
 800debe:	60f8      	str	r0, [r7, #12]
 800dec0:	60b9      	str	r1, [r7, #8]
 800dec2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d106      	bne.n	800dedc <etharp_output+0x24>
 800dece:	4b73      	ldr	r3, [pc, #460]	@ (800e09c <etharp_output+0x1e4>)
 800ded0:	f240 321e 	movw	r2, #798	@ 0x31e
 800ded4:	4972      	ldr	r1, [pc, #456]	@ (800e0a0 <etharp_output+0x1e8>)
 800ded6:	4873      	ldr	r0, [pc, #460]	@ (800e0a4 <etharp_output+0x1ec>)
 800ded8:	f001 ffe8 	bl	800feac <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d106      	bne.n	800def0 <etharp_output+0x38>
 800dee2:	4b6e      	ldr	r3, [pc, #440]	@ (800e09c <etharp_output+0x1e4>)
 800dee4:	f240 321f 	movw	r2, #799	@ 0x31f
 800dee8:	496f      	ldr	r1, [pc, #444]	@ (800e0a8 <etharp_output+0x1f0>)
 800deea:	486e      	ldr	r0, [pc, #440]	@ (800e0a4 <etharp_output+0x1ec>)
 800deec:	f001 ffde 	bl	800feac <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d106      	bne.n	800df04 <etharp_output+0x4c>
 800def6:	4b69      	ldr	r3, [pc, #420]	@ (800e09c <etharp_output+0x1e4>)
 800def8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800defc:	496b      	ldr	r1, [pc, #428]	@ (800e0ac <etharp_output+0x1f4>)
 800defe:	4869      	ldr	r0, [pc, #420]	@ (800e0a4 <etharp_output+0x1ec>)
 800df00:	f001 ffd4 	bl	800feac <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	68f9      	ldr	r1, [r7, #12]
 800df0a:	4618      	mov	r0, r3
 800df0c:	f000 fef8 	bl	800ed00 <ip4_addr_isbroadcast_u32>
 800df10:	4603      	mov	r3, r0
 800df12:	2b00      	cmp	r3, #0
 800df14:	d002      	beq.n	800df1c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800df16:	4b66      	ldr	r3, [pc, #408]	@ (800e0b0 <etharp_output+0x1f8>)
 800df18:	61fb      	str	r3, [r7, #28]
 800df1a:	e0af      	b.n	800e07c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800df24:	2be0      	cmp	r3, #224	@ 0xe0
 800df26:	d118      	bne.n	800df5a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800df28:	2301      	movs	r3, #1
 800df2a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800df2c:	2300      	movs	r3, #0
 800df2e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800df30:	235e      	movs	r3, #94	@ 0x5e
 800df32:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	3301      	adds	r3, #1
 800df38:	781b      	ldrb	r3, [r3, #0]
 800df3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800df3e:	b2db      	uxtb	r3, r3
 800df40:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	3302      	adds	r3, #2
 800df46:	781b      	ldrb	r3, [r3, #0]
 800df48:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	3303      	adds	r3, #3
 800df4e:	781b      	ldrb	r3, [r3, #0]
 800df50:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800df52:	f107 0310 	add.w	r3, r7, #16
 800df56:	61fb      	str	r3, [r7, #28]
 800df58:	e090      	b.n	800e07c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681a      	ldr	r2, [r3, #0]
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	3304      	adds	r3, #4
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	405a      	eors	r2, r3
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	3308      	adds	r3, #8
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	4013      	ands	r3, r2
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d012      	beq.n	800df98 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800df78:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800df7c:	4293      	cmp	r3, r2
 800df7e:	d00b      	beq.n	800df98 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	330c      	adds	r3, #12
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d003      	beq.n	800df92 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	330c      	adds	r3, #12
 800df8e:	61bb      	str	r3, [r7, #24]
 800df90:	e002      	b.n	800df98 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800df92:	f06f 0303 	mvn.w	r3, #3
 800df96:	e07d      	b.n	800e094 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800df98:	4b46      	ldr	r3, [pc, #280]	@ (800e0b4 <etharp_output+0x1fc>)
 800df9a:	781b      	ldrb	r3, [r3, #0]
 800df9c:	4619      	mov	r1, r3
 800df9e:	4a46      	ldr	r2, [pc, #280]	@ (800e0b8 <etharp_output+0x200>)
 800dfa0:	460b      	mov	r3, r1
 800dfa2:	005b      	lsls	r3, r3, #1
 800dfa4:	440b      	add	r3, r1
 800dfa6:	00db      	lsls	r3, r3, #3
 800dfa8:	4413      	add	r3, r2
 800dfaa:	3314      	adds	r3, #20
 800dfac:	781b      	ldrb	r3, [r3, #0]
 800dfae:	2b01      	cmp	r3, #1
 800dfb0:	d925      	bls.n	800dffe <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800dfb2:	4b40      	ldr	r3, [pc, #256]	@ (800e0b4 <etharp_output+0x1fc>)
 800dfb4:	781b      	ldrb	r3, [r3, #0]
 800dfb6:	4619      	mov	r1, r3
 800dfb8:	4a3f      	ldr	r2, [pc, #252]	@ (800e0b8 <etharp_output+0x200>)
 800dfba:	460b      	mov	r3, r1
 800dfbc:	005b      	lsls	r3, r3, #1
 800dfbe:	440b      	add	r3, r1
 800dfc0:	00db      	lsls	r3, r3, #3
 800dfc2:	4413      	add	r3, r2
 800dfc4:	3308      	adds	r3, #8
 800dfc6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800dfc8:	68fa      	ldr	r2, [r7, #12]
 800dfca:	429a      	cmp	r2, r3
 800dfcc:	d117      	bne.n	800dffe <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800dfce:	69bb      	ldr	r3, [r7, #24]
 800dfd0:	681a      	ldr	r2, [r3, #0]
 800dfd2:	4b38      	ldr	r3, [pc, #224]	@ (800e0b4 <etharp_output+0x1fc>)
 800dfd4:	781b      	ldrb	r3, [r3, #0]
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	4937      	ldr	r1, [pc, #220]	@ (800e0b8 <etharp_output+0x200>)
 800dfda:	4603      	mov	r3, r0
 800dfdc:	005b      	lsls	r3, r3, #1
 800dfde:	4403      	add	r3, r0
 800dfe0:	00db      	lsls	r3, r3, #3
 800dfe2:	440b      	add	r3, r1
 800dfe4:	3304      	adds	r3, #4
 800dfe6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d108      	bne.n	800dffe <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800dfec:	4b31      	ldr	r3, [pc, #196]	@ (800e0b4 <etharp_output+0x1fc>)
 800dfee:	781b      	ldrb	r3, [r3, #0]
 800dff0:	461a      	mov	r2, r3
 800dff2:	68b9      	ldr	r1, [r7, #8]
 800dff4:	68f8      	ldr	r0, [r7, #12]
 800dff6:	f7ff fec5 	bl	800dd84 <etharp_output_to_arp_index>
 800dffa:	4603      	mov	r3, r0
 800dffc:	e04a      	b.n	800e094 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800dffe:	2300      	movs	r3, #0
 800e000:	75fb      	strb	r3, [r7, #23]
 800e002:	e031      	b.n	800e068 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e004:	7dfa      	ldrb	r2, [r7, #23]
 800e006:	492c      	ldr	r1, [pc, #176]	@ (800e0b8 <etharp_output+0x200>)
 800e008:	4613      	mov	r3, r2
 800e00a:	005b      	lsls	r3, r3, #1
 800e00c:	4413      	add	r3, r2
 800e00e:	00db      	lsls	r3, r3, #3
 800e010:	440b      	add	r3, r1
 800e012:	3314      	adds	r3, #20
 800e014:	781b      	ldrb	r3, [r3, #0]
 800e016:	2b01      	cmp	r3, #1
 800e018:	d923      	bls.n	800e062 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800e01a:	7dfa      	ldrb	r2, [r7, #23]
 800e01c:	4926      	ldr	r1, [pc, #152]	@ (800e0b8 <etharp_output+0x200>)
 800e01e:	4613      	mov	r3, r2
 800e020:	005b      	lsls	r3, r3, #1
 800e022:	4413      	add	r3, r2
 800e024:	00db      	lsls	r3, r3, #3
 800e026:	440b      	add	r3, r1
 800e028:	3308      	adds	r3, #8
 800e02a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e02c:	68fa      	ldr	r2, [r7, #12]
 800e02e:	429a      	cmp	r2, r3
 800e030:	d117      	bne.n	800e062 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800e032:	69bb      	ldr	r3, [r7, #24]
 800e034:	6819      	ldr	r1, [r3, #0]
 800e036:	7dfa      	ldrb	r2, [r7, #23]
 800e038:	481f      	ldr	r0, [pc, #124]	@ (800e0b8 <etharp_output+0x200>)
 800e03a:	4613      	mov	r3, r2
 800e03c:	005b      	lsls	r3, r3, #1
 800e03e:	4413      	add	r3, r2
 800e040:	00db      	lsls	r3, r3, #3
 800e042:	4403      	add	r3, r0
 800e044:	3304      	adds	r3, #4
 800e046:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800e048:	4299      	cmp	r1, r3
 800e04a:	d10a      	bne.n	800e062 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800e04c:	4a19      	ldr	r2, [pc, #100]	@ (800e0b4 <etharp_output+0x1fc>)
 800e04e:	7dfb      	ldrb	r3, [r7, #23]
 800e050:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800e052:	7dfb      	ldrb	r3, [r7, #23]
 800e054:	461a      	mov	r2, r3
 800e056:	68b9      	ldr	r1, [r7, #8]
 800e058:	68f8      	ldr	r0, [r7, #12]
 800e05a:	f7ff fe93 	bl	800dd84 <etharp_output_to_arp_index>
 800e05e:	4603      	mov	r3, r0
 800e060:	e018      	b.n	800e094 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e062:	7dfb      	ldrb	r3, [r7, #23]
 800e064:	3301      	adds	r3, #1
 800e066:	75fb      	strb	r3, [r7, #23]
 800e068:	7dfb      	ldrb	r3, [r7, #23]
 800e06a:	2b09      	cmp	r3, #9
 800e06c:	d9ca      	bls.n	800e004 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800e06e:	68ba      	ldr	r2, [r7, #8]
 800e070:	69b9      	ldr	r1, [r7, #24]
 800e072:	68f8      	ldr	r0, [r7, #12]
 800e074:	f000 f822 	bl	800e0bc <etharp_query>
 800e078:	4603      	mov	r3, r0
 800e07a:	e00b      	b.n	800e094 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800e082:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e086:	9300      	str	r3, [sp, #0]
 800e088:	69fb      	ldr	r3, [r7, #28]
 800e08a:	68b9      	ldr	r1, [r7, #8]
 800e08c:	68f8      	ldr	r0, [r7, #12]
 800e08e:	f001 fdc5 	bl	800fc1c <ethernet_output>
 800e092:	4603      	mov	r3, r0
}
 800e094:	4618      	mov	r0, r3
 800e096:	3720      	adds	r7, #32
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}
 800e09c:	080134b4 	.word	0x080134b4
 800e0a0:	08013604 	.word	0x08013604
 800e0a4:	0801352c 	.word	0x0801352c
 800e0a8:	08013654 	.word	0x08013654
 800e0ac:	080135f4 	.word	0x080135f4
 800e0b0:	08013c70 	.word	0x08013c70
 800e0b4:	20008920 	.word	0x20008920
 800e0b8:	20008830 	.word	0x20008830

0800e0bc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b08c      	sub	sp, #48	@ 0x30
 800e0c0:	af02      	add	r7, sp, #8
 800e0c2:	60f8      	str	r0, [r7, #12]
 800e0c4:	60b9      	str	r1, [r7, #8]
 800e0c6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	3326      	adds	r3, #38	@ 0x26
 800e0cc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800e0ce:	23ff      	movs	r3, #255	@ 0xff
 800e0d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	68f9      	ldr	r1, [r7, #12]
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f000 fe0e 	bl	800ed00 <ip4_addr_isbroadcast_u32>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d10c      	bne.n	800e104 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e0ea:	68bb      	ldr	r3, [r7, #8]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e0f2:	2be0      	cmp	r3, #224	@ 0xe0
 800e0f4:	d006      	beq.n	800e104 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d003      	beq.n	800e104 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d102      	bne.n	800e10a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e104:	f06f 030f 	mvn.w	r3, #15
 800e108:	e101      	b.n	800e30e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800e10a:	68fa      	ldr	r2, [r7, #12]
 800e10c:	2101      	movs	r1, #1
 800e10e:	68b8      	ldr	r0, [r7, #8]
 800e110:	f7ff fb60 	bl	800d7d4 <etharp_find_entry>
 800e114:	4603      	mov	r3, r0
 800e116:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800e118:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	da02      	bge.n	800e126 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800e120:	8a7b      	ldrh	r3, [r7, #18]
 800e122:	b25b      	sxtb	r3, r3
 800e124:	e0f3      	b.n	800e30e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800e126:	8a7b      	ldrh	r3, [r7, #18]
 800e128:	2b7e      	cmp	r3, #126	@ 0x7e
 800e12a:	d906      	bls.n	800e13a <etharp_query+0x7e>
 800e12c:	4b7a      	ldr	r3, [pc, #488]	@ (800e318 <etharp_query+0x25c>)
 800e12e:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800e132:	497a      	ldr	r1, [pc, #488]	@ (800e31c <etharp_query+0x260>)
 800e134:	487a      	ldr	r0, [pc, #488]	@ (800e320 <etharp_query+0x264>)
 800e136:	f001 feb9 	bl	800feac <iprintf>
  i = (netif_addr_idx_t)i_err;
 800e13a:	8a7b      	ldrh	r3, [r7, #18]
 800e13c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800e13e:	7c7a      	ldrb	r2, [r7, #17]
 800e140:	4978      	ldr	r1, [pc, #480]	@ (800e324 <etharp_query+0x268>)
 800e142:	4613      	mov	r3, r2
 800e144:	005b      	lsls	r3, r3, #1
 800e146:	4413      	add	r3, r2
 800e148:	00db      	lsls	r3, r3, #3
 800e14a:	440b      	add	r3, r1
 800e14c:	3314      	adds	r3, #20
 800e14e:	781b      	ldrb	r3, [r3, #0]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d115      	bne.n	800e180 <etharp_query+0xc4>
    is_new_entry = 1;
 800e154:	2301      	movs	r3, #1
 800e156:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800e158:	7c7a      	ldrb	r2, [r7, #17]
 800e15a:	4972      	ldr	r1, [pc, #456]	@ (800e324 <etharp_query+0x268>)
 800e15c:	4613      	mov	r3, r2
 800e15e:	005b      	lsls	r3, r3, #1
 800e160:	4413      	add	r3, r2
 800e162:	00db      	lsls	r3, r3, #3
 800e164:	440b      	add	r3, r1
 800e166:	3314      	adds	r3, #20
 800e168:	2201      	movs	r2, #1
 800e16a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800e16c:	7c7a      	ldrb	r2, [r7, #17]
 800e16e:	496d      	ldr	r1, [pc, #436]	@ (800e324 <etharp_query+0x268>)
 800e170:	4613      	mov	r3, r2
 800e172:	005b      	lsls	r3, r3, #1
 800e174:	4413      	add	r3, r2
 800e176:	00db      	lsls	r3, r3, #3
 800e178:	440b      	add	r3, r1
 800e17a:	3308      	adds	r3, #8
 800e17c:	68fa      	ldr	r2, [r7, #12]
 800e17e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800e180:	7c7a      	ldrb	r2, [r7, #17]
 800e182:	4968      	ldr	r1, [pc, #416]	@ (800e324 <etharp_query+0x268>)
 800e184:	4613      	mov	r3, r2
 800e186:	005b      	lsls	r3, r3, #1
 800e188:	4413      	add	r3, r2
 800e18a:	00db      	lsls	r3, r3, #3
 800e18c:	440b      	add	r3, r1
 800e18e:	3314      	adds	r3, #20
 800e190:	781b      	ldrb	r3, [r3, #0]
 800e192:	2b01      	cmp	r3, #1
 800e194:	d011      	beq.n	800e1ba <etharp_query+0xfe>
 800e196:	7c7a      	ldrb	r2, [r7, #17]
 800e198:	4962      	ldr	r1, [pc, #392]	@ (800e324 <etharp_query+0x268>)
 800e19a:	4613      	mov	r3, r2
 800e19c:	005b      	lsls	r3, r3, #1
 800e19e:	4413      	add	r3, r2
 800e1a0:	00db      	lsls	r3, r3, #3
 800e1a2:	440b      	add	r3, r1
 800e1a4:	3314      	adds	r3, #20
 800e1a6:	781b      	ldrb	r3, [r3, #0]
 800e1a8:	2b01      	cmp	r3, #1
 800e1aa:	d806      	bhi.n	800e1ba <etharp_query+0xfe>
 800e1ac:	4b5a      	ldr	r3, [pc, #360]	@ (800e318 <etharp_query+0x25c>)
 800e1ae:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800e1b2:	495d      	ldr	r1, [pc, #372]	@ (800e328 <etharp_query+0x26c>)
 800e1b4:	485a      	ldr	r0, [pc, #360]	@ (800e320 <etharp_query+0x264>)
 800e1b6:	f001 fe79 	bl	800feac <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800e1ba:	6a3b      	ldr	r3, [r7, #32]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d102      	bne.n	800e1c6 <etharp_query+0x10a>
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d10c      	bne.n	800e1e0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800e1c6:	68b9      	ldr	r1, [r7, #8]
 800e1c8:	68f8      	ldr	r0, [r7, #12]
 800e1ca:	f000 f963 	bl	800e494 <etharp_request>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d102      	bne.n	800e1e0 <etharp_query+0x124>
      return result;
 800e1da:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e1de:	e096      	b.n	800e30e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d106      	bne.n	800e1f4 <etharp_query+0x138>
 800e1e6:	4b4c      	ldr	r3, [pc, #304]	@ (800e318 <etharp_query+0x25c>)
 800e1e8:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800e1ec:	494f      	ldr	r1, [pc, #316]	@ (800e32c <etharp_query+0x270>)
 800e1ee:	484c      	ldr	r0, [pc, #304]	@ (800e320 <etharp_query+0x264>)
 800e1f0:	f001 fe5c 	bl	800feac <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e1f4:	7c7a      	ldrb	r2, [r7, #17]
 800e1f6:	494b      	ldr	r1, [pc, #300]	@ (800e324 <etharp_query+0x268>)
 800e1f8:	4613      	mov	r3, r2
 800e1fa:	005b      	lsls	r3, r3, #1
 800e1fc:	4413      	add	r3, r2
 800e1fe:	00db      	lsls	r3, r3, #3
 800e200:	440b      	add	r3, r1
 800e202:	3314      	adds	r3, #20
 800e204:	781b      	ldrb	r3, [r3, #0]
 800e206:	2b01      	cmp	r3, #1
 800e208:	d917      	bls.n	800e23a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800e20a:	4a49      	ldr	r2, [pc, #292]	@ (800e330 <etharp_query+0x274>)
 800e20c:	7c7b      	ldrb	r3, [r7, #17]
 800e20e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e210:	7c7a      	ldrb	r2, [r7, #17]
 800e212:	4613      	mov	r3, r2
 800e214:	005b      	lsls	r3, r3, #1
 800e216:	4413      	add	r3, r2
 800e218:	00db      	lsls	r3, r3, #3
 800e21a:	3308      	adds	r3, #8
 800e21c:	4a41      	ldr	r2, [pc, #260]	@ (800e324 <etharp_query+0x268>)
 800e21e:	4413      	add	r3, r2
 800e220:	3304      	adds	r3, #4
 800e222:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e226:	9200      	str	r2, [sp, #0]
 800e228:	697a      	ldr	r2, [r7, #20]
 800e22a:	6879      	ldr	r1, [r7, #4]
 800e22c:	68f8      	ldr	r0, [r7, #12]
 800e22e:	f001 fcf5 	bl	800fc1c <ethernet_output>
 800e232:	4603      	mov	r3, r0
 800e234:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e238:	e067      	b.n	800e30a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e23a:	7c7a      	ldrb	r2, [r7, #17]
 800e23c:	4939      	ldr	r1, [pc, #228]	@ (800e324 <etharp_query+0x268>)
 800e23e:	4613      	mov	r3, r2
 800e240:	005b      	lsls	r3, r3, #1
 800e242:	4413      	add	r3, r2
 800e244:	00db      	lsls	r3, r3, #3
 800e246:	440b      	add	r3, r1
 800e248:	3314      	adds	r3, #20
 800e24a:	781b      	ldrb	r3, [r3, #0]
 800e24c:	2b01      	cmp	r3, #1
 800e24e:	d15c      	bne.n	800e30a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800e250:	2300      	movs	r3, #0
 800e252:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e258:	e01c      	b.n	800e294 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e25a:	69fb      	ldr	r3, [r7, #28]
 800e25c:	895a      	ldrh	r2, [r3, #10]
 800e25e:	69fb      	ldr	r3, [r7, #28]
 800e260:	891b      	ldrh	r3, [r3, #8]
 800e262:	429a      	cmp	r2, r3
 800e264:	d10a      	bne.n	800e27c <etharp_query+0x1c0>
 800e266:	69fb      	ldr	r3, [r7, #28]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d006      	beq.n	800e27c <etharp_query+0x1c0>
 800e26e:	4b2a      	ldr	r3, [pc, #168]	@ (800e318 <etharp_query+0x25c>)
 800e270:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800e274:	492f      	ldr	r1, [pc, #188]	@ (800e334 <etharp_query+0x278>)
 800e276:	482a      	ldr	r0, [pc, #168]	@ (800e320 <etharp_query+0x264>)
 800e278:	f001 fe18 	bl	800feac <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800e27c:	69fb      	ldr	r3, [r7, #28]
 800e27e:	7b1b      	ldrb	r3, [r3, #12]
 800e280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e284:	2b00      	cmp	r3, #0
 800e286:	d002      	beq.n	800e28e <etharp_query+0x1d2>
        copy_needed = 1;
 800e288:	2301      	movs	r3, #1
 800e28a:	61bb      	str	r3, [r7, #24]
        break;
 800e28c:	e005      	b.n	800e29a <etharp_query+0x1de>
      }
      p = p->next;
 800e28e:	69fb      	ldr	r3, [r7, #28]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e294:	69fb      	ldr	r3, [r7, #28]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d1df      	bne.n	800e25a <etharp_query+0x19e>
    }
    if (copy_needed) {
 800e29a:	69bb      	ldr	r3, [r7, #24]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d007      	beq.n	800e2b0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800e2a0:	687a      	ldr	r2, [r7, #4]
 800e2a2:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800e2a6:	200e      	movs	r0, #14
 800e2a8:	f7f9 fa7e 	bl	80077a8 <pbuf_clone>
 800e2ac:	61f8      	str	r0, [r7, #28]
 800e2ae:	e004      	b.n	800e2ba <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e2b4:	69f8      	ldr	r0, [r7, #28]
 800e2b6:	f7f9 f819 	bl	80072ec <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e2ba:	69fb      	ldr	r3, [r7, #28]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d021      	beq.n	800e304 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e2c0:	7c7a      	ldrb	r2, [r7, #17]
 800e2c2:	4918      	ldr	r1, [pc, #96]	@ (800e324 <etharp_query+0x268>)
 800e2c4:	4613      	mov	r3, r2
 800e2c6:	005b      	lsls	r3, r3, #1
 800e2c8:	4413      	add	r3, r2
 800e2ca:	00db      	lsls	r3, r3, #3
 800e2cc:	440b      	add	r3, r1
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d00a      	beq.n	800e2ea <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800e2d4:	7c7a      	ldrb	r2, [r7, #17]
 800e2d6:	4913      	ldr	r1, [pc, #76]	@ (800e324 <etharp_query+0x268>)
 800e2d8:	4613      	mov	r3, r2
 800e2da:	005b      	lsls	r3, r3, #1
 800e2dc:	4413      	add	r3, r2
 800e2de:	00db      	lsls	r3, r3, #3
 800e2e0:	440b      	add	r3, r1
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f7f8 ff61 	bl	80071ac <pbuf_free>
      }
      arp_table[i].q = p;
 800e2ea:	7c7a      	ldrb	r2, [r7, #17]
 800e2ec:	490d      	ldr	r1, [pc, #52]	@ (800e324 <etharp_query+0x268>)
 800e2ee:	4613      	mov	r3, r2
 800e2f0:	005b      	lsls	r3, r3, #1
 800e2f2:	4413      	add	r3, r2
 800e2f4:	00db      	lsls	r3, r3, #3
 800e2f6:	440b      	add	r3, r1
 800e2f8:	69fa      	ldr	r2, [r7, #28]
 800e2fa:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e302:	e002      	b.n	800e30a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800e304:	23ff      	movs	r3, #255	@ 0xff
 800e306:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800e30a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800e30e:	4618      	mov	r0, r3
 800e310:	3728      	adds	r7, #40	@ 0x28
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}
 800e316:	bf00      	nop
 800e318:	080134b4 	.word	0x080134b4
 800e31c:	08013660 	.word	0x08013660
 800e320:	0801352c 	.word	0x0801352c
 800e324:	20008830 	.word	0x20008830
 800e328:	08013670 	.word	0x08013670
 800e32c:	08013654 	.word	0x08013654
 800e330:	20008920 	.word	0x20008920
 800e334:	08013698 	.word	0x08013698

0800e338 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b08a      	sub	sp, #40	@ 0x28
 800e33c:	af02      	add	r7, sp, #8
 800e33e:	60f8      	str	r0, [r7, #12]
 800e340:	60b9      	str	r1, [r7, #8]
 800e342:	607a      	str	r2, [r7, #4]
 800e344:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e346:	2300      	movs	r3, #0
 800e348:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d106      	bne.n	800e35e <etharp_raw+0x26>
 800e350:	4b3a      	ldr	r3, [pc, #232]	@ (800e43c <etharp_raw+0x104>)
 800e352:	f240 4257 	movw	r2, #1111	@ 0x457
 800e356:	493a      	ldr	r1, [pc, #232]	@ (800e440 <etharp_raw+0x108>)
 800e358:	483a      	ldr	r0, [pc, #232]	@ (800e444 <etharp_raw+0x10c>)
 800e35a:	f001 fda7 	bl	800feac <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e35e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e362:	211c      	movs	r1, #28
 800e364:	200e      	movs	r0, #14
 800e366:	f7f8 fc3d 	bl	8006be4 <pbuf_alloc>
 800e36a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e36c:	69bb      	ldr	r3, [r7, #24]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d102      	bne.n	800e378 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800e372:	f04f 33ff 	mov.w	r3, #4294967295
 800e376:	e05d      	b.n	800e434 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e378:	69bb      	ldr	r3, [r7, #24]
 800e37a:	895b      	ldrh	r3, [r3, #10]
 800e37c:	2b1b      	cmp	r3, #27
 800e37e:	d806      	bhi.n	800e38e <etharp_raw+0x56>
 800e380:	4b2e      	ldr	r3, [pc, #184]	@ (800e43c <etharp_raw+0x104>)
 800e382:	f240 4262 	movw	r2, #1122	@ 0x462
 800e386:	4930      	ldr	r1, [pc, #192]	@ (800e448 <etharp_raw+0x110>)
 800e388:	482e      	ldr	r0, [pc, #184]	@ (800e444 <etharp_raw+0x10c>)
 800e38a:	f001 fd8f 	bl	800feac <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e38e:	69bb      	ldr	r3, [r7, #24]
 800e390:	685b      	ldr	r3, [r3, #4]
 800e392:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e394:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800e396:	4618      	mov	r0, r3
 800e398:	f7f7 fbaa 	bl	8005af0 <lwip_htons>
 800e39c:	4603      	mov	r3, r0
 800e39e:	461a      	mov	r2, r3
 800e3a0:	697b      	ldr	r3, [r7, #20]
 800e3a2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e3aa:	2b06      	cmp	r3, #6
 800e3ac:	d006      	beq.n	800e3bc <etharp_raw+0x84>
 800e3ae:	4b23      	ldr	r3, [pc, #140]	@ (800e43c <etharp_raw+0x104>)
 800e3b0:	f240 4269 	movw	r2, #1129	@ 0x469
 800e3b4:	4925      	ldr	r1, [pc, #148]	@ (800e44c <etharp_raw+0x114>)
 800e3b6:	4823      	ldr	r0, [pc, #140]	@ (800e444 <etharp_raw+0x10c>)
 800e3b8:	f001 fd78 	bl	800feac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e3bc:	697b      	ldr	r3, [r7, #20]
 800e3be:	3308      	adds	r3, #8
 800e3c0:	2206      	movs	r2, #6
 800e3c2:	6839      	ldr	r1, [r7, #0]
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f001 fec2 	bl	801014e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800e3ca:	697b      	ldr	r3, [r7, #20]
 800e3cc:	3312      	adds	r3, #18
 800e3ce:	2206      	movs	r2, #6
 800e3d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f001 febb 	bl	801014e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	330e      	adds	r3, #14
 800e3dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e3de:	6812      	ldr	r2, [r2, #0]
 800e3e0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800e3e2:	697b      	ldr	r3, [r7, #20]
 800e3e4:	3318      	adds	r3, #24
 800e3e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e3e8:	6812      	ldr	r2, [r2, #0]
 800e3ea:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800e3ec:	697b      	ldr	r3, [r7, #20]
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	701a      	strb	r2, [r3, #0]
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	f042 0201 	orr.w	r2, r2, #1
 800e3f8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e3fa:	697b      	ldr	r3, [r7, #20]
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	f042 0208 	orr.w	r2, r2, #8
 800e402:	709a      	strb	r2, [r3, #2]
 800e404:	2200      	movs	r2, #0
 800e406:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e408:	697b      	ldr	r3, [r7, #20]
 800e40a:	2206      	movs	r2, #6
 800e40c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e40e:	697b      	ldr	r3, [r7, #20]
 800e410:	2204      	movs	r2, #4
 800e412:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e414:	f640 0306 	movw	r3, #2054	@ 0x806
 800e418:	9300      	str	r3, [sp, #0]
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	68ba      	ldr	r2, [r7, #8]
 800e41e:	69b9      	ldr	r1, [r7, #24]
 800e420:	68f8      	ldr	r0, [r7, #12]
 800e422:	f001 fbfb 	bl	800fc1c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e426:	69b8      	ldr	r0, [r7, #24]
 800e428:	f7f8 fec0 	bl	80071ac <pbuf_free>
  p = NULL;
 800e42c:	2300      	movs	r3, #0
 800e42e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e430:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e434:	4618      	mov	r0, r3
 800e436:	3720      	adds	r7, #32
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}
 800e43c:	080134b4 	.word	0x080134b4
 800e440:	08013604 	.word	0x08013604
 800e444:	0801352c 	.word	0x0801352c
 800e448:	080136b4 	.word	0x080136b4
 800e44c:	080136e8 	.word	0x080136e8

0800e450 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b088      	sub	sp, #32
 800e454:	af04      	add	r7, sp, #16
 800e456:	60f8      	str	r0, [r7, #12]
 800e458:	60b9      	str	r1, [r7, #8]
 800e45a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e46c:	2201      	movs	r2, #1
 800e46e:	9203      	str	r2, [sp, #12]
 800e470:	68ba      	ldr	r2, [r7, #8]
 800e472:	9202      	str	r2, [sp, #8]
 800e474:	4a06      	ldr	r2, [pc, #24]	@ (800e490 <etharp_request_dst+0x40>)
 800e476:	9201      	str	r2, [sp, #4]
 800e478:	9300      	str	r3, [sp, #0]
 800e47a:	4603      	mov	r3, r0
 800e47c:	687a      	ldr	r2, [r7, #4]
 800e47e:	68f8      	ldr	r0, [r7, #12]
 800e480:	f7ff ff5a 	bl	800e338 <etharp_raw>
 800e484:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800e486:	4618      	mov	r0, r3
 800e488:	3710      	adds	r7, #16
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}
 800e48e:	bf00      	nop
 800e490:	08013c78 	.word	0x08013c78

0800e494 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b082      	sub	sp, #8
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
 800e49c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e49e:	4a05      	ldr	r2, [pc, #20]	@ (800e4b4 <etharp_request+0x20>)
 800e4a0:	6839      	ldr	r1, [r7, #0]
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f7ff ffd4 	bl	800e450 <etharp_request_dst>
 800e4a8:	4603      	mov	r3, r0
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	3708      	adds	r7, #8
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}
 800e4b2:	bf00      	nop
 800e4b4:	08013c70 	.word	0x08013c70

0800e4b8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b08e      	sub	sp, #56	@ 0x38
 800e4bc:	af04      	add	r7, sp, #16
 800e4be:	6078      	str	r0, [r7, #4]
 800e4c0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e4c2:	4b79      	ldr	r3, [pc, #484]	@ (800e6a8 <icmp_input+0x1f0>)
 800e4c4:	689b      	ldr	r3, [r3, #8]
 800e4c6:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800e4c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4ca:	781b      	ldrb	r3, [r3, #0]
 800e4cc:	f003 030f 	and.w	r3, r3, #15
 800e4d0:	b2db      	uxtb	r3, r3
 800e4d2:	009b      	lsls	r3, r3, #2
 800e4d4:	b2db      	uxtb	r3, r3
 800e4d6:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800e4d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e4da:	2b13      	cmp	r3, #19
 800e4dc:	f240 80cd 	bls.w	800e67a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	895b      	ldrh	r3, [r3, #10]
 800e4e4:	2b03      	cmp	r3, #3
 800e4e6:	f240 80ca 	bls.w	800e67e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	685b      	ldr	r3, [r3, #4]
 800e4ee:	781b      	ldrb	r3, [r3, #0]
 800e4f0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e4f4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	f000 80b7 	beq.w	800e66c <icmp_input+0x1b4>
 800e4fe:	2b08      	cmp	r3, #8
 800e500:	f040 80b7 	bne.w	800e672 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800e504:	4b69      	ldr	r3, [pc, #420]	@ (800e6ac <icmp_input+0x1f4>)
 800e506:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e508:	4b67      	ldr	r3, [pc, #412]	@ (800e6a8 <icmp_input+0x1f0>)
 800e50a:	695b      	ldr	r3, [r3, #20]
 800e50c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e510:	2be0      	cmp	r3, #224	@ 0xe0
 800e512:	f000 80bb 	beq.w	800e68c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e516:	4b64      	ldr	r3, [pc, #400]	@ (800e6a8 <icmp_input+0x1f0>)
 800e518:	695b      	ldr	r3, [r3, #20]
 800e51a:	4a63      	ldr	r2, [pc, #396]	@ (800e6a8 <icmp_input+0x1f0>)
 800e51c:	6812      	ldr	r2, [r2, #0]
 800e51e:	4611      	mov	r1, r2
 800e520:	4618      	mov	r0, r3
 800e522:	f000 fbed 	bl	800ed00 <ip4_addr_isbroadcast_u32>
 800e526:	4603      	mov	r3, r0
 800e528:	2b00      	cmp	r3, #0
 800e52a:	f040 80b1 	bne.w	800e690 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	891b      	ldrh	r3, [r3, #8]
 800e532:	2b07      	cmp	r3, #7
 800e534:	f240 80a5 	bls.w	800e682 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e538:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e53a:	330e      	adds	r3, #14
 800e53c:	4619      	mov	r1, r3
 800e53e:	6878      	ldr	r0, [r7, #4]
 800e540:	f7f8 fd9e 	bl	8007080 <pbuf_add_header>
 800e544:	4603      	mov	r3, r0
 800e546:	2b00      	cmp	r3, #0
 800e548:	d04b      	beq.n	800e5e2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	891a      	ldrh	r2, [r3, #8]
 800e54e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e550:	4413      	add	r3, r2
 800e552:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	891b      	ldrh	r3, [r3, #8]
 800e558:	8b7a      	ldrh	r2, [r7, #26]
 800e55a:	429a      	cmp	r2, r3
 800e55c:	f0c0 809a 	bcc.w	800e694 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800e560:	8b7b      	ldrh	r3, [r7, #26]
 800e562:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e566:	4619      	mov	r1, r3
 800e568:	200e      	movs	r0, #14
 800e56a:	f7f8 fb3b 	bl	8006be4 <pbuf_alloc>
 800e56e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800e570:	697b      	ldr	r3, [r7, #20]
 800e572:	2b00      	cmp	r3, #0
 800e574:	f000 8090 	beq.w	800e698 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	895b      	ldrh	r3, [r3, #10]
 800e57c:	461a      	mov	r2, r3
 800e57e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e580:	3308      	adds	r3, #8
 800e582:	429a      	cmp	r2, r3
 800e584:	d203      	bcs.n	800e58e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800e586:	6978      	ldr	r0, [r7, #20]
 800e588:	f7f8 fe10 	bl	80071ac <pbuf_free>
          goto icmperr;
 800e58c:	e085      	b.n	800e69a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800e58e:	697b      	ldr	r3, [r7, #20]
 800e590:	685b      	ldr	r3, [r3, #4]
 800e592:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e594:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e596:	4618      	mov	r0, r3
 800e598:	f001 fdd9 	bl	801014e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800e59c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e59e:	4619      	mov	r1, r3
 800e5a0:	6978      	ldr	r0, [r7, #20]
 800e5a2:	f7f8 fd7d 	bl	80070a0 <pbuf_remove_header>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d009      	beq.n	800e5c0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e5ac:	4b40      	ldr	r3, [pc, #256]	@ (800e6b0 <icmp_input+0x1f8>)
 800e5ae:	22b6      	movs	r2, #182	@ 0xb6
 800e5b0:	4940      	ldr	r1, [pc, #256]	@ (800e6b4 <icmp_input+0x1fc>)
 800e5b2:	4841      	ldr	r0, [pc, #260]	@ (800e6b8 <icmp_input+0x200>)
 800e5b4:	f001 fc7a 	bl	800feac <iprintf>
          pbuf_free(r);
 800e5b8:	6978      	ldr	r0, [r7, #20]
 800e5ba:	f7f8 fdf7 	bl	80071ac <pbuf_free>
          goto icmperr;
 800e5be:	e06c      	b.n	800e69a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800e5c0:	6879      	ldr	r1, [r7, #4]
 800e5c2:	6978      	ldr	r0, [r7, #20]
 800e5c4:	f7f8 ff1a 	bl	80073fc <pbuf_copy>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d003      	beq.n	800e5d6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800e5ce:	6978      	ldr	r0, [r7, #20]
 800e5d0:	f7f8 fdec 	bl	80071ac <pbuf_free>
          goto icmperr;
 800e5d4:	e061      	b.n	800e69a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	f7f8 fde8 	bl	80071ac <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800e5dc:	697b      	ldr	r3, [r7, #20]
 800e5de:	607b      	str	r3, [r7, #4]
 800e5e0:	e00f      	b.n	800e602 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e5e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e5e4:	330e      	adds	r3, #14
 800e5e6:	4619      	mov	r1, r3
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f7f8 fd59 	bl	80070a0 <pbuf_remove_header>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d006      	beq.n	800e602 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e5f4:	4b2e      	ldr	r3, [pc, #184]	@ (800e6b0 <icmp_input+0x1f8>)
 800e5f6:	22c7      	movs	r2, #199	@ 0xc7
 800e5f8:	4930      	ldr	r1, [pc, #192]	@ (800e6bc <icmp_input+0x204>)
 800e5fa:	482f      	ldr	r0, [pc, #188]	@ (800e6b8 <icmp_input+0x200>)
 800e5fc:	f001 fc56 	bl	800feac <iprintf>
          goto icmperr;
 800e600:	e04b      	b.n	800e69a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	685b      	ldr	r3, [r3, #4]
 800e606:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800e608:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e60a:	4619      	mov	r1, r3
 800e60c:	6878      	ldr	r0, [r7, #4]
 800e60e:	f7f8 fd37 	bl	8007080 <pbuf_add_header>
 800e612:	4603      	mov	r3, r0
 800e614:	2b00      	cmp	r3, #0
 800e616:	d12b      	bne.n	800e670 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	685b      	ldr	r3, [r3, #4]
 800e61c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800e61e:	69fb      	ldr	r3, [r7, #28]
 800e620:	681a      	ldr	r2, [r3, #0]
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e626:	4b20      	ldr	r3, [pc, #128]	@ (800e6a8 <icmp_input+0x1f0>)
 800e628:	691a      	ldr	r2, [r3, #16]
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e62e:	693b      	ldr	r3, [r7, #16]
 800e630:	2200      	movs	r2, #0
 800e632:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800e634:	693b      	ldr	r3, [r7, #16]
 800e636:	2200      	movs	r2, #0
 800e638:	709a      	strb	r2, [r3, #2]
 800e63a:	2200      	movs	r2, #0
 800e63c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	22ff      	movs	r2, #255	@ 0xff
 800e642:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	2200      	movs	r2, #0
 800e648:	729a      	strb	r2, [r3, #10]
 800e64a:	2200      	movs	r2, #0
 800e64c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	9302      	str	r3, [sp, #8]
 800e652:	2301      	movs	r3, #1
 800e654:	9301      	str	r3, [sp, #4]
 800e656:	2300      	movs	r3, #0
 800e658:	9300      	str	r3, [sp, #0]
 800e65a:	23ff      	movs	r3, #255	@ 0xff
 800e65c:	2200      	movs	r2, #0
 800e65e:	69f9      	ldr	r1, [r7, #28]
 800e660:	6878      	ldr	r0, [r7, #4]
 800e662:	f000 fa75 	bl	800eb50 <ip4_output_if>
 800e666:	4603      	mov	r3, r0
 800e668:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800e66a:	e001      	b.n	800e670 <icmp_input+0x1b8>
      break;
 800e66c:	bf00      	nop
 800e66e:	e000      	b.n	800e672 <icmp_input+0x1ba>
      break;
 800e670:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800e672:	6878      	ldr	r0, [r7, #4]
 800e674:	f7f8 fd9a 	bl	80071ac <pbuf_free>
  return;
 800e678:	e013      	b.n	800e6a2 <icmp_input+0x1ea>
    goto lenerr;
 800e67a:	bf00      	nop
 800e67c:	e002      	b.n	800e684 <icmp_input+0x1cc>
    goto lenerr;
 800e67e:	bf00      	nop
 800e680:	e000      	b.n	800e684 <icmp_input+0x1cc>
        goto lenerr;
 800e682:	bf00      	nop
lenerr:
  pbuf_free(p);
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f7f8 fd91 	bl	80071ac <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e68a:	e00a      	b.n	800e6a2 <icmp_input+0x1ea>
        goto icmperr;
 800e68c:	bf00      	nop
 800e68e:	e004      	b.n	800e69a <icmp_input+0x1e2>
        goto icmperr;
 800e690:	bf00      	nop
 800e692:	e002      	b.n	800e69a <icmp_input+0x1e2>
          goto icmperr;
 800e694:	bf00      	nop
 800e696:	e000      	b.n	800e69a <icmp_input+0x1e2>
          goto icmperr;
 800e698:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f7f8 fd86 	bl	80071ac <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e6a0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800e6a2:	3728      	adds	r7, #40	@ 0x28
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}
 800e6a8:	20005260 	.word	0x20005260
 800e6ac:	20005274 	.word	0x20005274
 800e6b0:	0801372c 	.word	0x0801372c
 800e6b4:	08013764 	.word	0x08013764
 800e6b8:	0801379c 	.word	0x0801379c
 800e6bc:	080137c4 	.word	0x080137c4

0800e6c0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b082      	sub	sp, #8
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
 800e6c8:	460b      	mov	r3, r1
 800e6ca:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800e6cc:	78fb      	ldrb	r3, [r7, #3]
 800e6ce:	461a      	mov	r2, r3
 800e6d0:	2103      	movs	r1, #3
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f000 f814 	bl	800e700 <icmp_send_response>
}
 800e6d8:	bf00      	nop
 800e6da:	3708      	adds	r7, #8
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}

0800e6e0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b082      	sub	sp, #8
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	460b      	mov	r3, r1
 800e6ea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800e6ec:	78fb      	ldrb	r3, [r7, #3]
 800e6ee:	461a      	mov	r2, r3
 800e6f0:	210b      	movs	r1, #11
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f000 f804 	bl	800e700 <icmp_send_response>
}
 800e6f8:	bf00      	nop
 800e6fa:	3708      	adds	r7, #8
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}

0800e700 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b08c      	sub	sp, #48	@ 0x30
 800e704:	af04      	add	r7, sp, #16
 800e706:	6078      	str	r0, [r7, #4]
 800e708:	460b      	mov	r3, r1
 800e70a:	70fb      	strb	r3, [r7, #3]
 800e70c:	4613      	mov	r3, r2
 800e70e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e710:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e714:	2124      	movs	r1, #36	@ 0x24
 800e716:	2022      	movs	r0, #34	@ 0x22
 800e718:	f7f8 fa64 	bl	8006be4 <pbuf_alloc>
 800e71c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800e71e:	69fb      	ldr	r3, [r7, #28]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d04c      	beq.n	800e7be <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e724:	69fb      	ldr	r3, [r7, #28]
 800e726:	895b      	ldrh	r3, [r3, #10]
 800e728:	2b23      	cmp	r3, #35	@ 0x23
 800e72a:	d806      	bhi.n	800e73a <icmp_send_response+0x3a>
 800e72c:	4b26      	ldr	r3, [pc, #152]	@ (800e7c8 <icmp_send_response+0xc8>)
 800e72e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800e732:	4926      	ldr	r1, [pc, #152]	@ (800e7cc <icmp_send_response+0xcc>)
 800e734:	4826      	ldr	r0, [pc, #152]	@ (800e7d0 <icmp_send_response+0xd0>)
 800e736:	f001 fbb9 	bl	800feac <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	685b      	ldr	r3, [r3, #4]
 800e73e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e740:	69fb      	ldr	r3, [r7, #28]
 800e742:	685b      	ldr	r3, [r3, #4]
 800e744:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	78fa      	ldrb	r2, [r7, #3]
 800e74a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800e74c:	697b      	ldr	r3, [r7, #20]
 800e74e:	78ba      	ldrb	r2, [r7, #2]
 800e750:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800e752:	697b      	ldr	r3, [r7, #20]
 800e754:	2200      	movs	r2, #0
 800e756:	711a      	strb	r2, [r3, #4]
 800e758:	2200      	movs	r2, #0
 800e75a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800e75c:	697b      	ldr	r3, [r7, #20]
 800e75e:	2200      	movs	r2, #0
 800e760:	719a      	strb	r2, [r3, #6]
 800e762:	2200      	movs	r2, #0
 800e764:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e766:	69fb      	ldr	r3, [r7, #28]
 800e768:	685b      	ldr	r3, [r3, #4]
 800e76a:	f103 0008 	add.w	r0, r3, #8
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	685b      	ldr	r3, [r3, #4]
 800e772:	221c      	movs	r2, #28
 800e774:	4619      	mov	r1, r3
 800e776:	f001 fcea 	bl	801014e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e77a:	69bb      	ldr	r3, [r7, #24]
 800e77c:	68db      	ldr	r3, [r3, #12]
 800e77e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e780:	f107 030c 	add.w	r3, r7, #12
 800e784:	4618      	mov	r0, r3
 800e786:	f000 f825 	bl	800e7d4 <ip4_route>
 800e78a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800e78c:	693b      	ldr	r3, [r7, #16]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d011      	beq.n	800e7b6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	2200      	movs	r2, #0
 800e796:	709a      	strb	r2, [r3, #2]
 800e798:	2200      	movs	r2, #0
 800e79a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e79c:	f107 020c 	add.w	r2, r7, #12
 800e7a0:	693b      	ldr	r3, [r7, #16]
 800e7a2:	9302      	str	r3, [sp, #8]
 800e7a4:	2301      	movs	r3, #1
 800e7a6:	9301      	str	r3, [sp, #4]
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	9300      	str	r3, [sp, #0]
 800e7ac:	23ff      	movs	r3, #255	@ 0xff
 800e7ae:	2100      	movs	r1, #0
 800e7b0:	69f8      	ldr	r0, [r7, #28]
 800e7b2:	f000 f9cd 	bl	800eb50 <ip4_output_if>
  }
  pbuf_free(q);
 800e7b6:	69f8      	ldr	r0, [r7, #28]
 800e7b8:	f7f8 fcf8 	bl	80071ac <pbuf_free>
 800e7bc:	e000      	b.n	800e7c0 <icmp_send_response+0xc0>
    return;
 800e7be:	bf00      	nop
}
 800e7c0:	3720      	adds	r7, #32
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}
 800e7c6:	bf00      	nop
 800e7c8:	0801372c 	.word	0x0801372c
 800e7cc:	080137f8 	.word	0x080137f8
 800e7d0:	0801379c 	.word	0x0801379c

0800e7d4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800e7d4:	b480      	push	{r7}
 800e7d6:	b085      	sub	sp, #20
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800e7dc:	4b33      	ldr	r3, [pc, #204]	@ (800e8ac <ip4_route+0xd8>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	60fb      	str	r3, [r7, #12]
 800e7e2:	e036      	b.n	800e852 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e7ea:	f003 0301 	and.w	r3, r3, #1
 800e7ee:	b2db      	uxtb	r3, r3
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d02b      	beq.n	800e84c <ip4_route+0x78>
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e7fa:	089b      	lsrs	r3, r3, #2
 800e7fc:	f003 0301 	and.w	r3, r3, #1
 800e800:	b2db      	uxtb	r3, r3
 800e802:	2b00      	cmp	r3, #0
 800e804:	d022      	beq.n	800e84c <ip4_route+0x78>
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	3304      	adds	r3, #4
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d01d      	beq.n	800e84c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681a      	ldr	r2, [r3, #0]
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	3304      	adds	r3, #4
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	405a      	eors	r2, r3
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	3308      	adds	r3, #8
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	4013      	ands	r3, r2
 800e824:	2b00      	cmp	r3, #0
 800e826:	d101      	bne.n	800e82c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	e038      	b.n	800e89e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e832:	f003 0302 	and.w	r3, r3, #2
 800e836:	2b00      	cmp	r3, #0
 800e838:	d108      	bne.n	800e84c <ip4_route+0x78>
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681a      	ldr	r2, [r3, #0]
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	330c      	adds	r3, #12
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	429a      	cmp	r2, r3
 800e846:	d101      	bne.n	800e84c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	e028      	b.n	800e89e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	60fb      	str	r3, [r7, #12]
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d1c5      	bne.n	800e7e4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e858:	4b15      	ldr	r3, [pc, #84]	@ (800e8b0 <ip4_route+0xdc>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d01a      	beq.n	800e896 <ip4_route+0xc2>
 800e860:	4b13      	ldr	r3, [pc, #76]	@ (800e8b0 <ip4_route+0xdc>)
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e868:	f003 0301 	and.w	r3, r3, #1
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d012      	beq.n	800e896 <ip4_route+0xc2>
 800e870:	4b0f      	ldr	r3, [pc, #60]	@ (800e8b0 <ip4_route+0xdc>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e878:	f003 0304 	and.w	r3, r3, #4
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d00a      	beq.n	800e896 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e880:	4b0b      	ldr	r3, [pc, #44]	@ (800e8b0 <ip4_route+0xdc>)
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	3304      	adds	r3, #4
 800e886:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d004      	beq.n	800e896 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	b2db      	uxtb	r3, r3
 800e892:	2b7f      	cmp	r3, #127	@ 0x7f
 800e894:	d101      	bne.n	800e89a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800e896:	2300      	movs	r3, #0
 800e898:	e001      	b.n	800e89e <ip4_route+0xca>
  }

  return netif_default;
 800e89a:	4b05      	ldr	r3, [pc, #20]	@ (800e8b0 <ip4_route+0xdc>)
 800e89c:	681b      	ldr	r3, [r3, #0]
}
 800e89e:	4618      	mov	r0, r3
 800e8a0:	3714      	adds	r7, #20
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a8:	4770      	bx	lr
 800e8aa:	bf00      	nop
 800e8ac:	200087c4 	.word	0x200087c4
 800e8b0:	200087c8 	.word	0x200087c8

0800e8b4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b082      	sub	sp, #8
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e8c2:	f003 0301 	and.w	r3, r3, #1
 800e8c6:	b2db      	uxtb	r3, r3
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d016      	beq.n	800e8fa <ip4_input_accept+0x46>
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	3304      	adds	r3, #4
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d011      	beq.n	800e8fa <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e8d6:	4b0b      	ldr	r3, [pc, #44]	@ (800e904 <ip4_input_accept+0x50>)
 800e8d8:	695a      	ldr	r2, [r3, #20]
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	3304      	adds	r3, #4
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d008      	beq.n	800e8f6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800e8e4:	4b07      	ldr	r3, [pc, #28]	@ (800e904 <ip4_input_accept+0x50>)
 800e8e6:	695b      	ldr	r3, [r3, #20]
 800e8e8:	6879      	ldr	r1, [r7, #4]
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f000 fa08 	bl	800ed00 <ip4_addr_isbroadcast_u32>
 800e8f0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d001      	beq.n	800e8fa <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	e000      	b.n	800e8fc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800e8fa:	2300      	movs	r3, #0
}
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	3708      	adds	r7, #8
 800e900:	46bd      	mov	sp, r7
 800e902:	bd80      	pop	{r7, pc}
 800e904:	20005260 	.word	0x20005260

0800e908 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b086      	sub	sp, #24
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
 800e910:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	685b      	ldr	r3, [r3, #4]
 800e916:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800e918:	697b      	ldr	r3, [r7, #20]
 800e91a:	781b      	ldrb	r3, [r3, #0]
 800e91c:	091b      	lsrs	r3, r3, #4
 800e91e:	b2db      	uxtb	r3, r3
 800e920:	2b04      	cmp	r3, #4
 800e922:	d004      	beq.n	800e92e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800e924:	6878      	ldr	r0, [r7, #4]
 800e926:	f7f8 fc41 	bl	80071ac <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800e92a:	2300      	movs	r3, #0
 800e92c:	e107      	b.n	800eb3e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800e92e:	697b      	ldr	r3, [r7, #20]
 800e930:	781b      	ldrb	r3, [r3, #0]
 800e932:	f003 030f 	and.w	r3, r3, #15
 800e936:	b2db      	uxtb	r3, r3
 800e938:	009b      	lsls	r3, r3, #2
 800e93a:	b2db      	uxtb	r3, r3
 800e93c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	885b      	ldrh	r3, [r3, #2]
 800e942:	b29b      	uxth	r3, r3
 800e944:	4618      	mov	r0, r3
 800e946:	f7f7 f8d3 	bl	8005af0 <lwip_htons>
 800e94a:	4603      	mov	r3, r0
 800e94c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	891b      	ldrh	r3, [r3, #8]
 800e952:	89ba      	ldrh	r2, [r7, #12]
 800e954:	429a      	cmp	r2, r3
 800e956:	d204      	bcs.n	800e962 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800e958:	89bb      	ldrh	r3, [r7, #12]
 800e95a:	4619      	mov	r1, r3
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f7f8 fa9f 	bl	8006ea0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	895b      	ldrh	r3, [r3, #10]
 800e966:	89fa      	ldrh	r2, [r7, #14]
 800e968:	429a      	cmp	r2, r3
 800e96a:	d807      	bhi.n	800e97c <ip4_input+0x74>
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	891b      	ldrh	r3, [r3, #8]
 800e970:	89ba      	ldrh	r2, [r7, #12]
 800e972:	429a      	cmp	r2, r3
 800e974:	d802      	bhi.n	800e97c <ip4_input+0x74>
 800e976:	89fb      	ldrh	r3, [r7, #14]
 800e978:	2b13      	cmp	r3, #19
 800e97a:	d804      	bhi.n	800e986 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f7f8 fc15 	bl	80071ac <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800e982:	2300      	movs	r3, #0
 800e984:	e0db      	b.n	800eb3e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e986:	697b      	ldr	r3, [r7, #20]
 800e988:	691b      	ldr	r3, [r3, #16]
 800e98a:	4a6f      	ldr	r2, [pc, #444]	@ (800eb48 <ip4_input+0x240>)
 800e98c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	68db      	ldr	r3, [r3, #12]
 800e992:	4a6d      	ldr	r2, [pc, #436]	@ (800eb48 <ip4_input+0x240>)
 800e994:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e996:	4b6c      	ldr	r3, [pc, #432]	@ (800eb48 <ip4_input+0x240>)
 800e998:	695b      	ldr	r3, [r3, #20]
 800e99a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e99e:	2be0      	cmp	r3, #224	@ 0xe0
 800e9a0:	d112      	bne.n	800e9c8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e9a8:	f003 0301 	and.w	r3, r3, #1
 800e9ac:	b2db      	uxtb	r3, r3
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d007      	beq.n	800e9c2 <ip4_input+0xba>
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	3304      	adds	r3, #4
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d002      	beq.n	800e9c2 <ip4_input+0xba>
      netif = inp;
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	613b      	str	r3, [r7, #16]
 800e9c0:	e02a      	b.n	800ea18 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	613b      	str	r3, [r7, #16]
 800e9c6:	e027      	b.n	800ea18 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800e9c8:	6838      	ldr	r0, [r7, #0]
 800e9ca:	f7ff ff73 	bl	800e8b4 <ip4_input_accept>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d002      	beq.n	800e9da <ip4_input+0xd2>
      netif = inp;
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	613b      	str	r3, [r7, #16]
 800e9d8:	e01e      	b.n	800ea18 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e9da:	2300      	movs	r3, #0
 800e9dc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800e9de:	4b5a      	ldr	r3, [pc, #360]	@ (800eb48 <ip4_input+0x240>)
 800e9e0:	695b      	ldr	r3, [r3, #20]
 800e9e2:	b2db      	uxtb	r3, r3
 800e9e4:	2b7f      	cmp	r3, #127	@ 0x7f
 800e9e6:	d017      	beq.n	800ea18 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800e9e8:	4b58      	ldr	r3, [pc, #352]	@ (800eb4c <ip4_input+0x244>)
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	613b      	str	r3, [r7, #16]
 800e9ee:	e00e      	b.n	800ea0e <ip4_input+0x106>
          if (netif == inp) {
 800e9f0:	693a      	ldr	r2, [r7, #16]
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	429a      	cmp	r2, r3
 800e9f6:	d006      	beq.n	800ea06 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800e9f8:	6938      	ldr	r0, [r7, #16]
 800e9fa:	f7ff ff5b 	bl	800e8b4 <ip4_input_accept>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d108      	bne.n	800ea16 <ip4_input+0x10e>
 800ea04:	e000      	b.n	800ea08 <ip4_input+0x100>
            continue;
 800ea06:	bf00      	nop
        NETIF_FOREACH(netif) {
 800ea08:	693b      	ldr	r3, [r7, #16]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	613b      	str	r3, [r7, #16]
 800ea0e:	693b      	ldr	r3, [r7, #16]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d1ed      	bne.n	800e9f0 <ip4_input+0xe8>
 800ea14:	e000      	b.n	800ea18 <ip4_input+0x110>
            break;
 800ea16:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ea18:	4b4b      	ldr	r3, [pc, #300]	@ (800eb48 <ip4_input+0x240>)
 800ea1a:	691b      	ldr	r3, [r3, #16]
 800ea1c:	6839      	ldr	r1, [r7, #0]
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f000 f96e 	bl	800ed00 <ip4_addr_isbroadcast_u32>
 800ea24:	4603      	mov	r3, r0
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d105      	bne.n	800ea36 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800ea2a:	4b47      	ldr	r3, [pc, #284]	@ (800eb48 <ip4_input+0x240>)
 800ea2c:	691b      	ldr	r3, [r3, #16]
 800ea2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ea32:	2be0      	cmp	r3, #224	@ 0xe0
 800ea34:	d104      	bne.n	800ea40 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800ea36:	6878      	ldr	r0, [r7, #4]
 800ea38:	f7f8 fbb8 	bl	80071ac <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	e07e      	b.n	800eb3e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800ea40:	693b      	ldr	r3, [r7, #16]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d104      	bne.n	800ea50 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	f7f8 fbb0 	bl	80071ac <pbuf_free>
    return ERR_OK;
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	e076      	b.n	800eb3e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	88db      	ldrh	r3, [r3, #6]
 800ea54:	b29b      	uxth	r3, r3
 800ea56:	461a      	mov	r2, r3
 800ea58:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800ea5c:	4013      	ands	r3, r2
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d00b      	beq.n	800ea7a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f000 fd12 	bl	800f48c <ip4_reass>
 800ea68:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d101      	bne.n	800ea74 <ip4_input+0x16c>
      return ERR_OK;
 800ea70:	2300      	movs	r3, #0
 800ea72:	e064      	b.n	800eb3e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	685b      	ldr	r3, [r3, #4]
 800ea78:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800ea7a:	4a33      	ldr	r2, [pc, #204]	@ (800eb48 <ip4_input+0x240>)
 800ea7c:	693b      	ldr	r3, [r7, #16]
 800ea7e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800ea80:	4a31      	ldr	r2, [pc, #196]	@ (800eb48 <ip4_input+0x240>)
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800ea86:	4a30      	ldr	r2, [pc, #192]	@ (800eb48 <ip4_input+0x240>)
 800ea88:	697b      	ldr	r3, [r7, #20]
 800ea8a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800ea8c:	697b      	ldr	r3, [r7, #20]
 800ea8e:	781b      	ldrb	r3, [r3, #0]
 800ea90:	f003 030f 	and.w	r3, r3, #15
 800ea94:	b2db      	uxtb	r3, r3
 800ea96:	009b      	lsls	r3, r3, #2
 800ea98:	b2db      	uxtb	r3, r3
 800ea9a:	461a      	mov	r2, r3
 800ea9c:	4b2a      	ldr	r3, [pc, #168]	@ (800eb48 <ip4_input+0x240>)
 800ea9e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800eaa0:	89fb      	ldrh	r3, [r7, #14]
 800eaa2:	4619      	mov	r1, r3
 800eaa4:	6878      	ldr	r0, [r7, #4]
 800eaa6:	f7f8 fafb 	bl	80070a0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800eaaa:	697b      	ldr	r3, [r7, #20]
 800eaac:	7a5b      	ldrb	r3, [r3, #9]
 800eaae:	2b11      	cmp	r3, #17
 800eab0:	d006      	beq.n	800eac0 <ip4_input+0x1b8>
 800eab2:	2b11      	cmp	r3, #17
 800eab4:	dc13      	bgt.n	800eade <ip4_input+0x1d6>
 800eab6:	2b01      	cmp	r3, #1
 800eab8:	d00c      	beq.n	800ead4 <ip4_input+0x1cc>
 800eaba:	2b06      	cmp	r3, #6
 800eabc:	d005      	beq.n	800eaca <ip4_input+0x1c2>
 800eabe:	e00e      	b.n	800eade <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800eac0:	6839      	ldr	r1, [r7, #0]
 800eac2:	6878      	ldr	r0, [r7, #4]
 800eac4:	f7fe f9f2 	bl	800ceac <udp_input>
        break;
 800eac8:	e026      	b.n	800eb18 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800eaca:	6839      	ldr	r1, [r7, #0]
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	f7fa fa39 	bl	8008f44 <tcp_input>
        break;
 800ead2:	e021      	b.n	800eb18 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800ead4:	6839      	ldr	r1, [r7, #0]
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	f7ff fcee 	bl	800e4b8 <icmp_input>
        break;
 800eadc:	e01c      	b.n	800eb18 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800eade:	4b1a      	ldr	r3, [pc, #104]	@ (800eb48 <ip4_input+0x240>)
 800eae0:	695b      	ldr	r3, [r3, #20]
 800eae2:	6939      	ldr	r1, [r7, #16]
 800eae4:	4618      	mov	r0, r3
 800eae6:	f000 f90b 	bl	800ed00 <ip4_addr_isbroadcast_u32>
 800eaea:	4603      	mov	r3, r0
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d10f      	bne.n	800eb10 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800eaf0:	4b15      	ldr	r3, [pc, #84]	@ (800eb48 <ip4_input+0x240>)
 800eaf2:	695b      	ldr	r3, [r3, #20]
 800eaf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800eaf8:	2be0      	cmp	r3, #224	@ 0xe0
 800eafa:	d009      	beq.n	800eb10 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800eafc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800eb00:	4619      	mov	r1, r3
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f7f8 fb3f 	bl	8007186 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800eb08:	2102      	movs	r1, #2
 800eb0a:	6878      	ldr	r0, [r7, #4]
 800eb0c:	f7ff fdd8 	bl	800e6c0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f7f8 fb4b 	bl	80071ac <pbuf_free>
        break;
 800eb16:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800eb18:	4b0b      	ldr	r3, [pc, #44]	@ (800eb48 <ip4_input+0x240>)
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800eb1e:	4b0a      	ldr	r3, [pc, #40]	@ (800eb48 <ip4_input+0x240>)
 800eb20:	2200      	movs	r2, #0
 800eb22:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800eb24:	4b08      	ldr	r3, [pc, #32]	@ (800eb48 <ip4_input+0x240>)
 800eb26:	2200      	movs	r2, #0
 800eb28:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800eb2a:	4b07      	ldr	r3, [pc, #28]	@ (800eb48 <ip4_input+0x240>)
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800eb30:	4b05      	ldr	r3, [pc, #20]	@ (800eb48 <ip4_input+0x240>)
 800eb32:	2200      	movs	r2, #0
 800eb34:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800eb36:	4b04      	ldr	r3, [pc, #16]	@ (800eb48 <ip4_input+0x240>)
 800eb38:	2200      	movs	r2, #0
 800eb3a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800eb3c:	2300      	movs	r3, #0
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	3718      	adds	r7, #24
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}
 800eb46:	bf00      	nop
 800eb48:	20005260 	.word	0x20005260
 800eb4c:	200087c4 	.word	0x200087c4

0800eb50 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b08a      	sub	sp, #40	@ 0x28
 800eb54:	af04      	add	r7, sp, #16
 800eb56:	60f8      	str	r0, [r7, #12]
 800eb58:	60b9      	str	r1, [r7, #8]
 800eb5a:	607a      	str	r2, [r7, #4]
 800eb5c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d009      	beq.n	800eb7c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d003      	beq.n	800eb76 <ip4_output_if+0x26>
 800eb6e:	68bb      	ldr	r3, [r7, #8]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d102      	bne.n	800eb7c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800eb76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb78:	3304      	adds	r3, #4
 800eb7a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800eb7c:	78fa      	ldrb	r2, [r7, #3]
 800eb7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb80:	9302      	str	r3, [sp, #8]
 800eb82:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800eb86:	9301      	str	r3, [sp, #4]
 800eb88:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eb8c:	9300      	str	r3, [sp, #0]
 800eb8e:	4613      	mov	r3, r2
 800eb90:	687a      	ldr	r2, [r7, #4]
 800eb92:	6979      	ldr	r1, [r7, #20]
 800eb94:	68f8      	ldr	r0, [r7, #12]
 800eb96:	f000 f805 	bl	800eba4 <ip4_output_if_src>
 800eb9a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	3718      	adds	r7, #24
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}

0800eba4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b088      	sub	sp, #32
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	60f8      	str	r0, [r7, #12]
 800ebac:	60b9      	str	r1, [r7, #8]
 800ebae:	607a      	str	r2, [r7, #4]
 800ebb0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	7b9b      	ldrb	r3, [r3, #14]
 800ebb6:	2b01      	cmp	r3, #1
 800ebb8:	d006      	beq.n	800ebc8 <ip4_output_if_src+0x24>
 800ebba:	4b4b      	ldr	r3, [pc, #300]	@ (800ece8 <ip4_output_if_src+0x144>)
 800ebbc:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800ebc0:	494a      	ldr	r1, [pc, #296]	@ (800ecec <ip4_output_if_src+0x148>)
 800ebc2:	484b      	ldr	r0, [pc, #300]	@ (800ecf0 <ip4_output_if_src+0x14c>)
 800ebc4:	f001 f972 	bl	800feac <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d060      	beq.n	800ec90 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800ebce:	2314      	movs	r3, #20
 800ebd0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800ebd2:	2114      	movs	r1, #20
 800ebd4:	68f8      	ldr	r0, [r7, #12]
 800ebd6:	f7f8 fa53 	bl	8007080 <pbuf_add_header>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d002      	beq.n	800ebe6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ebe0:	f06f 0301 	mvn.w	r3, #1
 800ebe4:	e07c      	b.n	800ece0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	685b      	ldr	r3, [r3, #4]
 800ebea:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	895b      	ldrh	r3, [r3, #10]
 800ebf0:	2b13      	cmp	r3, #19
 800ebf2:	d806      	bhi.n	800ec02 <ip4_output_if_src+0x5e>
 800ebf4:	4b3c      	ldr	r3, [pc, #240]	@ (800ece8 <ip4_output_if_src+0x144>)
 800ebf6:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800ebfa:	493e      	ldr	r1, [pc, #248]	@ (800ecf4 <ip4_output_if_src+0x150>)
 800ebfc:	483c      	ldr	r0, [pc, #240]	@ (800ecf0 <ip4_output_if_src+0x14c>)
 800ebfe:	f001 f955 	bl	800feac <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800ec02:	69fb      	ldr	r3, [r7, #28]
 800ec04:	78fa      	ldrb	r2, [r7, #3]
 800ec06:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800ec08:	69fb      	ldr	r3, [r7, #28]
 800ec0a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800ec0e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681a      	ldr	r2, [r3, #0]
 800ec14:	69fb      	ldr	r3, [r7, #28]
 800ec16:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ec18:	8b7b      	ldrh	r3, [r7, #26]
 800ec1a:	089b      	lsrs	r3, r3, #2
 800ec1c:	b29b      	uxth	r3, r3
 800ec1e:	b2db      	uxtb	r3, r3
 800ec20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec24:	b2da      	uxtb	r2, r3
 800ec26:	69fb      	ldr	r3, [r7, #28]
 800ec28:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800ec2a:	69fb      	ldr	r3, [r7, #28]
 800ec2c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800ec30:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	891b      	ldrh	r3, [r3, #8]
 800ec36:	4618      	mov	r0, r3
 800ec38:	f7f6 ff5a 	bl	8005af0 <lwip_htons>
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	461a      	mov	r2, r3
 800ec40:	69fb      	ldr	r3, [r7, #28]
 800ec42:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ec44:	69fb      	ldr	r3, [r7, #28]
 800ec46:	2200      	movs	r2, #0
 800ec48:	719a      	strb	r2, [r3, #6]
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ec4e:	4b2a      	ldr	r3, [pc, #168]	@ (800ecf8 <ip4_output_if_src+0x154>)
 800ec50:	881b      	ldrh	r3, [r3, #0]
 800ec52:	4618      	mov	r0, r3
 800ec54:	f7f6 ff4c 	bl	8005af0 <lwip_htons>
 800ec58:	4603      	mov	r3, r0
 800ec5a:	461a      	mov	r2, r3
 800ec5c:	69fb      	ldr	r3, [r7, #28]
 800ec5e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800ec60:	4b25      	ldr	r3, [pc, #148]	@ (800ecf8 <ip4_output_if_src+0x154>)
 800ec62:	881b      	ldrh	r3, [r3, #0]
 800ec64:	3301      	adds	r3, #1
 800ec66:	b29a      	uxth	r2, r3
 800ec68:	4b23      	ldr	r3, [pc, #140]	@ (800ecf8 <ip4_output_if_src+0x154>)
 800ec6a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800ec6c:	68bb      	ldr	r3, [r7, #8]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d104      	bne.n	800ec7c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ec72:	4b22      	ldr	r3, [pc, #136]	@ (800ecfc <ip4_output_if_src+0x158>)
 800ec74:	681a      	ldr	r2, [r3, #0]
 800ec76:	69fb      	ldr	r3, [r7, #28]
 800ec78:	60da      	str	r2, [r3, #12]
 800ec7a:	e003      	b.n	800ec84 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800ec7c:	68bb      	ldr	r3, [r7, #8]
 800ec7e:	681a      	ldr	r2, [r3, #0]
 800ec80:	69fb      	ldr	r3, [r7, #28]
 800ec82:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800ec84:	69fb      	ldr	r3, [r7, #28]
 800ec86:	2200      	movs	r2, #0
 800ec88:	729a      	strb	r2, [r3, #10]
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	72da      	strb	r2, [r3, #11]
 800ec8e:	e00f      	b.n	800ecb0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	895b      	ldrh	r3, [r3, #10]
 800ec94:	2b13      	cmp	r3, #19
 800ec96:	d802      	bhi.n	800ec9e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ec98:	f06f 0301 	mvn.w	r3, #1
 800ec9c:	e020      	b.n	800ece0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	685b      	ldr	r3, [r3, #4]
 800eca2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800eca4:	69fb      	ldr	r3, [r7, #28]
 800eca6:	691b      	ldr	r3, [r3, #16]
 800eca8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800ecaa:	f107 0314 	add.w	r3, r7, #20
 800ecae:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800ecb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecb2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d00c      	beq.n	800ecd2 <ip4_output_if_src+0x12e>
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	891a      	ldrh	r2, [r3, #8]
 800ecbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecbe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ecc0:	429a      	cmp	r2, r3
 800ecc2:	d906      	bls.n	800ecd2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800ecc4:	687a      	ldr	r2, [r7, #4]
 800ecc6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ecc8:	68f8      	ldr	r0, [r7, #12]
 800ecca:	f000 fdd3 	bl	800f874 <ip4_frag>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	e006      	b.n	800ece0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800ecd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecd4:	695b      	ldr	r3, [r3, #20]
 800ecd6:	687a      	ldr	r2, [r7, #4]
 800ecd8:	68f9      	ldr	r1, [r7, #12]
 800ecda:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ecdc:	4798      	blx	r3
 800ecde:	4603      	mov	r3, r0
}
 800ece0:	4618      	mov	r0, r3
 800ece2:	3720      	adds	r7, #32
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}
 800ece8:	08013824 	.word	0x08013824
 800ecec:	08013858 	.word	0x08013858
 800ecf0:	08013864 	.word	0x08013864
 800ecf4:	0801388c 	.word	0x0801388c
 800ecf8:	20008922 	.word	0x20008922
 800ecfc:	08013c6c 	.word	0x08013c6c

0800ed00 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800ed00:	b480      	push	{r7}
 800ed02:	b085      	sub	sp, #20
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
 800ed08:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed14:	d002      	beq.n	800ed1c <ip4_addr_isbroadcast_u32+0x1c>
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d101      	bne.n	800ed20 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800ed1c:	2301      	movs	r3, #1
 800ed1e:	e02a      	b.n	800ed76 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ed26:	f003 0302 	and.w	r3, r3, #2
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d101      	bne.n	800ed32 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800ed2e:	2300      	movs	r3, #0
 800ed30:	e021      	b.n	800ed76 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	3304      	adds	r3, #4
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	687a      	ldr	r2, [r7, #4]
 800ed3a:	429a      	cmp	r2, r3
 800ed3c:	d101      	bne.n	800ed42 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800ed3e:	2300      	movs	r3, #0
 800ed40:	e019      	b.n	800ed76 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800ed42:	68fa      	ldr	r2, [r7, #12]
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	3304      	adds	r3, #4
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	405a      	eors	r2, r3
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	3308      	adds	r3, #8
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	4013      	ands	r3, r2
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d10d      	bne.n	800ed74 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	3308      	adds	r3, #8
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	43da      	mvns	r2, r3
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	3308      	adds	r3, #8
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ed6c:	429a      	cmp	r2, r3
 800ed6e:	d101      	bne.n	800ed74 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800ed70:	2301      	movs	r3, #1
 800ed72:	e000      	b.n	800ed76 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800ed74:	2300      	movs	r3, #0
  }
}
 800ed76:	4618      	mov	r0, r3
 800ed78:	3714      	adds	r7, #20
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed80:	4770      	bx	lr
	...

0800ed84 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800ed84:	b480      	push	{r7}
 800ed86:	b08d      	sub	sp, #52	@ 0x34
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	60f8      	str	r0, [r7, #12]
 800ed8c:	60b9      	str	r1, [r7, #8]
 800ed8e:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800ed90:	2300      	movs	r3, #0
 800ed92:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800ed9a:	68bb      	ldr	r3, [r7, #8]
 800ed9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 800ed9e:	f107 0318 	add.w	r3, r7, #24
 800eda2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 800eda4:	2300      	movs	r3, #0
 800eda6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800edaa:	e058      	b.n	800ee5e <ip4addr_ntoa_r+0xda>
    i = 0;
 800edac:	2300      	movs	r3, #0
 800edae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 800edb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edb4:	781a      	ldrb	r2, [r3, #0]
 800edb6:	4b32      	ldr	r3, [pc, #200]	@ (800ee80 <ip4addr_ntoa_r+0xfc>)
 800edb8:	fba3 1302 	umull	r1, r3, r3, r2
 800edbc:	08d9      	lsrs	r1, r3, #3
 800edbe:	460b      	mov	r3, r1
 800edc0:	009b      	lsls	r3, r3, #2
 800edc2:	440b      	add	r3, r1
 800edc4:	005b      	lsls	r3, r3, #1
 800edc6:	1ad3      	subs	r3, r2, r3
 800edc8:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800edca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edcc:	781b      	ldrb	r3, [r3, #0]
 800edce:	4a2c      	ldr	r2, [pc, #176]	@ (800ee80 <ip4addr_ntoa_r+0xfc>)
 800edd0:	fba2 2303 	umull	r2, r3, r2, r3
 800edd4:	08db      	lsrs	r3, r3, #3
 800edd6:	b2da      	uxtb	r2, r3
 800edd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edda:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800eddc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ede0:	1c5a      	adds	r2, r3, #1
 800ede2:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 800ede6:	4619      	mov	r1, r3
 800ede8:	7ffb      	ldrb	r3, [r7, #31]
 800edea:	3330      	adds	r3, #48	@ 0x30
 800edec:	b2da      	uxtb	r2, r3
 800edee:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 800edf2:	443b      	add	r3, r7
 800edf4:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800edf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edfa:	781b      	ldrb	r3, [r3, #0]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d1d8      	bne.n	800edb2 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800ee00:	e011      	b.n	800ee26 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 800ee02:	6a3b      	ldr	r3, [r7, #32]
 800ee04:	1c5a      	adds	r2, r3, #1
 800ee06:	623a      	str	r2, [r7, #32]
 800ee08:	687a      	ldr	r2, [r7, #4]
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	dc01      	bgt.n	800ee12 <ip4addr_ntoa_r+0x8e>
        return NULL;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	e030      	b.n	800ee74 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 800ee12:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ee16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee18:	1c59      	adds	r1, r3, #1
 800ee1a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800ee1c:	3230      	adds	r2, #48	@ 0x30
 800ee1e:	443a      	add	r2, r7
 800ee20:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800ee24:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800ee26:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ee2a:	1e5a      	subs	r2, r3, #1
 800ee2c:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d1e6      	bne.n	800ee02 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800ee34:	6a3b      	ldr	r3, [r7, #32]
 800ee36:	1c5a      	adds	r2, r3, #1
 800ee38:	623a      	str	r2, [r7, #32]
 800ee3a:	687a      	ldr	r2, [r7, #4]
 800ee3c:	429a      	cmp	r2, r3
 800ee3e:	dc01      	bgt.n	800ee44 <ip4addr_ntoa_r+0xc0>
      return NULL;
 800ee40:	2300      	movs	r3, #0
 800ee42:	e017      	b.n	800ee74 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 800ee44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee46:	1c5a      	adds	r2, r3, #1
 800ee48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ee4a:	222e      	movs	r2, #46	@ 0x2e
 800ee4c:	701a      	strb	r2, [r3, #0]
    ap++;
 800ee4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee50:	3301      	adds	r3, #1
 800ee52:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 800ee54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ee58:	3301      	adds	r3, #1
 800ee5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ee5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ee62:	2b03      	cmp	r3, #3
 800ee64:	d9a2      	bls.n	800edac <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 800ee66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee68:	3b01      	subs	r3, #1
 800ee6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ee6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee6e:	2200      	movs	r2, #0
 800ee70:	701a      	strb	r2, [r3, #0]
  return buf;
 800ee72:	68bb      	ldr	r3, [r7, #8]
}
 800ee74:	4618      	mov	r0, r3
 800ee76:	3734      	adds	r7, #52	@ 0x34
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7e:	4770      	bx	lr
 800ee80:	cccccccd 	.word	0xcccccccd

0800ee84 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b084      	sub	sp, #16
 800ee88:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800ee8e:	4b12      	ldr	r3, [pc, #72]	@ (800eed8 <ip_reass_tmr+0x54>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800ee94:	e018      	b.n	800eec8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	7fdb      	ldrb	r3, [r3, #31]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d00b      	beq.n	800eeb6 <ip_reass_tmr+0x32>
      r->timer--;
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	7fdb      	ldrb	r3, [r3, #31]
 800eea2:	3b01      	subs	r3, #1
 800eea4:	b2da      	uxtb	r2, r3
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	60fb      	str	r3, [r7, #12]
 800eeb4:	e008      	b.n	800eec8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800eec0:	68b9      	ldr	r1, [r7, #8]
 800eec2:	6878      	ldr	r0, [r7, #4]
 800eec4:	f000 f80a 	bl	800eedc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d1e3      	bne.n	800ee96 <ip_reass_tmr+0x12>
    }
  }
}
 800eece:	bf00      	nop
 800eed0:	bf00      	nop
 800eed2:	3710      	adds	r7, #16
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}
 800eed8:	20008924 	.word	0x20008924

0800eedc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b088      	sub	sp, #32
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
 800eee4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800eee6:	2300      	movs	r3, #0
 800eee8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800eeea:	683a      	ldr	r2, [r7, #0]
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	429a      	cmp	r2, r3
 800eef0:	d105      	bne.n	800eefe <ip_reass_free_complete_datagram+0x22>
 800eef2:	4b45      	ldr	r3, [pc, #276]	@ (800f008 <ip_reass_free_complete_datagram+0x12c>)
 800eef4:	22ab      	movs	r2, #171	@ 0xab
 800eef6:	4945      	ldr	r1, [pc, #276]	@ (800f00c <ip_reass_free_complete_datagram+0x130>)
 800eef8:	4845      	ldr	r0, [pc, #276]	@ (800f010 <ip_reass_free_complete_datagram+0x134>)
 800eefa:	f000 ffd7 	bl	800feac <iprintf>
  if (prev != NULL) {
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d00a      	beq.n	800ef1a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800ef04:	683b      	ldr	r3, [r7, #0]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	687a      	ldr	r2, [r7, #4]
 800ef0a:	429a      	cmp	r2, r3
 800ef0c:	d005      	beq.n	800ef1a <ip_reass_free_complete_datagram+0x3e>
 800ef0e:	4b3e      	ldr	r3, [pc, #248]	@ (800f008 <ip_reass_free_complete_datagram+0x12c>)
 800ef10:	22ad      	movs	r2, #173	@ 0xad
 800ef12:	4940      	ldr	r1, [pc, #256]	@ (800f014 <ip_reass_free_complete_datagram+0x138>)
 800ef14:	483e      	ldr	r0, [pc, #248]	@ (800f010 <ip_reass_free_complete_datagram+0x134>)
 800ef16:	f000 ffc9 	bl	800feac <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	685b      	ldr	r3, [r3, #4]
 800ef1e:	685b      	ldr	r3, [r3, #4]
 800ef20:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800ef22:	697b      	ldr	r3, [r7, #20]
 800ef24:	889b      	ldrh	r3, [r3, #4]
 800ef26:	b29b      	uxth	r3, r3
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d12a      	bne.n	800ef82 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	685b      	ldr	r3, [r3, #4]
 800ef30:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	681a      	ldr	r2, [r3, #0]
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800ef3a:	69bb      	ldr	r3, [r7, #24]
 800ef3c:	6858      	ldr	r0, [r3, #4]
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	3308      	adds	r3, #8
 800ef42:	2214      	movs	r2, #20
 800ef44:	4619      	mov	r1, r3
 800ef46:	f001 f902 	bl	801014e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800ef4a:	2101      	movs	r1, #1
 800ef4c:	69b8      	ldr	r0, [r7, #24]
 800ef4e:	f7ff fbc7 	bl	800e6e0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800ef52:	69b8      	ldr	r0, [r7, #24]
 800ef54:	f7f8 f9b2 	bl	80072bc <pbuf_clen>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ef5c:	8bfa      	ldrh	r2, [r7, #30]
 800ef5e:	8a7b      	ldrh	r3, [r7, #18]
 800ef60:	4413      	add	r3, r2
 800ef62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ef66:	db05      	blt.n	800ef74 <ip_reass_free_complete_datagram+0x98>
 800ef68:	4b27      	ldr	r3, [pc, #156]	@ (800f008 <ip_reass_free_complete_datagram+0x12c>)
 800ef6a:	22bc      	movs	r2, #188	@ 0xbc
 800ef6c:	492a      	ldr	r1, [pc, #168]	@ (800f018 <ip_reass_free_complete_datagram+0x13c>)
 800ef6e:	4828      	ldr	r0, [pc, #160]	@ (800f010 <ip_reass_free_complete_datagram+0x134>)
 800ef70:	f000 ff9c 	bl	800feac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ef74:	8bfa      	ldrh	r2, [r7, #30]
 800ef76:	8a7b      	ldrh	r3, [r7, #18]
 800ef78:	4413      	add	r3, r2
 800ef7a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800ef7c:	69b8      	ldr	r0, [r7, #24]
 800ef7e:	f7f8 f915 	bl	80071ac <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	685b      	ldr	r3, [r3, #4]
 800ef86:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800ef88:	e01f      	b.n	800efca <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800ef8a:	69bb      	ldr	r3, [r7, #24]
 800ef8c:	685b      	ldr	r3, [r3, #4]
 800ef8e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800ef90:	69bb      	ldr	r3, [r7, #24]
 800ef92:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800ef94:	697b      	ldr	r3, [r7, #20]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800ef9a:	68f8      	ldr	r0, [r7, #12]
 800ef9c:	f7f8 f98e 	bl	80072bc <pbuf_clen>
 800efa0:	4603      	mov	r3, r0
 800efa2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800efa4:	8bfa      	ldrh	r2, [r7, #30]
 800efa6:	8a7b      	ldrh	r3, [r7, #18]
 800efa8:	4413      	add	r3, r2
 800efaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800efae:	db05      	blt.n	800efbc <ip_reass_free_complete_datagram+0xe0>
 800efb0:	4b15      	ldr	r3, [pc, #84]	@ (800f008 <ip_reass_free_complete_datagram+0x12c>)
 800efb2:	22cc      	movs	r2, #204	@ 0xcc
 800efb4:	4918      	ldr	r1, [pc, #96]	@ (800f018 <ip_reass_free_complete_datagram+0x13c>)
 800efb6:	4816      	ldr	r0, [pc, #88]	@ (800f010 <ip_reass_free_complete_datagram+0x134>)
 800efb8:	f000 ff78 	bl	800feac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800efbc:	8bfa      	ldrh	r2, [r7, #30]
 800efbe:	8a7b      	ldrh	r3, [r7, #18]
 800efc0:	4413      	add	r3, r2
 800efc2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800efc4:	68f8      	ldr	r0, [r7, #12]
 800efc6:	f7f8 f8f1 	bl	80071ac <pbuf_free>
  while (p != NULL) {
 800efca:	69bb      	ldr	r3, [r7, #24]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d1dc      	bne.n	800ef8a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800efd0:	6839      	ldr	r1, [r7, #0]
 800efd2:	6878      	ldr	r0, [r7, #4]
 800efd4:	f000 f8c2 	bl	800f15c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800efd8:	4b10      	ldr	r3, [pc, #64]	@ (800f01c <ip_reass_free_complete_datagram+0x140>)
 800efda:	881b      	ldrh	r3, [r3, #0]
 800efdc:	8bfa      	ldrh	r2, [r7, #30]
 800efde:	429a      	cmp	r2, r3
 800efe0:	d905      	bls.n	800efee <ip_reass_free_complete_datagram+0x112>
 800efe2:	4b09      	ldr	r3, [pc, #36]	@ (800f008 <ip_reass_free_complete_datagram+0x12c>)
 800efe4:	22d2      	movs	r2, #210	@ 0xd2
 800efe6:	490e      	ldr	r1, [pc, #56]	@ (800f020 <ip_reass_free_complete_datagram+0x144>)
 800efe8:	4809      	ldr	r0, [pc, #36]	@ (800f010 <ip_reass_free_complete_datagram+0x134>)
 800efea:	f000 ff5f 	bl	800feac <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800efee:	4b0b      	ldr	r3, [pc, #44]	@ (800f01c <ip_reass_free_complete_datagram+0x140>)
 800eff0:	881a      	ldrh	r2, [r3, #0]
 800eff2:	8bfb      	ldrh	r3, [r7, #30]
 800eff4:	1ad3      	subs	r3, r2, r3
 800eff6:	b29a      	uxth	r2, r3
 800eff8:	4b08      	ldr	r3, [pc, #32]	@ (800f01c <ip_reass_free_complete_datagram+0x140>)
 800effa:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800effc:	8bfb      	ldrh	r3, [r7, #30]
}
 800effe:	4618      	mov	r0, r3
 800f000:	3720      	adds	r7, #32
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}
 800f006:	bf00      	nop
 800f008:	080138bc 	.word	0x080138bc
 800f00c:	080138f8 	.word	0x080138f8
 800f010:	08013904 	.word	0x08013904
 800f014:	0801392c 	.word	0x0801392c
 800f018:	08013940 	.word	0x08013940
 800f01c:	20008928 	.word	0x20008928
 800f020:	08013960 	.word	0x08013960

0800f024 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b08a      	sub	sp, #40	@ 0x28
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
 800f02c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800f02e:	2300      	movs	r3, #0
 800f030:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800f032:	2300      	movs	r3, #0
 800f034:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800f036:	2300      	movs	r3, #0
 800f038:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800f03a:	2300      	movs	r3, #0
 800f03c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800f03e:	2300      	movs	r3, #0
 800f040:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800f042:	4b28      	ldr	r3, [pc, #160]	@ (800f0e4 <ip_reass_remove_oldest_datagram+0xc0>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800f048:	e030      	b.n	800f0ac <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f04c:	695a      	ldr	r2, [r3, #20]
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	68db      	ldr	r3, [r3, #12]
 800f052:	429a      	cmp	r2, r3
 800f054:	d10c      	bne.n	800f070 <ip_reass_remove_oldest_datagram+0x4c>
 800f056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f058:	699a      	ldr	r2, [r3, #24]
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	691b      	ldr	r3, [r3, #16]
 800f05e:	429a      	cmp	r2, r3
 800f060:	d106      	bne.n	800f070 <ip_reass_remove_oldest_datagram+0x4c>
 800f062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f064:	899a      	ldrh	r2, [r3, #12]
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	889b      	ldrh	r3, [r3, #4]
 800f06a:	b29b      	uxth	r3, r3
 800f06c:	429a      	cmp	r2, r3
 800f06e:	d014      	beq.n	800f09a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f070:	693b      	ldr	r3, [r7, #16]
 800f072:	3301      	adds	r3, #1
 800f074:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f076:	6a3b      	ldr	r3, [r7, #32]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d104      	bne.n	800f086 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f07c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f07e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f080:	69fb      	ldr	r3, [r7, #28]
 800f082:	61bb      	str	r3, [r7, #24]
 800f084:	e009      	b.n	800f09a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f088:	7fda      	ldrb	r2, [r3, #31]
 800f08a:	6a3b      	ldr	r3, [r7, #32]
 800f08c:	7fdb      	ldrb	r3, [r3, #31]
 800f08e:	429a      	cmp	r2, r3
 800f090:	d803      	bhi.n	800f09a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f094:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f096:	69fb      	ldr	r3, [r7, #28]
 800f098:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d001      	beq.n	800f0a6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f0a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0a4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800f0ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d1cb      	bne.n	800f04a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800f0b2:	6a3b      	ldr	r3, [r7, #32]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d008      	beq.n	800f0ca <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f0b8:	69b9      	ldr	r1, [r7, #24]
 800f0ba:	6a38      	ldr	r0, [r7, #32]
 800f0bc:	f7ff ff0e 	bl	800eedc <ip_reass_free_complete_datagram>
 800f0c0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800f0c2:	697a      	ldr	r2, [r7, #20]
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	4413      	add	r3, r2
 800f0c8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f0ca:	697a      	ldr	r2, [r7, #20]
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	429a      	cmp	r2, r3
 800f0d0:	da02      	bge.n	800f0d8 <ip_reass_remove_oldest_datagram+0xb4>
 800f0d2:	693b      	ldr	r3, [r7, #16]
 800f0d4:	2b01      	cmp	r3, #1
 800f0d6:	dcac      	bgt.n	800f032 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800f0d8:	697b      	ldr	r3, [r7, #20]
}
 800f0da:	4618      	mov	r0, r3
 800f0dc:	3728      	adds	r7, #40	@ 0x28
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	bd80      	pop	{r7, pc}
 800f0e2:	bf00      	nop
 800f0e4:	20008924 	.word	0x20008924

0800f0e8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b084      	sub	sp, #16
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
 800f0f0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f0f2:	2004      	movs	r0, #4
 800f0f4:	f7f7 f974 	bl	80063e0 <memp_malloc>
 800f0f8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d110      	bne.n	800f122 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f100:	6839      	ldr	r1, [r7, #0]
 800f102:	6878      	ldr	r0, [r7, #4]
 800f104:	f7ff ff8e 	bl	800f024 <ip_reass_remove_oldest_datagram>
 800f108:	4602      	mov	r2, r0
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	4293      	cmp	r3, r2
 800f10e:	dc03      	bgt.n	800f118 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f110:	2004      	movs	r0, #4
 800f112:	f7f7 f965 	bl	80063e0 <memp_malloc>
 800f116:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d101      	bne.n	800f122 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800f11e:	2300      	movs	r3, #0
 800f120:	e016      	b.n	800f150 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f122:	2220      	movs	r2, #32
 800f124:	2100      	movs	r1, #0
 800f126:	68f8      	ldr	r0, [r7, #12]
 800f128:	f000 ff5f 	bl	800ffea <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	220f      	movs	r2, #15
 800f130:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800f132:	4b09      	ldr	r3, [pc, #36]	@ (800f158 <ip_reass_enqueue_new_datagram+0x70>)
 800f134:	681a      	ldr	r2, [r3, #0]
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800f13a:	4a07      	ldr	r2, [pc, #28]	@ (800f158 <ip_reass_enqueue_new_datagram+0x70>)
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	3308      	adds	r3, #8
 800f144:	2214      	movs	r2, #20
 800f146:	6879      	ldr	r1, [r7, #4]
 800f148:	4618      	mov	r0, r3
 800f14a:	f001 f800 	bl	801014e <memcpy>
  return ipr;
 800f14e:	68fb      	ldr	r3, [r7, #12]
}
 800f150:	4618      	mov	r0, r3
 800f152:	3710      	adds	r7, #16
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}
 800f158:	20008924 	.word	0x20008924

0800f15c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b082      	sub	sp, #8
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
 800f164:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f166:	4b10      	ldr	r3, [pc, #64]	@ (800f1a8 <ip_reass_dequeue_datagram+0x4c>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	687a      	ldr	r2, [r7, #4]
 800f16c:	429a      	cmp	r2, r3
 800f16e:	d104      	bne.n	800f17a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	4a0c      	ldr	r2, [pc, #48]	@ (800f1a8 <ip_reass_dequeue_datagram+0x4c>)
 800f176:	6013      	str	r3, [r2, #0]
 800f178:	e00d      	b.n	800f196 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d106      	bne.n	800f18e <ip_reass_dequeue_datagram+0x32>
 800f180:	4b0a      	ldr	r3, [pc, #40]	@ (800f1ac <ip_reass_dequeue_datagram+0x50>)
 800f182:	f240 1245 	movw	r2, #325	@ 0x145
 800f186:	490a      	ldr	r1, [pc, #40]	@ (800f1b0 <ip_reass_dequeue_datagram+0x54>)
 800f188:	480a      	ldr	r0, [pc, #40]	@ (800f1b4 <ip_reass_dequeue_datagram+0x58>)
 800f18a:	f000 fe8f 	bl	800feac <iprintf>
    prev->next = ipr->next;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681a      	ldr	r2, [r3, #0]
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f196:	6879      	ldr	r1, [r7, #4]
 800f198:	2004      	movs	r0, #4
 800f19a:	f7f7 f991 	bl	80064c0 <memp_free>
}
 800f19e:	bf00      	nop
 800f1a0:	3708      	adds	r7, #8
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}
 800f1a6:	bf00      	nop
 800f1a8:	20008924 	.word	0x20008924
 800f1ac:	080138bc 	.word	0x080138bc
 800f1b0:	08013984 	.word	0x08013984
 800f1b4:	08013904 	.word	0x08013904

0800f1b8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b08c      	sub	sp, #48	@ 0x30
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	60f8      	str	r0, [r7, #12]
 800f1c0:	60b9      	str	r1, [r7, #8]
 800f1c2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f1c8:	2301      	movs	r3, #1
 800f1ca:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800f1cc:	68bb      	ldr	r3, [r7, #8]
 800f1ce:	685b      	ldr	r3, [r3, #4]
 800f1d0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f1d2:	69fb      	ldr	r3, [r7, #28]
 800f1d4:	885b      	ldrh	r3, [r3, #2]
 800f1d6:	b29b      	uxth	r3, r3
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f7f6 fc89 	bl	8005af0 <lwip_htons>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800f1e2:	69fb      	ldr	r3, [r7, #28]
 800f1e4:	781b      	ldrb	r3, [r3, #0]
 800f1e6:	f003 030f 	and.w	r3, r3, #15
 800f1ea:	b2db      	uxtb	r3, r3
 800f1ec:	009b      	lsls	r3, r3, #2
 800f1ee:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800f1f0:	7e7b      	ldrb	r3, [r7, #25]
 800f1f2:	b29b      	uxth	r3, r3
 800f1f4:	8b7a      	ldrh	r2, [r7, #26]
 800f1f6:	429a      	cmp	r2, r3
 800f1f8:	d202      	bcs.n	800f200 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f1fa:	f04f 33ff 	mov.w	r3, #4294967295
 800f1fe:	e135      	b.n	800f46c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800f200:	7e7b      	ldrb	r3, [r7, #25]
 800f202:	b29b      	uxth	r3, r3
 800f204:	8b7a      	ldrh	r2, [r7, #26]
 800f206:	1ad3      	subs	r3, r2, r3
 800f208:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f20a:	69fb      	ldr	r3, [r7, #28]
 800f20c:	88db      	ldrh	r3, [r3, #6]
 800f20e:	b29b      	uxth	r3, r3
 800f210:	4618      	mov	r0, r3
 800f212:	f7f6 fc6d 	bl	8005af0 <lwip_htons>
 800f216:	4603      	mov	r3, r0
 800f218:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f21c:	b29b      	uxth	r3, r3
 800f21e:	00db      	lsls	r3, r3, #3
 800f220:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	685b      	ldr	r3, [r3, #4]
 800f226:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800f228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f22a:	2200      	movs	r2, #0
 800f22c:	701a      	strb	r2, [r3, #0]
 800f22e:	2200      	movs	r2, #0
 800f230:	705a      	strb	r2, [r3, #1]
 800f232:	2200      	movs	r2, #0
 800f234:	709a      	strb	r2, [r3, #2]
 800f236:	2200      	movs	r2, #0
 800f238:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f23a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f23c:	8afa      	ldrh	r2, [r7, #22]
 800f23e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800f240:	8afa      	ldrh	r2, [r7, #22]
 800f242:	8b7b      	ldrh	r3, [r7, #26]
 800f244:	4413      	add	r3, r2
 800f246:	b29a      	uxth	r2, r3
 800f248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f24a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800f24c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f24e:	88db      	ldrh	r3, [r3, #6]
 800f250:	b29b      	uxth	r3, r3
 800f252:	8afa      	ldrh	r2, [r7, #22]
 800f254:	429a      	cmp	r2, r3
 800f256:	d902      	bls.n	800f25e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f258:	f04f 33ff 	mov.w	r3, #4294967295
 800f25c:	e106      	b.n	800f46c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	685b      	ldr	r3, [r3, #4]
 800f262:	627b      	str	r3, [r7, #36]	@ 0x24
 800f264:	e068      	b.n	800f338 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800f266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f268:	685b      	ldr	r3, [r3, #4]
 800f26a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800f26c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f26e:	889b      	ldrh	r3, [r3, #4]
 800f270:	b29a      	uxth	r2, r3
 800f272:	693b      	ldr	r3, [r7, #16]
 800f274:	889b      	ldrh	r3, [r3, #4]
 800f276:	b29b      	uxth	r3, r3
 800f278:	429a      	cmp	r2, r3
 800f27a:	d235      	bcs.n	800f2e8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f27c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f27e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f280:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f284:	2b00      	cmp	r3, #0
 800f286:	d020      	beq.n	800f2ca <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f28a:	889b      	ldrh	r3, [r3, #4]
 800f28c:	b29a      	uxth	r2, r3
 800f28e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f290:	88db      	ldrh	r3, [r3, #6]
 800f292:	b29b      	uxth	r3, r3
 800f294:	429a      	cmp	r2, r3
 800f296:	d307      	bcc.n	800f2a8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800f298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f29a:	88db      	ldrh	r3, [r3, #6]
 800f29c:	b29a      	uxth	r2, r3
 800f29e:	693b      	ldr	r3, [r7, #16]
 800f2a0:	889b      	ldrh	r3, [r3, #4]
 800f2a2:	b29b      	uxth	r3, r3
 800f2a4:	429a      	cmp	r2, r3
 800f2a6:	d902      	bls.n	800f2ae <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f2a8:	f04f 33ff 	mov.w	r3, #4294967295
 800f2ac:	e0de      	b.n	800f46c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f2ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2b0:	68ba      	ldr	r2, [r7, #8]
 800f2b2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f2b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2b6:	88db      	ldrh	r3, [r3, #6]
 800f2b8:	b29a      	uxth	r2, r3
 800f2ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2bc:	889b      	ldrh	r3, [r3, #4]
 800f2be:	b29b      	uxth	r3, r3
 800f2c0:	429a      	cmp	r2, r3
 800f2c2:	d03d      	beq.n	800f340 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f2c8:	e03a      	b.n	800f340 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800f2ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2cc:	88db      	ldrh	r3, [r3, #6]
 800f2ce:	b29a      	uxth	r2, r3
 800f2d0:	693b      	ldr	r3, [r7, #16]
 800f2d2:	889b      	ldrh	r3, [r3, #4]
 800f2d4:	b29b      	uxth	r3, r3
 800f2d6:	429a      	cmp	r2, r3
 800f2d8:	d902      	bls.n	800f2e0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f2da:	f04f 33ff 	mov.w	r3, #4294967295
 800f2de:	e0c5      	b.n	800f46c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	68ba      	ldr	r2, [r7, #8]
 800f2e4:	605a      	str	r2, [r3, #4]
      break;
 800f2e6:	e02b      	b.n	800f340 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800f2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2ea:	889b      	ldrh	r3, [r3, #4]
 800f2ec:	b29a      	uxth	r2, r3
 800f2ee:	693b      	ldr	r3, [r7, #16]
 800f2f0:	889b      	ldrh	r3, [r3, #4]
 800f2f2:	b29b      	uxth	r3, r3
 800f2f4:	429a      	cmp	r2, r3
 800f2f6:	d102      	bne.n	800f2fe <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f2f8:	f04f 33ff 	mov.w	r3, #4294967295
 800f2fc:	e0b6      	b.n	800f46c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f2fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f300:	889b      	ldrh	r3, [r3, #4]
 800f302:	b29a      	uxth	r2, r3
 800f304:	693b      	ldr	r3, [r7, #16]
 800f306:	88db      	ldrh	r3, [r3, #6]
 800f308:	b29b      	uxth	r3, r3
 800f30a:	429a      	cmp	r2, r3
 800f30c:	d202      	bcs.n	800f314 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f30e:	f04f 33ff 	mov.w	r3, #4294967295
 800f312:	e0ab      	b.n	800f46c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f316:	2b00      	cmp	r3, #0
 800f318:	d009      	beq.n	800f32e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800f31a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f31c:	88db      	ldrh	r3, [r3, #6]
 800f31e:	b29a      	uxth	r2, r3
 800f320:	693b      	ldr	r3, [r7, #16]
 800f322:	889b      	ldrh	r3, [r3, #4]
 800f324:	b29b      	uxth	r3, r3
 800f326:	429a      	cmp	r2, r3
 800f328:	d001      	beq.n	800f32e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f32a:	2300      	movs	r3, #0
 800f32c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f32e:	693b      	ldr	r3, [r7, #16]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800f334:	693b      	ldr	r3, [r7, #16]
 800f336:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800f338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d193      	bne.n	800f266 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800f33e:	e000      	b.n	800f342 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800f340:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f344:	2b00      	cmp	r3, #0
 800f346:	d12d      	bne.n	800f3a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800f348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d01c      	beq.n	800f388 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f34e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f350:	88db      	ldrh	r3, [r3, #6]
 800f352:	b29a      	uxth	r2, r3
 800f354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f356:	889b      	ldrh	r3, [r3, #4]
 800f358:	b29b      	uxth	r3, r3
 800f35a:	429a      	cmp	r2, r3
 800f35c:	d906      	bls.n	800f36c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800f35e:	4b45      	ldr	r3, [pc, #276]	@ (800f474 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f360:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800f364:	4944      	ldr	r1, [pc, #272]	@ (800f478 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f366:	4845      	ldr	r0, [pc, #276]	@ (800f47c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f368:	f000 fda0 	bl	800feac <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f36c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f36e:	68ba      	ldr	r2, [r7, #8]
 800f370:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f374:	88db      	ldrh	r3, [r3, #6]
 800f376:	b29a      	uxth	r2, r3
 800f378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f37a:	889b      	ldrh	r3, [r3, #4]
 800f37c:	b29b      	uxth	r3, r3
 800f37e:	429a      	cmp	r2, r3
 800f380:	d010      	beq.n	800f3a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f382:	2300      	movs	r3, #0
 800f384:	623b      	str	r3, [r7, #32]
 800f386:	e00d      	b.n	800f3a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	685b      	ldr	r3, [r3, #4]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d006      	beq.n	800f39e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f390:	4b38      	ldr	r3, [pc, #224]	@ (800f474 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f392:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800f396:	493a      	ldr	r1, [pc, #232]	@ (800f480 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f398:	4838      	ldr	r0, [pc, #224]	@ (800f47c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f39a:	f000 fd87 	bl	800feac <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	68ba      	ldr	r2, [r7, #8]
 800f3a2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d105      	bne.n	800f3b6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	7f9b      	ldrb	r3, [r3, #30]
 800f3ae:	f003 0301 	and.w	r3, r3, #1
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d059      	beq.n	800f46a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800f3b6:	6a3b      	ldr	r3, [r7, #32]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d04f      	beq.n	800f45c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	685b      	ldr	r3, [r3, #4]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d006      	beq.n	800f3d2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	685b      	ldr	r3, [r3, #4]
 800f3c8:	685b      	ldr	r3, [r3, #4]
 800f3ca:	889b      	ldrh	r3, [r3, #4]
 800f3cc:	b29b      	uxth	r3, r3
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d002      	beq.n	800f3d8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	623b      	str	r3, [r7, #32]
 800f3d6:	e041      	b.n	800f45c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f3d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3da:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800f3dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800f3e2:	e012      	b.n	800f40a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800f3e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3e6:	685b      	ldr	r3, [r3, #4]
 800f3e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800f3ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3ec:	88db      	ldrh	r3, [r3, #6]
 800f3ee:	b29a      	uxth	r2, r3
 800f3f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3f2:	889b      	ldrh	r3, [r3, #4]
 800f3f4:	b29b      	uxth	r3, r3
 800f3f6:	429a      	cmp	r2, r3
 800f3f8:	d002      	beq.n	800f400 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	623b      	str	r3, [r7, #32]
            break;
 800f3fe:	e007      	b.n	800f410 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800f400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f402:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800f404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800f40a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d1e9      	bne.n	800f3e4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f410:	6a3b      	ldr	r3, [r7, #32]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d022      	beq.n	800f45c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	685b      	ldr	r3, [r3, #4]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d106      	bne.n	800f42c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800f41e:	4b15      	ldr	r3, [pc, #84]	@ (800f474 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f420:	f240 12df 	movw	r2, #479	@ 0x1df
 800f424:	4917      	ldr	r1, [pc, #92]	@ (800f484 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f426:	4815      	ldr	r0, [pc, #84]	@ (800f47c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f428:	f000 fd40 	bl	800feac <iprintf>
          LWIP_ASSERT("sanity check",
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	685b      	ldr	r3, [r3, #4]
 800f430:	685b      	ldr	r3, [r3, #4]
 800f432:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f434:	429a      	cmp	r2, r3
 800f436:	d106      	bne.n	800f446 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800f438:	4b0e      	ldr	r3, [pc, #56]	@ (800f474 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f43a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800f43e:	4911      	ldr	r1, [pc, #68]	@ (800f484 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f440:	480e      	ldr	r0, [pc, #56]	@ (800f47c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f442:	f000 fd33 	bl	800feac <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d006      	beq.n	800f45c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800f44e:	4b09      	ldr	r3, [pc, #36]	@ (800f474 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f450:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800f454:	490c      	ldr	r1, [pc, #48]	@ (800f488 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f456:	4809      	ldr	r0, [pc, #36]	@ (800f47c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f458:	f000 fd28 	bl	800feac <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f45c:	6a3b      	ldr	r3, [r7, #32]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	bf14      	ite	ne
 800f462:	2301      	movne	r3, #1
 800f464:	2300      	moveq	r3, #0
 800f466:	b2db      	uxtb	r3, r3
 800f468:	e000      	b.n	800f46c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f46a:	2300      	movs	r3, #0
}
 800f46c:	4618      	mov	r0, r3
 800f46e:	3730      	adds	r7, #48	@ 0x30
 800f470:	46bd      	mov	sp, r7
 800f472:	bd80      	pop	{r7, pc}
 800f474:	080138bc 	.word	0x080138bc
 800f478:	080139a0 	.word	0x080139a0
 800f47c:	08013904 	.word	0x08013904
 800f480:	080139c0 	.word	0x080139c0
 800f484:	080139f8 	.word	0x080139f8
 800f488:	08013a08 	.word	0x08013a08

0800f48c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b08e      	sub	sp, #56	@ 0x38
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	685b      	ldr	r3, [r3, #4]
 800f498:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800f49a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f49c:	781b      	ldrb	r3, [r3, #0]
 800f49e:	f003 030f 	and.w	r3, r3, #15
 800f4a2:	b2db      	uxtb	r3, r3
 800f4a4:	009b      	lsls	r3, r3, #2
 800f4a6:	b2db      	uxtb	r3, r3
 800f4a8:	2b14      	cmp	r3, #20
 800f4aa:	f040 8171 	bne.w	800f790 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800f4ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4b0:	88db      	ldrh	r3, [r3, #6]
 800f4b2:	b29b      	uxth	r3, r3
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	f7f6 fb1b 	bl	8005af0 <lwip_htons>
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f4c0:	b29b      	uxth	r3, r3
 800f4c2:	00db      	lsls	r3, r3, #3
 800f4c4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f4c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4c8:	885b      	ldrh	r3, [r3, #2]
 800f4ca:	b29b      	uxth	r3, r3
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f7f6 fb0f 	bl	8005af0 <lwip_htons>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800f4d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4d8:	781b      	ldrb	r3, [r3, #0]
 800f4da:	f003 030f 	and.w	r3, r3, #15
 800f4de:	b2db      	uxtb	r3, r3
 800f4e0:	009b      	lsls	r3, r3, #2
 800f4e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800f4e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f4ea:	b29b      	uxth	r3, r3
 800f4ec:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f4ee:	429a      	cmp	r2, r3
 800f4f0:	f0c0 8150 	bcc.w	800f794 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800f4f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f4f8:	b29b      	uxth	r3, r3
 800f4fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f4fc:	1ad3      	subs	r3, r2, r3
 800f4fe:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f500:	6878      	ldr	r0, [r7, #4]
 800f502:	f7f7 fedb 	bl	80072bc <pbuf_clen>
 800f506:	4603      	mov	r3, r0
 800f508:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f50a:	4b8c      	ldr	r3, [pc, #560]	@ (800f73c <ip4_reass+0x2b0>)
 800f50c:	881b      	ldrh	r3, [r3, #0]
 800f50e:	461a      	mov	r2, r3
 800f510:	8c3b      	ldrh	r3, [r7, #32]
 800f512:	4413      	add	r3, r2
 800f514:	2b0a      	cmp	r3, #10
 800f516:	dd10      	ble.n	800f53a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f518:	8c3b      	ldrh	r3, [r7, #32]
 800f51a:	4619      	mov	r1, r3
 800f51c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f51e:	f7ff fd81 	bl	800f024 <ip_reass_remove_oldest_datagram>
 800f522:	4603      	mov	r3, r0
 800f524:	2b00      	cmp	r3, #0
 800f526:	f000 8137 	beq.w	800f798 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f52a:	4b84      	ldr	r3, [pc, #528]	@ (800f73c <ip4_reass+0x2b0>)
 800f52c:	881b      	ldrh	r3, [r3, #0]
 800f52e:	461a      	mov	r2, r3
 800f530:	8c3b      	ldrh	r3, [r7, #32]
 800f532:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f534:	2b0a      	cmp	r3, #10
 800f536:	f300 812f 	bgt.w	800f798 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f53a:	4b81      	ldr	r3, [pc, #516]	@ (800f740 <ip4_reass+0x2b4>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	633b      	str	r3, [r7, #48]	@ 0x30
 800f540:	e015      	b.n	800f56e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f544:	695a      	ldr	r2, [r3, #20]
 800f546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f548:	68db      	ldr	r3, [r3, #12]
 800f54a:	429a      	cmp	r2, r3
 800f54c:	d10c      	bne.n	800f568 <ip4_reass+0xdc>
 800f54e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f550:	699a      	ldr	r2, [r3, #24]
 800f552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f554:	691b      	ldr	r3, [r3, #16]
 800f556:	429a      	cmp	r2, r3
 800f558:	d106      	bne.n	800f568 <ip4_reass+0xdc>
 800f55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f55c:	899a      	ldrh	r2, [r3, #12]
 800f55e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f560:	889b      	ldrh	r3, [r3, #4]
 800f562:	b29b      	uxth	r3, r3
 800f564:	429a      	cmp	r2, r3
 800f566:	d006      	beq.n	800f576 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	633b      	str	r3, [r7, #48]	@ 0x30
 800f56e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f570:	2b00      	cmp	r3, #0
 800f572:	d1e6      	bne.n	800f542 <ip4_reass+0xb6>
 800f574:	e000      	b.n	800f578 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800f576:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800f578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d109      	bne.n	800f592 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f57e:	8c3b      	ldrh	r3, [r7, #32]
 800f580:	4619      	mov	r1, r3
 800f582:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f584:	f7ff fdb0 	bl	800f0e8 <ip_reass_enqueue_new_datagram>
 800f588:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f58a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d11c      	bne.n	800f5ca <ip4_reass+0x13e>
      goto nullreturn;
 800f590:	e105      	b.n	800f79e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f594:	88db      	ldrh	r3, [r3, #6]
 800f596:	b29b      	uxth	r3, r3
 800f598:	4618      	mov	r0, r3
 800f59a:	f7f6 faa9 	bl	8005af0 <lwip_htons>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d110      	bne.n	800f5ca <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5aa:	89db      	ldrh	r3, [r3, #14]
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f7f6 fa9f 	bl	8005af0 <lwip_htons>
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d006      	beq.n	800f5ca <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f5bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5be:	3308      	adds	r3, #8
 800f5c0:	2214      	movs	r2, #20
 800f5c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	f000 fdc2 	bl	801014e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f5ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5cc:	88db      	ldrh	r3, [r3, #6]
 800f5ce:	b29b      	uxth	r3, r3
 800f5d0:	f003 0320 	and.w	r3, r3, #32
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	bf0c      	ite	eq
 800f5d8:	2301      	moveq	r3, #1
 800f5da:	2300      	movne	r3, #0
 800f5dc:	b2db      	uxtb	r3, r3
 800f5de:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f5e0:	69fb      	ldr	r3, [r7, #28]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d00e      	beq.n	800f604 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800f5e6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800f5e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f5ea:	4413      	add	r3, r2
 800f5ec:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f5ee:	8b7a      	ldrh	r2, [r7, #26]
 800f5f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f5f2:	429a      	cmp	r2, r3
 800f5f4:	f0c0 80a0 	bcc.w	800f738 <ip4_reass+0x2ac>
 800f5f8:	8b7b      	ldrh	r3, [r7, #26]
 800f5fa:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800f5fe:	4293      	cmp	r3, r2
 800f600:	f200 809a 	bhi.w	800f738 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f604:	69fa      	ldr	r2, [r7, #28]
 800f606:	6879      	ldr	r1, [r7, #4]
 800f608:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f60a:	f7ff fdd5 	bl	800f1b8 <ip_reass_chain_frag_into_datagram_and_validate>
 800f60e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f610:	697b      	ldr	r3, [r7, #20]
 800f612:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f616:	f000 809b 	beq.w	800f750 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f61a:	4b48      	ldr	r3, [pc, #288]	@ (800f73c <ip4_reass+0x2b0>)
 800f61c:	881a      	ldrh	r2, [r3, #0]
 800f61e:	8c3b      	ldrh	r3, [r7, #32]
 800f620:	4413      	add	r3, r2
 800f622:	b29a      	uxth	r2, r3
 800f624:	4b45      	ldr	r3, [pc, #276]	@ (800f73c <ip4_reass+0x2b0>)
 800f626:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800f628:	69fb      	ldr	r3, [r7, #28]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d00d      	beq.n	800f64a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800f62e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800f630:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f632:	4413      	add	r3, r2
 800f634:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800f636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f638:	8a7a      	ldrh	r2, [r7, #18]
 800f63a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f63c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f63e:	7f9b      	ldrb	r3, [r3, #30]
 800f640:	f043 0301 	orr.w	r3, r3, #1
 800f644:	b2da      	uxtb	r2, r3
 800f646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f648:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	2b01      	cmp	r3, #1
 800f64e:	d171      	bne.n	800f734 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800f650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f652:	8b9b      	ldrh	r3, [r3, #28]
 800f654:	3314      	adds	r3, #20
 800f656:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800f658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f65a:	685b      	ldr	r3, [r3, #4]
 800f65c:	685b      	ldr	r3, [r3, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800f662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f664:	685b      	ldr	r3, [r3, #4]
 800f666:	685b      	ldr	r3, [r3, #4]
 800f668:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f66a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f66c:	3308      	adds	r3, #8
 800f66e:	2214      	movs	r2, #20
 800f670:	4619      	mov	r1, r3
 800f672:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f674:	f000 fd6b 	bl	801014e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800f678:	8a3b      	ldrh	r3, [r7, #16]
 800f67a:	4618      	mov	r0, r3
 800f67c:	f7f6 fa38 	bl	8005af0 <lwip_htons>
 800f680:	4603      	mov	r3, r0
 800f682:	461a      	mov	r2, r3
 800f684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f686:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f68a:	2200      	movs	r2, #0
 800f68c:	719a      	strb	r2, [r3, #6]
 800f68e:	2200      	movs	r2, #0
 800f690:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f694:	2200      	movs	r2, #0
 800f696:	729a      	strb	r2, [r3, #10]
 800f698:	2200      	movs	r2, #0
 800f69a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800f69c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f69e:	685b      	ldr	r3, [r3, #4]
 800f6a0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800f6a2:	e00d      	b.n	800f6c0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800f6a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f6a6:	685b      	ldr	r3, [r3, #4]
 800f6a8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800f6aa:	2114      	movs	r1, #20
 800f6ac:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800f6ae:	f7f7 fcf7 	bl	80070a0 <pbuf_remove_header>
      pbuf_cat(p, r);
 800f6b2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f7f7 fe3b 	bl	8007330 <pbuf_cat>
      r = iprh->next_pbuf;
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800f6c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d1ee      	bne.n	800f6a4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f6c6:	4b1e      	ldr	r3, [pc, #120]	@ (800f740 <ip4_reass+0x2b4>)
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f6cc:	429a      	cmp	r2, r3
 800f6ce:	d102      	bne.n	800f6d6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f6d4:	e010      	b.n	800f6f8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f6d6:	4b1a      	ldr	r3, [pc, #104]	@ (800f740 <ip4_reass+0x2b4>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f6dc:	e007      	b.n	800f6ee <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800f6de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f6e4:	429a      	cmp	r2, r3
 800f6e6:	d006      	beq.n	800f6f6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f6e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f6ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d1f4      	bne.n	800f6de <ip4_reass+0x252>
 800f6f4:	e000      	b.n	800f6f8 <ip4_reass+0x26c>
          break;
 800f6f6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800f6f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f6fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f6fc:	f7ff fd2e 	bl	800f15c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800f700:	6878      	ldr	r0, [r7, #4]
 800f702:	f7f7 fddb 	bl	80072bc <pbuf_clen>
 800f706:	4603      	mov	r3, r0
 800f708:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800f70a:	4b0c      	ldr	r3, [pc, #48]	@ (800f73c <ip4_reass+0x2b0>)
 800f70c:	881b      	ldrh	r3, [r3, #0]
 800f70e:	8c3a      	ldrh	r2, [r7, #32]
 800f710:	429a      	cmp	r2, r3
 800f712:	d906      	bls.n	800f722 <ip4_reass+0x296>
 800f714:	4b0b      	ldr	r3, [pc, #44]	@ (800f744 <ip4_reass+0x2b8>)
 800f716:	f240 229b 	movw	r2, #667	@ 0x29b
 800f71a:	490b      	ldr	r1, [pc, #44]	@ (800f748 <ip4_reass+0x2bc>)
 800f71c:	480b      	ldr	r0, [pc, #44]	@ (800f74c <ip4_reass+0x2c0>)
 800f71e:	f000 fbc5 	bl	800feac <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800f722:	4b06      	ldr	r3, [pc, #24]	@ (800f73c <ip4_reass+0x2b0>)
 800f724:	881a      	ldrh	r2, [r3, #0]
 800f726:	8c3b      	ldrh	r3, [r7, #32]
 800f728:	1ad3      	subs	r3, r2, r3
 800f72a:	b29a      	uxth	r2, r3
 800f72c:	4b03      	ldr	r3, [pc, #12]	@ (800f73c <ip4_reass+0x2b0>)
 800f72e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	e038      	b.n	800f7a6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800f734:	2300      	movs	r3, #0
 800f736:	e036      	b.n	800f7a6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800f738:	bf00      	nop
 800f73a:	e00a      	b.n	800f752 <ip4_reass+0x2c6>
 800f73c:	20008928 	.word	0x20008928
 800f740:	20008924 	.word	0x20008924
 800f744:	080138bc 	.word	0x080138bc
 800f748:	08013a2c 	.word	0x08013a2c
 800f74c:	08013904 	.word	0x08013904
    goto nullreturn_ipr;
 800f750:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800f752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f754:	2b00      	cmp	r3, #0
 800f756:	d106      	bne.n	800f766 <ip4_reass+0x2da>
 800f758:	4b15      	ldr	r3, [pc, #84]	@ (800f7b0 <ip4_reass+0x324>)
 800f75a:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800f75e:	4915      	ldr	r1, [pc, #84]	@ (800f7b4 <ip4_reass+0x328>)
 800f760:	4815      	ldr	r0, [pc, #84]	@ (800f7b8 <ip4_reass+0x32c>)
 800f762:	f000 fba3 	bl	800feac <iprintf>
  if (ipr->p == NULL) {
 800f766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f768:	685b      	ldr	r3, [r3, #4]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d116      	bne.n	800f79c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800f76e:	4b13      	ldr	r3, [pc, #76]	@ (800f7bc <ip4_reass+0x330>)
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f774:	429a      	cmp	r2, r3
 800f776:	d006      	beq.n	800f786 <ip4_reass+0x2fa>
 800f778:	4b0d      	ldr	r3, [pc, #52]	@ (800f7b0 <ip4_reass+0x324>)
 800f77a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800f77e:	4910      	ldr	r1, [pc, #64]	@ (800f7c0 <ip4_reass+0x334>)
 800f780:	480d      	ldr	r0, [pc, #52]	@ (800f7b8 <ip4_reass+0x32c>)
 800f782:	f000 fb93 	bl	800feac <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800f786:	2100      	movs	r1, #0
 800f788:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f78a:	f7ff fce7 	bl	800f15c <ip_reass_dequeue_datagram>
 800f78e:	e006      	b.n	800f79e <ip4_reass+0x312>
    goto nullreturn;
 800f790:	bf00      	nop
 800f792:	e004      	b.n	800f79e <ip4_reass+0x312>
    goto nullreturn;
 800f794:	bf00      	nop
 800f796:	e002      	b.n	800f79e <ip4_reass+0x312>
      goto nullreturn;
 800f798:	bf00      	nop
 800f79a:	e000      	b.n	800f79e <ip4_reass+0x312>
  }

nullreturn:
 800f79c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	f7f7 fd04 	bl	80071ac <pbuf_free>
  return NULL;
 800f7a4:	2300      	movs	r3, #0
}
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	3738      	adds	r7, #56	@ 0x38
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd80      	pop	{r7, pc}
 800f7ae:	bf00      	nop
 800f7b0:	080138bc 	.word	0x080138bc
 800f7b4:	08013a48 	.word	0x08013a48
 800f7b8:	08013904 	.word	0x08013904
 800f7bc:	20008924 	.word	0x20008924
 800f7c0:	08013a54 	.word	0x08013a54

0800f7c4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800f7c8:	2005      	movs	r0, #5
 800f7ca:	f7f6 fe09 	bl	80063e0 <memp_malloc>
 800f7ce:	4603      	mov	r3, r0
}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	bd80      	pop	{r7, pc}

0800f7d4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b082      	sub	sp, #8
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d106      	bne.n	800f7f0 <ip_frag_free_pbuf_custom_ref+0x1c>
 800f7e2:	4b07      	ldr	r3, [pc, #28]	@ (800f800 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800f7e4:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800f7e8:	4906      	ldr	r1, [pc, #24]	@ (800f804 <ip_frag_free_pbuf_custom_ref+0x30>)
 800f7ea:	4807      	ldr	r0, [pc, #28]	@ (800f808 <ip_frag_free_pbuf_custom_ref+0x34>)
 800f7ec:	f000 fb5e 	bl	800feac <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800f7f0:	6879      	ldr	r1, [r7, #4]
 800f7f2:	2005      	movs	r0, #5
 800f7f4:	f7f6 fe64 	bl	80064c0 <memp_free>
}
 800f7f8:	bf00      	nop
 800f7fa:	3708      	adds	r7, #8
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}
 800f800:	080138bc 	.word	0x080138bc
 800f804:	08013a74 	.word	0x08013a74
 800f808:	08013904 	.word	0x08013904

0800f80c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b084      	sub	sp, #16
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d106      	bne.n	800f82c <ipfrag_free_pbuf_custom+0x20>
 800f81e:	4b11      	ldr	r3, [pc, #68]	@ (800f864 <ipfrag_free_pbuf_custom+0x58>)
 800f820:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800f824:	4910      	ldr	r1, [pc, #64]	@ (800f868 <ipfrag_free_pbuf_custom+0x5c>)
 800f826:	4811      	ldr	r0, [pc, #68]	@ (800f86c <ipfrag_free_pbuf_custom+0x60>)
 800f828:	f000 fb40 	bl	800feac <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800f82c:	68fa      	ldr	r2, [r7, #12]
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	429a      	cmp	r2, r3
 800f832:	d006      	beq.n	800f842 <ipfrag_free_pbuf_custom+0x36>
 800f834:	4b0b      	ldr	r3, [pc, #44]	@ (800f864 <ipfrag_free_pbuf_custom+0x58>)
 800f836:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800f83a:	490d      	ldr	r1, [pc, #52]	@ (800f870 <ipfrag_free_pbuf_custom+0x64>)
 800f83c:	480b      	ldr	r0, [pc, #44]	@ (800f86c <ipfrag_free_pbuf_custom+0x60>)
 800f83e:	f000 fb35 	bl	800feac <iprintf>
  if (pcr->original != NULL) {
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	695b      	ldr	r3, [r3, #20]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d004      	beq.n	800f854 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	695b      	ldr	r3, [r3, #20]
 800f84e:	4618      	mov	r0, r3
 800f850:	f7f7 fcac 	bl	80071ac <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f854:	68f8      	ldr	r0, [r7, #12]
 800f856:	f7ff ffbd 	bl	800f7d4 <ip_frag_free_pbuf_custom_ref>
}
 800f85a:	bf00      	nop
 800f85c:	3710      	adds	r7, #16
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}
 800f862:	bf00      	nop
 800f864:	080138bc 	.word	0x080138bc
 800f868:	08013a80 	.word	0x08013a80
 800f86c:	08013904 	.word	0x08013904
 800f870:	08013a8c 	.word	0x08013a8c

0800f874 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b094      	sub	sp, #80	@ 0x50
 800f878:	af02      	add	r7, sp, #8
 800f87a:	60f8      	str	r0, [r7, #12]
 800f87c:	60b9      	str	r1, [r7, #8]
 800f87e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800f880:	2300      	movs	r3, #0
 800f882:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800f886:	68bb      	ldr	r3, [r7, #8]
 800f888:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f88a:	3b14      	subs	r3, #20
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	da00      	bge.n	800f892 <ip4_frag+0x1e>
 800f890:	3307      	adds	r3, #7
 800f892:	10db      	asrs	r3, r3, #3
 800f894:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800f896:	2314      	movs	r3, #20
 800f898:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	685b      	ldr	r3, [r3, #4]
 800f89e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800f8a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8a2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800f8a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8a6:	781b      	ldrb	r3, [r3, #0]
 800f8a8:	f003 030f 	and.w	r3, r3, #15
 800f8ac:	b2db      	uxtb	r3, r3
 800f8ae:	009b      	lsls	r3, r3, #2
 800f8b0:	b2db      	uxtb	r3, r3
 800f8b2:	2b14      	cmp	r3, #20
 800f8b4:	d002      	beq.n	800f8bc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800f8b6:	f06f 0305 	mvn.w	r3, #5
 800f8ba:	e110      	b.n	800fade <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	895b      	ldrh	r3, [r3, #10]
 800f8c0:	2b13      	cmp	r3, #19
 800f8c2:	d809      	bhi.n	800f8d8 <ip4_frag+0x64>
 800f8c4:	4b88      	ldr	r3, [pc, #544]	@ (800fae8 <ip4_frag+0x274>)
 800f8c6:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800f8ca:	4988      	ldr	r1, [pc, #544]	@ (800faec <ip4_frag+0x278>)
 800f8cc:	4888      	ldr	r0, [pc, #544]	@ (800faf0 <ip4_frag+0x27c>)
 800f8ce:	f000 faed 	bl	800feac <iprintf>
 800f8d2:	f06f 0305 	mvn.w	r3, #5
 800f8d6:	e102      	b.n	800fade <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800f8d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8da:	88db      	ldrh	r3, [r3, #6]
 800f8dc:	b29b      	uxth	r3, r3
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f7f6 f906 	bl	8005af0 <lwip_htons>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800f8e8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f8ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f8ee:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800f8f2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f8f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f8f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	891b      	ldrh	r3, [r3, #8]
 800f8fe:	3b14      	subs	r3, #20
 800f900:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800f904:	e0e1      	b.n	800faca <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800f906:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800f908:	00db      	lsls	r3, r3, #3
 800f90a:	b29b      	uxth	r3, r3
 800f90c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f910:	4293      	cmp	r3, r2
 800f912:	bf28      	it	cs
 800f914:	4613      	movcs	r3, r2
 800f916:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800f918:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f91c:	2114      	movs	r1, #20
 800f91e:	200e      	movs	r0, #14
 800f920:	f7f7 f960 	bl	8006be4 <pbuf_alloc>
 800f924:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800f926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f928:	2b00      	cmp	r3, #0
 800f92a:	f000 80d5 	beq.w	800fad8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f92e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f930:	895b      	ldrh	r3, [r3, #10]
 800f932:	2b13      	cmp	r3, #19
 800f934:	d806      	bhi.n	800f944 <ip4_frag+0xd0>
 800f936:	4b6c      	ldr	r3, [pc, #432]	@ (800fae8 <ip4_frag+0x274>)
 800f938:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800f93c:	496d      	ldr	r1, [pc, #436]	@ (800faf4 <ip4_frag+0x280>)
 800f93e:	486c      	ldr	r0, [pc, #432]	@ (800faf0 <ip4_frag+0x27c>)
 800f940:	f000 fab4 	bl	800feac <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800f944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f946:	685b      	ldr	r3, [r3, #4]
 800f948:	2214      	movs	r2, #20
 800f94a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800f94c:	4618      	mov	r0, r3
 800f94e:	f000 fbfe 	bl	801014e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800f952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f954:	685b      	ldr	r3, [r3, #4]
 800f956:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800f958:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f95a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800f95e:	e064      	b.n	800fa2a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	895a      	ldrh	r2, [r3, #10]
 800f964:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800f966:	1ad3      	subs	r3, r2, r3
 800f968:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	895b      	ldrh	r3, [r3, #10]
 800f96e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800f970:	429a      	cmp	r2, r3
 800f972:	d906      	bls.n	800f982 <ip4_frag+0x10e>
 800f974:	4b5c      	ldr	r3, [pc, #368]	@ (800fae8 <ip4_frag+0x274>)
 800f976:	f240 322d 	movw	r2, #813	@ 0x32d
 800f97a:	495f      	ldr	r1, [pc, #380]	@ (800faf8 <ip4_frag+0x284>)
 800f97c:	485c      	ldr	r0, [pc, #368]	@ (800faf0 <ip4_frag+0x27c>)
 800f97e:	f000 fa95 	bl	800feac <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f982:	8bfa      	ldrh	r2, [r7, #30]
 800f984:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800f988:	4293      	cmp	r3, r2
 800f98a:	bf28      	it	cs
 800f98c:	4613      	movcs	r3, r2
 800f98e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800f992:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800f996:	2b00      	cmp	r3, #0
 800f998:	d105      	bne.n	800f9a6 <ip4_frag+0x132>
        poff = 0;
 800f99a:	2300      	movs	r3, #0
 800f99c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	60fb      	str	r3, [r7, #12]
        continue;
 800f9a4:	e041      	b.n	800fa2a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800f9a6:	f7ff ff0d 	bl	800f7c4 <ip_frag_alloc_pbuf_custom_ref>
 800f9aa:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800f9ac:	69bb      	ldr	r3, [r7, #24]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d103      	bne.n	800f9ba <ip4_frag+0x146>
        pbuf_free(rambuf);
 800f9b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f9b4:	f7f7 fbfa 	bl	80071ac <pbuf_free>
        goto memerr;
 800f9b8:	e08f      	b.n	800fada <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f9ba:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f9c0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800f9c2:	4413      	add	r3, r2
 800f9c4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800f9c8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800f9cc:	9201      	str	r2, [sp, #4]
 800f9ce:	9300      	str	r3, [sp, #0]
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	2241      	movs	r2, #65	@ 0x41
 800f9d4:	2000      	movs	r0, #0
 800f9d6:	f7f7 fa2f 	bl	8006e38 <pbuf_alloced_custom>
 800f9da:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800f9dc:	697b      	ldr	r3, [r7, #20]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d106      	bne.n	800f9f0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800f9e2:	69b8      	ldr	r0, [r7, #24]
 800f9e4:	f7ff fef6 	bl	800f7d4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800f9e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f9ea:	f7f7 fbdf 	bl	80071ac <pbuf_free>
        goto memerr;
 800f9ee:	e074      	b.n	800fada <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800f9f0:	68f8      	ldr	r0, [r7, #12]
 800f9f2:	f7f7 fc7b 	bl	80072ec <pbuf_ref>
      pcr->original = p;
 800f9f6:	69bb      	ldr	r3, [r7, #24]
 800f9f8:	68fa      	ldr	r2, [r7, #12]
 800f9fa:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f9fc:	69bb      	ldr	r3, [r7, #24]
 800f9fe:	4a3f      	ldr	r2, [pc, #252]	@ (800fafc <ip4_frag+0x288>)
 800fa00:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800fa02:	6979      	ldr	r1, [r7, #20]
 800fa04:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fa06:	f7f7 fc93 	bl	8007330 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800fa0a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800fa0e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800fa12:	1ad3      	subs	r3, r2, r3
 800fa14:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800fa18:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d004      	beq.n	800fa2a <ip4_frag+0x1b6>
        poff = 0;
 800fa20:	2300      	movs	r3, #0
 800fa22:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800fa2a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d196      	bne.n	800f960 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800fa32:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800fa34:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800fa38:	4413      	add	r3, r2
 800fa3a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800fa3c:	68bb      	ldr	r3, [r7, #8]
 800fa3e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800fa40:	f1a3 0213 	sub.w	r2, r3, #19
 800fa44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fa48:	429a      	cmp	r2, r3
 800fa4a:	bfcc      	ite	gt
 800fa4c:	2301      	movgt	r3, #1
 800fa4e:	2300      	movle	r3, #0
 800fa50:	b2db      	uxtb	r3, r3
 800fa52:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800fa54:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800fa58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fa5c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800fa5e:	6a3b      	ldr	r3, [r7, #32]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d002      	beq.n	800fa6a <ip4_frag+0x1f6>
 800fa64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d003      	beq.n	800fa72 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800fa6a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800fa6c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800fa70:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800fa72:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800fa74:	4618      	mov	r0, r3
 800fa76:	f7f6 f83b 	bl	8005af0 <lwip_htons>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	461a      	mov	r2, r3
 800fa7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa80:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800fa82:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fa84:	3314      	adds	r3, #20
 800fa86:	b29b      	uxth	r3, r3
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f7f6 f831 	bl	8005af0 <lwip_htons>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	461a      	mov	r2, r3
 800fa92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa94:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800fa96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa98:	2200      	movs	r2, #0
 800fa9a:	729a      	strb	r2, [r3, #10]
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	695b      	ldr	r3, [r3, #20]
 800faa4:	687a      	ldr	r2, [r7, #4]
 800faa6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800faa8:	68b8      	ldr	r0, [r7, #8]
 800faaa:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800faac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800faae:	f7f7 fb7d 	bl	80071ac <pbuf_free>
    left = (u16_t)(left - fragsize);
 800fab2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800fab6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fab8:	1ad3      	subs	r3, r2, r3
 800faba:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800fabe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800fac2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800fac4:	4413      	add	r3, r2
 800fac6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800faca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800face:	2b00      	cmp	r3, #0
 800fad0:	f47f af19 	bne.w	800f906 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800fad4:	2300      	movs	r3, #0
 800fad6:	e002      	b.n	800fade <ip4_frag+0x26a>
      goto memerr;
 800fad8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800fada:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fade:	4618      	mov	r0, r3
 800fae0:	3748      	adds	r7, #72	@ 0x48
 800fae2:	46bd      	mov	sp, r7
 800fae4:	bd80      	pop	{r7, pc}
 800fae6:	bf00      	nop
 800fae8:	080138bc 	.word	0x080138bc
 800faec:	08013a98 	.word	0x08013a98
 800faf0:	08013904 	.word	0x08013904
 800faf4:	08013ab4 	.word	0x08013ab4
 800faf8:	08013ad4 	.word	0x08013ad4
 800fafc:	0800f80d 	.word	0x0800f80d

0800fb00 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b086      	sub	sp, #24
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
 800fb08:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800fb0a:	230e      	movs	r3, #14
 800fb0c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	895b      	ldrh	r3, [r3, #10]
 800fb12:	2b0e      	cmp	r3, #14
 800fb14:	d96e      	bls.n	800fbf4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	7bdb      	ldrb	r3, [r3, #15]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d106      	bne.n	800fb2c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800fb1e:	683b      	ldr	r3, [r7, #0]
 800fb20:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fb24:	3301      	adds	r3, #1
 800fb26:	b2da      	uxtb	r2, r3
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	685b      	ldr	r3, [r3, #4]
 800fb30:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800fb32:	693b      	ldr	r3, [r7, #16]
 800fb34:	7b1a      	ldrb	r2, [r3, #12]
 800fb36:	7b5b      	ldrb	r3, [r3, #13]
 800fb38:	021b      	lsls	r3, r3, #8
 800fb3a:	4313      	orrs	r3, r2
 800fb3c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800fb3e:	693b      	ldr	r3, [r7, #16]
 800fb40:	781b      	ldrb	r3, [r3, #0]
 800fb42:	f003 0301 	and.w	r3, r3, #1
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d023      	beq.n	800fb92 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800fb4a:	693b      	ldr	r3, [r7, #16]
 800fb4c:	781b      	ldrb	r3, [r3, #0]
 800fb4e:	2b01      	cmp	r3, #1
 800fb50:	d10f      	bne.n	800fb72 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800fb52:	693b      	ldr	r3, [r7, #16]
 800fb54:	785b      	ldrb	r3, [r3, #1]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d11b      	bne.n	800fb92 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800fb5a:	693b      	ldr	r3, [r7, #16]
 800fb5c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800fb5e:	2b5e      	cmp	r3, #94	@ 0x5e
 800fb60:	d117      	bne.n	800fb92 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	7b5b      	ldrb	r3, [r3, #13]
 800fb66:	f043 0310 	orr.w	r3, r3, #16
 800fb6a:	b2da      	uxtb	r2, r3
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	735a      	strb	r2, [r3, #13]
 800fb70:	e00f      	b.n	800fb92 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800fb72:	693b      	ldr	r3, [r7, #16]
 800fb74:	2206      	movs	r2, #6
 800fb76:	4928      	ldr	r1, [pc, #160]	@ (800fc18 <ethernet_input+0x118>)
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f000 fa0c 	bl	800ff96 <memcmp>
 800fb7e:	4603      	mov	r3, r0
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d106      	bne.n	800fb92 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	7b5b      	ldrb	r3, [r3, #13]
 800fb88:	f043 0308 	orr.w	r3, r3, #8
 800fb8c:	b2da      	uxtb	r2, r3
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800fb92:	89fb      	ldrh	r3, [r7, #14]
 800fb94:	2b08      	cmp	r3, #8
 800fb96:	d003      	beq.n	800fba0 <ethernet_input+0xa0>
 800fb98:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800fb9c:	d014      	beq.n	800fbc8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800fb9e:	e032      	b.n	800fc06 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fba0:	683b      	ldr	r3, [r7, #0]
 800fba2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fba6:	f003 0308 	and.w	r3, r3, #8
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d024      	beq.n	800fbf8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800fbae:	8afb      	ldrh	r3, [r7, #22]
 800fbb0:	4619      	mov	r1, r3
 800fbb2:	6878      	ldr	r0, [r7, #4]
 800fbb4:	f7f7 fa74 	bl	80070a0 <pbuf_remove_header>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d11e      	bne.n	800fbfc <ethernet_input+0xfc>
        ip4_input(p, netif);
 800fbbe:	6839      	ldr	r1, [r7, #0]
 800fbc0:	6878      	ldr	r0, [r7, #4]
 800fbc2:	f7fe fea1 	bl	800e908 <ip4_input>
      break;
 800fbc6:	e013      	b.n	800fbf0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fbce:	f003 0308 	and.w	r3, r3, #8
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d014      	beq.n	800fc00 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800fbd6:	8afb      	ldrh	r3, [r7, #22]
 800fbd8:	4619      	mov	r1, r3
 800fbda:	6878      	ldr	r0, [r7, #4]
 800fbdc:	f7f7 fa60 	bl	80070a0 <pbuf_remove_header>
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d10e      	bne.n	800fc04 <ethernet_input+0x104>
        etharp_input(p, netif);
 800fbe6:	6839      	ldr	r1, [r7, #0]
 800fbe8:	6878      	ldr	r0, [r7, #4]
 800fbea:	f7fe f841 	bl	800dc70 <etharp_input>
      break;
 800fbee:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	e00c      	b.n	800fc0e <ethernet_input+0x10e>
    goto free_and_return;
 800fbf4:	bf00      	nop
 800fbf6:	e006      	b.n	800fc06 <ethernet_input+0x106>
        goto free_and_return;
 800fbf8:	bf00      	nop
 800fbfa:	e004      	b.n	800fc06 <ethernet_input+0x106>
        goto free_and_return;
 800fbfc:	bf00      	nop
 800fbfe:	e002      	b.n	800fc06 <ethernet_input+0x106>
        goto free_and_return;
 800fc00:	bf00      	nop
 800fc02:	e000      	b.n	800fc06 <ethernet_input+0x106>
        goto free_and_return;
 800fc04:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	f7f7 fad0 	bl	80071ac <pbuf_free>
  return ERR_OK;
 800fc0c:	2300      	movs	r3, #0
}
 800fc0e:	4618      	mov	r0, r3
 800fc10:	3718      	adds	r7, #24
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bd80      	pop	{r7, pc}
 800fc16:	bf00      	nop
 800fc18:	08013c70 	.word	0x08013c70

0800fc1c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b086      	sub	sp, #24
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	60f8      	str	r0, [r7, #12]
 800fc24:	60b9      	str	r1, [r7, #8]
 800fc26:	607a      	str	r2, [r7, #4]
 800fc28:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800fc2a:	8c3b      	ldrh	r3, [r7, #32]
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f7f5 ff5f 	bl	8005af0 <lwip_htons>
 800fc32:	4603      	mov	r3, r0
 800fc34:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800fc36:	210e      	movs	r1, #14
 800fc38:	68b8      	ldr	r0, [r7, #8]
 800fc3a:	f7f7 fa21 	bl	8007080 <pbuf_add_header>
 800fc3e:	4603      	mov	r3, r0
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d125      	bne.n	800fc90 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800fc44:	68bb      	ldr	r3, [r7, #8]
 800fc46:	685b      	ldr	r3, [r3, #4]
 800fc48:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800fc4a:	693b      	ldr	r3, [r7, #16]
 800fc4c:	8afa      	ldrh	r2, [r7, #22]
 800fc4e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800fc50:	693b      	ldr	r3, [r7, #16]
 800fc52:	2206      	movs	r2, #6
 800fc54:	6839      	ldr	r1, [r7, #0]
 800fc56:	4618      	mov	r0, r3
 800fc58:	f000 fa79 	bl	801014e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800fc5c:	693b      	ldr	r3, [r7, #16]
 800fc5e:	3306      	adds	r3, #6
 800fc60:	2206      	movs	r2, #6
 800fc62:	6879      	ldr	r1, [r7, #4]
 800fc64:	4618      	mov	r0, r3
 800fc66:	f000 fa72 	bl	801014e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800fc70:	2b06      	cmp	r3, #6
 800fc72:	d006      	beq.n	800fc82 <ethernet_output+0x66>
 800fc74:	4b0a      	ldr	r3, [pc, #40]	@ (800fca0 <ethernet_output+0x84>)
 800fc76:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800fc7a:	490a      	ldr	r1, [pc, #40]	@ (800fca4 <ethernet_output+0x88>)
 800fc7c:	480a      	ldr	r0, [pc, #40]	@ (800fca8 <ethernet_output+0x8c>)
 800fc7e:	f000 f915 	bl	800feac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	699b      	ldr	r3, [r3, #24]
 800fc86:	68b9      	ldr	r1, [r7, #8]
 800fc88:	68f8      	ldr	r0, [r7, #12]
 800fc8a:	4798      	blx	r3
 800fc8c:	4603      	mov	r3, r0
 800fc8e:	e002      	b.n	800fc96 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800fc90:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800fc92:	f06f 0301 	mvn.w	r3, #1
}
 800fc96:	4618      	mov	r0, r3
 800fc98:	3718      	adds	r7, #24
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	bd80      	pop	{r7, pc}
 800fc9e:	bf00      	nop
 800fca0:	08013ae4 	.word	0x08013ae4
 800fca4:	08013b1c 	.word	0x08013b1c
 800fca8:	08013b50 	.word	0x08013b50

0800fcac <rand>:
 800fcac:	4b16      	ldr	r3, [pc, #88]	@ (800fd08 <rand+0x5c>)
 800fcae:	b510      	push	{r4, lr}
 800fcb0:	681c      	ldr	r4, [r3, #0]
 800fcb2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fcb4:	b9b3      	cbnz	r3, 800fce4 <rand+0x38>
 800fcb6:	2018      	movs	r0, #24
 800fcb8:	f000 fac0 	bl	801023c <malloc>
 800fcbc:	4602      	mov	r2, r0
 800fcbe:	6320      	str	r0, [r4, #48]	@ 0x30
 800fcc0:	b920      	cbnz	r0, 800fccc <rand+0x20>
 800fcc2:	4b12      	ldr	r3, [pc, #72]	@ (800fd0c <rand+0x60>)
 800fcc4:	4812      	ldr	r0, [pc, #72]	@ (800fd10 <rand+0x64>)
 800fcc6:	2152      	movs	r1, #82	@ 0x52
 800fcc8:	f000 fa50 	bl	801016c <__assert_func>
 800fccc:	4911      	ldr	r1, [pc, #68]	@ (800fd14 <rand+0x68>)
 800fcce:	4b12      	ldr	r3, [pc, #72]	@ (800fd18 <rand+0x6c>)
 800fcd0:	e9c0 1300 	strd	r1, r3, [r0]
 800fcd4:	4b11      	ldr	r3, [pc, #68]	@ (800fd1c <rand+0x70>)
 800fcd6:	6083      	str	r3, [r0, #8]
 800fcd8:	230b      	movs	r3, #11
 800fcda:	8183      	strh	r3, [r0, #12]
 800fcdc:	2100      	movs	r1, #0
 800fcde:	2001      	movs	r0, #1
 800fce0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800fce4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800fce6:	480e      	ldr	r0, [pc, #56]	@ (800fd20 <rand+0x74>)
 800fce8:	690b      	ldr	r3, [r1, #16]
 800fcea:	694c      	ldr	r4, [r1, #20]
 800fcec:	4a0d      	ldr	r2, [pc, #52]	@ (800fd24 <rand+0x78>)
 800fcee:	4358      	muls	r0, r3
 800fcf0:	fb02 0004 	mla	r0, r2, r4, r0
 800fcf4:	fba3 3202 	umull	r3, r2, r3, r2
 800fcf8:	3301      	adds	r3, #1
 800fcfa:	eb40 0002 	adc.w	r0, r0, r2
 800fcfe:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800fd02:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800fd06:	bd10      	pop	{r4, pc}
 800fd08:	20000038 	.word	0x20000038
 800fd0c:	08013c7e 	.word	0x08013c7e
 800fd10:	08013c95 	.word	0x08013c95
 800fd14:	abcd330e 	.word	0xabcd330e
 800fd18:	e66d1234 	.word	0xe66d1234
 800fd1c:	0005deec 	.word	0x0005deec
 800fd20:	5851f42d 	.word	0x5851f42d
 800fd24:	4c957f2d 	.word	0x4c957f2d

0800fd28 <std>:
 800fd28:	2300      	movs	r3, #0
 800fd2a:	b510      	push	{r4, lr}
 800fd2c:	4604      	mov	r4, r0
 800fd2e:	e9c0 3300 	strd	r3, r3, [r0]
 800fd32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fd36:	6083      	str	r3, [r0, #8]
 800fd38:	8181      	strh	r1, [r0, #12]
 800fd3a:	6643      	str	r3, [r0, #100]	@ 0x64
 800fd3c:	81c2      	strh	r2, [r0, #14]
 800fd3e:	6183      	str	r3, [r0, #24]
 800fd40:	4619      	mov	r1, r3
 800fd42:	2208      	movs	r2, #8
 800fd44:	305c      	adds	r0, #92	@ 0x5c
 800fd46:	f000 f950 	bl	800ffea <memset>
 800fd4a:	4b0d      	ldr	r3, [pc, #52]	@ (800fd80 <std+0x58>)
 800fd4c:	6263      	str	r3, [r4, #36]	@ 0x24
 800fd4e:	4b0d      	ldr	r3, [pc, #52]	@ (800fd84 <std+0x5c>)
 800fd50:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fd52:	4b0d      	ldr	r3, [pc, #52]	@ (800fd88 <std+0x60>)
 800fd54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fd56:	4b0d      	ldr	r3, [pc, #52]	@ (800fd8c <std+0x64>)
 800fd58:	6323      	str	r3, [r4, #48]	@ 0x30
 800fd5a:	4b0d      	ldr	r3, [pc, #52]	@ (800fd90 <std+0x68>)
 800fd5c:	6224      	str	r4, [r4, #32]
 800fd5e:	429c      	cmp	r4, r3
 800fd60:	d006      	beq.n	800fd70 <std+0x48>
 800fd62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fd66:	4294      	cmp	r4, r2
 800fd68:	d002      	beq.n	800fd70 <std+0x48>
 800fd6a:	33d0      	adds	r3, #208	@ 0xd0
 800fd6c:	429c      	cmp	r4, r3
 800fd6e:	d105      	bne.n	800fd7c <std+0x54>
 800fd70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fd74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd78:	f000 b9de 	b.w	8010138 <__retarget_lock_init_recursive>
 800fd7c:	bd10      	pop	{r4, pc}
 800fd7e:	bf00      	nop
 800fd80:	0800ff11 	.word	0x0800ff11
 800fd84:	0800ff33 	.word	0x0800ff33
 800fd88:	0800ff6b 	.word	0x0800ff6b
 800fd8c:	0800ff8f 	.word	0x0800ff8f
 800fd90:	2000892c 	.word	0x2000892c

0800fd94 <stdio_exit_handler>:
 800fd94:	4a02      	ldr	r2, [pc, #8]	@ (800fda0 <stdio_exit_handler+0xc>)
 800fd96:	4903      	ldr	r1, [pc, #12]	@ (800fda4 <stdio_exit_handler+0x10>)
 800fd98:	4803      	ldr	r0, [pc, #12]	@ (800fda8 <stdio_exit_handler+0x14>)
 800fd9a:	f000 b869 	b.w	800fe70 <_fwalk_sglue>
 800fd9e:	bf00      	nop
 800fda0:	2000002c 	.word	0x2000002c
 800fda4:	08010d01 	.word	0x08010d01
 800fda8:	2000003c 	.word	0x2000003c

0800fdac <cleanup_stdio>:
 800fdac:	6841      	ldr	r1, [r0, #4]
 800fdae:	4b0c      	ldr	r3, [pc, #48]	@ (800fde0 <cleanup_stdio+0x34>)
 800fdb0:	4299      	cmp	r1, r3
 800fdb2:	b510      	push	{r4, lr}
 800fdb4:	4604      	mov	r4, r0
 800fdb6:	d001      	beq.n	800fdbc <cleanup_stdio+0x10>
 800fdb8:	f000 ffa2 	bl	8010d00 <_fflush_r>
 800fdbc:	68a1      	ldr	r1, [r4, #8]
 800fdbe:	4b09      	ldr	r3, [pc, #36]	@ (800fde4 <cleanup_stdio+0x38>)
 800fdc0:	4299      	cmp	r1, r3
 800fdc2:	d002      	beq.n	800fdca <cleanup_stdio+0x1e>
 800fdc4:	4620      	mov	r0, r4
 800fdc6:	f000 ff9b 	bl	8010d00 <_fflush_r>
 800fdca:	68e1      	ldr	r1, [r4, #12]
 800fdcc:	4b06      	ldr	r3, [pc, #24]	@ (800fde8 <cleanup_stdio+0x3c>)
 800fdce:	4299      	cmp	r1, r3
 800fdd0:	d004      	beq.n	800fddc <cleanup_stdio+0x30>
 800fdd2:	4620      	mov	r0, r4
 800fdd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdd8:	f000 bf92 	b.w	8010d00 <_fflush_r>
 800fddc:	bd10      	pop	{r4, pc}
 800fdde:	bf00      	nop
 800fde0:	2000892c 	.word	0x2000892c
 800fde4:	20008994 	.word	0x20008994
 800fde8:	200089fc 	.word	0x200089fc

0800fdec <global_stdio_init.part.0>:
 800fdec:	b510      	push	{r4, lr}
 800fdee:	4b0b      	ldr	r3, [pc, #44]	@ (800fe1c <global_stdio_init.part.0+0x30>)
 800fdf0:	4c0b      	ldr	r4, [pc, #44]	@ (800fe20 <global_stdio_init.part.0+0x34>)
 800fdf2:	4a0c      	ldr	r2, [pc, #48]	@ (800fe24 <global_stdio_init.part.0+0x38>)
 800fdf4:	601a      	str	r2, [r3, #0]
 800fdf6:	4620      	mov	r0, r4
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	2104      	movs	r1, #4
 800fdfc:	f7ff ff94 	bl	800fd28 <std>
 800fe00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fe04:	2201      	movs	r2, #1
 800fe06:	2109      	movs	r1, #9
 800fe08:	f7ff ff8e 	bl	800fd28 <std>
 800fe0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fe10:	2202      	movs	r2, #2
 800fe12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe16:	2112      	movs	r1, #18
 800fe18:	f7ff bf86 	b.w	800fd28 <std>
 800fe1c:	20008a64 	.word	0x20008a64
 800fe20:	2000892c 	.word	0x2000892c
 800fe24:	0800fd95 	.word	0x0800fd95

0800fe28 <__sfp_lock_acquire>:
 800fe28:	4801      	ldr	r0, [pc, #4]	@ (800fe30 <__sfp_lock_acquire+0x8>)
 800fe2a:	f000 b986 	b.w	801013a <__retarget_lock_acquire_recursive>
 800fe2e:	bf00      	nop
 800fe30:	20008a6d 	.word	0x20008a6d

0800fe34 <__sfp_lock_release>:
 800fe34:	4801      	ldr	r0, [pc, #4]	@ (800fe3c <__sfp_lock_release+0x8>)
 800fe36:	f000 b981 	b.w	801013c <__retarget_lock_release_recursive>
 800fe3a:	bf00      	nop
 800fe3c:	20008a6d 	.word	0x20008a6d

0800fe40 <__sinit>:
 800fe40:	b510      	push	{r4, lr}
 800fe42:	4604      	mov	r4, r0
 800fe44:	f7ff fff0 	bl	800fe28 <__sfp_lock_acquire>
 800fe48:	6a23      	ldr	r3, [r4, #32]
 800fe4a:	b11b      	cbz	r3, 800fe54 <__sinit+0x14>
 800fe4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe50:	f7ff bff0 	b.w	800fe34 <__sfp_lock_release>
 800fe54:	4b04      	ldr	r3, [pc, #16]	@ (800fe68 <__sinit+0x28>)
 800fe56:	6223      	str	r3, [r4, #32]
 800fe58:	4b04      	ldr	r3, [pc, #16]	@ (800fe6c <__sinit+0x2c>)
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d1f5      	bne.n	800fe4c <__sinit+0xc>
 800fe60:	f7ff ffc4 	bl	800fdec <global_stdio_init.part.0>
 800fe64:	e7f2      	b.n	800fe4c <__sinit+0xc>
 800fe66:	bf00      	nop
 800fe68:	0800fdad 	.word	0x0800fdad
 800fe6c:	20008a64 	.word	0x20008a64

0800fe70 <_fwalk_sglue>:
 800fe70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe74:	4607      	mov	r7, r0
 800fe76:	4688      	mov	r8, r1
 800fe78:	4614      	mov	r4, r2
 800fe7a:	2600      	movs	r6, #0
 800fe7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fe80:	f1b9 0901 	subs.w	r9, r9, #1
 800fe84:	d505      	bpl.n	800fe92 <_fwalk_sglue+0x22>
 800fe86:	6824      	ldr	r4, [r4, #0]
 800fe88:	2c00      	cmp	r4, #0
 800fe8a:	d1f7      	bne.n	800fe7c <_fwalk_sglue+0xc>
 800fe8c:	4630      	mov	r0, r6
 800fe8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe92:	89ab      	ldrh	r3, [r5, #12]
 800fe94:	2b01      	cmp	r3, #1
 800fe96:	d907      	bls.n	800fea8 <_fwalk_sglue+0x38>
 800fe98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fe9c:	3301      	adds	r3, #1
 800fe9e:	d003      	beq.n	800fea8 <_fwalk_sglue+0x38>
 800fea0:	4629      	mov	r1, r5
 800fea2:	4638      	mov	r0, r7
 800fea4:	47c0      	blx	r8
 800fea6:	4306      	orrs	r6, r0
 800fea8:	3568      	adds	r5, #104	@ 0x68
 800feaa:	e7e9      	b.n	800fe80 <_fwalk_sglue+0x10>

0800feac <iprintf>:
 800feac:	b40f      	push	{r0, r1, r2, r3}
 800feae:	b507      	push	{r0, r1, r2, lr}
 800feb0:	4906      	ldr	r1, [pc, #24]	@ (800fecc <iprintf+0x20>)
 800feb2:	ab04      	add	r3, sp, #16
 800feb4:	6808      	ldr	r0, [r1, #0]
 800feb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800feba:	6881      	ldr	r1, [r0, #8]
 800febc:	9301      	str	r3, [sp, #4]
 800febe:	f000 fbf5 	bl	80106ac <_vfiprintf_r>
 800fec2:	b003      	add	sp, #12
 800fec4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fec8:	b004      	add	sp, #16
 800feca:	4770      	bx	lr
 800fecc:	20000038 	.word	0x20000038

0800fed0 <siprintf>:
 800fed0:	b40e      	push	{r1, r2, r3}
 800fed2:	b500      	push	{lr}
 800fed4:	b09c      	sub	sp, #112	@ 0x70
 800fed6:	ab1d      	add	r3, sp, #116	@ 0x74
 800fed8:	9002      	str	r0, [sp, #8]
 800feda:	9006      	str	r0, [sp, #24]
 800fedc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fee0:	4809      	ldr	r0, [pc, #36]	@ (800ff08 <siprintf+0x38>)
 800fee2:	9107      	str	r1, [sp, #28]
 800fee4:	9104      	str	r1, [sp, #16]
 800fee6:	4909      	ldr	r1, [pc, #36]	@ (800ff0c <siprintf+0x3c>)
 800fee8:	f853 2b04 	ldr.w	r2, [r3], #4
 800feec:	9105      	str	r1, [sp, #20]
 800feee:	6800      	ldr	r0, [r0, #0]
 800fef0:	9301      	str	r3, [sp, #4]
 800fef2:	a902      	add	r1, sp, #8
 800fef4:	f000 fab4 	bl	8010460 <_svfiprintf_r>
 800fef8:	9b02      	ldr	r3, [sp, #8]
 800fefa:	2200      	movs	r2, #0
 800fefc:	701a      	strb	r2, [r3, #0]
 800fefe:	b01c      	add	sp, #112	@ 0x70
 800ff00:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff04:	b003      	add	sp, #12
 800ff06:	4770      	bx	lr
 800ff08:	20000038 	.word	0x20000038
 800ff0c:	ffff0208 	.word	0xffff0208

0800ff10 <__sread>:
 800ff10:	b510      	push	{r4, lr}
 800ff12:	460c      	mov	r4, r1
 800ff14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff18:	f000 f8c6 	bl	80100a8 <_read_r>
 800ff1c:	2800      	cmp	r0, #0
 800ff1e:	bfab      	itete	ge
 800ff20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ff22:	89a3      	ldrhlt	r3, [r4, #12]
 800ff24:	181b      	addge	r3, r3, r0
 800ff26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ff2a:	bfac      	ite	ge
 800ff2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ff2e:	81a3      	strhlt	r3, [r4, #12]
 800ff30:	bd10      	pop	{r4, pc}

0800ff32 <__swrite>:
 800ff32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff36:	461f      	mov	r7, r3
 800ff38:	898b      	ldrh	r3, [r1, #12]
 800ff3a:	05db      	lsls	r3, r3, #23
 800ff3c:	4605      	mov	r5, r0
 800ff3e:	460c      	mov	r4, r1
 800ff40:	4616      	mov	r6, r2
 800ff42:	d505      	bpl.n	800ff50 <__swrite+0x1e>
 800ff44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff48:	2302      	movs	r3, #2
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	f000 f89a 	bl	8010084 <_lseek_r>
 800ff50:	89a3      	ldrh	r3, [r4, #12]
 800ff52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ff5a:	81a3      	strh	r3, [r4, #12]
 800ff5c:	4632      	mov	r2, r6
 800ff5e:	463b      	mov	r3, r7
 800ff60:	4628      	mov	r0, r5
 800ff62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff66:	f000 b8b1 	b.w	80100cc <_write_r>

0800ff6a <__sseek>:
 800ff6a:	b510      	push	{r4, lr}
 800ff6c:	460c      	mov	r4, r1
 800ff6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff72:	f000 f887 	bl	8010084 <_lseek_r>
 800ff76:	1c43      	adds	r3, r0, #1
 800ff78:	89a3      	ldrh	r3, [r4, #12]
 800ff7a:	bf15      	itete	ne
 800ff7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ff7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ff82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ff86:	81a3      	strheq	r3, [r4, #12]
 800ff88:	bf18      	it	ne
 800ff8a:	81a3      	strhne	r3, [r4, #12]
 800ff8c:	bd10      	pop	{r4, pc}

0800ff8e <__sclose>:
 800ff8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff92:	f000 b867 	b.w	8010064 <_close_r>

0800ff96 <memcmp>:
 800ff96:	b510      	push	{r4, lr}
 800ff98:	3901      	subs	r1, #1
 800ff9a:	4402      	add	r2, r0
 800ff9c:	4290      	cmp	r0, r2
 800ff9e:	d101      	bne.n	800ffa4 <memcmp+0xe>
 800ffa0:	2000      	movs	r0, #0
 800ffa2:	e005      	b.n	800ffb0 <memcmp+0x1a>
 800ffa4:	7803      	ldrb	r3, [r0, #0]
 800ffa6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ffaa:	42a3      	cmp	r3, r4
 800ffac:	d001      	beq.n	800ffb2 <memcmp+0x1c>
 800ffae:	1b18      	subs	r0, r3, r4
 800ffb0:	bd10      	pop	{r4, pc}
 800ffb2:	3001      	adds	r0, #1
 800ffb4:	e7f2      	b.n	800ff9c <memcmp+0x6>

0800ffb6 <memmove>:
 800ffb6:	4288      	cmp	r0, r1
 800ffb8:	b510      	push	{r4, lr}
 800ffba:	eb01 0402 	add.w	r4, r1, r2
 800ffbe:	d902      	bls.n	800ffc6 <memmove+0x10>
 800ffc0:	4284      	cmp	r4, r0
 800ffc2:	4623      	mov	r3, r4
 800ffc4:	d807      	bhi.n	800ffd6 <memmove+0x20>
 800ffc6:	1e43      	subs	r3, r0, #1
 800ffc8:	42a1      	cmp	r1, r4
 800ffca:	d008      	beq.n	800ffde <memmove+0x28>
 800ffcc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ffd0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ffd4:	e7f8      	b.n	800ffc8 <memmove+0x12>
 800ffd6:	4402      	add	r2, r0
 800ffd8:	4601      	mov	r1, r0
 800ffda:	428a      	cmp	r2, r1
 800ffdc:	d100      	bne.n	800ffe0 <memmove+0x2a>
 800ffde:	bd10      	pop	{r4, pc}
 800ffe0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ffe4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ffe8:	e7f7      	b.n	800ffda <memmove+0x24>

0800ffea <memset>:
 800ffea:	4402      	add	r2, r0
 800ffec:	4603      	mov	r3, r0
 800ffee:	4293      	cmp	r3, r2
 800fff0:	d100      	bne.n	800fff4 <memset+0xa>
 800fff2:	4770      	bx	lr
 800fff4:	f803 1b01 	strb.w	r1, [r3], #1
 800fff8:	e7f9      	b.n	800ffee <memset+0x4>

0800fffa <strcat>:
 800fffa:	b510      	push	{r4, lr}
 800fffc:	4602      	mov	r2, r0
 800fffe:	7814      	ldrb	r4, [r2, #0]
 8010000:	4613      	mov	r3, r2
 8010002:	3201      	adds	r2, #1
 8010004:	2c00      	cmp	r4, #0
 8010006:	d1fa      	bne.n	800fffe <strcat+0x4>
 8010008:	3b01      	subs	r3, #1
 801000a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801000e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010012:	2a00      	cmp	r2, #0
 8010014:	d1f9      	bne.n	801000a <strcat+0x10>
 8010016:	bd10      	pop	{r4, pc}

08010018 <strncmp>:
 8010018:	b510      	push	{r4, lr}
 801001a:	b16a      	cbz	r2, 8010038 <strncmp+0x20>
 801001c:	3901      	subs	r1, #1
 801001e:	1884      	adds	r4, r0, r2
 8010020:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010024:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010028:	429a      	cmp	r2, r3
 801002a:	d103      	bne.n	8010034 <strncmp+0x1c>
 801002c:	42a0      	cmp	r0, r4
 801002e:	d001      	beq.n	8010034 <strncmp+0x1c>
 8010030:	2a00      	cmp	r2, #0
 8010032:	d1f5      	bne.n	8010020 <strncmp+0x8>
 8010034:	1ad0      	subs	r0, r2, r3
 8010036:	bd10      	pop	{r4, pc}
 8010038:	4610      	mov	r0, r2
 801003a:	e7fc      	b.n	8010036 <strncmp+0x1e>

0801003c <strncpy>:
 801003c:	b510      	push	{r4, lr}
 801003e:	3901      	subs	r1, #1
 8010040:	4603      	mov	r3, r0
 8010042:	b132      	cbz	r2, 8010052 <strncpy+0x16>
 8010044:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010048:	f803 4b01 	strb.w	r4, [r3], #1
 801004c:	3a01      	subs	r2, #1
 801004e:	2c00      	cmp	r4, #0
 8010050:	d1f7      	bne.n	8010042 <strncpy+0x6>
 8010052:	441a      	add	r2, r3
 8010054:	2100      	movs	r1, #0
 8010056:	4293      	cmp	r3, r2
 8010058:	d100      	bne.n	801005c <strncpy+0x20>
 801005a:	bd10      	pop	{r4, pc}
 801005c:	f803 1b01 	strb.w	r1, [r3], #1
 8010060:	e7f9      	b.n	8010056 <strncpy+0x1a>
	...

08010064 <_close_r>:
 8010064:	b538      	push	{r3, r4, r5, lr}
 8010066:	4d06      	ldr	r5, [pc, #24]	@ (8010080 <_close_r+0x1c>)
 8010068:	2300      	movs	r3, #0
 801006a:	4604      	mov	r4, r0
 801006c:	4608      	mov	r0, r1
 801006e:	602b      	str	r3, [r5, #0]
 8010070:	f7f0 ffd2 	bl	8001018 <_close>
 8010074:	1c43      	adds	r3, r0, #1
 8010076:	d102      	bne.n	801007e <_close_r+0x1a>
 8010078:	682b      	ldr	r3, [r5, #0]
 801007a:	b103      	cbz	r3, 801007e <_close_r+0x1a>
 801007c:	6023      	str	r3, [r4, #0]
 801007e:	bd38      	pop	{r3, r4, r5, pc}
 8010080:	20008a68 	.word	0x20008a68

08010084 <_lseek_r>:
 8010084:	b538      	push	{r3, r4, r5, lr}
 8010086:	4d07      	ldr	r5, [pc, #28]	@ (80100a4 <_lseek_r+0x20>)
 8010088:	4604      	mov	r4, r0
 801008a:	4608      	mov	r0, r1
 801008c:	4611      	mov	r1, r2
 801008e:	2200      	movs	r2, #0
 8010090:	602a      	str	r2, [r5, #0]
 8010092:	461a      	mov	r2, r3
 8010094:	f7f0 ffe7 	bl	8001066 <_lseek>
 8010098:	1c43      	adds	r3, r0, #1
 801009a:	d102      	bne.n	80100a2 <_lseek_r+0x1e>
 801009c:	682b      	ldr	r3, [r5, #0]
 801009e:	b103      	cbz	r3, 80100a2 <_lseek_r+0x1e>
 80100a0:	6023      	str	r3, [r4, #0]
 80100a2:	bd38      	pop	{r3, r4, r5, pc}
 80100a4:	20008a68 	.word	0x20008a68

080100a8 <_read_r>:
 80100a8:	b538      	push	{r3, r4, r5, lr}
 80100aa:	4d07      	ldr	r5, [pc, #28]	@ (80100c8 <_read_r+0x20>)
 80100ac:	4604      	mov	r4, r0
 80100ae:	4608      	mov	r0, r1
 80100b0:	4611      	mov	r1, r2
 80100b2:	2200      	movs	r2, #0
 80100b4:	602a      	str	r2, [r5, #0]
 80100b6:	461a      	mov	r2, r3
 80100b8:	f7f0 ff75 	bl	8000fa6 <_read>
 80100bc:	1c43      	adds	r3, r0, #1
 80100be:	d102      	bne.n	80100c6 <_read_r+0x1e>
 80100c0:	682b      	ldr	r3, [r5, #0]
 80100c2:	b103      	cbz	r3, 80100c6 <_read_r+0x1e>
 80100c4:	6023      	str	r3, [r4, #0]
 80100c6:	bd38      	pop	{r3, r4, r5, pc}
 80100c8:	20008a68 	.word	0x20008a68

080100cc <_write_r>:
 80100cc:	b538      	push	{r3, r4, r5, lr}
 80100ce:	4d07      	ldr	r5, [pc, #28]	@ (80100ec <_write_r+0x20>)
 80100d0:	4604      	mov	r4, r0
 80100d2:	4608      	mov	r0, r1
 80100d4:	4611      	mov	r1, r2
 80100d6:	2200      	movs	r2, #0
 80100d8:	602a      	str	r2, [r5, #0]
 80100da:	461a      	mov	r2, r3
 80100dc:	f7f0 ff80 	bl	8000fe0 <_write>
 80100e0:	1c43      	adds	r3, r0, #1
 80100e2:	d102      	bne.n	80100ea <_write_r+0x1e>
 80100e4:	682b      	ldr	r3, [r5, #0]
 80100e6:	b103      	cbz	r3, 80100ea <_write_r+0x1e>
 80100e8:	6023      	str	r3, [r4, #0]
 80100ea:	bd38      	pop	{r3, r4, r5, pc}
 80100ec:	20008a68 	.word	0x20008a68

080100f0 <__libc_init_array>:
 80100f0:	b570      	push	{r4, r5, r6, lr}
 80100f2:	4d0d      	ldr	r5, [pc, #52]	@ (8010128 <__libc_init_array+0x38>)
 80100f4:	4c0d      	ldr	r4, [pc, #52]	@ (801012c <__libc_init_array+0x3c>)
 80100f6:	1b64      	subs	r4, r4, r5
 80100f8:	10a4      	asrs	r4, r4, #2
 80100fa:	2600      	movs	r6, #0
 80100fc:	42a6      	cmp	r6, r4
 80100fe:	d109      	bne.n	8010114 <__libc_init_array+0x24>
 8010100:	4d0b      	ldr	r5, [pc, #44]	@ (8010130 <__libc_init_array+0x40>)
 8010102:	4c0c      	ldr	r4, [pc, #48]	@ (8010134 <__libc_init_array+0x44>)
 8010104:	f000 ffe0 	bl	80110c8 <_init>
 8010108:	1b64      	subs	r4, r4, r5
 801010a:	10a4      	asrs	r4, r4, #2
 801010c:	2600      	movs	r6, #0
 801010e:	42a6      	cmp	r6, r4
 8010110:	d105      	bne.n	801011e <__libc_init_array+0x2e>
 8010112:	bd70      	pop	{r4, r5, r6, pc}
 8010114:	f855 3b04 	ldr.w	r3, [r5], #4
 8010118:	4798      	blx	r3
 801011a:	3601      	adds	r6, #1
 801011c:	e7ee      	b.n	80100fc <__libc_init_array+0xc>
 801011e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010122:	4798      	blx	r3
 8010124:	3601      	adds	r6, #1
 8010126:	e7f2      	b.n	801010e <__libc_init_array+0x1e>
 8010128:	08013d64 	.word	0x08013d64
 801012c:	08013d64 	.word	0x08013d64
 8010130:	08013d64 	.word	0x08013d64
 8010134:	08013d68 	.word	0x08013d68

08010138 <__retarget_lock_init_recursive>:
 8010138:	4770      	bx	lr

0801013a <__retarget_lock_acquire_recursive>:
 801013a:	4770      	bx	lr

0801013c <__retarget_lock_release_recursive>:
 801013c:	4770      	bx	lr

0801013e <strcpy>:
 801013e:	4603      	mov	r3, r0
 8010140:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010144:	f803 2b01 	strb.w	r2, [r3], #1
 8010148:	2a00      	cmp	r2, #0
 801014a:	d1f9      	bne.n	8010140 <strcpy+0x2>
 801014c:	4770      	bx	lr

0801014e <memcpy>:
 801014e:	440a      	add	r2, r1
 8010150:	4291      	cmp	r1, r2
 8010152:	f100 33ff 	add.w	r3, r0, #4294967295
 8010156:	d100      	bne.n	801015a <memcpy+0xc>
 8010158:	4770      	bx	lr
 801015a:	b510      	push	{r4, lr}
 801015c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010160:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010164:	4291      	cmp	r1, r2
 8010166:	d1f9      	bne.n	801015c <memcpy+0xe>
 8010168:	bd10      	pop	{r4, pc}
	...

0801016c <__assert_func>:
 801016c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801016e:	4614      	mov	r4, r2
 8010170:	461a      	mov	r2, r3
 8010172:	4b09      	ldr	r3, [pc, #36]	@ (8010198 <__assert_func+0x2c>)
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	4605      	mov	r5, r0
 8010178:	68d8      	ldr	r0, [r3, #12]
 801017a:	b954      	cbnz	r4, 8010192 <__assert_func+0x26>
 801017c:	4b07      	ldr	r3, [pc, #28]	@ (801019c <__assert_func+0x30>)
 801017e:	461c      	mov	r4, r3
 8010180:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010184:	9100      	str	r1, [sp, #0]
 8010186:	462b      	mov	r3, r5
 8010188:	4905      	ldr	r1, [pc, #20]	@ (80101a0 <__assert_func+0x34>)
 801018a:	f000 fde1 	bl	8010d50 <fiprintf>
 801018e:	f000 fe95 	bl	8010ebc <abort>
 8010192:	4b04      	ldr	r3, [pc, #16]	@ (80101a4 <__assert_func+0x38>)
 8010194:	e7f4      	b.n	8010180 <__assert_func+0x14>
 8010196:	bf00      	nop
 8010198:	20000038 	.word	0x20000038
 801019c:	08013d28 	.word	0x08013d28
 80101a0:	08013cfa 	.word	0x08013cfa
 80101a4:	08013ced 	.word	0x08013ced

080101a8 <_free_r>:
 80101a8:	b538      	push	{r3, r4, r5, lr}
 80101aa:	4605      	mov	r5, r0
 80101ac:	2900      	cmp	r1, #0
 80101ae:	d041      	beq.n	8010234 <_free_r+0x8c>
 80101b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80101b4:	1f0c      	subs	r4, r1, #4
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	bfb8      	it	lt
 80101ba:	18e4      	addlt	r4, r4, r3
 80101bc:	f000 f8e8 	bl	8010390 <__malloc_lock>
 80101c0:	4a1d      	ldr	r2, [pc, #116]	@ (8010238 <_free_r+0x90>)
 80101c2:	6813      	ldr	r3, [r2, #0]
 80101c4:	b933      	cbnz	r3, 80101d4 <_free_r+0x2c>
 80101c6:	6063      	str	r3, [r4, #4]
 80101c8:	6014      	str	r4, [r2, #0]
 80101ca:	4628      	mov	r0, r5
 80101cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80101d0:	f000 b8e4 	b.w	801039c <__malloc_unlock>
 80101d4:	42a3      	cmp	r3, r4
 80101d6:	d908      	bls.n	80101ea <_free_r+0x42>
 80101d8:	6820      	ldr	r0, [r4, #0]
 80101da:	1821      	adds	r1, r4, r0
 80101dc:	428b      	cmp	r3, r1
 80101de:	bf01      	itttt	eq
 80101e0:	6819      	ldreq	r1, [r3, #0]
 80101e2:	685b      	ldreq	r3, [r3, #4]
 80101e4:	1809      	addeq	r1, r1, r0
 80101e6:	6021      	streq	r1, [r4, #0]
 80101e8:	e7ed      	b.n	80101c6 <_free_r+0x1e>
 80101ea:	461a      	mov	r2, r3
 80101ec:	685b      	ldr	r3, [r3, #4]
 80101ee:	b10b      	cbz	r3, 80101f4 <_free_r+0x4c>
 80101f0:	42a3      	cmp	r3, r4
 80101f2:	d9fa      	bls.n	80101ea <_free_r+0x42>
 80101f4:	6811      	ldr	r1, [r2, #0]
 80101f6:	1850      	adds	r0, r2, r1
 80101f8:	42a0      	cmp	r0, r4
 80101fa:	d10b      	bne.n	8010214 <_free_r+0x6c>
 80101fc:	6820      	ldr	r0, [r4, #0]
 80101fe:	4401      	add	r1, r0
 8010200:	1850      	adds	r0, r2, r1
 8010202:	4283      	cmp	r3, r0
 8010204:	6011      	str	r1, [r2, #0]
 8010206:	d1e0      	bne.n	80101ca <_free_r+0x22>
 8010208:	6818      	ldr	r0, [r3, #0]
 801020a:	685b      	ldr	r3, [r3, #4]
 801020c:	6053      	str	r3, [r2, #4]
 801020e:	4408      	add	r0, r1
 8010210:	6010      	str	r0, [r2, #0]
 8010212:	e7da      	b.n	80101ca <_free_r+0x22>
 8010214:	d902      	bls.n	801021c <_free_r+0x74>
 8010216:	230c      	movs	r3, #12
 8010218:	602b      	str	r3, [r5, #0]
 801021a:	e7d6      	b.n	80101ca <_free_r+0x22>
 801021c:	6820      	ldr	r0, [r4, #0]
 801021e:	1821      	adds	r1, r4, r0
 8010220:	428b      	cmp	r3, r1
 8010222:	bf04      	itt	eq
 8010224:	6819      	ldreq	r1, [r3, #0]
 8010226:	685b      	ldreq	r3, [r3, #4]
 8010228:	6063      	str	r3, [r4, #4]
 801022a:	bf04      	itt	eq
 801022c:	1809      	addeq	r1, r1, r0
 801022e:	6021      	streq	r1, [r4, #0]
 8010230:	6054      	str	r4, [r2, #4]
 8010232:	e7ca      	b.n	80101ca <_free_r+0x22>
 8010234:	bd38      	pop	{r3, r4, r5, pc}
 8010236:	bf00      	nop
 8010238:	20008a74 	.word	0x20008a74

0801023c <malloc>:
 801023c:	4b02      	ldr	r3, [pc, #8]	@ (8010248 <malloc+0xc>)
 801023e:	4601      	mov	r1, r0
 8010240:	6818      	ldr	r0, [r3, #0]
 8010242:	f000 b825 	b.w	8010290 <_malloc_r>
 8010246:	bf00      	nop
 8010248:	20000038 	.word	0x20000038

0801024c <sbrk_aligned>:
 801024c:	b570      	push	{r4, r5, r6, lr}
 801024e:	4e0f      	ldr	r6, [pc, #60]	@ (801028c <sbrk_aligned+0x40>)
 8010250:	460c      	mov	r4, r1
 8010252:	6831      	ldr	r1, [r6, #0]
 8010254:	4605      	mov	r5, r0
 8010256:	b911      	cbnz	r1, 801025e <sbrk_aligned+0x12>
 8010258:	f000 fe20 	bl	8010e9c <_sbrk_r>
 801025c:	6030      	str	r0, [r6, #0]
 801025e:	4621      	mov	r1, r4
 8010260:	4628      	mov	r0, r5
 8010262:	f000 fe1b 	bl	8010e9c <_sbrk_r>
 8010266:	1c43      	adds	r3, r0, #1
 8010268:	d103      	bne.n	8010272 <sbrk_aligned+0x26>
 801026a:	f04f 34ff 	mov.w	r4, #4294967295
 801026e:	4620      	mov	r0, r4
 8010270:	bd70      	pop	{r4, r5, r6, pc}
 8010272:	1cc4      	adds	r4, r0, #3
 8010274:	f024 0403 	bic.w	r4, r4, #3
 8010278:	42a0      	cmp	r0, r4
 801027a:	d0f8      	beq.n	801026e <sbrk_aligned+0x22>
 801027c:	1a21      	subs	r1, r4, r0
 801027e:	4628      	mov	r0, r5
 8010280:	f000 fe0c 	bl	8010e9c <_sbrk_r>
 8010284:	3001      	adds	r0, #1
 8010286:	d1f2      	bne.n	801026e <sbrk_aligned+0x22>
 8010288:	e7ef      	b.n	801026a <sbrk_aligned+0x1e>
 801028a:	bf00      	nop
 801028c:	20008a70 	.word	0x20008a70

08010290 <_malloc_r>:
 8010290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010294:	1ccd      	adds	r5, r1, #3
 8010296:	f025 0503 	bic.w	r5, r5, #3
 801029a:	3508      	adds	r5, #8
 801029c:	2d0c      	cmp	r5, #12
 801029e:	bf38      	it	cc
 80102a0:	250c      	movcc	r5, #12
 80102a2:	2d00      	cmp	r5, #0
 80102a4:	4606      	mov	r6, r0
 80102a6:	db01      	blt.n	80102ac <_malloc_r+0x1c>
 80102a8:	42a9      	cmp	r1, r5
 80102aa:	d904      	bls.n	80102b6 <_malloc_r+0x26>
 80102ac:	230c      	movs	r3, #12
 80102ae:	6033      	str	r3, [r6, #0]
 80102b0:	2000      	movs	r0, #0
 80102b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801038c <_malloc_r+0xfc>
 80102ba:	f000 f869 	bl	8010390 <__malloc_lock>
 80102be:	f8d8 3000 	ldr.w	r3, [r8]
 80102c2:	461c      	mov	r4, r3
 80102c4:	bb44      	cbnz	r4, 8010318 <_malloc_r+0x88>
 80102c6:	4629      	mov	r1, r5
 80102c8:	4630      	mov	r0, r6
 80102ca:	f7ff ffbf 	bl	801024c <sbrk_aligned>
 80102ce:	1c43      	adds	r3, r0, #1
 80102d0:	4604      	mov	r4, r0
 80102d2:	d158      	bne.n	8010386 <_malloc_r+0xf6>
 80102d4:	f8d8 4000 	ldr.w	r4, [r8]
 80102d8:	4627      	mov	r7, r4
 80102da:	2f00      	cmp	r7, #0
 80102dc:	d143      	bne.n	8010366 <_malloc_r+0xd6>
 80102de:	2c00      	cmp	r4, #0
 80102e0:	d04b      	beq.n	801037a <_malloc_r+0xea>
 80102e2:	6823      	ldr	r3, [r4, #0]
 80102e4:	4639      	mov	r1, r7
 80102e6:	4630      	mov	r0, r6
 80102e8:	eb04 0903 	add.w	r9, r4, r3
 80102ec:	f000 fdd6 	bl	8010e9c <_sbrk_r>
 80102f0:	4581      	cmp	r9, r0
 80102f2:	d142      	bne.n	801037a <_malloc_r+0xea>
 80102f4:	6821      	ldr	r1, [r4, #0]
 80102f6:	1a6d      	subs	r5, r5, r1
 80102f8:	4629      	mov	r1, r5
 80102fa:	4630      	mov	r0, r6
 80102fc:	f7ff ffa6 	bl	801024c <sbrk_aligned>
 8010300:	3001      	adds	r0, #1
 8010302:	d03a      	beq.n	801037a <_malloc_r+0xea>
 8010304:	6823      	ldr	r3, [r4, #0]
 8010306:	442b      	add	r3, r5
 8010308:	6023      	str	r3, [r4, #0]
 801030a:	f8d8 3000 	ldr.w	r3, [r8]
 801030e:	685a      	ldr	r2, [r3, #4]
 8010310:	bb62      	cbnz	r2, 801036c <_malloc_r+0xdc>
 8010312:	f8c8 7000 	str.w	r7, [r8]
 8010316:	e00f      	b.n	8010338 <_malloc_r+0xa8>
 8010318:	6822      	ldr	r2, [r4, #0]
 801031a:	1b52      	subs	r2, r2, r5
 801031c:	d420      	bmi.n	8010360 <_malloc_r+0xd0>
 801031e:	2a0b      	cmp	r2, #11
 8010320:	d917      	bls.n	8010352 <_malloc_r+0xc2>
 8010322:	1961      	adds	r1, r4, r5
 8010324:	42a3      	cmp	r3, r4
 8010326:	6025      	str	r5, [r4, #0]
 8010328:	bf18      	it	ne
 801032a:	6059      	strne	r1, [r3, #4]
 801032c:	6863      	ldr	r3, [r4, #4]
 801032e:	bf08      	it	eq
 8010330:	f8c8 1000 	streq.w	r1, [r8]
 8010334:	5162      	str	r2, [r4, r5]
 8010336:	604b      	str	r3, [r1, #4]
 8010338:	4630      	mov	r0, r6
 801033a:	f000 f82f 	bl	801039c <__malloc_unlock>
 801033e:	f104 000b 	add.w	r0, r4, #11
 8010342:	1d23      	adds	r3, r4, #4
 8010344:	f020 0007 	bic.w	r0, r0, #7
 8010348:	1ac2      	subs	r2, r0, r3
 801034a:	bf1c      	itt	ne
 801034c:	1a1b      	subne	r3, r3, r0
 801034e:	50a3      	strne	r3, [r4, r2]
 8010350:	e7af      	b.n	80102b2 <_malloc_r+0x22>
 8010352:	6862      	ldr	r2, [r4, #4]
 8010354:	42a3      	cmp	r3, r4
 8010356:	bf0c      	ite	eq
 8010358:	f8c8 2000 	streq.w	r2, [r8]
 801035c:	605a      	strne	r2, [r3, #4]
 801035e:	e7eb      	b.n	8010338 <_malloc_r+0xa8>
 8010360:	4623      	mov	r3, r4
 8010362:	6864      	ldr	r4, [r4, #4]
 8010364:	e7ae      	b.n	80102c4 <_malloc_r+0x34>
 8010366:	463c      	mov	r4, r7
 8010368:	687f      	ldr	r7, [r7, #4]
 801036a:	e7b6      	b.n	80102da <_malloc_r+0x4a>
 801036c:	461a      	mov	r2, r3
 801036e:	685b      	ldr	r3, [r3, #4]
 8010370:	42a3      	cmp	r3, r4
 8010372:	d1fb      	bne.n	801036c <_malloc_r+0xdc>
 8010374:	2300      	movs	r3, #0
 8010376:	6053      	str	r3, [r2, #4]
 8010378:	e7de      	b.n	8010338 <_malloc_r+0xa8>
 801037a:	230c      	movs	r3, #12
 801037c:	6033      	str	r3, [r6, #0]
 801037e:	4630      	mov	r0, r6
 8010380:	f000 f80c 	bl	801039c <__malloc_unlock>
 8010384:	e794      	b.n	80102b0 <_malloc_r+0x20>
 8010386:	6005      	str	r5, [r0, #0]
 8010388:	e7d6      	b.n	8010338 <_malloc_r+0xa8>
 801038a:	bf00      	nop
 801038c:	20008a74 	.word	0x20008a74

08010390 <__malloc_lock>:
 8010390:	4801      	ldr	r0, [pc, #4]	@ (8010398 <__malloc_lock+0x8>)
 8010392:	f7ff bed2 	b.w	801013a <__retarget_lock_acquire_recursive>
 8010396:	bf00      	nop
 8010398:	20008a6c 	.word	0x20008a6c

0801039c <__malloc_unlock>:
 801039c:	4801      	ldr	r0, [pc, #4]	@ (80103a4 <__malloc_unlock+0x8>)
 801039e:	f7ff becd 	b.w	801013c <__retarget_lock_release_recursive>
 80103a2:	bf00      	nop
 80103a4:	20008a6c 	.word	0x20008a6c

080103a8 <__ssputs_r>:
 80103a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103ac:	688e      	ldr	r6, [r1, #8]
 80103ae:	461f      	mov	r7, r3
 80103b0:	42be      	cmp	r6, r7
 80103b2:	680b      	ldr	r3, [r1, #0]
 80103b4:	4682      	mov	sl, r0
 80103b6:	460c      	mov	r4, r1
 80103b8:	4690      	mov	r8, r2
 80103ba:	d82d      	bhi.n	8010418 <__ssputs_r+0x70>
 80103bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80103c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80103c4:	d026      	beq.n	8010414 <__ssputs_r+0x6c>
 80103c6:	6965      	ldr	r5, [r4, #20]
 80103c8:	6909      	ldr	r1, [r1, #16]
 80103ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80103ce:	eba3 0901 	sub.w	r9, r3, r1
 80103d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80103d6:	1c7b      	adds	r3, r7, #1
 80103d8:	444b      	add	r3, r9
 80103da:	106d      	asrs	r5, r5, #1
 80103dc:	429d      	cmp	r5, r3
 80103de:	bf38      	it	cc
 80103e0:	461d      	movcc	r5, r3
 80103e2:	0553      	lsls	r3, r2, #21
 80103e4:	d527      	bpl.n	8010436 <__ssputs_r+0x8e>
 80103e6:	4629      	mov	r1, r5
 80103e8:	f7ff ff52 	bl	8010290 <_malloc_r>
 80103ec:	4606      	mov	r6, r0
 80103ee:	b360      	cbz	r0, 801044a <__ssputs_r+0xa2>
 80103f0:	6921      	ldr	r1, [r4, #16]
 80103f2:	464a      	mov	r2, r9
 80103f4:	f7ff feab 	bl	801014e <memcpy>
 80103f8:	89a3      	ldrh	r3, [r4, #12]
 80103fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80103fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010402:	81a3      	strh	r3, [r4, #12]
 8010404:	6126      	str	r6, [r4, #16]
 8010406:	6165      	str	r5, [r4, #20]
 8010408:	444e      	add	r6, r9
 801040a:	eba5 0509 	sub.w	r5, r5, r9
 801040e:	6026      	str	r6, [r4, #0]
 8010410:	60a5      	str	r5, [r4, #8]
 8010412:	463e      	mov	r6, r7
 8010414:	42be      	cmp	r6, r7
 8010416:	d900      	bls.n	801041a <__ssputs_r+0x72>
 8010418:	463e      	mov	r6, r7
 801041a:	6820      	ldr	r0, [r4, #0]
 801041c:	4632      	mov	r2, r6
 801041e:	4641      	mov	r1, r8
 8010420:	f7ff fdc9 	bl	800ffb6 <memmove>
 8010424:	68a3      	ldr	r3, [r4, #8]
 8010426:	1b9b      	subs	r3, r3, r6
 8010428:	60a3      	str	r3, [r4, #8]
 801042a:	6823      	ldr	r3, [r4, #0]
 801042c:	4433      	add	r3, r6
 801042e:	6023      	str	r3, [r4, #0]
 8010430:	2000      	movs	r0, #0
 8010432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010436:	462a      	mov	r2, r5
 8010438:	f000 fd47 	bl	8010eca <_realloc_r>
 801043c:	4606      	mov	r6, r0
 801043e:	2800      	cmp	r0, #0
 8010440:	d1e0      	bne.n	8010404 <__ssputs_r+0x5c>
 8010442:	6921      	ldr	r1, [r4, #16]
 8010444:	4650      	mov	r0, sl
 8010446:	f7ff feaf 	bl	80101a8 <_free_r>
 801044a:	230c      	movs	r3, #12
 801044c:	f8ca 3000 	str.w	r3, [sl]
 8010450:	89a3      	ldrh	r3, [r4, #12]
 8010452:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010456:	81a3      	strh	r3, [r4, #12]
 8010458:	f04f 30ff 	mov.w	r0, #4294967295
 801045c:	e7e9      	b.n	8010432 <__ssputs_r+0x8a>
	...

08010460 <_svfiprintf_r>:
 8010460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010464:	4698      	mov	r8, r3
 8010466:	898b      	ldrh	r3, [r1, #12]
 8010468:	061b      	lsls	r3, r3, #24
 801046a:	b09d      	sub	sp, #116	@ 0x74
 801046c:	4607      	mov	r7, r0
 801046e:	460d      	mov	r5, r1
 8010470:	4614      	mov	r4, r2
 8010472:	d510      	bpl.n	8010496 <_svfiprintf_r+0x36>
 8010474:	690b      	ldr	r3, [r1, #16]
 8010476:	b973      	cbnz	r3, 8010496 <_svfiprintf_r+0x36>
 8010478:	2140      	movs	r1, #64	@ 0x40
 801047a:	f7ff ff09 	bl	8010290 <_malloc_r>
 801047e:	6028      	str	r0, [r5, #0]
 8010480:	6128      	str	r0, [r5, #16]
 8010482:	b930      	cbnz	r0, 8010492 <_svfiprintf_r+0x32>
 8010484:	230c      	movs	r3, #12
 8010486:	603b      	str	r3, [r7, #0]
 8010488:	f04f 30ff 	mov.w	r0, #4294967295
 801048c:	b01d      	add	sp, #116	@ 0x74
 801048e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010492:	2340      	movs	r3, #64	@ 0x40
 8010494:	616b      	str	r3, [r5, #20]
 8010496:	2300      	movs	r3, #0
 8010498:	9309      	str	r3, [sp, #36]	@ 0x24
 801049a:	2320      	movs	r3, #32
 801049c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80104a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80104a4:	2330      	movs	r3, #48	@ 0x30
 80104a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010644 <_svfiprintf_r+0x1e4>
 80104aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80104ae:	f04f 0901 	mov.w	r9, #1
 80104b2:	4623      	mov	r3, r4
 80104b4:	469a      	mov	sl, r3
 80104b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104ba:	b10a      	cbz	r2, 80104c0 <_svfiprintf_r+0x60>
 80104bc:	2a25      	cmp	r2, #37	@ 0x25
 80104be:	d1f9      	bne.n	80104b4 <_svfiprintf_r+0x54>
 80104c0:	ebba 0b04 	subs.w	fp, sl, r4
 80104c4:	d00b      	beq.n	80104de <_svfiprintf_r+0x7e>
 80104c6:	465b      	mov	r3, fp
 80104c8:	4622      	mov	r2, r4
 80104ca:	4629      	mov	r1, r5
 80104cc:	4638      	mov	r0, r7
 80104ce:	f7ff ff6b 	bl	80103a8 <__ssputs_r>
 80104d2:	3001      	adds	r0, #1
 80104d4:	f000 80a7 	beq.w	8010626 <_svfiprintf_r+0x1c6>
 80104d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80104da:	445a      	add	r2, fp
 80104dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80104de:	f89a 3000 	ldrb.w	r3, [sl]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	f000 809f 	beq.w	8010626 <_svfiprintf_r+0x1c6>
 80104e8:	2300      	movs	r3, #0
 80104ea:	f04f 32ff 	mov.w	r2, #4294967295
 80104ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80104f2:	f10a 0a01 	add.w	sl, sl, #1
 80104f6:	9304      	str	r3, [sp, #16]
 80104f8:	9307      	str	r3, [sp, #28]
 80104fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80104fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8010500:	4654      	mov	r4, sl
 8010502:	2205      	movs	r2, #5
 8010504:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010508:	484e      	ldr	r0, [pc, #312]	@ (8010644 <_svfiprintf_r+0x1e4>)
 801050a:	f7ef feb1 	bl	8000270 <memchr>
 801050e:	9a04      	ldr	r2, [sp, #16]
 8010510:	b9d8      	cbnz	r0, 801054a <_svfiprintf_r+0xea>
 8010512:	06d0      	lsls	r0, r2, #27
 8010514:	bf44      	itt	mi
 8010516:	2320      	movmi	r3, #32
 8010518:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801051c:	0711      	lsls	r1, r2, #28
 801051e:	bf44      	itt	mi
 8010520:	232b      	movmi	r3, #43	@ 0x2b
 8010522:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010526:	f89a 3000 	ldrb.w	r3, [sl]
 801052a:	2b2a      	cmp	r3, #42	@ 0x2a
 801052c:	d015      	beq.n	801055a <_svfiprintf_r+0xfa>
 801052e:	9a07      	ldr	r2, [sp, #28]
 8010530:	4654      	mov	r4, sl
 8010532:	2000      	movs	r0, #0
 8010534:	f04f 0c0a 	mov.w	ip, #10
 8010538:	4621      	mov	r1, r4
 801053a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801053e:	3b30      	subs	r3, #48	@ 0x30
 8010540:	2b09      	cmp	r3, #9
 8010542:	d94b      	bls.n	80105dc <_svfiprintf_r+0x17c>
 8010544:	b1b0      	cbz	r0, 8010574 <_svfiprintf_r+0x114>
 8010546:	9207      	str	r2, [sp, #28]
 8010548:	e014      	b.n	8010574 <_svfiprintf_r+0x114>
 801054a:	eba0 0308 	sub.w	r3, r0, r8
 801054e:	fa09 f303 	lsl.w	r3, r9, r3
 8010552:	4313      	orrs	r3, r2
 8010554:	9304      	str	r3, [sp, #16]
 8010556:	46a2      	mov	sl, r4
 8010558:	e7d2      	b.n	8010500 <_svfiprintf_r+0xa0>
 801055a:	9b03      	ldr	r3, [sp, #12]
 801055c:	1d19      	adds	r1, r3, #4
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	9103      	str	r1, [sp, #12]
 8010562:	2b00      	cmp	r3, #0
 8010564:	bfbb      	ittet	lt
 8010566:	425b      	neglt	r3, r3
 8010568:	f042 0202 	orrlt.w	r2, r2, #2
 801056c:	9307      	strge	r3, [sp, #28]
 801056e:	9307      	strlt	r3, [sp, #28]
 8010570:	bfb8      	it	lt
 8010572:	9204      	strlt	r2, [sp, #16]
 8010574:	7823      	ldrb	r3, [r4, #0]
 8010576:	2b2e      	cmp	r3, #46	@ 0x2e
 8010578:	d10a      	bne.n	8010590 <_svfiprintf_r+0x130>
 801057a:	7863      	ldrb	r3, [r4, #1]
 801057c:	2b2a      	cmp	r3, #42	@ 0x2a
 801057e:	d132      	bne.n	80105e6 <_svfiprintf_r+0x186>
 8010580:	9b03      	ldr	r3, [sp, #12]
 8010582:	1d1a      	adds	r2, r3, #4
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	9203      	str	r2, [sp, #12]
 8010588:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801058c:	3402      	adds	r4, #2
 801058e:	9305      	str	r3, [sp, #20]
 8010590:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010654 <_svfiprintf_r+0x1f4>
 8010594:	7821      	ldrb	r1, [r4, #0]
 8010596:	2203      	movs	r2, #3
 8010598:	4650      	mov	r0, sl
 801059a:	f7ef fe69 	bl	8000270 <memchr>
 801059e:	b138      	cbz	r0, 80105b0 <_svfiprintf_r+0x150>
 80105a0:	9b04      	ldr	r3, [sp, #16]
 80105a2:	eba0 000a 	sub.w	r0, r0, sl
 80105a6:	2240      	movs	r2, #64	@ 0x40
 80105a8:	4082      	lsls	r2, r0
 80105aa:	4313      	orrs	r3, r2
 80105ac:	3401      	adds	r4, #1
 80105ae:	9304      	str	r3, [sp, #16]
 80105b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105b4:	4824      	ldr	r0, [pc, #144]	@ (8010648 <_svfiprintf_r+0x1e8>)
 80105b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80105ba:	2206      	movs	r2, #6
 80105bc:	f7ef fe58 	bl	8000270 <memchr>
 80105c0:	2800      	cmp	r0, #0
 80105c2:	d036      	beq.n	8010632 <_svfiprintf_r+0x1d2>
 80105c4:	4b21      	ldr	r3, [pc, #132]	@ (801064c <_svfiprintf_r+0x1ec>)
 80105c6:	bb1b      	cbnz	r3, 8010610 <_svfiprintf_r+0x1b0>
 80105c8:	9b03      	ldr	r3, [sp, #12]
 80105ca:	3307      	adds	r3, #7
 80105cc:	f023 0307 	bic.w	r3, r3, #7
 80105d0:	3308      	adds	r3, #8
 80105d2:	9303      	str	r3, [sp, #12]
 80105d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105d6:	4433      	add	r3, r6
 80105d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80105da:	e76a      	b.n	80104b2 <_svfiprintf_r+0x52>
 80105dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80105e0:	460c      	mov	r4, r1
 80105e2:	2001      	movs	r0, #1
 80105e4:	e7a8      	b.n	8010538 <_svfiprintf_r+0xd8>
 80105e6:	2300      	movs	r3, #0
 80105e8:	3401      	adds	r4, #1
 80105ea:	9305      	str	r3, [sp, #20]
 80105ec:	4619      	mov	r1, r3
 80105ee:	f04f 0c0a 	mov.w	ip, #10
 80105f2:	4620      	mov	r0, r4
 80105f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80105f8:	3a30      	subs	r2, #48	@ 0x30
 80105fa:	2a09      	cmp	r2, #9
 80105fc:	d903      	bls.n	8010606 <_svfiprintf_r+0x1a6>
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d0c6      	beq.n	8010590 <_svfiprintf_r+0x130>
 8010602:	9105      	str	r1, [sp, #20]
 8010604:	e7c4      	b.n	8010590 <_svfiprintf_r+0x130>
 8010606:	fb0c 2101 	mla	r1, ip, r1, r2
 801060a:	4604      	mov	r4, r0
 801060c:	2301      	movs	r3, #1
 801060e:	e7f0      	b.n	80105f2 <_svfiprintf_r+0x192>
 8010610:	ab03      	add	r3, sp, #12
 8010612:	9300      	str	r3, [sp, #0]
 8010614:	462a      	mov	r2, r5
 8010616:	4b0e      	ldr	r3, [pc, #56]	@ (8010650 <_svfiprintf_r+0x1f0>)
 8010618:	a904      	add	r1, sp, #16
 801061a:	4638      	mov	r0, r7
 801061c:	f3af 8000 	nop.w
 8010620:	1c42      	adds	r2, r0, #1
 8010622:	4606      	mov	r6, r0
 8010624:	d1d6      	bne.n	80105d4 <_svfiprintf_r+0x174>
 8010626:	89ab      	ldrh	r3, [r5, #12]
 8010628:	065b      	lsls	r3, r3, #25
 801062a:	f53f af2d 	bmi.w	8010488 <_svfiprintf_r+0x28>
 801062e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010630:	e72c      	b.n	801048c <_svfiprintf_r+0x2c>
 8010632:	ab03      	add	r3, sp, #12
 8010634:	9300      	str	r3, [sp, #0]
 8010636:	462a      	mov	r2, r5
 8010638:	4b05      	ldr	r3, [pc, #20]	@ (8010650 <_svfiprintf_r+0x1f0>)
 801063a:	a904      	add	r1, sp, #16
 801063c:	4638      	mov	r0, r7
 801063e:	f000 f9bb 	bl	80109b8 <_printf_i>
 8010642:	e7ed      	b.n	8010620 <_svfiprintf_r+0x1c0>
 8010644:	08013d29 	.word	0x08013d29
 8010648:	08013d33 	.word	0x08013d33
 801064c:	00000000 	.word	0x00000000
 8010650:	080103a9 	.word	0x080103a9
 8010654:	08013d2f 	.word	0x08013d2f

08010658 <__sfputc_r>:
 8010658:	6893      	ldr	r3, [r2, #8]
 801065a:	3b01      	subs	r3, #1
 801065c:	2b00      	cmp	r3, #0
 801065e:	b410      	push	{r4}
 8010660:	6093      	str	r3, [r2, #8]
 8010662:	da08      	bge.n	8010676 <__sfputc_r+0x1e>
 8010664:	6994      	ldr	r4, [r2, #24]
 8010666:	42a3      	cmp	r3, r4
 8010668:	db01      	blt.n	801066e <__sfputc_r+0x16>
 801066a:	290a      	cmp	r1, #10
 801066c:	d103      	bne.n	8010676 <__sfputc_r+0x1e>
 801066e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010672:	f000 bb7f 	b.w	8010d74 <__swbuf_r>
 8010676:	6813      	ldr	r3, [r2, #0]
 8010678:	1c58      	adds	r0, r3, #1
 801067a:	6010      	str	r0, [r2, #0]
 801067c:	7019      	strb	r1, [r3, #0]
 801067e:	4608      	mov	r0, r1
 8010680:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010684:	4770      	bx	lr

08010686 <__sfputs_r>:
 8010686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010688:	4606      	mov	r6, r0
 801068a:	460f      	mov	r7, r1
 801068c:	4614      	mov	r4, r2
 801068e:	18d5      	adds	r5, r2, r3
 8010690:	42ac      	cmp	r4, r5
 8010692:	d101      	bne.n	8010698 <__sfputs_r+0x12>
 8010694:	2000      	movs	r0, #0
 8010696:	e007      	b.n	80106a8 <__sfputs_r+0x22>
 8010698:	f814 1b01 	ldrb.w	r1, [r4], #1
 801069c:	463a      	mov	r2, r7
 801069e:	4630      	mov	r0, r6
 80106a0:	f7ff ffda 	bl	8010658 <__sfputc_r>
 80106a4:	1c43      	adds	r3, r0, #1
 80106a6:	d1f3      	bne.n	8010690 <__sfputs_r+0xa>
 80106a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080106ac <_vfiprintf_r>:
 80106ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106b0:	460d      	mov	r5, r1
 80106b2:	b09d      	sub	sp, #116	@ 0x74
 80106b4:	4614      	mov	r4, r2
 80106b6:	4698      	mov	r8, r3
 80106b8:	4606      	mov	r6, r0
 80106ba:	b118      	cbz	r0, 80106c4 <_vfiprintf_r+0x18>
 80106bc:	6a03      	ldr	r3, [r0, #32]
 80106be:	b90b      	cbnz	r3, 80106c4 <_vfiprintf_r+0x18>
 80106c0:	f7ff fbbe 	bl	800fe40 <__sinit>
 80106c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80106c6:	07d9      	lsls	r1, r3, #31
 80106c8:	d405      	bmi.n	80106d6 <_vfiprintf_r+0x2a>
 80106ca:	89ab      	ldrh	r3, [r5, #12]
 80106cc:	059a      	lsls	r2, r3, #22
 80106ce:	d402      	bmi.n	80106d6 <_vfiprintf_r+0x2a>
 80106d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80106d2:	f7ff fd32 	bl	801013a <__retarget_lock_acquire_recursive>
 80106d6:	89ab      	ldrh	r3, [r5, #12]
 80106d8:	071b      	lsls	r3, r3, #28
 80106da:	d501      	bpl.n	80106e0 <_vfiprintf_r+0x34>
 80106dc:	692b      	ldr	r3, [r5, #16]
 80106de:	b99b      	cbnz	r3, 8010708 <_vfiprintf_r+0x5c>
 80106e0:	4629      	mov	r1, r5
 80106e2:	4630      	mov	r0, r6
 80106e4:	f000 fb84 	bl	8010df0 <__swsetup_r>
 80106e8:	b170      	cbz	r0, 8010708 <_vfiprintf_r+0x5c>
 80106ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80106ec:	07dc      	lsls	r4, r3, #31
 80106ee:	d504      	bpl.n	80106fa <_vfiprintf_r+0x4e>
 80106f0:	f04f 30ff 	mov.w	r0, #4294967295
 80106f4:	b01d      	add	sp, #116	@ 0x74
 80106f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106fa:	89ab      	ldrh	r3, [r5, #12]
 80106fc:	0598      	lsls	r0, r3, #22
 80106fe:	d4f7      	bmi.n	80106f0 <_vfiprintf_r+0x44>
 8010700:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010702:	f7ff fd1b 	bl	801013c <__retarget_lock_release_recursive>
 8010706:	e7f3      	b.n	80106f0 <_vfiprintf_r+0x44>
 8010708:	2300      	movs	r3, #0
 801070a:	9309      	str	r3, [sp, #36]	@ 0x24
 801070c:	2320      	movs	r3, #32
 801070e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010712:	f8cd 800c 	str.w	r8, [sp, #12]
 8010716:	2330      	movs	r3, #48	@ 0x30
 8010718:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80108c8 <_vfiprintf_r+0x21c>
 801071c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010720:	f04f 0901 	mov.w	r9, #1
 8010724:	4623      	mov	r3, r4
 8010726:	469a      	mov	sl, r3
 8010728:	f813 2b01 	ldrb.w	r2, [r3], #1
 801072c:	b10a      	cbz	r2, 8010732 <_vfiprintf_r+0x86>
 801072e:	2a25      	cmp	r2, #37	@ 0x25
 8010730:	d1f9      	bne.n	8010726 <_vfiprintf_r+0x7a>
 8010732:	ebba 0b04 	subs.w	fp, sl, r4
 8010736:	d00b      	beq.n	8010750 <_vfiprintf_r+0xa4>
 8010738:	465b      	mov	r3, fp
 801073a:	4622      	mov	r2, r4
 801073c:	4629      	mov	r1, r5
 801073e:	4630      	mov	r0, r6
 8010740:	f7ff ffa1 	bl	8010686 <__sfputs_r>
 8010744:	3001      	adds	r0, #1
 8010746:	f000 80a7 	beq.w	8010898 <_vfiprintf_r+0x1ec>
 801074a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801074c:	445a      	add	r2, fp
 801074e:	9209      	str	r2, [sp, #36]	@ 0x24
 8010750:	f89a 3000 	ldrb.w	r3, [sl]
 8010754:	2b00      	cmp	r3, #0
 8010756:	f000 809f 	beq.w	8010898 <_vfiprintf_r+0x1ec>
 801075a:	2300      	movs	r3, #0
 801075c:	f04f 32ff 	mov.w	r2, #4294967295
 8010760:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010764:	f10a 0a01 	add.w	sl, sl, #1
 8010768:	9304      	str	r3, [sp, #16]
 801076a:	9307      	str	r3, [sp, #28]
 801076c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010770:	931a      	str	r3, [sp, #104]	@ 0x68
 8010772:	4654      	mov	r4, sl
 8010774:	2205      	movs	r2, #5
 8010776:	f814 1b01 	ldrb.w	r1, [r4], #1
 801077a:	4853      	ldr	r0, [pc, #332]	@ (80108c8 <_vfiprintf_r+0x21c>)
 801077c:	f7ef fd78 	bl	8000270 <memchr>
 8010780:	9a04      	ldr	r2, [sp, #16]
 8010782:	b9d8      	cbnz	r0, 80107bc <_vfiprintf_r+0x110>
 8010784:	06d1      	lsls	r1, r2, #27
 8010786:	bf44      	itt	mi
 8010788:	2320      	movmi	r3, #32
 801078a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801078e:	0713      	lsls	r3, r2, #28
 8010790:	bf44      	itt	mi
 8010792:	232b      	movmi	r3, #43	@ 0x2b
 8010794:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010798:	f89a 3000 	ldrb.w	r3, [sl]
 801079c:	2b2a      	cmp	r3, #42	@ 0x2a
 801079e:	d015      	beq.n	80107cc <_vfiprintf_r+0x120>
 80107a0:	9a07      	ldr	r2, [sp, #28]
 80107a2:	4654      	mov	r4, sl
 80107a4:	2000      	movs	r0, #0
 80107a6:	f04f 0c0a 	mov.w	ip, #10
 80107aa:	4621      	mov	r1, r4
 80107ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80107b0:	3b30      	subs	r3, #48	@ 0x30
 80107b2:	2b09      	cmp	r3, #9
 80107b4:	d94b      	bls.n	801084e <_vfiprintf_r+0x1a2>
 80107b6:	b1b0      	cbz	r0, 80107e6 <_vfiprintf_r+0x13a>
 80107b8:	9207      	str	r2, [sp, #28]
 80107ba:	e014      	b.n	80107e6 <_vfiprintf_r+0x13a>
 80107bc:	eba0 0308 	sub.w	r3, r0, r8
 80107c0:	fa09 f303 	lsl.w	r3, r9, r3
 80107c4:	4313      	orrs	r3, r2
 80107c6:	9304      	str	r3, [sp, #16]
 80107c8:	46a2      	mov	sl, r4
 80107ca:	e7d2      	b.n	8010772 <_vfiprintf_r+0xc6>
 80107cc:	9b03      	ldr	r3, [sp, #12]
 80107ce:	1d19      	adds	r1, r3, #4
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	9103      	str	r1, [sp, #12]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	bfbb      	ittet	lt
 80107d8:	425b      	neglt	r3, r3
 80107da:	f042 0202 	orrlt.w	r2, r2, #2
 80107de:	9307      	strge	r3, [sp, #28]
 80107e0:	9307      	strlt	r3, [sp, #28]
 80107e2:	bfb8      	it	lt
 80107e4:	9204      	strlt	r2, [sp, #16]
 80107e6:	7823      	ldrb	r3, [r4, #0]
 80107e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80107ea:	d10a      	bne.n	8010802 <_vfiprintf_r+0x156>
 80107ec:	7863      	ldrb	r3, [r4, #1]
 80107ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80107f0:	d132      	bne.n	8010858 <_vfiprintf_r+0x1ac>
 80107f2:	9b03      	ldr	r3, [sp, #12]
 80107f4:	1d1a      	adds	r2, r3, #4
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	9203      	str	r2, [sp, #12]
 80107fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80107fe:	3402      	adds	r4, #2
 8010800:	9305      	str	r3, [sp, #20]
 8010802:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80108d8 <_vfiprintf_r+0x22c>
 8010806:	7821      	ldrb	r1, [r4, #0]
 8010808:	2203      	movs	r2, #3
 801080a:	4650      	mov	r0, sl
 801080c:	f7ef fd30 	bl	8000270 <memchr>
 8010810:	b138      	cbz	r0, 8010822 <_vfiprintf_r+0x176>
 8010812:	9b04      	ldr	r3, [sp, #16]
 8010814:	eba0 000a 	sub.w	r0, r0, sl
 8010818:	2240      	movs	r2, #64	@ 0x40
 801081a:	4082      	lsls	r2, r0
 801081c:	4313      	orrs	r3, r2
 801081e:	3401      	adds	r4, #1
 8010820:	9304      	str	r3, [sp, #16]
 8010822:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010826:	4829      	ldr	r0, [pc, #164]	@ (80108cc <_vfiprintf_r+0x220>)
 8010828:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801082c:	2206      	movs	r2, #6
 801082e:	f7ef fd1f 	bl	8000270 <memchr>
 8010832:	2800      	cmp	r0, #0
 8010834:	d03f      	beq.n	80108b6 <_vfiprintf_r+0x20a>
 8010836:	4b26      	ldr	r3, [pc, #152]	@ (80108d0 <_vfiprintf_r+0x224>)
 8010838:	bb1b      	cbnz	r3, 8010882 <_vfiprintf_r+0x1d6>
 801083a:	9b03      	ldr	r3, [sp, #12]
 801083c:	3307      	adds	r3, #7
 801083e:	f023 0307 	bic.w	r3, r3, #7
 8010842:	3308      	adds	r3, #8
 8010844:	9303      	str	r3, [sp, #12]
 8010846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010848:	443b      	add	r3, r7
 801084a:	9309      	str	r3, [sp, #36]	@ 0x24
 801084c:	e76a      	b.n	8010724 <_vfiprintf_r+0x78>
 801084e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010852:	460c      	mov	r4, r1
 8010854:	2001      	movs	r0, #1
 8010856:	e7a8      	b.n	80107aa <_vfiprintf_r+0xfe>
 8010858:	2300      	movs	r3, #0
 801085a:	3401      	adds	r4, #1
 801085c:	9305      	str	r3, [sp, #20]
 801085e:	4619      	mov	r1, r3
 8010860:	f04f 0c0a 	mov.w	ip, #10
 8010864:	4620      	mov	r0, r4
 8010866:	f810 2b01 	ldrb.w	r2, [r0], #1
 801086a:	3a30      	subs	r2, #48	@ 0x30
 801086c:	2a09      	cmp	r2, #9
 801086e:	d903      	bls.n	8010878 <_vfiprintf_r+0x1cc>
 8010870:	2b00      	cmp	r3, #0
 8010872:	d0c6      	beq.n	8010802 <_vfiprintf_r+0x156>
 8010874:	9105      	str	r1, [sp, #20]
 8010876:	e7c4      	b.n	8010802 <_vfiprintf_r+0x156>
 8010878:	fb0c 2101 	mla	r1, ip, r1, r2
 801087c:	4604      	mov	r4, r0
 801087e:	2301      	movs	r3, #1
 8010880:	e7f0      	b.n	8010864 <_vfiprintf_r+0x1b8>
 8010882:	ab03      	add	r3, sp, #12
 8010884:	9300      	str	r3, [sp, #0]
 8010886:	462a      	mov	r2, r5
 8010888:	4b12      	ldr	r3, [pc, #72]	@ (80108d4 <_vfiprintf_r+0x228>)
 801088a:	a904      	add	r1, sp, #16
 801088c:	4630      	mov	r0, r6
 801088e:	f3af 8000 	nop.w
 8010892:	4607      	mov	r7, r0
 8010894:	1c78      	adds	r0, r7, #1
 8010896:	d1d6      	bne.n	8010846 <_vfiprintf_r+0x19a>
 8010898:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801089a:	07d9      	lsls	r1, r3, #31
 801089c:	d405      	bmi.n	80108aa <_vfiprintf_r+0x1fe>
 801089e:	89ab      	ldrh	r3, [r5, #12]
 80108a0:	059a      	lsls	r2, r3, #22
 80108a2:	d402      	bmi.n	80108aa <_vfiprintf_r+0x1fe>
 80108a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80108a6:	f7ff fc49 	bl	801013c <__retarget_lock_release_recursive>
 80108aa:	89ab      	ldrh	r3, [r5, #12]
 80108ac:	065b      	lsls	r3, r3, #25
 80108ae:	f53f af1f 	bmi.w	80106f0 <_vfiprintf_r+0x44>
 80108b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80108b4:	e71e      	b.n	80106f4 <_vfiprintf_r+0x48>
 80108b6:	ab03      	add	r3, sp, #12
 80108b8:	9300      	str	r3, [sp, #0]
 80108ba:	462a      	mov	r2, r5
 80108bc:	4b05      	ldr	r3, [pc, #20]	@ (80108d4 <_vfiprintf_r+0x228>)
 80108be:	a904      	add	r1, sp, #16
 80108c0:	4630      	mov	r0, r6
 80108c2:	f000 f879 	bl	80109b8 <_printf_i>
 80108c6:	e7e4      	b.n	8010892 <_vfiprintf_r+0x1e6>
 80108c8:	08013d29 	.word	0x08013d29
 80108cc:	08013d33 	.word	0x08013d33
 80108d0:	00000000 	.word	0x00000000
 80108d4:	08010687 	.word	0x08010687
 80108d8:	08013d2f 	.word	0x08013d2f

080108dc <_printf_common>:
 80108dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108e0:	4616      	mov	r6, r2
 80108e2:	4698      	mov	r8, r3
 80108e4:	688a      	ldr	r2, [r1, #8]
 80108e6:	690b      	ldr	r3, [r1, #16]
 80108e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80108ec:	4293      	cmp	r3, r2
 80108ee:	bfb8      	it	lt
 80108f0:	4613      	movlt	r3, r2
 80108f2:	6033      	str	r3, [r6, #0]
 80108f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80108f8:	4607      	mov	r7, r0
 80108fa:	460c      	mov	r4, r1
 80108fc:	b10a      	cbz	r2, 8010902 <_printf_common+0x26>
 80108fe:	3301      	adds	r3, #1
 8010900:	6033      	str	r3, [r6, #0]
 8010902:	6823      	ldr	r3, [r4, #0]
 8010904:	0699      	lsls	r1, r3, #26
 8010906:	bf42      	ittt	mi
 8010908:	6833      	ldrmi	r3, [r6, #0]
 801090a:	3302      	addmi	r3, #2
 801090c:	6033      	strmi	r3, [r6, #0]
 801090e:	6825      	ldr	r5, [r4, #0]
 8010910:	f015 0506 	ands.w	r5, r5, #6
 8010914:	d106      	bne.n	8010924 <_printf_common+0x48>
 8010916:	f104 0a19 	add.w	sl, r4, #25
 801091a:	68e3      	ldr	r3, [r4, #12]
 801091c:	6832      	ldr	r2, [r6, #0]
 801091e:	1a9b      	subs	r3, r3, r2
 8010920:	42ab      	cmp	r3, r5
 8010922:	dc26      	bgt.n	8010972 <_printf_common+0x96>
 8010924:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010928:	6822      	ldr	r2, [r4, #0]
 801092a:	3b00      	subs	r3, #0
 801092c:	bf18      	it	ne
 801092e:	2301      	movne	r3, #1
 8010930:	0692      	lsls	r2, r2, #26
 8010932:	d42b      	bmi.n	801098c <_printf_common+0xb0>
 8010934:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010938:	4641      	mov	r1, r8
 801093a:	4638      	mov	r0, r7
 801093c:	47c8      	blx	r9
 801093e:	3001      	adds	r0, #1
 8010940:	d01e      	beq.n	8010980 <_printf_common+0xa4>
 8010942:	6823      	ldr	r3, [r4, #0]
 8010944:	6922      	ldr	r2, [r4, #16]
 8010946:	f003 0306 	and.w	r3, r3, #6
 801094a:	2b04      	cmp	r3, #4
 801094c:	bf02      	ittt	eq
 801094e:	68e5      	ldreq	r5, [r4, #12]
 8010950:	6833      	ldreq	r3, [r6, #0]
 8010952:	1aed      	subeq	r5, r5, r3
 8010954:	68a3      	ldr	r3, [r4, #8]
 8010956:	bf0c      	ite	eq
 8010958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801095c:	2500      	movne	r5, #0
 801095e:	4293      	cmp	r3, r2
 8010960:	bfc4      	itt	gt
 8010962:	1a9b      	subgt	r3, r3, r2
 8010964:	18ed      	addgt	r5, r5, r3
 8010966:	2600      	movs	r6, #0
 8010968:	341a      	adds	r4, #26
 801096a:	42b5      	cmp	r5, r6
 801096c:	d11a      	bne.n	80109a4 <_printf_common+0xc8>
 801096e:	2000      	movs	r0, #0
 8010970:	e008      	b.n	8010984 <_printf_common+0xa8>
 8010972:	2301      	movs	r3, #1
 8010974:	4652      	mov	r2, sl
 8010976:	4641      	mov	r1, r8
 8010978:	4638      	mov	r0, r7
 801097a:	47c8      	blx	r9
 801097c:	3001      	adds	r0, #1
 801097e:	d103      	bne.n	8010988 <_printf_common+0xac>
 8010980:	f04f 30ff 	mov.w	r0, #4294967295
 8010984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010988:	3501      	adds	r5, #1
 801098a:	e7c6      	b.n	801091a <_printf_common+0x3e>
 801098c:	18e1      	adds	r1, r4, r3
 801098e:	1c5a      	adds	r2, r3, #1
 8010990:	2030      	movs	r0, #48	@ 0x30
 8010992:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010996:	4422      	add	r2, r4
 8010998:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801099c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80109a0:	3302      	adds	r3, #2
 80109a2:	e7c7      	b.n	8010934 <_printf_common+0x58>
 80109a4:	2301      	movs	r3, #1
 80109a6:	4622      	mov	r2, r4
 80109a8:	4641      	mov	r1, r8
 80109aa:	4638      	mov	r0, r7
 80109ac:	47c8      	blx	r9
 80109ae:	3001      	adds	r0, #1
 80109b0:	d0e6      	beq.n	8010980 <_printf_common+0xa4>
 80109b2:	3601      	adds	r6, #1
 80109b4:	e7d9      	b.n	801096a <_printf_common+0x8e>
	...

080109b8 <_printf_i>:
 80109b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80109bc:	7e0f      	ldrb	r7, [r1, #24]
 80109be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80109c0:	2f78      	cmp	r7, #120	@ 0x78
 80109c2:	4691      	mov	r9, r2
 80109c4:	4680      	mov	r8, r0
 80109c6:	460c      	mov	r4, r1
 80109c8:	469a      	mov	sl, r3
 80109ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80109ce:	d807      	bhi.n	80109e0 <_printf_i+0x28>
 80109d0:	2f62      	cmp	r7, #98	@ 0x62
 80109d2:	d80a      	bhi.n	80109ea <_printf_i+0x32>
 80109d4:	2f00      	cmp	r7, #0
 80109d6:	f000 80d2 	beq.w	8010b7e <_printf_i+0x1c6>
 80109da:	2f58      	cmp	r7, #88	@ 0x58
 80109dc:	f000 80b9 	beq.w	8010b52 <_printf_i+0x19a>
 80109e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80109e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80109e8:	e03a      	b.n	8010a60 <_printf_i+0xa8>
 80109ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80109ee:	2b15      	cmp	r3, #21
 80109f0:	d8f6      	bhi.n	80109e0 <_printf_i+0x28>
 80109f2:	a101      	add	r1, pc, #4	@ (adr r1, 80109f8 <_printf_i+0x40>)
 80109f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80109f8:	08010a51 	.word	0x08010a51
 80109fc:	08010a65 	.word	0x08010a65
 8010a00:	080109e1 	.word	0x080109e1
 8010a04:	080109e1 	.word	0x080109e1
 8010a08:	080109e1 	.word	0x080109e1
 8010a0c:	080109e1 	.word	0x080109e1
 8010a10:	08010a65 	.word	0x08010a65
 8010a14:	080109e1 	.word	0x080109e1
 8010a18:	080109e1 	.word	0x080109e1
 8010a1c:	080109e1 	.word	0x080109e1
 8010a20:	080109e1 	.word	0x080109e1
 8010a24:	08010b65 	.word	0x08010b65
 8010a28:	08010a8f 	.word	0x08010a8f
 8010a2c:	08010b1f 	.word	0x08010b1f
 8010a30:	080109e1 	.word	0x080109e1
 8010a34:	080109e1 	.word	0x080109e1
 8010a38:	08010b87 	.word	0x08010b87
 8010a3c:	080109e1 	.word	0x080109e1
 8010a40:	08010a8f 	.word	0x08010a8f
 8010a44:	080109e1 	.word	0x080109e1
 8010a48:	080109e1 	.word	0x080109e1
 8010a4c:	08010b27 	.word	0x08010b27
 8010a50:	6833      	ldr	r3, [r6, #0]
 8010a52:	1d1a      	adds	r2, r3, #4
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	6032      	str	r2, [r6, #0]
 8010a58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010a5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010a60:	2301      	movs	r3, #1
 8010a62:	e09d      	b.n	8010ba0 <_printf_i+0x1e8>
 8010a64:	6833      	ldr	r3, [r6, #0]
 8010a66:	6820      	ldr	r0, [r4, #0]
 8010a68:	1d19      	adds	r1, r3, #4
 8010a6a:	6031      	str	r1, [r6, #0]
 8010a6c:	0606      	lsls	r6, r0, #24
 8010a6e:	d501      	bpl.n	8010a74 <_printf_i+0xbc>
 8010a70:	681d      	ldr	r5, [r3, #0]
 8010a72:	e003      	b.n	8010a7c <_printf_i+0xc4>
 8010a74:	0645      	lsls	r5, r0, #25
 8010a76:	d5fb      	bpl.n	8010a70 <_printf_i+0xb8>
 8010a78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010a7c:	2d00      	cmp	r5, #0
 8010a7e:	da03      	bge.n	8010a88 <_printf_i+0xd0>
 8010a80:	232d      	movs	r3, #45	@ 0x2d
 8010a82:	426d      	negs	r5, r5
 8010a84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010a88:	4859      	ldr	r0, [pc, #356]	@ (8010bf0 <_printf_i+0x238>)
 8010a8a:	230a      	movs	r3, #10
 8010a8c:	e011      	b.n	8010ab2 <_printf_i+0xfa>
 8010a8e:	6821      	ldr	r1, [r4, #0]
 8010a90:	6833      	ldr	r3, [r6, #0]
 8010a92:	0608      	lsls	r0, r1, #24
 8010a94:	f853 5b04 	ldr.w	r5, [r3], #4
 8010a98:	d402      	bmi.n	8010aa0 <_printf_i+0xe8>
 8010a9a:	0649      	lsls	r1, r1, #25
 8010a9c:	bf48      	it	mi
 8010a9e:	b2ad      	uxthmi	r5, r5
 8010aa0:	2f6f      	cmp	r7, #111	@ 0x6f
 8010aa2:	4853      	ldr	r0, [pc, #332]	@ (8010bf0 <_printf_i+0x238>)
 8010aa4:	6033      	str	r3, [r6, #0]
 8010aa6:	bf14      	ite	ne
 8010aa8:	230a      	movne	r3, #10
 8010aaa:	2308      	moveq	r3, #8
 8010aac:	2100      	movs	r1, #0
 8010aae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010ab2:	6866      	ldr	r6, [r4, #4]
 8010ab4:	60a6      	str	r6, [r4, #8]
 8010ab6:	2e00      	cmp	r6, #0
 8010ab8:	bfa2      	ittt	ge
 8010aba:	6821      	ldrge	r1, [r4, #0]
 8010abc:	f021 0104 	bicge.w	r1, r1, #4
 8010ac0:	6021      	strge	r1, [r4, #0]
 8010ac2:	b90d      	cbnz	r5, 8010ac8 <_printf_i+0x110>
 8010ac4:	2e00      	cmp	r6, #0
 8010ac6:	d04b      	beq.n	8010b60 <_printf_i+0x1a8>
 8010ac8:	4616      	mov	r6, r2
 8010aca:	fbb5 f1f3 	udiv	r1, r5, r3
 8010ace:	fb03 5711 	mls	r7, r3, r1, r5
 8010ad2:	5dc7      	ldrb	r7, [r0, r7]
 8010ad4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010ad8:	462f      	mov	r7, r5
 8010ada:	42bb      	cmp	r3, r7
 8010adc:	460d      	mov	r5, r1
 8010ade:	d9f4      	bls.n	8010aca <_printf_i+0x112>
 8010ae0:	2b08      	cmp	r3, #8
 8010ae2:	d10b      	bne.n	8010afc <_printf_i+0x144>
 8010ae4:	6823      	ldr	r3, [r4, #0]
 8010ae6:	07df      	lsls	r7, r3, #31
 8010ae8:	d508      	bpl.n	8010afc <_printf_i+0x144>
 8010aea:	6923      	ldr	r3, [r4, #16]
 8010aec:	6861      	ldr	r1, [r4, #4]
 8010aee:	4299      	cmp	r1, r3
 8010af0:	bfde      	ittt	le
 8010af2:	2330      	movle	r3, #48	@ 0x30
 8010af4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010af8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010afc:	1b92      	subs	r2, r2, r6
 8010afe:	6122      	str	r2, [r4, #16]
 8010b00:	f8cd a000 	str.w	sl, [sp]
 8010b04:	464b      	mov	r3, r9
 8010b06:	aa03      	add	r2, sp, #12
 8010b08:	4621      	mov	r1, r4
 8010b0a:	4640      	mov	r0, r8
 8010b0c:	f7ff fee6 	bl	80108dc <_printf_common>
 8010b10:	3001      	adds	r0, #1
 8010b12:	d14a      	bne.n	8010baa <_printf_i+0x1f2>
 8010b14:	f04f 30ff 	mov.w	r0, #4294967295
 8010b18:	b004      	add	sp, #16
 8010b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b1e:	6823      	ldr	r3, [r4, #0]
 8010b20:	f043 0320 	orr.w	r3, r3, #32
 8010b24:	6023      	str	r3, [r4, #0]
 8010b26:	4833      	ldr	r0, [pc, #204]	@ (8010bf4 <_printf_i+0x23c>)
 8010b28:	2778      	movs	r7, #120	@ 0x78
 8010b2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010b2e:	6823      	ldr	r3, [r4, #0]
 8010b30:	6831      	ldr	r1, [r6, #0]
 8010b32:	061f      	lsls	r7, r3, #24
 8010b34:	f851 5b04 	ldr.w	r5, [r1], #4
 8010b38:	d402      	bmi.n	8010b40 <_printf_i+0x188>
 8010b3a:	065f      	lsls	r7, r3, #25
 8010b3c:	bf48      	it	mi
 8010b3e:	b2ad      	uxthmi	r5, r5
 8010b40:	6031      	str	r1, [r6, #0]
 8010b42:	07d9      	lsls	r1, r3, #31
 8010b44:	bf44      	itt	mi
 8010b46:	f043 0320 	orrmi.w	r3, r3, #32
 8010b4a:	6023      	strmi	r3, [r4, #0]
 8010b4c:	b11d      	cbz	r5, 8010b56 <_printf_i+0x19e>
 8010b4e:	2310      	movs	r3, #16
 8010b50:	e7ac      	b.n	8010aac <_printf_i+0xf4>
 8010b52:	4827      	ldr	r0, [pc, #156]	@ (8010bf0 <_printf_i+0x238>)
 8010b54:	e7e9      	b.n	8010b2a <_printf_i+0x172>
 8010b56:	6823      	ldr	r3, [r4, #0]
 8010b58:	f023 0320 	bic.w	r3, r3, #32
 8010b5c:	6023      	str	r3, [r4, #0]
 8010b5e:	e7f6      	b.n	8010b4e <_printf_i+0x196>
 8010b60:	4616      	mov	r6, r2
 8010b62:	e7bd      	b.n	8010ae0 <_printf_i+0x128>
 8010b64:	6833      	ldr	r3, [r6, #0]
 8010b66:	6825      	ldr	r5, [r4, #0]
 8010b68:	6961      	ldr	r1, [r4, #20]
 8010b6a:	1d18      	adds	r0, r3, #4
 8010b6c:	6030      	str	r0, [r6, #0]
 8010b6e:	062e      	lsls	r6, r5, #24
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	d501      	bpl.n	8010b78 <_printf_i+0x1c0>
 8010b74:	6019      	str	r1, [r3, #0]
 8010b76:	e002      	b.n	8010b7e <_printf_i+0x1c6>
 8010b78:	0668      	lsls	r0, r5, #25
 8010b7a:	d5fb      	bpl.n	8010b74 <_printf_i+0x1bc>
 8010b7c:	8019      	strh	r1, [r3, #0]
 8010b7e:	2300      	movs	r3, #0
 8010b80:	6123      	str	r3, [r4, #16]
 8010b82:	4616      	mov	r6, r2
 8010b84:	e7bc      	b.n	8010b00 <_printf_i+0x148>
 8010b86:	6833      	ldr	r3, [r6, #0]
 8010b88:	1d1a      	adds	r2, r3, #4
 8010b8a:	6032      	str	r2, [r6, #0]
 8010b8c:	681e      	ldr	r6, [r3, #0]
 8010b8e:	6862      	ldr	r2, [r4, #4]
 8010b90:	2100      	movs	r1, #0
 8010b92:	4630      	mov	r0, r6
 8010b94:	f7ef fb6c 	bl	8000270 <memchr>
 8010b98:	b108      	cbz	r0, 8010b9e <_printf_i+0x1e6>
 8010b9a:	1b80      	subs	r0, r0, r6
 8010b9c:	6060      	str	r0, [r4, #4]
 8010b9e:	6863      	ldr	r3, [r4, #4]
 8010ba0:	6123      	str	r3, [r4, #16]
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010ba8:	e7aa      	b.n	8010b00 <_printf_i+0x148>
 8010baa:	6923      	ldr	r3, [r4, #16]
 8010bac:	4632      	mov	r2, r6
 8010bae:	4649      	mov	r1, r9
 8010bb0:	4640      	mov	r0, r8
 8010bb2:	47d0      	blx	sl
 8010bb4:	3001      	adds	r0, #1
 8010bb6:	d0ad      	beq.n	8010b14 <_printf_i+0x15c>
 8010bb8:	6823      	ldr	r3, [r4, #0]
 8010bba:	079b      	lsls	r3, r3, #30
 8010bbc:	d413      	bmi.n	8010be6 <_printf_i+0x22e>
 8010bbe:	68e0      	ldr	r0, [r4, #12]
 8010bc0:	9b03      	ldr	r3, [sp, #12]
 8010bc2:	4298      	cmp	r0, r3
 8010bc4:	bfb8      	it	lt
 8010bc6:	4618      	movlt	r0, r3
 8010bc8:	e7a6      	b.n	8010b18 <_printf_i+0x160>
 8010bca:	2301      	movs	r3, #1
 8010bcc:	4632      	mov	r2, r6
 8010bce:	4649      	mov	r1, r9
 8010bd0:	4640      	mov	r0, r8
 8010bd2:	47d0      	blx	sl
 8010bd4:	3001      	adds	r0, #1
 8010bd6:	d09d      	beq.n	8010b14 <_printf_i+0x15c>
 8010bd8:	3501      	adds	r5, #1
 8010bda:	68e3      	ldr	r3, [r4, #12]
 8010bdc:	9903      	ldr	r1, [sp, #12]
 8010bde:	1a5b      	subs	r3, r3, r1
 8010be0:	42ab      	cmp	r3, r5
 8010be2:	dcf2      	bgt.n	8010bca <_printf_i+0x212>
 8010be4:	e7eb      	b.n	8010bbe <_printf_i+0x206>
 8010be6:	2500      	movs	r5, #0
 8010be8:	f104 0619 	add.w	r6, r4, #25
 8010bec:	e7f5      	b.n	8010bda <_printf_i+0x222>
 8010bee:	bf00      	nop
 8010bf0:	08013d3a 	.word	0x08013d3a
 8010bf4:	08013d4b 	.word	0x08013d4b

08010bf8 <__sflush_r>:
 8010bf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c00:	0716      	lsls	r6, r2, #28
 8010c02:	4605      	mov	r5, r0
 8010c04:	460c      	mov	r4, r1
 8010c06:	d454      	bmi.n	8010cb2 <__sflush_r+0xba>
 8010c08:	684b      	ldr	r3, [r1, #4]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	dc02      	bgt.n	8010c14 <__sflush_r+0x1c>
 8010c0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	dd48      	ble.n	8010ca6 <__sflush_r+0xae>
 8010c14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010c16:	2e00      	cmp	r6, #0
 8010c18:	d045      	beq.n	8010ca6 <__sflush_r+0xae>
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010c20:	682f      	ldr	r7, [r5, #0]
 8010c22:	6a21      	ldr	r1, [r4, #32]
 8010c24:	602b      	str	r3, [r5, #0]
 8010c26:	d030      	beq.n	8010c8a <__sflush_r+0x92>
 8010c28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010c2a:	89a3      	ldrh	r3, [r4, #12]
 8010c2c:	0759      	lsls	r1, r3, #29
 8010c2e:	d505      	bpl.n	8010c3c <__sflush_r+0x44>
 8010c30:	6863      	ldr	r3, [r4, #4]
 8010c32:	1ad2      	subs	r2, r2, r3
 8010c34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010c36:	b10b      	cbz	r3, 8010c3c <__sflush_r+0x44>
 8010c38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010c3a:	1ad2      	subs	r2, r2, r3
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010c40:	6a21      	ldr	r1, [r4, #32]
 8010c42:	4628      	mov	r0, r5
 8010c44:	47b0      	blx	r6
 8010c46:	1c43      	adds	r3, r0, #1
 8010c48:	89a3      	ldrh	r3, [r4, #12]
 8010c4a:	d106      	bne.n	8010c5a <__sflush_r+0x62>
 8010c4c:	6829      	ldr	r1, [r5, #0]
 8010c4e:	291d      	cmp	r1, #29
 8010c50:	d82b      	bhi.n	8010caa <__sflush_r+0xb2>
 8010c52:	4a2a      	ldr	r2, [pc, #168]	@ (8010cfc <__sflush_r+0x104>)
 8010c54:	410a      	asrs	r2, r1
 8010c56:	07d6      	lsls	r6, r2, #31
 8010c58:	d427      	bmi.n	8010caa <__sflush_r+0xb2>
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	6062      	str	r2, [r4, #4]
 8010c5e:	04d9      	lsls	r1, r3, #19
 8010c60:	6922      	ldr	r2, [r4, #16]
 8010c62:	6022      	str	r2, [r4, #0]
 8010c64:	d504      	bpl.n	8010c70 <__sflush_r+0x78>
 8010c66:	1c42      	adds	r2, r0, #1
 8010c68:	d101      	bne.n	8010c6e <__sflush_r+0x76>
 8010c6a:	682b      	ldr	r3, [r5, #0]
 8010c6c:	b903      	cbnz	r3, 8010c70 <__sflush_r+0x78>
 8010c6e:	6560      	str	r0, [r4, #84]	@ 0x54
 8010c70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010c72:	602f      	str	r7, [r5, #0]
 8010c74:	b1b9      	cbz	r1, 8010ca6 <__sflush_r+0xae>
 8010c76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010c7a:	4299      	cmp	r1, r3
 8010c7c:	d002      	beq.n	8010c84 <__sflush_r+0x8c>
 8010c7e:	4628      	mov	r0, r5
 8010c80:	f7ff fa92 	bl	80101a8 <_free_r>
 8010c84:	2300      	movs	r3, #0
 8010c86:	6363      	str	r3, [r4, #52]	@ 0x34
 8010c88:	e00d      	b.n	8010ca6 <__sflush_r+0xae>
 8010c8a:	2301      	movs	r3, #1
 8010c8c:	4628      	mov	r0, r5
 8010c8e:	47b0      	blx	r6
 8010c90:	4602      	mov	r2, r0
 8010c92:	1c50      	adds	r0, r2, #1
 8010c94:	d1c9      	bne.n	8010c2a <__sflush_r+0x32>
 8010c96:	682b      	ldr	r3, [r5, #0]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d0c6      	beq.n	8010c2a <__sflush_r+0x32>
 8010c9c:	2b1d      	cmp	r3, #29
 8010c9e:	d001      	beq.n	8010ca4 <__sflush_r+0xac>
 8010ca0:	2b16      	cmp	r3, #22
 8010ca2:	d11e      	bne.n	8010ce2 <__sflush_r+0xea>
 8010ca4:	602f      	str	r7, [r5, #0]
 8010ca6:	2000      	movs	r0, #0
 8010ca8:	e022      	b.n	8010cf0 <__sflush_r+0xf8>
 8010caa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010cae:	b21b      	sxth	r3, r3
 8010cb0:	e01b      	b.n	8010cea <__sflush_r+0xf2>
 8010cb2:	690f      	ldr	r7, [r1, #16]
 8010cb4:	2f00      	cmp	r7, #0
 8010cb6:	d0f6      	beq.n	8010ca6 <__sflush_r+0xae>
 8010cb8:	0793      	lsls	r3, r2, #30
 8010cba:	680e      	ldr	r6, [r1, #0]
 8010cbc:	bf08      	it	eq
 8010cbe:	694b      	ldreq	r3, [r1, #20]
 8010cc0:	600f      	str	r7, [r1, #0]
 8010cc2:	bf18      	it	ne
 8010cc4:	2300      	movne	r3, #0
 8010cc6:	eba6 0807 	sub.w	r8, r6, r7
 8010cca:	608b      	str	r3, [r1, #8]
 8010ccc:	f1b8 0f00 	cmp.w	r8, #0
 8010cd0:	dde9      	ble.n	8010ca6 <__sflush_r+0xae>
 8010cd2:	6a21      	ldr	r1, [r4, #32]
 8010cd4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010cd6:	4643      	mov	r3, r8
 8010cd8:	463a      	mov	r2, r7
 8010cda:	4628      	mov	r0, r5
 8010cdc:	47b0      	blx	r6
 8010cde:	2800      	cmp	r0, #0
 8010ce0:	dc08      	bgt.n	8010cf4 <__sflush_r+0xfc>
 8010ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ce6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010cea:	81a3      	strh	r3, [r4, #12]
 8010cec:	f04f 30ff 	mov.w	r0, #4294967295
 8010cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cf4:	4407      	add	r7, r0
 8010cf6:	eba8 0800 	sub.w	r8, r8, r0
 8010cfa:	e7e7      	b.n	8010ccc <__sflush_r+0xd4>
 8010cfc:	dfbffffe 	.word	0xdfbffffe

08010d00 <_fflush_r>:
 8010d00:	b538      	push	{r3, r4, r5, lr}
 8010d02:	690b      	ldr	r3, [r1, #16]
 8010d04:	4605      	mov	r5, r0
 8010d06:	460c      	mov	r4, r1
 8010d08:	b913      	cbnz	r3, 8010d10 <_fflush_r+0x10>
 8010d0a:	2500      	movs	r5, #0
 8010d0c:	4628      	mov	r0, r5
 8010d0e:	bd38      	pop	{r3, r4, r5, pc}
 8010d10:	b118      	cbz	r0, 8010d1a <_fflush_r+0x1a>
 8010d12:	6a03      	ldr	r3, [r0, #32]
 8010d14:	b90b      	cbnz	r3, 8010d1a <_fflush_r+0x1a>
 8010d16:	f7ff f893 	bl	800fe40 <__sinit>
 8010d1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d0f3      	beq.n	8010d0a <_fflush_r+0xa>
 8010d22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010d24:	07d0      	lsls	r0, r2, #31
 8010d26:	d404      	bmi.n	8010d32 <_fflush_r+0x32>
 8010d28:	0599      	lsls	r1, r3, #22
 8010d2a:	d402      	bmi.n	8010d32 <_fflush_r+0x32>
 8010d2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010d2e:	f7ff fa04 	bl	801013a <__retarget_lock_acquire_recursive>
 8010d32:	4628      	mov	r0, r5
 8010d34:	4621      	mov	r1, r4
 8010d36:	f7ff ff5f 	bl	8010bf8 <__sflush_r>
 8010d3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010d3c:	07da      	lsls	r2, r3, #31
 8010d3e:	4605      	mov	r5, r0
 8010d40:	d4e4      	bmi.n	8010d0c <_fflush_r+0xc>
 8010d42:	89a3      	ldrh	r3, [r4, #12]
 8010d44:	059b      	lsls	r3, r3, #22
 8010d46:	d4e1      	bmi.n	8010d0c <_fflush_r+0xc>
 8010d48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010d4a:	f7ff f9f7 	bl	801013c <__retarget_lock_release_recursive>
 8010d4e:	e7dd      	b.n	8010d0c <_fflush_r+0xc>

08010d50 <fiprintf>:
 8010d50:	b40e      	push	{r1, r2, r3}
 8010d52:	b503      	push	{r0, r1, lr}
 8010d54:	4601      	mov	r1, r0
 8010d56:	ab03      	add	r3, sp, #12
 8010d58:	4805      	ldr	r0, [pc, #20]	@ (8010d70 <fiprintf+0x20>)
 8010d5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d5e:	6800      	ldr	r0, [r0, #0]
 8010d60:	9301      	str	r3, [sp, #4]
 8010d62:	f7ff fca3 	bl	80106ac <_vfiprintf_r>
 8010d66:	b002      	add	sp, #8
 8010d68:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d6c:	b003      	add	sp, #12
 8010d6e:	4770      	bx	lr
 8010d70:	20000038 	.word	0x20000038

08010d74 <__swbuf_r>:
 8010d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d76:	460e      	mov	r6, r1
 8010d78:	4614      	mov	r4, r2
 8010d7a:	4605      	mov	r5, r0
 8010d7c:	b118      	cbz	r0, 8010d86 <__swbuf_r+0x12>
 8010d7e:	6a03      	ldr	r3, [r0, #32]
 8010d80:	b90b      	cbnz	r3, 8010d86 <__swbuf_r+0x12>
 8010d82:	f7ff f85d 	bl	800fe40 <__sinit>
 8010d86:	69a3      	ldr	r3, [r4, #24]
 8010d88:	60a3      	str	r3, [r4, #8]
 8010d8a:	89a3      	ldrh	r3, [r4, #12]
 8010d8c:	071a      	lsls	r2, r3, #28
 8010d8e:	d501      	bpl.n	8010d94 <__swbuf_r+0x20>
 8010d90:	6923      	ldr	r3, [r4, #16]
 8010d92:	b943      	cbnz	r3, 8010da6 <__swbuf_r+0x32>
 8010d94:	4621      	mov	r1, r4
 8010d96:	4628      	mov	r0, r5
 8010d98:	f000 f82a 	bl	8010df0 <__swsetup_r>
 8010d9c:	b118      	cbz	r0, 8010da6 <__swbuf_r+0x32>
 8010d9e:	f04f 37ff 	mov.w	r7, #4294967295
 8010da2:	4638      	mov	r0, r7
 8010da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010da6:	6823      	ldr	r3, [r4, #0]
 8010da8:	6922      	ldr	r2, [r4, #16]
 8010daa:	1a98      	subs	r0, r3, r2
 8010dac:	6963      	ldr	r3, [r4, #20]
 8010dae:	b2f6      	uxtb	r6, r6
 8010db0:	4283      	cmp	r3, r0
 8010db2:	4637      	mov	r7, r6
 8010db4:	dc05      	bgt.n	8010dc2 <__swbuf_r+0x4e>
 8010db6:	4621      	mov	r1, r4
 8010db8:	4628      	mov	r0, r5
 8010dba:	f7ff ffa1 	bl	8010d00 <_fflush_r>
 8010dbe:	2800      	cmp	r0, #0
 8010dc0:	d1ed      	bne.n	8010d9e <__swbuf_r+0x2a>
 8010dc2:	68a3      	ldr	r3, [r4, #8]
 8010dc4:	3b01      	subs	r3, #1
 8010dc6:	60a3      	str	r3, [r4, #8]
 8010dc8:	6823      	ldr	r3, [r4, #0]
 8010dca:	1c5a      	adds	r2, r3, #1
 8010dcc:	6022      	str	r2, [r4, #0]
 8010dce:	701e      	strb	r6, [r3, #0]
 8010dd0:	6962      	ldr	r2, [r4, #20]
 8010dd2:	1c43      	adds	r3, r0, #1
 8010dd4:	429a      	cmp	r2, r3
 8010dd6:	d004      	beq.n	8010de2 <__swbuf_r+0x6e>
 8010dd8:	89a3      	ldrh	r3, [r4, #12]
 8010dda:	07db      	lsls	r3, r3, #31
 8010ddc:	d5e1      	bpl.n	8010da2 <__swbuf_r+0x2e>
 8010dde:	2e0a      	cmp	r6, #10
 8010de0:	d1df      	bne.n	8010da2 <__swbuf_r+0x2e>
 8010de2:	4621      	mov	r1, r4
 8010de4:	4628      	mov	r0, r5
 8010de6:	f7ff ff8b 	bl	8010d00 <_fflush_r>
 8010dea:	2800      	cmp	r0, #0
 8010dec:	d0d9      	beq.n	8010da2 <__swbuf_r+0x2e>
 8010dee:	e7d6      	b.n	8010d9e <__swbuf_r+0x2a>

08010df0 <__swsetup_r>:
 8010df0:	b538      	push	{r3, r4, r5, lr}
 8010df2:	4b29      	ldr	r3, [pc, #164]	@ (8010e98 <__swsetup_r+0xa8>)
 8010df4:	4605      	mov	r5, r0
 8010df6:	6818      	ldr	r0, [r3, #0]
 8010df8:	460c      	mov	r4, r1
 8010dfa:	b118      	cbz	r0, 8010e04 <__swsetup_r+0x14>
 8010dfc:	6a03      	ldr	r3, [r0, #32]
 8010dfe:	b90b      	cbnz	r3, 8010e04 <__swsetup_r+0x14>
 8010e00:	f7ff f81e 	bl	800fe40 <__sinit>
 8010e04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e08:	0719      	lsls	r1, r3, #28
 8010e0a:	d422      	bmi.n	8010e52 <__swsetup_r+0x62>
 8010e0c:	06da      	lsls	r2, r3, #27
 8010e0e:	d407      	bmi.n	8010e20 <__swsetup_r+0x30>
 8010e10:	2209      	movs	r2, #9
 8010e12:	602a      	str	r2, [r5, #0]
 8010e14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e18:	81a3      	strh	r3, [r4, #12]
 8010e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8010e1e:	e033      	b.n	8010e88 <__swsetup_r+0x98>
 8010e20:	0758      	lsls	r0, r3, #29
 8010e22:	d512      	bpl.n	8010e4a <__swsetup_r+0x5a>
 8010e24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010e26:	b141      	cbz	r1, 8010e3a <__swsetup_r+0x4a>
 8010e28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010e2c:	4299      	cmp	r1, r3
 8010e2e:	d002      	beq.n	8010e36 <__swsetup_r+0x46>
 8010e30:	4628      	mov	r0, r5
 8010e32:	f7ff f9b9 	bl	80101a8 <_free_r>
 8010e36:	2300      	movs	r3, #0
 8010e38:	6363      	str	r3, [r4, #52]	@ 0x34
 8010e3a:	89a3      	ldrh	r3, [r4, #12]
 8010e3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010e40:	81a3      	strh	r3, [r4, #12]
 8010e42:	2300      	movs	r3, #0
 8010e44:	6063      	str	r3, [r4, #4]
 8010e46:	6923      	ldr	r3, [r4, #16]
 8010e48:	6023      	str	r3, [r4, #0]
 8010e4a:	89a3      	ldrh	r3, [r4, #12]
 8010e4c:	f043 0308 	orr.w	r3, r3, #8
 8010e50:	81a3      	strh	r3, [r4, #12]
 8010e52:	6923      	ldr	r3, [r4, #16]
 8010e54:	b94b      	cbnz	r3, 8010e6a <__swsetup_r+0x7a>
 8010e56:	89a3      	ldrh	r3, [r4, #12]
 8010e58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010e5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010e60:	d003      	beq.n	8010e6a <__swsetup_r+0x7a>
 8010e62:	4621      	mov	r1, r4
 8010e64:	4628      	mov	r0, r5
 8010e66:	f000 f884 	bl	8010f72 <__smakebuf_r>
 8010e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e6e:	f013 0201 	ands.w	r2, r3, #1
 8010e72:	d00a      	beq.n	8010e8a <__swsetup_r+0x9a>
 8010e74:	2200      	movs	r2, #0
 8010e76:	60a2      	str	r2, [r4, #8]
 8010e78:	6962      	ldr	r2, [r4, #20]
 8010e7a:	4252      	negs	r2, r2
 8010e7c:	61a2      	str	r2, [r4, #24]
 8010e7e:	6922      	ldr	r2, [r4, #16]
 8010e80:	b942      	cbnz	r2, 8010e94 <__swsetup_r+0xa4>
 8010e82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010e86:	d1c5      	bne.n	8010e14 <__swsetup_r+0x24>
 8010e88:	bd38      	pop	{r3, r4, r5, pc}
 8010e8a:	0799      	lsls	r1, r3, #30
 8010e8c:	bf58      	it	pl
 8010e8e:	6962      	ldrpl	r2, [r4, #20]
 8010e90:	60a2      	str	r2, [r4, #8]
 8010e92:	e7f4      	b.n	8010e7e <__swsetup_r+0x8e>
 8010e94:	2000      	movs	r0, #0
 8010e96:	e7f7      	b.n	8010e88 <__swsetup_r+0x98>
 8010e98:	20000038 	.word	0x20000038

08010e9c <_sbrk_r>:
 8010e9c:	b538      	push	{r3, r4, r5, lr}
 8010e9e:	4d06      	ldr	r5, [pc, #24]	@ (8010eb8 <_sbrk_r+0x1c>)
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	4604      	mov	r4, r0
 8010ea4:	4608      	mov	r0, r1
 8010ea6:	602b      	str	r3, [r5, #0]
 8010ea8:	f7f0 f8ea 	bl	8001080 <_sbrk>
 8010eac:	1c43      	adds	r3, r0, #1
 8010eae:	d102      	bne.n	8010eb6 <_sbrk_r+0x1a>
 8010eb0:	682b      	ldr	r3, [r5, #0]
 8010eb2:	b103      	cbz	r3, 8010eb6 <_sbrk_r+0x1a>
 8010eb4:	6023      	str	r3, [r4, #0]
 8010eb6:	bd38      	pop	{r3, r4, r5, pc}
 8010eb8:	20008a68 	.word	0x20008a68

08010ebc <abort>:
 8010ebc:	b508      	push	{r3, lr}
 8010ebe:	2006      	movs	r0, #6
 8010ec0:	f000 f8bc 	bl	801103c <raise>
 8010ec4:	2001      	movs	r0, #1
 8010ec6:	f7f0 f863 	bl	8000f90 <_exit>

08010eca <_realloc_r>:
 8010eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ece:	4680      	mov	r8, r0
 8010ed0:	4615      	mov	r5, r2
 8010ed2:	460c      	mov	r4, r1
 8010ed4:	b921      	cbnz	r1, 8010ee0 <_realloc_r+0x16>
 8010ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010eda:	4611      	mov	r1, r2
 8010edc:	f7ff b9d8 	b.w	8010290 <_malloc_r>
 8010ee0:	b92a      	cbnz	r2, 8010eee <_realloc_r+0x24>
 8010ee2:	f7ff f961 	bl	80101a8 <_free_r>
 8010ee6:	2400      	movs	r4, #0
 8010ee8:	4620      	mov	r0, r4
 8010eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010eee:	f000 f8e3 	bl	80110b8 <_malloc_usable_size_r>
 8010ef2:	4285      	cmp	r5, r0
 8010ef4:	4606      	mov	r6, r0
 8010ef6:	d802      	bhi.n	8010efe <_realloc_r+0x34>
 8010ef8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010efc:	d8f4      	bhi.n	8010ee8 <_realloc_r+0x1e>
 8010efe:	4629      	mov	r1, r5
 8010f00:	4640      	mov	r0, r8
 8010f02:	f7ff f9c5 	bl	8010290 <_malloc_r>
 8010f06:	4607      	mov	r7, r0
 8010f08:	2800      	cmp	r0, #0
 8010f0a:	d0ec      	beq.n	8010ee6 <_realloc_r+0x1c>
 8010f0c:	42b5      	cmp	r5, r6
 8010f0e:	462a      	mov	r2, r5
 8010f10:	4621      	mov	r1, r4
 8010f12:	bf28      	it	cs
 8010f14:	4632      	movcs	r2, r6
 8010f16:	f7ff f91a 	bl	801014e <memcpy>
 8010f1a:	4621      	mov	r1, r4
 8010f1c:	4640      	mov	r0, r8
 8010f1e:	f7ff f943 	bl	80101a8 <_free_r>
 8010f22:	463c      	mov	r4, r7
 8010f24:	e7e0      	b.n	8010ee8 <_realloc_r+0x1e>

08010f26 <__swhatbuf_r>:
 8010f26:	b570      	push	{r4, r5, r6, lr}
 8010f28:	460c      	mov	r4, r1
 8010f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f2e:	2900      	cmp	r1, #0
 8010f30:	b096      	sub	sp, #88	@ 0x58
 8010f32:	4615      	mov	r5, r2
 8010f34:	461e      	mov	r6, r3
 8010f36:	da0d      	bge.n	8010f54 <__swhatbuf_r+0x2e>
 8010f38:	89a3      	ldrh	r3, [r4, #12]
 8010f3a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010f3e:	f04f 0100 	mov.w	r1, #0
 8010f42:	bf14      	ite	ne
 8010f44:	2340      	movne	r3, #64	@ 0x40
 8010f46:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010f4a:	2000      	movs	r0, #0
 8010f4c:	6031      	str	r1, [r6, #0]
 8010f4e:	602b      	str	r3, [r5, #0]
 8010f50:	b016      	add	sp, #88	@ 0x58
 8010f52:	bd70      	pop	{r4, r5, r6, pc}
 8010f54:	466a      	mov	r2, sp
 8010f56:	f000 f879 	bl	801104c <_fstat_r>
 8010f5a:	2800      	cmp	r0, #0
 8010f5c:	dbec      	blt.n	8010f38 <__swhatbuf_r+0x12>
 8010f5e:	9901      	ldr	r1, [sp, #4]
 8010f60:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010f64:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010f68:	4259      	negs	r1, r3
 8010f6a:	4159      	adcs	r1, r3
 8010f6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010f70:	e7eb      	b.n	8010f4a <__swhatbuf_r+0x24>

08010f72 <__smakebuf_r>:
 8010f72:	898b      	ldrh	r3, [r1, #12]
 8010f74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010f76:	079d      	lsls	r5, r3, #30
 8010f78:	4606      	mov	r6, r0
 8010f7a:	460c      	mov	r4, r1
 8010f7c:	d507      	bpl.n	8010f8e <__smakebuf_r+0x1c>
 8010f7e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010f82:	6023      	str	r3, [r4, #0]
 8010f84:	6123      	str	r3, [r4, #16]
 8010f86:	2301      	movs	r3, #1
 8010f88:	6163      	str	r3, [r4, #20]
 8010f8a:	b003      	add	sp, #12
 8010f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f8e:	ab01      	add	r3, sp, #4
 8010f90:	466a      	mov	r2, sp
 8010f92:	f7ff ffc8 	bl	8010f26 <__swhatbuf_r>
 8010f96:	9f00      	ldr	r7, [sp, #0]
 8010f98:	4605      	mov	r5, r0
 8010f9a:	4639      	mov	r1, r7
 8010f9c:	4630      	mov	r0, r6
 8010f9e:	f7ff f977 	bl	8010290 <_malloc_r>
 8010fa2:	b948      	cbnz	r0, 8010fb8 <__smakebuf_r+0x46>
 8010fa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010fa8:	059a      	lsls	r2, r3, #22
 8010faa:	d4ee      	bmi.n	8010f8a <__smakebuf_r+0x18>
 8010fac:	f023 0303 	bic.w	r3, r3, #3
 8010fb0:	f043 0302 	orr.w	r3, r3, #2
 8010fb4:	81a3      	strh	r3, [r4, #12]
 8010fb6:	e7e2      	b.n	8010f7e <__smakebuf_r+0xc>
 8010fb8:	89a3      	ldrh	r3, [r4, #12]
 8010fba:	6020      	str	r0, [r4, #0]
 8010fbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010fc0:	81a3      	strh	r3, [r4, #12]
 8010fc2:	9b01      	ldr	r3, [sp, #4]
 8010fc4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010fc8:	b15b      	cbz	r3, 8010fe2 <__smakebuf_r+0x70>
 8010fca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010fce:	4630      	mov	r0, r6
 8010fd0:	f000 f84e 	bl	8011070 <_isatty_r>
 8010fd4:	b128      	cbz	r0, 8010fe2 <__smakebuf_r+0x70>
 8010fd6:	89a3      	ldrh	r3, [r4, #12]
 8010fd8:	f023 0303 	bic.w	r3, r3, #3
 8010fdc:	f043 0301 	orr.w	r3, r3, #1
 8010fe0:	81a3      	strh	r3, [r4, #12]
 8010fe2:	89a3      	ldrh	r3, [r4, #12]
 8010fe4:	431d      	orrs	r5, r3
 8010fe6:	81a5      	strh	r5, [r4, #12]
 8010fe8:	e7cf      	b.n	8010f8a <__smakebuf_r+0x18>

08010fea <_raise_r>:
 8010fea:	291f      	cmp	r1, #31
 8010fec:	b538      	push	{r3, r4, r5, lr}
 8010fee:	4605      	mov	r5, r0
 8010ff0:	460c      	mov	r4, r1
 8010ff2:	d904      	bls.n	8010ffe <_raise_r+0x14>
 8010ff4:	2316      	movs	r3, #22
 8010ff6:	6003      	str	r3, [r0, #0]
 8010ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8010ffc:	bd38      	pop	{r3, r4, r5, pc}
 8010ffe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011000:	b112      	cbz	r2, 8011008 <_raise_r+0x1e>
 8011002:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011006:	b94b      	cbnz	r3, 801101c <_raise_r+0x32>
 8011008:	4628      	mov	r0, r5
 801100a:	f000 f853 	bl	80110b4 <_getpid_r>
 801100e:	4622      	mov	r2, r4
 8011010:	4601      	mov	r1, r0
 8011012:	4628      	mov	r0, r5
 8011014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011018:	f000 b83a 	b.w	8011090 <_kill_r>
 801101c:	2b01      	cmp	r3, #1
 801101e:	d00a      	beq.n	8011036 <_raise_r+0x4c>
 8011020:	1c59      	adds	r1, r3, #1
 8011022:	d103      	bne.n	801102c <_raise_r+0x42>
 8011024:	2316      	movs	r3, #22
 8011026:	6003      	str	r3, [r0, #0]
 8011028:	2001      	movs	r0, #1
 801102a:	e7e7      	b.n	8010ffc <_raise_r+0x12>
 801102c:	2100      	movs	r1, #0
 801102e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011032:	4620      	mov	r0, r4
 8011034:	4798      	blx	r3
 8011036:	2000      	movs	r0, #0
 8011038:	e7e0      	b.n	8010ffc <_raise_r+0x12>
	...

0801103c <raise>:
 801103c:	4b02      	ldr	r3, [pc, #8]	@ (8011048 <raise+0xc>)
 801103e:	4601      	mov	r1, r0
 8011040:	6818      	ldr	r0, [r3, #0]
 8011042:	f7ff bfd2 	b.w	8010fea <_raise_r>
 8011046:	bf00      	nop
 8011048:	20000038 	.word	0x20000038

0801104c <_fstat_r>:
 801104c:	b538      	push	{r3, r4, r5, lr}
 801104e:	4d07      	ldr	r5, [pc, #28]	@ (801106c <_fstat_r+0x20>)
 8011050:	2300      	movs	r3, #0
 8011052:	4604      	mov	r4, r0
 8011054:	4608      	mov	r0, r1
 8011056:	4611      	mov	r1, r2
 8011058:	602b      	str	r3, [r5, #0]
 801105a:	f7ef ffe9 	bl	8001030 <_fstat>
 801105e:	1c43      	adds	r3, r0, #1
 8011060:	d102      	bne.n	8011068 <_fstat_r+0x1c>
 8011062:	682b      	ldr	r3, [r5, #0]
 8011064:	b103      	cbz	r3, 8011068 <_fstat_r+0x1c>
 8011066:	6023      	str	r3, [r4, #0]
 8011068:	bd38      	pop	{r3, r4, r5, pc}
 801106a:	bf00      	nop
 801106c:	20008a68 	.word	0x20008a68

08011070 <_isatty_r>:
 8011070:	b538      	push	{r3, r4, r5, lr}
 8011072:	4d06      	ldr	r5, [pc, #24]	@ (801108c <_isatty_r+0x1c>)
 8011074:	2300      	movs	r3, #0
 8011076:	4604      	mov	r4, r0
 8011078:	4608      	mov	r0, r1
 801107a:	602b      	str	r3, [r5, #0]
 801107c:	f7ef ffe8 	bl	8001050 <_isatty>
 8011080:	1c43      	adds	r3, r0, #1
 8011082:	d102      	bne.n	801108a <_isatty_r+0x1a>
 8011084:	682b      	ldr	r3, [r5, #0]
 8011086:	b103      	cbz	r3, 801108a <_isatty_r+0x1a>
 8011088:	6023      	str	r3, [r4, #0]
 801108a:	bd38      	pop	{r3, r4, r5, pc}
 801108c:	20008a68 	.word	0x20008a68

08011090 <_kill_r>:
 8011090:	b538      	push	{r3, r4, r5, lr}
 8011092:	4d07      	ldr	r5, [pc, #28]	@ (80110b0 <_kill_r+0x20>)
 8011094:	2300      	movs	r3, #0
 8011096:	4604      	mov	r4, r0
 8011098:	4608      	mov	r0, r1
 801109a:	4611      	mov	r1, r2
 801109c:	602b      	str	r3, [r5, #0]
 801109e:	f7ef ff65 	bl	8000f6c <_kill>
 80110a2:	1c43      	adds	r3, r0, #1
 80110a4:	d102      	bne.n	80110ac <_kill_r+0x1c>
 80110a6:	682b      	ldr	r3, [r5, #0]
 80110a8:	b103      	cbz	r3, 80110ac <_kill_r+0x1c>
 80110aa:	6023      	str	r3, [r4, #0]
 80110ac:	bd38      	pop	{r3, r4, r5, pc}
 80110ae:	bf00      	nop
 80110b0:	20008a68 	.word	0x20008a68

080110b4 <_getpid_r>:
 80110b4:	f7ef bf51 	b.w	8000f5a <_getpid>

080110b8 <_malloc_usable_size_r>:
 80110b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80110bc:	1f18      	subs	r0, r3, #4
 80110be:	2b00      	cmp	r3, #0
 80110c0:	bfbc      	itt	lt
 80110c2:	580b      	ldrlt	r3, [r1, r0]
 80110c4:	18c0      	addlt	r0, r0, r3
 80110c6:	4770      	bx	lr

080110c8 <_init>:
 80110c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110ca:	bf00      	nop
 80110cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110ce:	bc08      	pop	{r3}
 80110d0:	469e      	mov	lr, r3
 80110d2:	4770      	bx	lr

080110d4 <_fini>:
 80110d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110d6:	bf00      	nop
 80110d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110da:	bc08      	pop	{r3}
 80110dc:	469e      	mov	lr, r3
 80110de:	4770      	bx	lr
