
UDPServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010998  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bf0  08010b98  08010b98  00011b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013788  08013788  000151c8  2**0
                  CONTENTS
  4 .ARM          00000008  08013788  08013788  00014788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013790  08013790  000151c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013790  08013790  00014790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013794  08013794  00014794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08013798  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  08013820  00015088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  080138c0  00015128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000088b0  200001c8  08013960  000151c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20008a78  08013960  00015a78  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000151c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00021b0e  00000000  00000000  000151f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005a4f  00000000  00000000  00036d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001888  00000000  00000000  0003c758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000137e  00000000  00000000  0003dfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003493c  00000000  00000000  0003f35e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002a69a  00000000  00000000  00073c9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010d116  00000000  00000000  0009e334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001ab44a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006d58  00000000  00000000  001ab490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005a  00000000  00000000  001b21e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001c8 	.word	0x200001c8
 800021c:	00000000 	.word	0x00000000
 8000220:	08010b80 	.word	0x08010b80

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001cc 	.word	0x200001cc
 800023c:	08010b80 	.word	0x08010b80

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <udp_send_message>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

err_t udp_send_message(struct udp_pcb *upcb, const ip_addr_t *addr, u16_t port,
		const char *dataSource) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af00      	add	r7, sp, #0
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	60b9      	str	r1, [r7, #8]
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	4613      	mov	r3, r2
 800060e:	80fb      	strh	r3, [r7, #6]
	// если сокет не создался, то на выход с ошибкой
	if (upcb == NULL) {
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d102      	bne.n	800061c <udp_send_message+0x1c>
		return ERR_ABRT;
 8000616:	f06f 030c 	mvn.w	r3, #12
 800061a:	e039      	b.n	8000690 <udp_send_message+0x90>
	}
	u16_t dataLength = strlen(dataSource) + 1;
 800061c:	6838      	ldr	r0, [r7, #0]
 800061e:	f7ff fe19 	bl	8000254 <strlen>
 8000622:	4603      	mov	r3, r0
 8000624:	b29b      	uxth	r3, r3
 8000626:	3301      	adds	r3, #1
 8000628:	83fb      	strh	r3, [r7, #30]
	// аллоцируем память под буфер с данными
	struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, dataLength, PBUF_RAM);
 800062a:	8bfb      	ldrh	r3, [r7, #30]
 800062c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000630:	4619      	mov	r1, r3
 8000632:	2036      	movs	r0, #54	@ 0x36
 8000634:	f006 fa0c 	bl	8006a50 <pbuf_alloc>
 8000638:	61b8      	str	r0, [r7, #24]
	if (p != NULL) {
 800063a:	69bb      	ldr	r3, [r7, #24]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d026      	beq.n	800068e <udp_send_message+0x8e>
//		if (data == NULL) {
//			return ERR_ABRT;
//		}
//		strncpy(data, dataSource, dataLength);
		// кладём данные в аллоцированный буфер
		err_t err = pbuf_take(p, dataSource, dataLength);
 8000640:	8bfb      	ldrh	r3, [r7, #30]
 8000642:	461a      	mov	r2, r3
 8000644:	6839      	ldr	r1, [r7, #0]
 8000646:	69b8      	ldr	r0, [r7, #24]
 8000648:	f006 ff52 	bl	80074f0 <pbuf_take>
 800064c:	4603      	mov	r3, r0
 800064e:	75fb      	strb	r3, [r7, #23]
		//очистить память от сообщения
		//free(data);
		if (ERR_OK != err) {
 8000650:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d005      	beq.n	8000664 <udp_send_message+0x64>
			// обязательно должны очистить аллоцированную память при ошибке
			pbuf_free(p);
 8000658:	69b8      	ldr	r0, [r7, #24]
 800065a:	f006 fcdd 	bl	8007018 <pbuf_free>
			return err;
 800065e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000662:	e015      	b.n	8000690 <udp_send_message+0x90>
		}
		// отсылаем пакет
		err = udp_sendto(upcb, p, addr, port);
 8000664:	88fb      	ldrh	r3, [r7, #6]
 8000666:	68ba      	ldr	r2, [r7, #8]
 8000668:	69b9      	ldr	r1, [r7, #24]
 800066a:	68f8      	ldr	r0, [r7, #12]
 800066c:	f00c fc68 	bl	800cf40 <udp_sendto>
 8000670:	4603      	mov	r3, r0
 8000672:	75fb      	strb	r3, [r7, #23]
		if (ERR_OK != err) {
 8000674:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d005      	beq.n	8000688 <udp_send_message+0x88>
			// обязательно должны очистить аллоцированную память при ошибке
			pbuf_free(p);
 800067c:	69b8      	ldr	r0, [r7, #24]
 800067e:	f006 fccb 	bl	8007018 <pbuf_free>
			return err;
 8000682:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000686:	e003      	b.n	8000690 <udp_send_message+0x90>
		}
		// очищаем аллоцированную память
		pbuf_free(p);
 8000688:	69b8      	ldr	r0, [r7, #24]
 800068a:	f006 fcc5 	bl	8007018 <pbuf_free>
	}
	return ERR_OK;
 800068e:	2300      	movs	r3, #0
}
 8000690:	4618      	mov	r0, r3
 8000692:	3720      	adds	r7, #32
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <udp_receive_message>:

void udp_receive_message(void *arg, struct udp_pcb *pcb, struct pbuf *p,
		const ip_addr_t *addr, u16_t port) {
 8000698:	b590      	push	{r4, r7, lr}
 800069a:	b0c3      	sub	sp, #268	@ 0x10c
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80006a4:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 80006a8:	6001      	str	r1, [r0, #0]
 80006aa:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 80006ae:	f5a1 7182 	sub.w	r1, r1, #260	@ 0x104
 80006b2:	600a      	str	r2, [r1, #0]
 80006b4:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80006b8:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80006bc:	6013      	str	r3, [r2, #0]
	if (p != NULL) {
 80006be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80006c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	f000 8083 	beq.w	80007d4 <udp_receive_message+0x13c>
		/* send received packet back to sender */
		char received_message[64];
		strncpy(received_message, p->payload, p->len);
 80006ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80006d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	6859      	ldr	r1, [r3, #4]
 80006da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80006de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	895b      	ldrh	r3, [r3, #10]
 80006e6:	461a      	mov	r2, r3
 80006e8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80006ec:	4618      	mov	r0, r3
 80006ee:	f00f fb8f 	bl	800fe10 <strncpy>
		received_message[p->len] = '\0';
 80006f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80006f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	895b      	ldrh	r3, [r3, #10]
 80006fe:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8000702:	443b      	add	r3, r7
 8000704:	2200      	movs	r2, #0
 8000706:	f803 2cd4 	strb.w	r2, [r3, #-212]
		pbuf_free(p);
 800070a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800070e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000712:	6818      	ldr	r0, [r3, #0]
 8000714:	f006 fc80 	bl	8007018 <pbuf_free>

//		u16_t buffer_for_system_info_size = 64;
//		char buffer_for_system_info[buffer_for_system_info_size];
		char answer[128];
		if (strcmp(received_message, "test") == 0) {
 8000718:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800071c:	492f      	ldr	r1, [pc, #188]	@ (80007dc <udp_receive_message+0x144>)
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff fd8e 	bl	8000240 <strcmp>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d108      	bne.n	800073c <udp_receive_message+0xa4>
			strcpy(answer, received_message);
 800072a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800072e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000732:	4611      	mov	r1, r2
 8000734:	4618      	mov	r0, r3
 8000736:	f00f fbec 	bl	800ff12 <strcpy>
 800073a:	e037      	b.n	80007ac <udp_receive_message+0x114>
		} else if (strcmp(received_message, "ip") == 0) {
 800073c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000740:	4927      	ldr	r1, [pc, #156]	@ (80007e0 <udp_receive_message+0x148>)
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff fd7c 	bl	8000240 <strcmp>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d126      	bne.n	800079c <udp_receive_message+0x104>
			char answerIP[] = "ip address: ";
 800074e:	4b25      	ldr	r3, [pc, #148]	@ (80007e4 <udp_receive_message+0x14c>)
 8000750:	f107 04f4 	add.w	r4, r7, #244	@ 0xf4
 8000754:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000756:	c407      	stmia	r4!, {r0, r1, r2}
 8000758:	7023      	strb	r3, [r4, #0]
			char Ip4Adr[32];

			char *ip_client = ipaddr_ntoa_r(addr, Ip4Adr, 32);
 800075a:	f107 0114 	add.w	r1, r7, #20
 800075e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000762:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000766:	2220      	movs	r2, #32
 8000768:	6818      	ldr	r0, [r3, #0]
 800076a:	f00e fa41 	bl	800ebf0 <ip4addr_ntoa_r>
 800076e:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
			if (ip_client == NULL) {
 8000772:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000776:	2b00      	cmp	r3, #0
 8000778:	d02c      	beq.n	80007d4 <udp_receive_message+0x13c>
//			const ip_addr_t *remote_ip = addr;
//			sprintf(Ip4Adr, "%lu.%lu.%lu.%lu", remote_ip->addr & 0xff,
//					(remote_ip->addr >> 8) & 0xff,
//					(remote_ip->addr >> 16) & 0xff, remote_ip->addr >> 24);

			strcat(answerIP, Ip4Adr);
 800077a:	f107 0214 	add.w	r2, r7, #20
 800077e:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8000782:	4611      	mov	r1, r2
 8000784:	4618      	mov	r0, r3
 8000786:	f00f fb34 	bl	800fdf2 <strcat>
			strcpy(answer, answerIP);
 800078a:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 800078e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000792:	4611      	mov	r1, r2
 8000794:	4618      	mov	r0, r3
 8000796:	f00f fbbc 	bl	800ff12 <strcpy>
 800079a:	e007      	b.n	80007ac <udp_receive_message+0x114>
		} else {
			strcpy(answer, "Unknown message");
 800079c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80007a0:	4a11      	ldr	r2, [pc, #68]	@ (80007e8 <udp_receive_message+0x150>)
 80007a2:	461c      	mov	r4, r3
 80007a4:	4613      	mov	r3, r2
 80007a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
		udp_send_message(pcb, addr, port, answer);
 80007ac:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80007b0:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 80007b4:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 80007b8:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 80007bc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80007c0:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 80007c4:	6809      	ldr	r1, [r1, #0]
 80007c6:	6800      	ldr	r0, [r0, #0]
 80007c8:	f7ff ff1a 	bl	8000600 <udp_send_message>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80007cc:	2180      	movs	r1, #128	@ 0x80
 80007ce:	4807      	ldr	r0, [pc, #28]	@ (80007ec <udp_receive_message+0x154>)
 80007d0:	f002 f97d 	bl	8002ace <HAL_GPIO_TogglePin>

	}
}
 80007d4:	f507 7786 	add.w	r7, r7, #268	@ 0x10c
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd90      	pop	{r4, r7, pc}
 80007dc:	08010b98 	.word	0x08010b98
 80007e0:	08010ba0 	.word	0x08010ba0
 80007e4:	08010bb4 	.word	0x08010bb4
 80007e8:	08010ba4 	.word	0x08010ba4
 80007ec:	40020400 	.word	0x40020400

080007f0 <udp_create_socket>:

void udp_create_socket(void) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
	struct udp_pcb *pcb;

	/* get new pcb */
	pcb = udp_new();
 80007f6:	f00c fe01 	bl	800d3fc <udp_new>
 80007fa:	6078      	str	r0, [r7, #4]
	if (pcb == NULL) {
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d00e      	beq.n	8000820 <udp_create_socket+0x30>
		LWIP_DEBUGF(UDP_DEBUG, ("udp_new failed!\n"));
		return;
	}

	/* bind to any IP address on port 3333 */
	if (udp_bind(pcb, IP_ADDR_ANY, 3333) != ERR_OK) {
 8000802:	f640 5205 	movw	r2, #3333	@ 0xd05
 8000806:	4909      	ldr	r1, [pc, #36]	@ (800082c <udp_create_socket+0x3c>)
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f00c fd4f 	bl	800d2ac <udp_bind>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d107      	bne.n	8000824 <udp_create_socket+0x34>
		return;
	}

	/* set udp_echo_recv() as callback function
	 for received packets */
	udp_recv(pcb, udp_receive_message, NULL);
 8000814:	2200      	movs	r2, #0
 8000816:	4906      	ldr	r1, [pc, #24]	@ (8000830 <udp_create_socket+0x40>)
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f00c fdcf 	bl	800d3bc <udp_recv>
 800081e:	e002      	b.n	8000826 <udp_create_socket+0x36>
		return;
 8000820:	bf00      	nop
 8000822:	e000      	b.n	8000826 <udp_create_socket+0x36>
		return;
 8000824:	bf00      	nop
}
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	08013698 	.word	0x08013698
 8000830:	08000699 	.word	0x08000699

08000834 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000838:	f000 fd2a 	bl	8001290 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800083c:	f000 f80e 	bl	800085c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000840:	f000 f8dc 	bl	80009fc <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000844:	f000 f87c 	bl	8000940 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000848:	f000 f8aa 	bl	80009a0 <MX_USB_OTG_FS_PCD_Init>
	MX_LWIP_Init();
 800084c:	f004 fb5a 	bl	8004f04 <MX_LWIP_Init>
	/* USER CODE BEGIN 2 */
	udp_create_socket();
 8000850:	f7ff ffce 	bl	80007f0 <udp_create_socket>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		MX_LWIP_Process();
 8000854:	f004 fc96 	bl	8005184 <MX_LWIP_Process>
 8000858:	e7fc      	b.n	8000854 <main+0x20>
	...

0800085c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b094      	sub	sp, #80	@ 0x50
 8000860:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	2234      	movs	r2, #52	@ 0x34
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f00f fab9 	bl	800fde2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000870:	f107 0308 	add.w	r3, r7, #8
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000880:	f002 fa88 	bl	8002d94 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000884:	4b2c      	ldr	r3, [pc, #176]	@ (8000938 <SystemClock_Config+0xdc>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000888:	4a2b      	ldr	r2, [pc, #172]	@ (8000938 <SystemClock_Config+0xdc>)
 800088a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800088e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000890:	4b29      	ldr	r3, [pc, #164]	@ (8000938 <SystemClock_Config+0xdc>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800089c:	4b27      	ldr	r3, [pc, #156]	@ (800093c <SystemClock_Config+0xe0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008a4:	4a25      	ldr	r2, [pc, #148]	@ (800093c <SystemClock_Config+0xe0>)
 80008a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008aa:	6013      	str	r3, [r2, #0]
 80008ac:	4b23      	ldr	r3, [pc, #140]	@ (800093c <SystemClock_Config+0xe0>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008b4:	603b      	str	r3, [r7, #0]
 80008b6:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b8:	2301      	movs	r3, #1
 80008ba:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008bc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80008c0:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c2:	2302      	movs	r3, #2
 80008c4:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008ca:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 80008cc:	2308      	movs	r3, #8
 80008ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 216;
 80008d0:	23d8      	movs	r3, #216	@ 0xd8
 80008d2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008d4:	2302      	movs	r3, #2
 80008d6:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80008d8:	2304      	movs	r3, #4
 80008da:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80008dc:	2302      	movs	r3, #2
 80008de:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4618      	mov	r0, r3
 80008e6:	f002 fab5 	bl	8002e54 <HAL_RCC_OscConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0x98>
		Error_Handler();
 80008f0:	f000 f926 	bl	8000b40 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80008f4:	f002 fa5e 	bl	8002db4 <HAL_PWREx_EnableOverDrive>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0xa6>
		Error_Handler();
 80008fe:	f000 f91f 	bl	8000b40 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000902:	230f      	movs	r3, #15
 8000904:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000906:	2302      	movs	r3, #2
 8000908:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800090e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000912:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8000918:	f107 0308 	add.w	r3, r7, #8
 800091c:	2103      	movs	r1, #3
 800091e:	4618      	mov	r0, r3
 8000920:	f002 fd46 	bl	80033b0 <HAL_RCC_ClockConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0xd2>
		Error_Handler();
 800092a:	f000 f909 	bl	8000b40 <Error_Handler>
	}
}
 800092e:	bf00      	nop
 8000930:	3750      	adds	r7, #80	@ 0x50
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800
 800093c:	40007000 	.word	0x40007000

08000940 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000944:	4b14      	ldr	r3, [pc, #80]	@ (8000998 <MX_USART3_UART_Init+0x58>)
 8000946:	4a15      	ldr	r2, [pc, #84]	@ (800099c <MX_USART3_UART_Init+0x5c>)
 8000948:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800094a:	4b13      	ldr	r3, [pc, #76]	@ (8000998 <MX_USART3_UART_Init+0x58>)
 800094c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000950:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <MX_USART3_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b0f      	ldr	r3, [pc, #60]	@ (8000998 <MX_USART3_UART_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800095e:	4b0e      	ldr	r3, [pc, #56]	@ (8000998 <MX_USART3_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000964:	4b0c      	ldr	r3, [pc, #48]	@ (8000998 <MX_USART3_UART_Init+0x58>)
 8000966:	220c      	movs	r2, #12
 8000968:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b0b      	ldr	r3, [pc, #44]	@ (8000998 <MX_USART3_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <MX_USART3_UART_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000976:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <MX_USART3_UART_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800097c:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <MX_USART3_UART_Init+0x58>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000982:	4805      	ldr	r0, [pc, #20]	@ (8000998 <MX_USART3_UART_Init+0x58>)
 8000984:	f003 fb62 	bl	800404c <HAL_UART_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_USART3_UART_Init+0x52>
		Error_Handler();
 800098e:	f000 f8d7 	bl	8000b40 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200001e4 	.word	0x200001e4
 800099c:	40004800 	.word	0x40004800

080009a0 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009a4:	4b14      	ldr	r3, [pc, #80]	@ (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80009aa:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009ac:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ae:	2206      	movs	r2, #6
 80009b0:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009b2:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b4:	2202      	movs	r2, #2
 80009b6:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	@ (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009be:	4b0e      	ldr	r3, [pc, #56]	@ (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c0:	2202      	movs	r2, #2
 80009c2:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	@ (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	@ (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009d0:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	625a      	str	r2, [r3, #36]	@ 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009d6:	4b08      	ldr	r3, [pc, #32]	@ (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d8:	2201      	movs	r2, #1
 80009da:	62da      	str	r2, [r3, #44]	@ 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009dc:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 80009e2:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e4:	f002 f88d 	bl	8002b02 <HAL_PCD_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 80009ee:	f000 f8a7 	bl	8000b40 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	2000026c 	.word	0x2000026c

080009fc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08c      	sub	sp, #48	@ 0x30
 8000a00:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a12:	4b47      	ldr	r3, [pc, #284]	@ (8000b30 <MX_GPIO_Init+0x134>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	4a46      	ldr	r2, [pc, #280]	@ (8000b30 <MX_GPIO_Init+0x134>)
 8000a18:	f043 0304 	orr.w	r3, r3, #4
 8000a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1e:	4b44      	ldr	r3, [pc, #272]	@ (8000b30 <MX_GPIO_Init+0x134>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	f003 0304 	and.w	r3, r3, #4
 8000a26:	61bb      	str	r3, [r7, #24]
 8000a28:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2a:	4b41      	ldr	r3, [pc, #260]	@ (8000b30 <MX_GPIO_Init+0x134>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a40      	ldr	r2, [pc, #256]	@ (8000b30 <MX_GPIO_Init+0x134>)
 8000a30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b3e      	ldr	r3, [pc, #248]	@ (8000b30 <MX_GPIO_Init+0x134>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	4b3b      	ldr	r3, [pc, #236]	@ (8000b30 <MX_GPIO_Init+0x134>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a3a      	ldr	r2, [pc, #232]	@ (8000b30 <MX_GPIO_Init+0x134>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b38      	ldr	r3, [pc, #224]	@ (8000b30 <MX_GPIO_Init+0x134>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	4b35      	ldr	r3, [pc, #212]	@ (8000b30 <MX_GPIO_Init+0x134>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a34      	ldr	r2, [pc, #208]	@ (8000b30 <MX_GPIO_Init+0x134>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a66:	4b32      	ldr	r3, [pc, #200]	@ (8000b30 <MX_GPIO_Init+0x134>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000a72:	4b2f      	ldr	r3, [pc, #188]	@ (8000b30 <MX_GPIO_Init+0x134>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	4a2e      	ldr	r2, [pc, #184]	@ (8000b30 <MX_GPIO_Init+0x134>)
 8000a78:	f043 0308 	orr.w	r3, r3, #8
 8000a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7e:	4b2c      	ldr	r3, [pc, #176]	@ (8000b30 <MX_GPIO_Init+0x134>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	f003 0308 	and.w	r3, r3, #8
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000a8a:	4b29      	ldr	r3, [pc, #164]	@ (8000b30 <MX_GPIO_Init+0x134>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	4a28      	ldr	r2, [pc, #160]	@ (8000b30 <MX_GPIO_Init+0x134>)
 8000a90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a96:	4b26      	ldr	r3, [pc, #152]	@ (8000b30 <MX_GPIO_Init+0x134>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000aa8:	4822      	ldr	r0, [pc, #136]	@ (8000b34 <MX_GPIO_Init+0x138>)
 8000aaa:	f001 fff7 	bl	8002a9c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2140      	movs	r1, #64	@ 0x40
 8000ab2:	4821      	ldr	r0, [pc, #132]	@ (8000b38 <MX_GPIO_Init+0x13c>)
 8000ab4:	f001 fff2 	bl	8002a9c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ab8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000abc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000abe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ac2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	481b      	ldr	r0, [pc, #108]	@ (8000b3c <MX_GPIO_Init+0x140>)
 8000ad0:	f001 fe38 	bl	8002744 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8000ad4:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000ad8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ada:	2301      	movs	r3, #1
 8000adc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae6:	f107 031c 	add.w	r3, r7, #28
 8000aea:	4619      	mov	r1, r3
 8000aec:	4811      	ldr	r0, [pc, #68]	@ (8000b34 <MX_GPIO_Init+0x138>)
 8000aee:	f001 fe29 	bl	8002744 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000af2:	2340      	movs	r3, #64	@ 0x40
 8000af4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	480b      	ldr	r0, [pc, #44]	@ (8000b38 <MX_GPIO_Init+0x13c>)
 8000b0a:	f001 fe1b 	bl	8002744 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b0e:	2380      	movs	r3, #128	@ 0x80
 8000b10:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b12:	2300      	movs	r3, #0
 8000b14:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4805      	ldr	r0, [pc, #20]	@ (8000b38 <MX_GPIO_Init+0x13c>)
 8000b22:	f001 fe0f 	bl	8002744 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000b26:	bf00      	nop
 8000b28:	3730      	adds	r7, #48	@ 0x30
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020400 	.word	0x40020400
 8000b38:	40021800 	.word	0x40021800
 8000b3c:	40020800 	.word	0x40020800

08000b40 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <Error_Handler+0x8>

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b56:	4a0e      	ldr	r2, [pc, #56]	@ (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6e:	4a08      	ldr	r2, [pc, #32]	@ (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b0ae      	sub	sp, #184	@ 0xb8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2290      	movs	r2, #144	@ 0x90
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f00f f914 	bl	800fde2 <memset>
  if(huart->Instance==USART3)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a22      	ldr	r2, [pc, #136]	@ (8000c48 <HAL_UART_MspInit+0xb4>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d13c      	bne.n	8000c3e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000bc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bc8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f002 fe12 	bl	80037fc <HAL_RCCEx_PeriphCLKConfig>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bde:	f7ff ffaf 	bl	8000b40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000be2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c4c <HAL_UART_MspInit+0xb8>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be6:	4a19      	ldr	r2, [pc, #100]	@ (8000c4c <HAL_UART_MspInit+0xb8>)
 8000be8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bee:	4b17      	ldr	r3, [pc, #92]	@ (8000c4c <HAL_UART_MspInit+0xb8>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfa:	4b14      	ldr	r3, [pc, #80]	@ (8000c4c <HAL_UART_MspInit+0xb8>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	4a13      	ldr	r2, [pc, #76]	@ (8000c4c <HAL_UART_MspInit+0xb8>)
 8000c00:	f043 0308 	orr.w	r3, r3, #8
 8000c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c06:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <HAL_UART_MspInit+0xb8>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	f003 0308 	and.w	r3, r3, #8
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c12:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c2c:	2307      	movs	r3, #7
 8000c2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c32:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c36:	4619      	mov	r1, r3
 8000c38:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <HAL_UART_MspInit+0xbc>)
 8000c3a:	f001 fd83 	bl	8002744 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c3e:	bf00      	nop
 8000c40:	37b8      	adds	r7, #184	@ 0xb8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40004800 	.word	0x40004800
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020c00 	.word	0x40020c00

08000c54 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b0ae      	sub	sp, #184	@ 0xb8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	2290      	movs	r2, #144	@ 0x90
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f00f f8b4 	bl	800fde2 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c82:	d166      	bne.n	8000d52 <HAL_PCD_MspInit+0xfe>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000c84:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000c88:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000c8a:	23c0      	movs	r3, #192	@ 0xc0
 8000c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000c92:	2302      	movs	r3, #2
 8000c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8000c96:	2301      	movs	r3, #1
 8000c98:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000ca2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000ca6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f002 fda4 	bl	80037fc <HAL_RCCEx_PeriphCLKConfig>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_PCD_MspInit+0x6a>
    {
      Error_Handler();
 8000cba:	f7ff ff41 	bl	8000b40 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	4b27      	ldr	r3, [pc, #156]	@ (8000d5c <HAL_PCD_MspInit+0x108>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	4a26      	ldr	r2, [pc, #152]	@ (8000d5c <HAL_PCD_MspInit+0x108>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cca:	4b24      	ldr	r3, [pc, #144]	@ (8000d5c <HAL_PCD_MspInit+0x108>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cd6:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000cda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cea:	2303      	movs	r3, #3
 8000cec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cf0:	230a      	movs	r3, #10
 8000cf2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4818      	ldr	r0, [pc, #96]	@ (8000d60 <HAL_PCD_MspInit+0x10c>)
 8000cfe:	f001 fd21 	bl	8002744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d16:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4810      	ldr	r0, [pc, #64]	@ (8000d60 <HAL_PCD_MspInit+0x10c>)
 8000d1e:	f001 fd11 	bl	8002744 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d22:	4b0e      	ldr	r3, [pc, #56]	@ (8000d5c <HAL_PCD_MspInit+0x108>)
 8000d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d26:	4a0d      	ldr	r2, [pc, #52]	@ (8000d5c <HAL_PCD_MspInit+0x108>)
 8000d28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d2c:	6353      	str	r3, [r2, #52]	@ 0x34
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d5c <HAL_PCD_MspInit+0x108>)
 8000d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <HAL_PCD_MspInit+0x108>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3e:	4a07      	ldr	r2, [pc, #28]	@ (8000d5c <HAL_PCD_MspInit+0x108>)
 8000d40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d46:	4b05      	ldr	r3, [pc, #20]	@ (8000d5c <HAL_PCD_MspInit+0x108>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d52:	bf00      	nop
 8000d54:	37b8      	adds	r7, #184	@ 0xb8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020000 	.word	0x40020000

08000d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <NMI_Handler+0x4>

08000d6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <BusFault_Handler+0x4>

08000d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <UsageFault_Handler+0x4>

08000d8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dba:	f000 faa7 	bl	800130c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  return 1;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
	...

08000dd4 <_kill>:

int _kill(int pid, int sig)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000dde:	4b05      	ldr	r3, [pc, #20]	@ (8000df4 <_kill+0x20>)
 8000de0:	2216      	movs	r2, #22
 8000de2:	601a      	str	r2, [r3, #0]
  return -1;
 8000de4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	20008a68 	.word	0x20008a68

08000df8 <_exit>:

void _exit (int status)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e00:	f04f 31ff 	mov.w	r1, #4294967295
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ffe5 	bl	8000dd4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e0a:	bf00      	nop
 8000e0c:	e7fd      	b.n	8000e0a <_exit+0x12>

08000e0e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b086      	sub	sp, #24
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	60f8      	str	r0, [r7, #12]
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	e00a      	b.n	8000e36 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e20:	f3af 8000 	nop.w
 8000e24:	4601      	mov	r1, r0
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	1c5a      	adds	r2, r3, #1
 8000e2a:	60ba      	str	r2, [r7, #8]
 8000e2c:	b2ca      	uxtb	r2, r1
 8000e2e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	3301      	adds	r3, #1
 8000e34:	617b      	str	r3, [r7, #20]
 8000e36:	697a      	ldr	r2, [r7, #20]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	dbf0      	blt.n	8000e20 <_read+0x12>
  }

  return len;
 8000e3e:	687b      	ldr	r3, [r7, #4]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	e009      	b.n	8000e6e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	1c5a      	adds	r2, r3, #1
 8000e5e:	60ba      	str	r2, [r7, #8]
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	dbf1      	blt.n	8000e5a <_write+0x12>
  }
  return len;
 8000e76:	687b      	ldr	r3, [r7, #4]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <_close>:

int _close(int file)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ea8:	605a      	str	r2, [r3, #4]
  return 0;
 8000eaa:	2300      	movs	r3, #0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <_isatty>:

int _isatty(int file)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ec0:	2301      	movs	r3, #1
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b085      	sub	sp, #20
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	60f8      	str	r0, [r7, #12]
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b087      	sub	sp, #28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef0:	4a14      	ldr	r2, [pc, #80]	@ (8000f44 <_sbrk+0x5c>)
 8000ef2:	4b15      	ldr	r3, [pc, #84]	@ (8000f48 <_sbrk+0x60>)
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000efc:	4b13      	ldr	r3, [pc, #76]	@ (8000f4c <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d102      	bne.n	8000f0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f04:	4b11      	ldr	r3, [pc, #68]	@ (8000f4c <_sbrk+0x64>)
 8000f06:	4a12      	ldr	r2, [pc, #72]	@ (8000f50 <_sbrk+0x68>)
 8000f08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f0a:	4b10      	ldr	r3, [pc, #64]	@ (8000f4c <_sbrk+0x64>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d205      	bcs.n	8000f24 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000f18:	4b0e      	ldr	r3, [pc, #56]	@ (8000f54 <_sbrk+0x6c>)
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f22:	e009      	b.n	8000f38 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f24:	4b09      	ldr	r3, [pc, #36]	@ (8000f4c <_sbrk+0x64>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f2a:	4b08      	ldr	r3, [pc, #32]	@ (8000f4c <_sbrk+0x64>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	4a06      	ldr	r2, [pc, #24]	@ (8000f4c <_sbrk+0x64>)
 8000f34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f36:	68fb      	ldr	r3, [r7, #12]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	371c      	adds	r7, #28
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	20080000 	.word	0x20080000
 8000f48:	00000400 	.word	0x00000400
 8000f4c:	20000774 	.word	0x20000774
 8000f50:	20008a78 	.word	0x20008a78
 8000f54:	20008a68 	.word	0x20008a68

08000f58 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f5c:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <SystemInit+0x20>)
 8000f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f62:	4a05      	ldr	r2, [pc, #20]	@ (8000f78 <SystemInit+0x20>)
 8000f64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f80:	480d      	ldr	r0, [pc, #52]	@ (8000fb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f82:	490e      	ldr	r1, [pc, #56]	@ (8000fbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f84:	4a0e      	ldr	r2, [pc, #56]	@ (8000fc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f88:	e002      	b.n	8000f90 <LoopCopyDataInit>

08000f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8e:	3304      	adds	r3, #4

08000f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f94:	d3f9      	bcc.n	8000f8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f96:	4a0b      	ldr	r2, [pc, #44]	@ (8000fc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f98:	4c0b      	ldr	r4, [pc, #44]	@ (8000fc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f9c:	e001      	b.n	8000fa2 <LoopFillZerobss>

08000f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa0:	3204      	adds	r2, #4

08000fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa4:	d3fb      	bcc.n	8000f9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fa6:	f7ff ffd7 	bl	8000f58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000faa:	f00e ff8b 	bl	800fec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fae:	f7ff fc41 	bl	8000834 <main>
  bx  lr    
 8000fb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fb4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000fb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fbc:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000fc0:	08013798 	.word	0x08013798
  ldr r2, =_sbss
 8000fc4:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8000fc8:	20008a78 	.word	0x20008a78

08000fcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fcc:	e7fe      	b.n	8000fcc <ADC_IRQHandler>

08000fce <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
 8000fd6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d00b      	beq.n	8000ff6 <LAN8742_RegisterBusIO+0x28>
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d007      	beq.n	8000ff6 <LAN8742_RegisterBusIO+0x28>
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <LAN8742_RegisterBusIO+0x28>
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d102      	bne.n	8000ffc <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	e014      	b.n	8001026 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685a      	ldr	r2, [r3, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	68da      	ldr	r2, [r3, #12]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	691a      	ldr	r2, [r3, #16]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001032:	b580      	push	{r7, lr}
 8001034:	b086      	sub	sp, #24
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	2300      	movs	r3, #0
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d17c      	bne.n	800114c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d002      	beq.n	8001060 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2220      	movs	r2, #32
 8001064:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
 800106a:	e01c      	b.n	80010a6 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	f107 0208 	add.w	r2, r7, #8
 8001074:	2112      	movs	r1, #18
 8001076:	6978      	ldr	r0, [r7, #20]
 8001078:	4798      	blx	r3
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	da03      	bge.n	8001088 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001080:	f06f 0304 	mvn.w	r3, #4
 8001084:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001086:	e00b      	b.n	80010a0 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	f003 031f 	and.w	r3, r3, #31
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	429a      	cmp	r2, r3
 8001092:	d105      	bne.n	80010a0 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
         break;
 800109e:	e005      	b.n	80010ac <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	3301      	adds	r3, #1
 80010a4:	617b      	str	r3, [r7, #20]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	2b1f      	cmp	r3, #31
 80010aa:	d9df      	bls.n	800106c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b1f      	cmp	r3, #31
 80010b2:	d902      	bls.n	80010ba <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80010b4:	f06f 0302 	mvn.w	r3, #2
 80010b8:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d145      	bne.n	800114c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	6810      	ldr	r0, [r2, #0]
 80010c8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80010cc:	2100      	movs	r1, #0
 80010ce:	4798      	blx	r3
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	db37      	blt.n	8001146 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	6810      	ldr	r0, [r2, #0]
 80010de:	f107 0208 	add.w	r2, r7, #8
 80010e2:	2100      	movs	r1, #0
 80010e4:	4798      	blx	r3
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	db28      	blt.n	800113e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4798      	blx	r3
 80010f2:	4603      	mov	r3, r0
 80010f4:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80010f6:	e01c      	b.n	8001132 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	4798      	blx	r3
 80010fe:	4603      	mov	r3, r0
 8001100:	461a      	mov	r2, r3
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800110a:	d80e      	bhi.n	800112a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	695b      	ldr	r3, [r3, #20]
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	6810      	ldr	r0, [r2, #0]
 8001114:	f107 0208 	add.w	r2, r7, #8
 8001118:	2100      	movs	r1, #0
 800111a:	4798      	blx	r3
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	da07      	bge.n	8001132 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001122:	f06f 0304 	mvn.w	r3, #4
 8001126:	613b      	str	r3, [r7, #16]
                 break;
 8001128:	e010      	b.n	800114c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800112a:	f06f 0301 	mvn.w	r3, #1
 800112e:	613b      	str	r3, [r7, #16]
               break;
 8001130:	e00c      	b.n	800114c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1dd      	bne.n	80010f8 <LAN8742_Init+0xc6>
 800113c:	e006      	b.n	800114c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800113e:	f06f 0304 	mvn.w	r3, #4
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	e002      	b.n	800114c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001146:	f06f 0303 	mvn.w	r3, #3
 800114a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d112      	bne.n	8001178 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	4798      	blx	r3
 8001158:	4603      	mov	r3, r0
 800115a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800115c:	bf00      	nop
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	4798      	blx	r3
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001170:	d9f5      	bls.n	800115e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2201      	movs	r2, #1
 8001176:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001178:	693b      	ldr	r3, [r7, #16]
 }
 800117a:	4618      	mov	r0, r3
 800117c:	3718      	adds	r7, #24
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b084      	sub	sp, #16
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	6810      	ldr	r0, [r2, #0]
 8001196:	f107 020c 	add.w	r2, r7, #12
 800119a:	2101      	movs	r1, #1
 800119c:	4798      	blx	r3
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	da02      	bge.n	80011aa <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80011a4:	f06f 0304 	mvn.w	r3, #4
 80011a8:	e06e      	b.n	8001288 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	6810      	ldr	r0, [r2, #0]
 80011b2:	f107 020c 	add.w	r2, r7, #12
 80011b6:	2101      	movs	r1, #1
 80011b8:	4798      	blx	r3
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	da02      	bge.n	80011c6 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80011c0:	f06f 0304 	mvn.w	r3, #4
 80011c4:	e060      	b.n	8001288 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f003 0304 	and.w	r3, r3, #4
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d101      	bne.n	80011d4 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80011d0:	2301      	movs	r3, #1
 80011d2:	e059      	b.n	8001288 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	695b      	ldr	r3, [r3, #20]
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	6810      	ldr	r0, [r2, #0]
 80011dc:	f107 020c 	add.w	r2, r7, #12
 80011e0:	2100      	movs	r1, #0
 80011e2:	4798      	blx	r3
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	da02      	bge.n	80011f0 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80011ea:	f06f 0304 	mvn.w	r3, #4
 80011ee:	e04b      	b.n	8001288 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d11b      	bne.n	8001232 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d006      	beq.n	8001212 <LAN8742_GetLinkState+0x90>
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800120e:	2302      	movs	r3, #2
 8001210:	e03a      	b.n	8001288 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800121c:	2303      	movs	r3, #3
 800121e:	e033      	b.n	8001288 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800122a:	2304      	movs	r3, #4
 800122c:	e02c      	b.n	8001288 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800122e:	2305      	movs	r3, #5
 8001230:	e02a      	b.n	8001288 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	6810      	ldr	r0, [r2, #0]
 800123a:	f107 020c 	add.w	r2, r7, #12
 800123e:	211f      	movs	r1, #31
 8001240:	4798      	blx	r3
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	da02      	bge.n	800124e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001248:	f06f 0304 	mvn.w	r3, #4
 800124c:	e01c      	b.n	8001288 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001258:	2306      	movs	r3, #6
 800125a:	e015      	b.n	8001288 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f003 031c 	and.w	r3, r3, #28
 8001262:	2b18      	cmp	r3, #24
 8001264:	d101      	bne.n	800126a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001266:	2302      	movs	r3, #2
 8001268:	e00e      	b.n	8001288 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f003 031c 	and.w	r3, r3, #28
 8001270:	2b08      	cmp	r3, #8
 8001272:	d101      	bne.n	8001278 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001274:	2303      	movs	r3, #3
 8001276:	e007      	b.n	8001288 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f003 031c 	and.w	r3, r3, #28
 800127e:	2b14      	cmp	r3, #20
 8001280:	d101      	bne.n	8001286 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001282:	2304      	movs	r3, #4
 8001284:	e000      	b.n	8001288 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001286:	2305      	movs	r3, #5
    }				
  }
}
 8001288:	4618      	mov	r0, r3
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001294:	2003      	movs	r0, #3
 8001296:	f000 f92f 	bl	80014f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800129a:	2000      	movs	r0, #0
 800129c:	f000 f806 	bl	80012ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a0:	f7ff fc54 	bl	8000b4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012b4:	4b12      	ldr	r3, [pc, #72]	@ (8001300 <HAL_InitTick+0x54>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4b12      	ldr	r3, [pc, #72]	@ (8001304 <HAL_InitTick+0x58>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	4619      	mov	r1, r3
 80012be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 f93b 	bl	8001546 <HAL_SYSTICK_Config>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e00e      	b.n	80012f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2b0f      	cmp	r3, #15
 80012de:	d80a      	bhi.n	80012f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e0:	2200      	movs	r2, #0
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	f04f 30ff 	mov.w	r0, #4294967295
 80012e8:	f000 f911 	bl	800150e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012ec:	4a06      	ldr	r2, [pc, #24]	@ (8001308 <HAL_InitTick+0x5c>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012f2:	2300      	movs	r3, #0
 80012f4:	e000      	b.n	80012f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000000 	.word	0x20000000
 8001304:	20000008 	.word	0x20000008
 8001308:	20000004 	.word	0x20000004

0800130c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001310:	4b06      	ldr	r3, [pc, #24]	@ (800132c <HAL_IncTick+0x20>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	461a      	mov	r2, r3
 8001316:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <HAL_IncTick+0x24>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4413      	add	r3, r2
 800131c:	4a04      	ldr	r2, [pc, #16]	@ (8001330 <HAL_IncTick+0x24>)
 800131e:	6013      	str	r3, [r2, #0]
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000008 	.word	0x20000008
 8001330:	20000778 	.word	0x20000778

08001334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return uwTick;
 8001338:	4b03      	ldr	r3, [pc, #12]	@ (8001348 <HAL_GetTick+0x14>)
 800133a:	681b      	ldr	r3, [r3, #0]
}
 800133c:	4618      	mov	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20000778 	.word	0x20000778

0800134c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001354:	f7ff ffee 	bl	8001334 <HAL_GetTick>
 8001358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001364:	d005      	beq.n	8001372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001366:	4b0a      	ldr	r3, [pc, #40]	@ (8001390 <HAL_Delay+0x44>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4413      	add	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001372:	bf00      	nop
 8001374:	f7ff ffde 	bl	8001334 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	429a      	cmp	r2, r3
 8001382:	d8f7      	bhi.n	8001374 <HAL_Delay+0x28>
  {
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000008 	.word	0x20000008

08001394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a4:	4b0b      	ldr	r3, [pc, #44]	@ (80013d4 <__NVIC_SetPriorityGrouping+0x40>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013b0:	4013      	ands	r3, r2
 80013b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013bc:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <__NVIC_SetPriorityGrouping+0x44>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c2:	4a04      	ldr	r2, [pc, #16]	@ (80013d4 <__NVIC_SetPriorityGrouping+0x40>)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	60d3      	str	r3, [r2, #12]
}
 80013c8:	bf00      	nop
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000ed00 	.word	0xe000ed00
 80013d8:	05fa0000 	.word	0x05fa0000

080013dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e0:	4b04      	ldr	r3, [pc, #16]	@ (80013f4 <__NVIC_GetPriorityGrouping+0x18>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	0a1b      	lsrs	r3, r3, #8
 80013e6:	f003 0307 	and.w	r3, r3, #7
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	6039      	str	r1, [r7, #0]
 8001402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001408:	2b00      	cmp	r3, #0
 800140a:	db0a      	blt.n	8001422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	b2da      	uxtb	r2, r3
 8001410:	490c      	ldr	r1, [pc, #48]	@ (8001444 <__NVIC_SetPriority+0x4c>)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	0112      	lsls	r2, r2, #4
 8001418:	b2d2      	uxtb	r2, r2
 800141a:	440b      	add	r3, r1
 800141c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001420:	e00a      	b.n	8001438 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4908      	ldr	r1, [pc, #32]	@ (8001448 <__NVIC_SetPriority+0x50>)
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	f003 030f 	and.w	r3, r3, #15
 800142e:	3b04      	subs	r3, #4
 8001430:	0112      	lsls	r2, r2, #4
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	440b      	add	r3, r1
 8001436:	761a      	strb	r2, [r3, #24]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000e100 	.word	0xe000e100
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800144c:	b480      	push	{r7}
 800144e:	b089      	sub	sp, #36	@ 0x24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	f1c3 0307 	rsb	r3, r3, #7
 8001466:	2b04      	cmp	r3, #4
 8001468:	bf28      	it	cs
 800146a:	2304      	movcs	r3, #4
 800146c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3304      	adds	r3, #4
 8001472:	2b06      	cmp	r3, #6
 8001474:	d902      	bls.n	800147c <NVIC_EncodePriority+0x30>
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3b03      	subs	r3, #3
 800147a:	e000      	b.n	800147e <NVIC_EncodePriority+0x32>
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001480:	f04f 32ff 	mov.w	r2, #4294967295
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43da      	mvns	r2, r3
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	401a      	ands	r2, r3
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001494:	f04f 31ff 	mov.w	r1, #4294967295
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	fa01 f303 	lsl.w	r3, r1, r3
 800149e:	43d9      	mvns	r1, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a4:	4313      	orrs	r3, r2
         );
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3724      	adds	r7, #36	@ 0x24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3b01      	subs	r3, #1
 80014c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014c4:	d301      	bcc.n	80014ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014c6:	2301      	movs	r3, #1
 80014c8:	e00f      	b.n	80014ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ca:	4a0a      	ldr	r2, [pc, #40]	@ (80014f4 <SysTick_Config+0x40>)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014d2:	210f      	movs	r1, #15
 80014d4:	f04f 30ff 	mov.w	r0, #4294967295
 80014d8:	f7ff ff8e 	bl	80013f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014dc:	4b05      	ldr	r3, [pc, #20]	@ (80014f4 <SysTick_Config+0x40>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014e2:	4b04      	ldr	r3, [pc, #16]	@ (80014f4 <SysTick_Config+0x40>)
 80014e4:	2207      	movs	r2, #7
 80014e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	e000e010 	.word	0xe000e010

080014f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff ff47 	bl	8001394 <__NVIC_SetPriorityGrouping>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800150e:	b580      	push	{r7, lr}
 8001510:	b086      	sub	sp, #24
 8001512:	af00      	add	r7, sp, #0
 8001514:	4603      	mov	r3, r0
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	607a      	str	r2, [r7, #4]
 800151a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001520:	f7ff ff5c 	bl	80013dc <__NVIC_GetPriorityGrouping>
 8001524:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	68b9      	ldr	r1, [r7, #8]
 800152a:	6978      	ldr	r0, [r7, #20]
 800152c:	f7ff ff8e 	bl	800144c <NVIC_EncodePriority>
 8001530:	4602      	mov	r2, r0
 8001532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001536:	4611      	mov	r1, r2
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff5d 	bl	80013f8 <__NVIC_SetPriority>
}
 800153e:	bf00      	nop
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff ffb0 	bl	80014b4 <SysTick_Config>
 8001554:	4603      	mov	r3, r0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e06a      	b.n	8001648 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001578:	2b00      	cmp	r3, #0
 800157a:	d106      	bne.n	800158a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2223      	movs	r2, #35	@ 0x23
 8001580:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f003 ffe5 	bl	8005554 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158a:	4b31      	ldr	r3, [pc, #196]	@ (8001650 <HAL_ETH_Init+0xf0>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158e:	4a30      	ldr	r2, [pc, #192]	@ (8001650 <HAL_ETH_Init+0xf0>)
 8001590:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001594:	6453      	str	r3, [r2, #68]	@ 0x44
 8001596:	4b2e      	ldr	r3, [pc, #184]	@ (8001650 <HAL_ETH_Init+0xf0>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80015a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001654 <HAL_ETH_Init+0xf4>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	4a2b      	ldr	r2, [pc, #172]	@ (8001654 <HAL_ETH_Init+0xf4>)
 80015a8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80015ac:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80015ae:	4b29      	ldr	r3, [pc, #164]	@ (8001654 <HAL_ETH_Init+0xf4>)
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	4927      	ldr	r1, [pc, #156]	@ (8001654 <HAL_ETH_Init+0xf4>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80015bc:	4b25      	ldr	r3, [pc, #148]	@ (8001654 <HAL_ETH_Init+0xf4>)
 80015be:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	6812      	ldr	r2, [r2, #0]
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015d8:	f7ff feac 	bl	8001334 <HAL_GetTick>
 80015dc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80015de:	e011      	b.n	8001604 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80015e0:	f7ff fea8 	bl	8001334 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80015ee:	d909      	bls.n	8001604 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2204      	movs	r2, #4
 80015f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	22e0      	movs	r2, #224	@ 0xe0
 80015fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e021      	b.n	8001648 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1e4      	bne.n	80015e0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 fdf0 	bl	80021fc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 fe97 	bl	8002350 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f000 feed 	bl	8002402 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	461a      	mov	r2, r3
 800162e:	2100      	movs	r1, #0
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f000 fe55 	bl	80022e0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2210      	movs	r2, #16
 8001642:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40023800 	.word	0x40023800
 8001654:	40013800 	.word	0x40013800

08001658 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001666:	2b10      	cmp	r3, #16
 8001668:	d150      	bne.n	800170c <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2223      	movs	r2, #35	@ 0x23
 800166e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2204      	movs	r2, #4
 8001676:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 f9fd 	bl	8001a78 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f042 0208 	orr.w	r2, r2, #8
 800168c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001696:	2001      	movs	r0, #1
 8001698:	f7ff fe58 	bl	800134c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f042 0204 	orr.w	r2, r2, #4
 80016b2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80016bc:	2001      	movs	r0, #1
 80016be:	f7ff fe45 	bl	800134c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 fc36 	bl	8001f3c <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	6812      	ldr	r2, [r2, #0]
 80016de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80016e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016e6:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	6812      	ldr	r2, [r2, #0]
 80016f6:	f043 0302 	orr.w	r3, r3, #2
 80016fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016fe:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2223      	movs	r2, #35	@ 0x23
 8001704:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8001708:	2300      	movs	r3, #0
 800170a:	e000      	b.n	800170e <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
  }
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b084      	sub	sp, #16
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001724:	2b23      	cmp	r3, #35	@ 0x23
 8001726:	d14a      	bne.n	80017be <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2223      	movs	r2, #35	@ 0x23
 800172c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	6812      	ldr	r2, [r2, #0]
 800173e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001742:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001746:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6812      	ldr	r2, [r2, #0]
 8001756:	f023 0302 	bic.w	r3, r3, #2
 800175a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800175e:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0204 	bic.w	r2, r2, #4
 800176e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001778:	2001      	movs	r0, #1
 800177a:	f7ff fde7 	bl	800134c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 fbd8 	bl	8001f3c <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f022 0208 	bic.w	r2, r2, #8
 800179a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017a4:	2001      	movs	r0, #1
 80017a6:	f7ff fdd1 	bl	800134c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2210      	movs	r2, #16
 80017b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	e000      	b.n	80017c0 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
  }
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d109      	bne.n	80017ee <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017e0:	f043 0201 	orr.w	r2, r3, #1
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e07c      	b.n	80018e8 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80017f4:	2b23      	cmp	r3, #35	@ 0x23
 80017f6:	d176      	bne.n	80018e6 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80017f8:	2200      	movs	r2, #0
 80017fa:	68b9      	ldr	r1, [r7, #8]
 80017fc:	68f8      	ldr	r0, [r7, #12]
 80017fe:	f000 fe6d 	bl	80024dc <ETH_Prepare_Tx_Descriptors>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d009      	beq.n	800181c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800180e:	f043 0202 	orr.w	r2, r3, #2
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e065      	b.n	80018e8 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800181c:	f3bf 8f4f 	dsb	sy
}
 8001820:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	3206      	adds	r2, #6
 800182a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800182e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001834:	1c5a      	adds	r2, r3, #1
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	629a      	str	r2, [r3, #40]	@ 0x28
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800183e:	2b03      	cmp	r3, #3
 8001840:	d904      	bls.n	800184c <HAL_ETH_Transmit+0x84>
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001846:	1f1a      	subs	r2, r3, #4
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	3106      	adds	r1, #6
 8001858:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800185c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001860:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001862:	f7ff fd67 	bl	8001334 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001868:	e037      	b.n	80018da <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d011      	beq.n	80018a0 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001882:	f043 0208 	orr.w	r2, r3, #8
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001894:	695a      	ldr	r2, [r3, #20]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e023      	b.n	80018e8 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a6:	d018      	beq.n	80018da <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80018a8:	f7ff fd44 	bl	8001334 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d302      	bcc.n	80018be <HAL_ETH_Transmit+0xf6>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10d      	bne.n	80018da <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018c4:	f043 0204 	orr.w	r2, r3, #4
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80018d4:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e006      	b.n	80018e8 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	dbc3      	blt.n	800186a <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80018e2:	2300      	movs	r3, #0
 80018e4:	e000      	b.n	80018e8 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
  }
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80018fe:	2300      	movs	r3, #0
 8001900:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d109      	bne.n	800191c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800190e:	f043 0201 	orr.w	r2, r3, #1
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e0a8      	b.n	8001a6e <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001922:	2b23      	cmp	r3, #35	@ 0x23
 8001924:	d001      	beq.n	800192a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e0a1      	b.n	8001a6e <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800192e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69fa      	ldr	r2, [r7, #28]
 8001934:	3212      	adds	r2, #18
 8001936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800193a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001940:	f1c3 0304 	rsb	r3, r3, #4
 8001944:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001946:	e06a      	b.n	8001a1e <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001950:	2b00      	cmp	r3, #0
 8001952:	d007      	beq.n	8001964 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	699a      	ldr	r2, [r3, #24]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	69da      	ldr	r2, [r3, #28]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800196c:	2b00      	cmp	r3, #0
 800196e:	d103      	bne.n	8001978 <HAL_ETH_ReadData+0x88>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001974:	2b00      	cmp	r3, #0
 8001976:	d040      	beq.n	80019fa <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00c      	beq.n	80019bc <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	0c1b      	lsrs	r3, r3, #16
 80019a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80019ac:	3b04      	subs	r3, #4
 80019ae:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80019b8:	2301      	movs	r3, #1
 80019ba:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80019d4:	461a      	mov	r2, r3
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	b29b      	uxth	r3, r3
 80019da:	f003 ff7d 	bl	80058d8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	441a      	add	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	2200      	movs	r2, #0
 80019f8:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3301      	adds	r3, #1
 80019fe:	61fb      	str	r3, [r7, #28]
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	2b03      	cmp	r3, #3
 8001a04:	d902      	bls.n	8001a0c <HAL_ETH_ReadData+0x11c>
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3b04      	subs	r3, #4
 8001a0a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69fa      	ldr	r2, [r7, #28]
 8001a10:	3212      	adds	r2, #18
 8001a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a16:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	db06      	blt.n	8001a34 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d202      	bcs.n	8001a34 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d089      	beq.n	8001948 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	441a      	add	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d002      	beq.n	8001a4e <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f815 	bl	8001a78 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69fa      	ldr	r2, [r7, #28]
 8001a52:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d108      	bne.n	8001a6c <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	e000      	b.n	8001a6e <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3720      	adds	r7, #32
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001a84:	2301      	movs	r3, #1
 8001a86:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001a8c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69fa      	ldr	r2, [r7, #28]
 8001a92:	3212      	adds	r2, #18
 8001a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a98:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a9e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001aa0:	e040      	b.n	8001b24 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d112      	bne.n	8001ad0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001aaa:	f107 030c 	add.w	r3, r7, #12
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f003 fee2 	bl	8005878 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d102      	bne.n	8001ac0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	74fb      	strb	r3, [r7, #19]
 8001abe:	e007      	b.n	8001ad0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	461a      	mov	r2, r3
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001ad0:	7cfb      	ldrb	r3, [r7, #19]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d026      	beq.n	8001b24 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d103      	bne.n	8001ae6 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	4a1e      	ldr	r2, [pc, #120]	@ (8001b5c <ETH_UpdateDescriptor+0xe4>)
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	e003      	b.n	8001aee <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8001aec:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001aee:	f3bf 8f5f 	dmb	sy
}
 8001af2:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	3301      	adds	r3, #1
 8001b04:	61fb      	str	r3, [r7, #28]
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	d902      	bls.n	8001b12 <ETH_UpdateDescriptor+0x9a>
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	3b04      	subs	r3, #4
 8001b10:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69fa      	ldr	r2, [r7, #28]
 8001b16:	3212      	adds	r2, #18
 8001b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b1c:	617b      	str	r3, [r7, #20]
      desccount--;
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	3b01      	subs	r3, #1
 8001b22:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d002      	beq.n	8001b30 <ETH_UpdateDescriptor+0xb8>
 8001b2a:	7cfb      	ldrb	r3, [r7, #19]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1b8      	bne.n	8001aa2 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d00c      	beq.n	8001b54 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b42:	461a      	mov	r2, r3
 8001b44:	2300      	movs	r3, #0
 8001b46:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69fa      	ldr	r2, [r7, #28]
 8001b4c:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001b54:	bf00      	nop
 8001b56:	3720      	adds	r7, #32
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	80004600 	.word	0x80004600

08001b60 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
 8001b6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f003 031c 	and.w	r3, r3, #28
 8001b7c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	02db      	lsls	r3, r3, #11
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	019b      	lsls	r3, r3, #6
 8001b8e:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f023 0302 	bic.w	r3, r3, #2
 8001b9e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001bb0:	f7ff fbc0 	bl	8001334 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bb6:	e00d      	b.n	8001bd4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001bb8:	f7ff fbbc 	bl	8001334 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bc6:	d301      	bcc.n	8001bcc <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e010      	b.n	8001bee <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1ec      	bne.n	8001bb8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	461a      	mov	r2, r3
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b086      	sub	sp, #24
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	60f8      	str	r0, [r7, #12]
 8001bfe:	60b9      	str	r1, [r7, #8]
 8001c00:	607a      	str	r2, [r7, #4]
 8001c02:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	f003 031c 	and.w	r3, r3, #28
 8001c12:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	02db      	lsls	r3, r3, #11
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	019b      	lsls	r3, r3, #6
 8001c24:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f043 0302 	orr.w	r3, r3, #2
 8001c34:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c50:	f7ff fb70 	bl	8001334 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c56:	e00d      	b.n	8001c74 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001c58:	f7ff fb6c 	bl	8001334 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c66:	d301      	bcc.n	8001c6c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e009      	b.n	8001c80 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1ec      	bne.n	8001c58 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e0d9      	b.n	8001e50 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0310 	and.w	r3, r3, #16
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	bf14      	ite	ne
 8001caa:	2301      	movne	r3, #1
 8001cac:	2300      	moveq	r3, #0
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	bf0c      	ite	eq
 8001cd4:	2301      	moveq	r3, #1
 8001cd6:	2300      	movne	r3, #0
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	461a      	mov	r2, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	bf14      	ite	ne
 8001cf0:	2301      	movne	r3, #1
 8001cf2:	2300      	moveq	r3, #0
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	bf0c      	ite	eq
 8001d0a:	2301      	moveq	r3, #1
 8001d0c:	2300      	movne	r3, #0
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	461a      	mov	r2, r3
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	bf14      	ite	ne
 8001d24:	2301      	movne	r3, #1
 8001d26:	2300      	moveq	r3, #0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	bf0c      	ite	eq
 8001d5a:	2301      	moveq	r3, #1
 8001d5c:	2300      	movne	r3, #0
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	461a      	mov	r2, r3
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	bf0c      	ite	eq
 8001d74:	2301      	moveq	r3, #1
 8001d76:	2300      	movne	r3, #0
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	bf14      	ite	ne
 8001d8e:	2301      	movne	r3, #1
 8001d90:	2300      	moveq	r3, #0
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	461a      	mov	r2, r3
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	bf14      	ite	ne
 8001db6:	2301      	movne	r3, #1
 8001db8:	2300      	moveq	r3, #0
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	bf14      	ite	ne
 8001dd0:	2301      	movne	r3, #1
 8001dd2:	2300      	moveq	r3, #0
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	bf0c      	ite	eq
 8001dec:	2301      	moveq	r3, #1
 8001dee:	2300      	movne	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	461a      	mov	r2, r3
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	0c1b      	lsrs	r3, r3, #16
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	bf14      	ite	ne
 8001e24:	2301      	movne	r3, #1
 8001e26:	2300      	moveq	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	bf14      	ite	ne
 8001e40:	2301      	movne	r3, #1
 8001e42:	2300      	moveq	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e00b      	b.n	8001e88 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e76:	2b10      	cmp	r3, #16
 8001e78:	d105      	bne.n	8001e86 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001e7a:	6839      	ldr	r1, [r7, #0]
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 f883 	bl	8001f88 <ETH_SetMACConfig>

    return HAL_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	e000      	b.n	8001e88 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
  }
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f023 031c 	bic.w	r3, r3, #28
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001ea8:	f001 fc74 	bl	8003794 <HAL_RCC_GetHCLKFreq>
 8001eac:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8001f28 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d908      	bls.n	8001ec8 <HAL_ETH_SetMDIOClockRange+0x38>
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	4a1c      	ldr	r2, [pc, #112]	@ (8001f2c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d804      	bhi.n	8001ec8 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f043 0308 	orr.w	r3, r3, #8
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	e027      	b.n	8001f18 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	4a18      	ldr	r2, [pc, #96]	@ (8001f2c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d908      	bls.n	8001ee2 <HAL_ETH_SetMDIOClockRange+0x52>
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	4a17      	ldr	r2, [pc, #92]	@ (8001f30 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d204      	bcs.n	8001ee2 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f043 030c 	orr.w	r3, r3, #12
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	e01a      	b.n	8001f18 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	4a12      	ldr	r2, [pc, #72]	@ (8001f30 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d303      	bcc.n	8001ef2 <HAL_ETH_SetMDIOClockRange+0x62>
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	4a11      	ldr	r2, [pc, #68]	@ (8001f34 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d911      	bls.n	8001f16 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	4a0f      	ldr	r2, [pc, #60]	@ (8001f34 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d908      	bls.n	8001f0c <HAL_ETH_SetMDIOClockRange+0x7c>
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	4a0e      	ldr	r2, [pc, #56]	@ (8001f38 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d804      	bhi.n	8001f0c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f043 0304 	orr.w	r3, r3, #4
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	e005      	b.n	8001f18 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f043 0310 	orr.w	r3, r3, #16
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	e000      	b.n	8001f18 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001f16:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
}
 8001f20:	bf00      	nop
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	01312cff 	.word	0x01312cff
 8001f2c:	02160ebf 	.word	0x02160ebf
 8001f30:	03938700 	.word	0x03938700
 8001f34:	05f5e0ff 	.word	0x05f5e0ff
 8001f38:	08f0d17f 	.word	0x08f0d17f

08001f3c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6812      	ldr	r2, [r2, #0]
 8001f56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f5a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f5e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	f7ff f9ed 	bl	800134c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f7c:	6193      	str	r3, [r2, #24]
}
 8001f7e:	bf00      	nop
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	4b51      	ldr	r3, [pc, #324]	@ (80020e4 <ETH_SetMACConfig+0x15c>)
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	7c1b      	ldrb	r3, [r3, #16]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d102      	bne.n	8001fb0 <ETH_SetMACConfig+0x28>
 8001faa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001fae:	e000      	b.n	8001fb2 <ETH_SetMACConfig+0x2a>
 8001fb0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	7c5b      	ldrb	r3, [r3, #17]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d102      	bne.n	8001fc0 <ETH_SetMACConfig+0x38>
 8001fba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001fbe:	e000      	b.n	8001fc2 <ETH_SetMACConfig+0x3a>
 8001fc0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001fc2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001fc8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	7fdb      	ldrb	r3, [r3, #31]
 8001fce:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001fd0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001fd6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	7f92      	ldrb	r2, [r2, #30]
 8001fdc:	2a00      	cmp	r2, #0
 8001fde:	d102      	bne.n	8001fe6 <ETH_SetMACConfig+0x5e>
 8001fe0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fe4:	e000      	b.n	8001fe8 <ETH_SetMACConfig+0x60>
 8001fe6:	2200      	movs	r2, #0
                        macconf->Speed |
 8001fe8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	7f1b      	ldrb	r3, [r3, #28]
 8001fee:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ff0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ff6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	791b      	ldrb	r3, [r3, #4]
 8001ffc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001ffe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002006:	2a00      	cmp	r2, #0
 8002008:	d102      	bne.n	8002010 <ETH_SetMACConfig+0x88>
 800200a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800200e:	e000      	b.n	8002012 <ETH_SetMACConfig+0x8a>
 8002010:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002012:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	7bdb      	ldrb	r3, [r3, #15]
 8002018:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800201a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002020:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002028:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800202a:	4313      	orrs	r3, r2
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	4313      	orrs	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002042:	2001      	movs	r0, #1
 8002044:	f7ff f982 	bl	800134c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800205e:	4013      	ands	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002066:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800206e:	2a00      	cmp	r2, #0
 8002070:	d101      	bne.n	8002076 <ETH_SetMACConfig+0xee>
 8002072:	2280      	movs	r2, #128	@ 0x80
 8002074:	e000      	b.n	8002078 <ETH_SetMACConfig+0xf0>
 8002076:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002078:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800207e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002086:	2a01      	cmp	r2, #1
 8002088:	d101      	bne.n	800208e <ETH_SetMACConfig+0x106>
 800208a:	2208      	movs	r2, #8
 800208c:	e000      	b.n	8002090 <ETH_SetMACConfig+0x108>
 800208e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002090:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002098:	2a01      	cmp	r2, #1
 800209a:	d101      	bne.n	80020a0 <ETH_SetMACConfig+0x118>
 800209c:	2204      	movs	r2, #4
 800209e:	e000      	b.n	80020a2 <ETH_SetMACConfig+0x11a>
 80020a0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80020a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80020aa:	2a01      	cmp	r2, #1
 80020ac:	d101      	bne.n	80020b2 <ETH_SetMACConfig+0x12a>
 80020ae:	2202      	movs	r2, #2
 80020b0:	e000      	b.n	80020b4 <ETH_SetMACConfig+0x12c>
 80020b2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80020b4:	4313      	orrs	r3, r2
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020cc:	2001      	movs	r0, #1
 80020ce:	f7ff f93d 	bl	800134c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	619a      	str	r2, [r3, #24]
}
 80020da:	bf00      	nop
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	ff20810f 	.word	0xff20810f

080020e8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	4b3d      	ldr	r3, [pc, #244]	@ (80021f8 <ETH_SetDMAConfig+0x110>)
 8002102:	4013      	ands	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	7b1b      	ldrb	r3, [r3, #12]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d102      	bne.n	8002114 <ETH_SetDMAConfig+0x2c>
 800210e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002112:	e000      	b.n	8002116 <ETH_SetDMAConfig+0x2e>
 8002114:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	7b5b      	ldrb	r3, [r3, #13]
 800211a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800211c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	7f52      	ldrb	r2, [r2, #29]
 8002122:	2a00      	cmp	r2, #0
 8002124:	d102      	bne.n	800212c <ETH_SetDMAConfig+0x44>
 8002126:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800212a:	e000      	b.n	800212e <ETH_SetDMAConfig+0x46>
 800212c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800212e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	7b9b      	ldrb	r3, [r3, #14]
 8002134:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002136:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800213c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	7f1b      	ldrb	r3, [r3, #28]
 8002142:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002144:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	7f9b      	ldrb	r3, [r3, #30]
 800214a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800214c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002152:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800215a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800215c:	4313      	orrs	r3, r2
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	4313      	orrs	r3, r2
 8002162:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800216c:	461a      	mov	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800217e:	2001      	movs	r0, #1
 8002180:	f7ff f8e4 	bl	800134c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800218c:	461a      	mov	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	791b      	ldrb	r3, [r3, #4]
 8002196:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800219c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80021a2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80021a8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80021b0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80021b2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80021ba:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80021c0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6812      	ldr	r2, [r2, #0]
 80021c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80021ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80021ce:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021dc:	2001      	movs	r0, #1
 80021de:	f7ff f8b5 	bl	800134c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021ea:	461a      	mov	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6013      	str	r3, [r2, #0]
}
 80021f0:	bf00      	nop
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	f8de3f23 	.word	0xf8de3f23

080021fc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b0a6      	sub	sp, #152	@ 0x98
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002204:	2301      	movs	r3, #1
 8002206:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800220a:	2301      	movs	r3, #1
 800220c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002210:	2300      	movs	r3, #0
 8002212:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002214:	2300      	movs	r3, #0
 8002216:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800221a:	2301      	movs	r3, #1
 800221c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002220:	2300      	movs	r3, #0
 8002222:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002226:	2301      	movs	r3, #1
 8002228:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800222c:	2300      	movs	r3, #0
 800222e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002232:	2300      	movs	r3, #0
 8002234:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002238:	2300      	movs	r3, #0
 800223a:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800223c:	2300      	movs	r3, #0
 800223e:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002242:	2300      	movs	r3, #0
 8002244:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002246:	2300      	movs	r3, #0
 8002248:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800224c:	2300      	movs	r3, #0
 800224e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002252:	2300      	movs	r3, #0
 8002254:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002258:	2300      	movs	r3, #0
 800225a:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800225e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002262:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002264:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002268:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800226a:	2300      	movs	r3, #0
 800226c:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002270:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002274:	4619      	mov	r1, r3
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff fe86 	bl	8001f88 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800227c:	2301      	movs	r3, #1
 800227e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002280:	2301      	movs	r3, #1
 8002282:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002284:	2301      	movs	r3, #1
 8002286:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800228a:	2301      	movs	r3, #1
 800228c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800228e:	2300      	movs	r3, #0
 8002290:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002292:	2300      	movs	r3, #0
 8002294:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002298:	2300      	movs	r3, #0
 800229a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800229e:	2300      	movs	r3, #0
 80022a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80022a2:	2301      	movs	r3, #1
 80022a4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80022a8:	2301      	movs	r3, #1
 80022aa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80022ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022b0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80022b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80022b6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80022b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022bc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80022be:	2301      	movs	r3, #1
 80022c0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80022cc:	f107 0308 	add.w	r3, r7, #8
 80022d0:	4619      	mov	r1, r3
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff ff08 	bl	80020e8 <ETH_SetDMAConfig>
}
 80022d8:	bf00      	nop
 80022da:	3798      	adds	r7, #152	@ 0x98
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b087      	sub	sp, #28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3305      	adds	r3, #5
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	021b      	lsls	r3, r3, #8
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	3204      	adds	r2, #4
 80022f8:	7812      	ldrb	r2, [r2, #0]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	4b11      	ldr	r3, [pc, #68]	@ (8002348 <ETH_MACAddressConfig+0x68>)
 8002302:	4413      	add	r3, r2
 8002304:	461a      	mov	r2, r3
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3303      	adds	r3, #3
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	061a      	lsls	r2, r3, #24
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3302      	adds	r3, #2
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	041b      	lsls	r3, r3, #16
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3301      	adds	r3, #1
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	021b      	lsls	r3, r3, #8
 8002324:	4313      	orrs	r3, r2
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	7812      	ldrb	r2, [r2, #0]
 800232a:	4313      	orrs	r3, r2
 800232c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	4b06      	ldr	r3, [pc, #24]	@ (800234c <ETH_MACAddressConfig+0x6c>)
 8002332:	4413      	add	r3, r2
 8002334:	461a      	mov	r2, r3
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	6013      	str	r3, [r2, #0]
}
 800233a:	bf00      	nop
 800233c:	371c      	adds	r7, #28
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	40028040 	.word	0x40028040
 800234c:	40028044 	.word	0x40028044

08002350 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	e03e      	b.n	80023dc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68d9      	ldr	r1, [r3, #12]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	440b      	add	r3, r1
 800236e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2200      	movs	r2, #0
 800237a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	2200      	movs	r2, #0
 8002386:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002388:	68b9      	ldr	r1, [r7, #8]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	3206      	adds	r2, #6
 8002390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d80c      	bhi.n	80023c0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68d9      	ldr	r1, [r3, #12]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	440b      	add	r3, r1
 80023b8:	461a      	mov	r2, r3
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	60da      	str	r2, [r3, #12]
 80023be:	e004      	b.n	80023ca <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	461a      	mov	r2, r3
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	3301      	adds	r3, #1
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b03      	cmp	r3, #3
 80023e0:	d9bd      	bls.n	800235e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023f4:	611a      	str	r2, [r3, #16]
}
 80023f6:	bf00      	nop
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002402:	b480      	push	{r7}
 8002404:	b085      	sub	sp, #20
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	e046      	b.n	800249e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6919      	ldr	r1, [r3, #16]
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	4613      	mov	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	440b      	add	r3, r1
 8002420:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2200      	movs	r2, #0
 800242c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2200      	movs	r2, #0
 8002432:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2200      	movs	r2, #0
 8002438:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2200      	movs	r2, #0
 800243e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2200      	movs	r2, #0
 8002444:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800244c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8002454:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002462:	68b9      	ldr	r1, [r7, #8]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	3212      	adds	r2, #18
 800246a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2b02      	cmp	r3, #2
 8002472:	d80c      	bhi.n	800248e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6919      	ldr	r1, [r3, #16]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	440b      	add	r3, r1
 8002486:	461a      	mov	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	60da      	str	r2, [r3, #12]
 800248c:	e004      	b.n	8002498 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	461a      	mov	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	3301      	adds	r3, #1
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d9b5      	bls.n	8002410 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691a      	ldr	r2, [r3, #16]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024ce:	60da      	str	r2, [r3, #12]
}
 80024d0:	bf00      	nop
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80024dc:	b480      	push	{r7}
 80024de:	b08d      	sub	sp, #52	@ 0x34
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	3318      	adds	r3, #24
 80024ec:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002506:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800250e:	2300      	movs	r3, #0
 8002510:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800251a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800251e:	d007      	beq.n	8002530 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002524:	3304      	adds	r3, #4
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002530:	2302      	movs	r3, #2
 8002532:	e0ff      	b.n	8002734 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8002534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002536:	3301      	adds	r3, #1
 8002538:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	461a      	mov	r2, r3
 8002540:	6a3b      	ldr	r3, [r7, #32]
 8002542:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002544:	6a3b      	ldr	r3, [r7, #32]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	4b7d      	ldr	r3, [pc, #500]	@ (8002740 <ETH_Prepare_Tx_Descriptors+0x264>)
 800254a:	4013      	ands	r3, r2
 800254c:	69fa      	ldr	r2, [r7, #28]
 800254e:	6852      	ldr	r2, [r2, #4]
 8002550:	431a      	orrs	r2, r3
 8002552:	6a3b      	ldr	r3, [r7, #32]
 8002554:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d008      	beq.n	8002574 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	431a      	orrs	r2, r3
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0320 	and.w	r3, r3, #32
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	431a      	orrs	r2, r3
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	2b00      	cmp	r3, #0
 800259c:	d005      	beq.n	80025aa <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80025a6:	6a3b      	ldr	r3, [r7, #32]
 80025a8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80025b6:	f3bf 8f5f 	dmb	sy
}
 80025ba:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80025c4:	6a3b      	ldr	r3, [r7, #32]
 80025c6:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80025c8:	e082      	b.n	80026d0 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80025d2:	6a3b      	ldr	r3, [r7, #32]
 80025d4:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d006      	beq.n	80025ea <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80025dc:	6a3b      	ldr	r3, [r7, #32]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80025e4:	6a3b      	ldr	r3, [r7, #32]
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	e005      	b.n	80025f6 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80025f2:	6a3b      	ldr	r3, [r7, #32]
 80025f4:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80025f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025f8:	3301      	adds	r3, #1
 80025fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d902      	bls.n	8002608 <ETH_Prepare_Tx_Descriptors+0x12c>
 8002602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002604:	3b04      	subs	r3, #4
 8002606:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800260c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002610:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800261e:	6a3b      	ldr	r3, [r7, #32]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002626:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800262a:	d007      	beq.n	800263c <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002630:	3304      	adds	r3, #4
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d029      	beq.n	8002690 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002648:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800264a:	2300      	movs	r3, #0
 800264c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800264e:	e019      	b.n	8002684 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8002650:	f3bf 8f5f 	dmb	sy
}
 8002654:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002656:	6a3b      	ldr	r3, [r7, #32]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800265e:	6a3b      	ldr	r3, [r7, #32]
 8002660:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002664:	3301      	adds	r3, #1
 8002666:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800266a:	2b03      	cmp	r3, #3
 800266c:	d902      	bls.n	8002674 <ETH_Prepare_Tx_Descriptors+0x198>
 800266e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002670:	3b04      	subs	r3, #4
 8002672:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800267c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800267e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002680:	3301      	adds	r3, #1
 8002682:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002684:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002688:	429a      	cmp	r2, r3
 800268a:	d3e1      	bcc.n	8002650 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 800268c:	2302      	movs	r3, #2
 800268e:	e051      	b.n	8002734 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8002690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002692:	3301      	adds	r3, #1
 8002694:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	461a      	mov	r2, r3
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	4b25      	ldr	r3, [pc, #148]	@ (8002740 <ETH_Prepare_Tx_Descriptors+0x264>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	69fa      	ldr	r2, [r7, #28]
 80026b0:	6852      	ldr	r2, [r2, #4]
 80026b2:	431a      	orrs	r2, r3
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	3301      	adds	r3, #1
 80026bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80026be:	f3bf 8f5f 	dmb	sy
}
 80026c2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f47f af78 	bne.w	80025ca <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d006      	beq.n	80026ee <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80026e8:	6a3b      	ldr	r3, [r7, #32]
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	e005      	b.n	80026fa <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80026ee:	6a3b      	ldr	r3, [r7, #32]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80026fa:	6a3b      	ldr	r3, [r7, #32]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800270a:	6979      	ldr	r1, [r7, #20]
 800270c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800270e:	3304      	adds	r3, #4
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	440b      	add	r3, r1
 8002714:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800271a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800271c:	b672      	cpsid	i
}
 800271e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	4413      	add	r3, r2
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800272e:	b662      	cpsie	i
}
 8002730:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3734      	adds	r7, #52	@ 0x34
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	ffffe000 	.word	0xffffe000

08002744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002744:	b480      	push	{r7}
 8002746:	b089      	sub	sp, #36	@ 0x24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800274e:	2300      	movs	r3, #0
 8002750:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800275a:	2300      	movs	r3, #0
 800275c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800275e:	2300      	movs	r3, #0
 8002760:	61fb      	str	r3, [r7, #28]
 8002762:	e175      	b.n	8002a50 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002764:	2201      	movs	r2, #1
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	4013      	ands	r3, r2
 8002776:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	429a      	cmp	r2, r3
 800277e:	f040 8164 	bne.w	8002a4a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	2b01      	cmp	r3, #1
 800278c:	d005      	beq.n	800279a <HAL_GPIO_Init+0x56>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d130      	bne.n	80027fc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	2203      	movs	r2, #3
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	43db      	mvns	r3, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4013      	ands	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027d0:	2201      	movs	r2, #1
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	091b      	lsrs	r3, r3, #4
 80027e6:	f003 0201 	and.w	r2, r3, #1
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	2b03      	cmp	r3, #3
 8002806:	d017      	beq.n	8002838 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	2203      	movs	r2, #3
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 0303 	and.w	r3, r3, #3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d123      	bne.n	800288c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	08da      	lsrs	r2, r3, #3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3208      	adds	r2, #8
 800284c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	220f      	movs	r2, #15
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	691a      	ldr	r2, [r3, #16]
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	08da      	lsrs	r2, r3, #3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3208      	adds	r2, #8
 8002886:	69b9      	ldr	r1, [r7, #24]
 8002888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	2203      	movs	r2, #3
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 0203 	and.w	r2, r3, #3
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 80be 	beq.w	8002a4a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ce:	4b66      	ldr	r3, [pc, #408]	@ (8002a68 <HAL_GPIO_Init+0x324>)
 80028d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d2:	4a65      	ldr	r2, [pc, #404]	@ (8002a68 <HAL_GPIO_Init+0x324>)
 80028d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80028da:	4b63      	ldr	r3, [pc, #396]	@ (8002a68 <HAL_GPIO_Init+0x324>)
 80028dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80028e6:	4a61      	ldr	r2, [pc, #388]	@ (8002a6c <HAL_GPIO_Init+0x328>)
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	089b      	lsrs	r3, r3, #2
 80028ec:	3302      	adds	r3, #2
 80028ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	220f      	movs	r2, #15
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43db      	mvns	r3, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4013      	ands	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a58      	ldr	r2, [pc, #352]	@ (8002a70 <HAL_GPIO_Init+0x32c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d037      	beq.n	8002982 <HAL_GPIO_Init+0x23e>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a57      	ldr	r2, [pc, #348]	@ (8002a74 <HAL_GPIO_Init+0x330>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d031      	beq.n	800297e <HAL_GPIO_Init+0x23a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a56      	ldr	r2, [pc, #344]	@ (8002a78 <HAL_GPIO_Init+0x334>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d02b      	beq.n	800297a <HAL_GPIO_Init+0x236>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a55      	ldr	r2, [pc, #340]	@ (8002a7c <HAL_GPIO_Init+0x338>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d025      	beq.n	8002976 <HAL_GPIO_Init+0x232>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a54      	ldr	r2, [pc, #336]	@ (8002a80 <HAL_GPIO_Init+0x33c>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d01f      	beq.n	8002972 <HAL_GPIO_Init+0x22e>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a53      	ldr	r2, [pc, #332]	@ (8002a84 <HAL_GPIO_Init+0x340>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d019      	beq.n	800296e <HAL_GPIO_Init+0x22a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a52      	ldr	r2, [pc, #328]	@ (8002a88 <HAL_GPIO_Init+0x344>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d013      	beq.n	800296a <HAL_GPIO_Init+0x226>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a51      	ldr	r2, [pc, #324]	@ (8002a8c <HAL_GPIO_Init+0x348>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d00d      	beq.n	8002966 <HAL_GPIO_Init+0x222>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a50      	ldr	r2, [pc, #320]	@ (8002a90 <HAL_GPIO_Init+0x34c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d007      	beq.n	8002962 <HAL_GPIO_Init+0x21e>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a4f      	ldr	r2, [pc, #316]	@ (8002a94 <HAL_GPIO_Init+0x350>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d101      	bne.n	800295e <HAL_GPIO_Init+0x21a>
 800295a:	2309      	movs	r3, #9
 800295c:	e012      	b.n	8002984 <HAL_GPIO_Init+0x240>
 800295e:	230a      	movs	r3, #10
 8002960:	e010      	b.n	8002984 <HAL_GPIO_Init+0x240>
 8002962:	2308      	movs	r3, #8
 8002964:	e00e      	b.n	8002984 <HAL_GPIO_Init+0x240>
 8002966:	2307      	movs	r3, #7
 8002968:	e00c      	b.n	8002984 <HAL_GPIO_Init+0x240>
 800296a:	2306      	movs	r3, #6
 800296c:	e00a      	b.n	8002984 <HAL_GPIO_Init+0x240>
 800296e:	2305      	movs	r3, #5
 8002970:	e008      	b.n	8002984 <HAL_GPIO_Init+0x240>
 8002972:	2304      	movs	r3, #4
 8002974:	e006      	b.n	8002984 <HAL_GPIO_Init+0x240>
 8002976:	2303      	movs	r3, #3
 8002978:	e004      	b.n	8002984 <HAL_GPIO_Init+0x240>
 800297a:	2302      	movs	r3, #2
 800297c:	e002      	b.n	8002984 <HAL_GPIO_Init+0x240>
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <HAL_GPIO_Init+0x240>
 8002982:	2300      	movs	r3, #0
 8002984:	69fa      	ldr	r2, [r7, #28]
 8002986:	f002 0203 	and.w	r2, r2, #3
 800298a:	0092      	lsls	r2, r2, #2
 800298c:	4093      	lsls	r3, r2
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4313      	orrs	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002994:	4935      	ldr	r1, [pc, #212]	@ (8002a6c <HAL_GPIO_Init+0x328>)
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	089b      	lsrs	r3, r3, #2
 800299a:	3302      	adds	r3, #2
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002a98 <HAL_GPIO_Init+0x354>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	43db      	mvns	r3, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4013      	ands	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029c6:	4a34      	ldr	r2, [pc, #208]	@ (8002a98 <HAL_GPIO_Init+0x354>)
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029cc:	4b32      	ldr	r3, [pc, #200]	@ (8002a98 <HAL_GPIO_Init+0x354>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	43db      	mvns	r3, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4013      	ands	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029f0:	4a29      	ldr	r2, [pc, #164]	@ (8002a98 <HAL_GPIO_Init+0x354>)
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029f6:	4b28      	ldr	r3, [pc, #160]	@ (8002a98 <HAL_GPIO_Init+0x354>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	43db      	mvns	r3, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4013      	ands	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a1a:	4a1f      	ldr	r2, [pc, #124]	@ (8002a98 <HAL_GPIO_Init+0x354>)
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a20:	4b1d      	ldr	r3, [pc, #116]	@ (8002a98 <HAL_GPIO_Init+0x354>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a44:	4a14      	ldr	r2, [pc, #80]	@ (8002a98 <HAL_GPIO_Init+0x354>)
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	61fb      	str	r3, [r7, #28]
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	2b0f      	cmp	r3, #15
 8002a54:	f67f ae86 	bls.w	8002764 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a58:	bf00      	nop
 8002a5a:	bf00      	nop
 8002a5c:	3724      	adds	r7, #36	@ 0x24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40013800 	.word	0x40013800
 8002a70:	40020000 	.word	0x40020000
 8002a74:	40020400 	.word	0x40020400
 8002a78:	40020800 	.word	0x40020800
 8002a7c:	40020c00 	.word	0x40020c00
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40021400 	.word	0x40021400
 8002a88:	40021800 	.word	0x40021800
 8002a8c:	40021c00 	.word	0x40021c00
 8002a90:	40022000 	.word	0x40022000
 8002a94:	40022400 	.word	0x40022400
 8002a98:	40013c00 	.word	0x40013c00

08002a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	807b      	strh	r3, [r7, #2]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002aac:	787b      	ldrb	r3, [r7, #1]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ab2:	887a      	ldrh	r2, [r7, #2]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ab8:	e003      	b.n	8002ac2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002aba:	887b      	ldrh	r3, [r7, #2]
 8002abc:	041a      	lsls	r2, r3, #16
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	619a      	str	r2, [r3, #24]
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b085      	sub	sp, #20
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ae0:	887a      	ldrh	r2, [r7, #2]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	041a      	lsls	r2, r3, #16
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	43d9      	mvns	r1, r3
 8002aec:	887b      	ldrh	r3, [r7, #2]
 8002aee:	400b      	ands	r3, r1
 8002af0:	431a      	orrs	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	619a      	str	r2, [r3, #24]
}
 8002af6:	bf00      	nop
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b04:	b08f      	sub	sp, #60	@ 0x3c
 8002b06:	af0a      	add	r7, sp, #40	@ 0x28
 8002b08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e116      	b.n	8002d42 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d106      	bne.n	8002b34 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7fe f890 	bl	8000c54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2203      	movs	r2, #3
 8002b38:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d102      	bne.n	8002b4e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f001 ff3a 	bl	80049cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	603b      	str	r3, [r7, #0]
 8002b5e:	687e      	ldr	r6, [r7, #4]
 8002b60:	466d      	mov	r5, sp
 8002b62:	f106 0410 	add.w	r4, r6, #16
 8002b66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b72:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b76:	1d33      	adds	r3, r6, #4
 8002b78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b7a:	6838      	ldr	r0, [r7, #0]
 8002b7c:	f001 fece 	bl	800491c <USB_CoreInit>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d005      	beq.n	8002b92 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2202      	movs	r2, #2
 8002b8a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e0d7      	b.n	8002d42 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2100      	movs	r1, #0
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f001 ff28 	bl	80049ee <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	73fb      	strb	r3, [r7, #15]
 8002ba2:	e04a      	b.n	8002c3a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ba4:	7bfa      	ldrb	r2, [r7, #15]
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	4413      	add	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	333d      	adds	r3, #61	@ 0x3d
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bb8:	7bfa      	ldrb	r2, [r7, #15]
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	333c      	adds	r3, #60	@ 0x3c
 8002bc8:	7bfa      	ldrb	r2, [r7, #15]
 8002bca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bcc:	7bfa      	ldrb	r2, [r7, #15]
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
 8002bd0:	b298      	uxth	r0, r3
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	3344      	adds	r3, #68	@ 0x44
 8002be0:	4602      	mov	r2, r0
 8002be2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002be4:	7bfa      	ldrb	r2, [r7, #15]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4413      	add	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	3340      	adds	r3, #64	@ 0x40
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bf8:	7bfa      	ldrb	r2, [r7, #15]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	4413      	add	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	3348      	adds	r3, #72	@ 0x48
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c0c:	7bfa      	ldrb	r2, [r7, #15]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	334c      	adds	r3, #76	@ 0x4c
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c20:	7bfa      	ldrb	r2, [r7, #15]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	4413      	add	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	3354      	adds	r3, #84	@ 0x54
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	3301      	adds	r3, #1
 8002c38:	73fb      	strb	r3, [r7, #15]
 8002c3a:	7bfa      	ldrb	r2, [r7, #15]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d3af      	bcc.n	8002ba4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c44:	2300      	movs	r3, #0
 8002c46:	73fb      	strb	r3, [r7, #15]
 8002c48:	e044      	b.n	8002cd4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c4a:	7bfa      	ldrb	r2, [r7, #15]
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	4413      	add	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	440b      	add	r3, r1
 8002c58:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c60:	7bfa      	ldrb	r2, [r7, #15]
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	4613      	mov	r3, r2
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	4413      	add	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8002c72:	7bfa      	ldrb	r2, [r7, #15]
 8002c74:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c76:	7bfa      	ldrb	r2, [r7, #15]
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4413      	add	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	440b      	add	r3, r1
 8002c84:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002c88:	2200      	movs	r2, #0
 8002c8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c8c:	7bfa      	ldrb	r2, [r7, #15]
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	4613      	mov	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ca2:	7bfa      	ldrb	r2, [r7, #15]
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	4413      	add	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	440b      	add	r3, r1
 8002cb0:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cb8:	7bfa      	ldrb	r2, [r7, #15]
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	73fb      	strb	r3, [r7, #15]
 8002cd4:	7bfa      	ldrb	r2, [r7, #15]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d3b5      	bcc.n	8002c4a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	603b      	str	r3, [r7, #0]
 8002ce4:	687e      	ldr	r6, [r7, #4]
 8002ce6:	466d      	mov	r5, sp
 8002ce8:	f106 0410 	add.w	r4, r6, #16
 8002cec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cf4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cf8:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cfc:	1d33      	adds	r3, r6, #4
 8002cfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d00:	6838      	ldr	r0, [r7, #0]
 8002d02:	f001 fec1 	bl	8004a88 <USB_DevInit>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2202      	movs	r2, #2
 8002d10:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e014      	b.n	8002d42 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d102      	bne.n	8002d36 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 f80b 	bl	8002d4c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f002 f87f 	bl	8004e3e <USB_DevDisconnect>

  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002d4c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d7a:	4b05      	ldr	r3, [pc, #20]	@ (8002d90 <HAL_PCDEx_ActivateLPM+0x44>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	10000003 	.word	0x10000003

08002d94 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d98:	4b05      	ldr	r3, [pc, #20]	@ (8002db0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a04      	ldr	r2, [pc, #16]	@ (8002db0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002da2:	6013      	str	r3, [r2, #0]
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40007000 	.word	0x40007000

08002db4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002dbe:	4b23      	ldr	r3, [pc, #140]	@ (8002e4c <HAL_PWREx_EnableOverDrive+0x98>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	4a22      	ldr	r2, [pc, #136]	@ (8002e4c <HAL_PWREx_EnableOverDrive+0x98>)
 8002dc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dca:	4b20      	ldr	r3, [pc, #128]	@ (8002e4c <HAL_PWREx_EnableOverDrive+0x98>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002dd6:	4b1e      	ldr	r3, [pc, #120]	@ (8002e50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a1d      	ldr	r2, [pc, #116]	@ (8002e50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002de0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002de2:	f7fe faa7 	bl	8001334 <HAL_GetTick>
 8002de6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002de8:	e009      	b.n	8002dfe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002dea:	f7fe faa3 	bl	8001334 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002df8:	d901      	bls.n	8002dfe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e022      	b.n	8002e44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002dfe:	4b14      	ldr	r3, [pc, #80]	@ (8002e50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e0a:	d1ee      	bne.n	8002dea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e0c:	4b10      	ldr	r3, [pc, #64]	@ (8002e50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a0f      	ldr	r2, [pc, #60]	@ (8002e50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e16:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e18:	f7fe fa8c 	bl	8001334 <HAL_GetTick>
 8002e1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e1e:	e009      	b.n	8002e34 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e20:	f7fe fa88 	bl	8001334 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e2e:	d901      	bls.n	8002e34 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e007      	b.n	8002e44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e34:	4b06      	ldr	r3, [pc, #24]	@ (8002e50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e40:	d1ee      	bne.n	8002e20 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	40007000 	.word	0x40007000

08002e54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e29b      	b.n	80033a2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 8087 	beq.w	8002f86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e78:	4b96      	ldr	r3, [pc, #600]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 030c 	and.w	r3, r3, #12
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	d00c      	beq.n	8002e9e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e84:	4b93      	ldr	r3, [pc, #588]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 030c 	and.w	r3, r3, #12
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d112      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x62>
 8002e90:	4b90      	ldr	r3, [pc, #576]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e9c:	d10b      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e9e:	4b8d      	ldr	r3, [pc, #564]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d06c      	beq.n	8002f84 <HAL_RCC_OscConfig+0x130>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d168      	bne.n	8002f84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e275      	b.n	80033a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ebe:	d106      	bne.n	8002ece <HAL_RCC_OscConfig+0x7a>
 8002ec0:	4b84      	ldr	r3, [pc, #528]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a83      	ldr	r2, [pc, #524]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002ec6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eca:	6013      	str	r3, [r2, #0]
 8002ecc:	e02e      	b.n	8002f2c <HAL_RCC_OscConfig+0xd8>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x9c>
 8002ed6:	4b7f      	ldr	r3, [pc, #508]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a7e      	ldr	r2, [pc, #504]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002edc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	4b7c      	ldr	r3, [pc, #496]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a7b      	ldr	r2, [pc, #492]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002ee8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	e01d      	b.n	8002f2c <HAL_RCC_OscConfig+0xd8>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ef8:	d10c      	bne.n	8002f14 <HAL_RCC_OscConfig+0xc0>
 8002efa:	4b76      	ldr	r3, [pc, #472]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a75      	ldr	r2, [pc, #468]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002f00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	4b73      	ldr	r3, [pc, #460]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a72      	ldr	r2, [pc, #456]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002f0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	e00b      	b.n	8002f2c <HAL_RCC_OscConfig+0xd8>
 8002f14:	4b6f      	ldr	r3, [pc, #444]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a6e      	ldr	r2, [pc, #440]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002f1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	4b6c      	ldr	r3, [pc, #432]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a6b      	ldr	r2, [pc, #428]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002f26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d013      	beq.n	8002f5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f34:	f7fe f9fe 	bl	8001334 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f3c:	f7fe f9fa 	bl	8001334 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b64      	cmp	r3, #100	@ 0x64
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e229      	b.n	80033a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4e:	4b61      	ldr	r3, [pc, #388]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0f0      	beq.n	8002f3c <HAL_RCC_OscConfig+0xe8>
 8002f5a:	e014      	b.n	8002f86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5c:	f7fe f9ea 	bl	8001334 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f64:	f7fe f9e6 	bl	8001334 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b64      	cmp	r3, #100	@ 0x64
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e215      	b.n	80033a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f76:	4b57      	ldr	r3, [pc, #348]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_OscConfig+0x110>
 8002f82:	e000      	b.n	8002f86 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d069      	beq.n	8003066 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f92:	4b50      	ldr	r3, [pc, #320]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 030c 	and.w	r3, r3, #12
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00b      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f9e:	4b4d      	ldr	r3, [pc, #308]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d11c      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x190>
 8002faa:	4b4a      	ldr	r3, [pc, #296]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d116      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb6:	4b47      	ldr	r3, [pc, #284]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d005      	beq.n	8002fce <HAL_RCC_OscConfig+0x17a>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d001      	beq.n	8002fce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e1e9      	b.n	80033a2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fce:	4b41      	ldr	r3, [pc, #260]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	493d      	ldr	r1, [pc, #244]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe2:	e040      	b.n	8003066 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d023      	beq.n	8003034 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fec:	4b39      	ldr	r3, [pc, #228]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a38      	ldr	r2, [pc, #224]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002ff2:	f043 0301 	orr.w	r3, r3, #1
 8002ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff8:	f7fe f99c 	bl	8001334 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003000:	f7fe f998 	bl	8001334 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e1c7      	b.n	80033a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003012:	4b30      	ldr	r3, [pc, #192]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0f0      	beq.n	8003000 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301e:	4b2d      	ldr	r3, [pc, #180]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4929      	ldr	r1, [pc, #164]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 800302e:	4313      	orrs	r3, r2
 8003030:	600b      	str	r3, [r1, #0]
 8003032:	e018      	b.n	8003066 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003034:	4b27      	ldr	r3, [pc, #156]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a26      	ldr	r2, [pc, #152]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 800303a:	f023 0301 	bic.w	r3, r3, #1
 800303e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003040:	f7fe f978 	bl	8001334 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003048:	f7fe f974 	bl	8001334 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e1a3      	b.n	80033a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800305a:	4b1e      	ldr	r3, [pc, #120]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1f0      	bne.n	8003048 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	2b00      	cmp	r3, #0
 8003070:	d038      	beq.n	80030e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d019      	beq.n	80030ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800307a:	4b16      	ldr	r3, [pc, #88]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 800307c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800307e:	4a15      	ldr	r2, [pc, #84]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003086:	f7fe f955 	bl	8001334 <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800308e:	f7fe f951 	bl	8001334 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e180      	b.n	80033a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030a0:	4b0c      	ldr	r3, [pc, #48]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 80030a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0f0      	beq.n	800308e <HAL_RCC_OscConfig+0x23a>
 80030ac:	e01a      	b.n	80030e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ae:	4b09      	ldr	r3, [pc, #36]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 80030b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030b2:	4a08      	ldr	r2, [pc, #32]	@ (80030d4 <HAL_RCC_OscConfig+0x280>)
 80030b4:	f023 0301 	bic.w	r3, r3, #1
 80030b8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ba:	f7fe f93b 	bl	8001334 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c0:	e00a      	b.n	80030d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c2:	f7fe f937 	bl	8001334 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d903      	bls.n	80030d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e166      	b.n	80033a2 <HAL_RCC_OscConfig+0x54e>
 80030d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d8:	4b92      	ldr	r3, [pc, #584]	@ (8003324 <HAL_RCC_OscConfig+0x4d0>)
 80030da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1ee      	bne.n	80030c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 80a4 	beq.w	800323a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030f2:	4b8c      	ldr	r3, [pc, #560]	@ (8003324 <HAL_RCC_OscConfig+0x4d0>)
 80030f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10d      	bne.n	800311a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80030fe:	4b89      	ldr	r3, [pc, #548]	@ (8003324 <HAL_RCC_OscConfig+0x4d0>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	4a88      	ldr	r2, [pc, #544]	@ (8003324 <HAL_RCC_OscConfig+0x4d0>)
 8003104:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003108:	6413      	str	r3, [r2, #64]	@ 0x40
 800310a:	4b86      	ldr	r3, [pc, #536]	@ (8003324 <HAL_RCC_OscConfig+0x4d0>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003112:	60bb      	str	r3, [r7, #8]
 8003114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003116:	2301      	movs	r3, #1
 8003118:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800311a:	4b83      	ldr	r3, [pc, #524]	@ (8003328 <HAL_RCC_OscConfig+0x4d4>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003122:	2b00      	cmp	r3, #0
 8003124:	d118      	bne.n	8003158 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003126:	4b80      	ldr	r3, [pc, #512]	@ (8003328 <HAL_RCC_OscConfig+0x4d4>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a7f      	ldr	r2, [pc, #508]	@ (8003328 <HAL_RCC_OscConfig+0x4d4>)
 800312c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003130:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003132:	f7fe f8ff 	bl	8001334 <HAL_GetTick>
 8003136:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800313a:	f7fe f8fb 	bl	8001334 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b64      	cmp	r3, #100	@ 0x64
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e12a      	b.n	80033a2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800314c:	4b76      	ldr	r3, [pc, #472]	@ (8003328 <HAL_RCC_OscConfig+0x4d4>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0f0      	beq.n	800313a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d106      	bne.n	800316e <HAL_RCC_OscConfig+0x31a>
 8003160:	4b70      	ldr	r3, [pc, #448]	@ (8003324 <HAL_RCC_OscConfig+0x4d0>)
 8003162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003164:	4a6f      	ldr	r2, [pc, #444]	@ (8003324 <HAL_RCC_OscConfig+0x4d0>)
 8003166:	f043 0301 	orr.w	r3, r3, #1
 800316a:	6713      	str	r3, [r2, #112]	@ 0x70
 800316c:	e02d      	b.n	80031ca <HAL_RCC_OscConfig+0x376>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10c      	bne.n	8003190 <HAL_RCC_OscConfig+0x33c>
 8003176:	4b6b      	ldr	r3, [pc, #428]	@ (8003324 <HAL_RCC_OscConfig+0x4d0>)
 8003178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800317a:	4a6a      	ldr	r2, [pc, #424]	@ (8003324 <HAL_RCC_OscConfig+0x4d0>)
 800317c:	f023 0301 	bic.w	r3, r3, #1
 8003180:	6713      	str	r3, [r2, #112]	@ 0x70
 8003182:	4b68      	ldr	r3, [pc, #416]	@ (8003324 <HAL_RCC_OscConfig+0x4d0>)
 8003184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003186:	4a67      	ldr	r2, [pc, #412]	@ (8003324 <HAL_RCC_OscConfig+0x4d0>)
 8003188:	f023 0304 	bic.w	r3, r3, #4
 800318c:	6713      	str	r3, [r2, #112]	@ 0x70
 800318e:	e01c      	b.n	80031ca <HAL_RCC_OscConfig+0x376>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	2b05      	cmp	r3, #5
 8003196:	d10c      	bne.n	80031b2 <HAL_RCC_OscConfig+0x35e>
 8003198:	4b62      	ldr	r3, [pc, #392]	@ (8003324 <HAL_RCC_OscConfig+0x4d0>)
 800319a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800319c:	4a61      	ldr	r2, [pc, #388]	@ (8003324 <HAL_RCC_OscConfig+0x4d0>)
 800319e:	f043 0304 	orr.w	r3, r3, #4
 80031a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80031a4:	4b5f      	ldr	r3, [pc, #380]	@ (8003324 <HAL_RCC_OscConfig+0x4d0>)
 80031a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a8:	4a5e      	ldr	r2, [pc, #376]	@ (8003324 <HAL_RCC_OscConfig+0x4d0>)
 80031aa:	f043 0301 	orr.w	r3, r3, #1
 80031ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80031b0:	e00b      	b.n	80031ca <HAL_RCC_OscConfig+0x376>
 80031b2:	4b5c      	ldr	r3, [pc, #368]	@ (8003324 <HAL_RCC_OscConfig+0x4d0>)
 80031b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b6:	4a5b      	ldr	r2, [pc, #364]	@ (8003324 <HAL_RCC_OscConfig+0x4d0>)
 80031b8:	f023 0301 	bic.w	r3, r3, #1
 80031bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80031be:	4b59      	ldr	r3, [pc, #356]	@ (8003324 <HAL_RCC_OscConfig+0x4d0>)
 80031c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c2:	4a58      	ldr	r2, [pc, #352]	@ (8003324 <HAL_RCC_OscConfig+0x4d0>)
 80031c4:	f023 0304 	bic.w	r3, r3, #4
 80031c8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d015      	beq.n	80031fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d2:	f7fe f8af 	bl	8001334 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d8:	e00a      	b.n	80031f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031da:	f7fe f8ab 	bl	8001334 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e0d8      	b.n	80033a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f0:	4b4c      	ldr	r3, [pc, #304]	@ (8003324 <HAL_RCC_OscConfig+0x4d0>)
 80031f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0ee      	beq.n	80031da <HAL_RCC_OscConfig+0x386>
 80031fc:	e014      	b.n	8003228 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fe:	f7fe f899 	bl	8001334 <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003204:	e00a      	b.n	800321c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003206:	f7fe f895 	bl	8001334 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003214:	4293      	cmp	r3, r2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e0c2      	b.n	80033a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800321c:	4b41      	ldr	r3, [pc, #260]	@ (8003324 <HAL_RCC_OscConfig+0x4d0>)
 800321e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1ee      	bne.n	8003206 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003228:	7dfb      	ldrb	r3, [r7, #23]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d105      	bne.n	800323a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800322e:	4b3d      	ldr	r3, [pc, #244]	@ (8003324 <HAL_RCC_OscConfig+0x4d0>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003232:	4a3c      	ldr	r2, [pc, #240]	@ (8003324 <HAL_RCC_OscConfig+0x4d0>)
 8003234:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003238:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 80ae 	beq.w	80033a0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003244:	4b37      	ldr	r3, [pc, #220]	@ (8003324 <HAL_RCC_OscConfig+0x4d0>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 030c 	and.w	r3, r3, #12
 800324c:	2b08      	cmp	r3, #8
 800324e:	d06d      	beq.n	800332c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	2b02      	cmp	r3, #2
 8003256:	d14b      	bne.n	80032f0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003258:	4b32      	ldr	r3, [pc, #200]	@ (8003324 <HAL_RCC_OscConfig+0x4d0>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a31      	ldr	r2, [pc, #196]	@ (8003324 <HAL_RCC_OscConfig+0x4d0>)
 800325e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003264:	f7fe f866 	bl	8001334 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800326c:	f7fe f862 	bl	8001334 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e091      	b.n	80033a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327e:	4b29      	ldr	r3, [pc, #164]	@ (8003324 <HAL_RCC_OscConfig+0x4d0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1f0      	bne.n	800326c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69da      	ldr	r2, [r3, #28]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003298:	019b      	lsls	r3, r3, #6
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a0:	085b      	lsrs	r3, r3, #1
 80032a2:	3b01      	subs	r3, #1
 80032a4:	041b      	lsls	r3, r3, #16
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ac:	061b      	lsls	r3, r3, #24
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b4:	071b      	lsls	r3, r3, #28
 80032b6:	491b      	ldr	r1, [pc, #108]	@ (8003324 <HAL_RCC_OscConfig+0x4d0>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032bc:	4b19      	ldr	r3, [pc, #100]	@ (8003324 <HAL_RCC_OscConfig+0x4d0>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a18      	ldr	r2, [pc, #96]	@ (8003324 <HAL_RCC_OscConfig+0x4d0>)
 80032c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c8:	f7fe f834 	bl	8001334 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d0:	f7fe f830 	bl	8001334 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e05f      	b.n	80033a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e2:	4b10      	ldr	r3, [pc, #64]	@ (8003324 <HAL_RCC_OscConfig+0x4d0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0f0      	beq.n	80032d0 <HAL_RCC_OscConfig+0x47c>
 80032ee:	e057      	b.n	80033a0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003324 <HAL_RCC_OscConfig+0x4d0>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a0b      	ldr	r2, [pc, #44]	@ (8003324 <HAL_RCC_OscConfig+0x4d0>)
 80032f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fc:	f7fe f81a 	bl	8001334 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003304:	f7fe f816 	bl	8001334 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e045      	b.n	80033a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003316:	4b03      	ldr	r3, [pc, #12]	@ (8003324 <HAL_RCC_OscConfig+0x4d0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f0      	bne.n	8003304 <HAL_RCC_OscConfig+0x4b0>
 8003322:	e03d      	b.n	80033a0 <HAL_RCC_OscConfig+0x54c>
 8003324:	40023800 	.word	0x40023800
 8003328:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800332c:	4b1f      	ldr	r3, [pc, #124]	@ (80033ac <HAL_RCC_OscConfig+0x558>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d030      	beq.n	800339c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003344:	429a      	cmp	r2, r3
 8003346:	d129      	bne.n	800339c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003352:	429a      	cmp	r2, r3
 8003354:	d122      	bne.n	800339c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800335c:	4013      	ands	r3, r2
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003362:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003364:	4293      	cmp	r3, r2
 8003366:	d119      	bne.n	800339c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003372:	085b      	lsrs	r3, r3, #1
 8003374:	3b01      	subs	r3, #1
 8003376:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003378:	429a      	cmp	r2, r3
 800337a:	d10f      	bne.n	800339c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003386:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003388:	429a      	cmp	r2, r3
 800338a:	d107      	bne.n	800339c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003396:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003398:	429a      	cmp	r2, r3
 800339a:	d001      	beq.n	80033a0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e000      	b.n	80033a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40023800 	.word	0x40023800

080033b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80033ba:	2300      	movs	r3, #0
 80033bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e0d0      	b.n	800356a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033c8:	4b6a      	ldr	r3, [pc, #424]	@ (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 030f 	and.w	r3, r3, #15
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d910      	bls.n	80033f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d6:	4b67      	ldr	r3, [pc, #412]	@ (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f023 020f 	bic.w	r2, r3, #15
 80033de:	4965      	ldr	r1, [pc, #404]	@ (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e6:	4b63      	ldr	r3, [pc, #396]	@ (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d001      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e0b8      	b.n	800356a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d020      	beq.n	8003446 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003410:	4b59      	ldr	r3, [pc, #356]	@ (8003578 <HAL_RCC_ClockConfig+0x1c8>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	4a58      	ldr	r2, [pc, #352]	@ (8003578 <HAL_RCC_ClockConfig+0x1c8>)
 8003416:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800341a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0308 	and.w	r3, r3, #8
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003428:	4b53      	ldr	r3, [pc, #332]	@ (8003578 <HAL_RCC_ClockConfig+0x1c8>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	4a52      	ldr	r2, [pc, #328]	@ (8003578 <HAL_RCC_ClockConfig+0x1c8>)
 800342e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003432:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003434:	4b50      	ldr	r3, [pc, #320]	@ (8003578 <HAL_RCC_ClockConfig+0x1c8>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	494d      	ldr	r1, [pc, #308]	@ (8003578 <HAL_RCC_ClockConfig+0x1c8>)
 8003442:	4313      	orrs	r3, r2
 8003444:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d040      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d107      	bne.n	800346a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345a:	4b47      	ldr	r3, [pc, #284]	@ (8003578 <HAL_RCC_ClockConfig+0x1c8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d115      	bne.n	8003492 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e07f      	b.n	800356a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d107      	bne.n	8003482 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003472:	4b41      	ldr	r3, [pc, #260]	@ (8003578 <HAL_RCC_ClockConfig+0x1c8>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d109      	bne.n	8003492 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e073      	b.n	800356a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003482:	4b3d      	ldr	r3, [pc, #244]	@ (8003578 <HAL_RCC_ClockConfig+0x1c8>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e06b      	b.n	800356a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003492:	4b39      	ldr	r3, [pc, #228]	@ (8003578 <HAL_RCC_ClockConfig+0x1c8>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f023 0203 	bic.w	r2, r3, #3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	4936      	ldr	r1, [pc, #216]	@ (8003578 <HAL_RCC_ClockConfig+0x1c8>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034a4:	f7fd ff46 	bl	8001334 <HAL_GetTick>
 80034a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034aa:	e00a      	b.n	80034c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ac:	f7fd ff42 	bl	8001334 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e053      	b.n	800356a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003578 <HAL_RCC_ClockConfig+0x1c8>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 020c 	and.w	r2, r3, #12
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d1eb      	bne.n	80034ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034d4:	4b27      	ldr	r3, [pc, #156]	@ (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 030f 	and.w	r3, r3, #15
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d210      	bcs.n	8003504 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e2:	4b24      	ldr	r3, [pc, #144]	@ (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f023 020f 	bic.w	r2, r3, #15
 80034ea:	4922      	ldr	r1, [pc, #136]	@ (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f2:	4b20      	ldr	r3, [pc, #128]	@ (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d001      	beq.n	8003504 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e032      	b.n	800356a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003510:	4b19      	ldr	r3, [pc, #100]	@ (8003578 <HAL_RCC_ClockConfig+0x1c8>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	4916      	ldr	r1, [pc, #88]	@ (8003578 <HAL_RCC_ClockConfig+0x1c8>)
 800351e:	4313      	orrs	r3, r2
 8003520:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d009      	beq.n	8003542 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800352e:	4b12      	ldr	r3, [pc, #72]	@ (8003578 <HAL_RCC_ClockConfig+0x1c8>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	490e      	ldr	r1, [pc, #56]	@ (8003578 <HAL_RCC_ClockConfig+0x1c8>)
 800353e:	4313      	orrs	r3, r2
 8003540:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003542:	f000 f821 	bl	8003588 <HAL_RCC_GetSysClockFreq>
 8003546:	4602      	mov	r2, r0
 8003548:	4b0b      	ldr	r3, [pc, #44]	@ (8003578 <HAL_RCC_ClockConfig+0x1c8>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	091b      	lsrs	r3, r3, #4
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	490a      	ldr	r1, [pc, #40]	@ (800357c <HAL_RCC_ClockConfig+0x1cc>)
 8003554:	5ccb      	ldrb	r3, [r1, r3]
 8003556:	fa22 f303 	lsr.w	r3, r2, r3
 800355a:	4a09      	ldr	r2, [pc, #36]	@ (8003580 <HAL_RCC_ClockConfig+0x1d0>)
 800355c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800355e:	4b09      	ldr	r3, [pc, #36]	@ (8003584 <HAL_RCC_ClockConfig+0x1d4>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f7fd fea2 	bl	80012ac <HAL_InitTick>

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	40023c00 	.word	0x40023c00
 8003578:	40023800 	.word	0x40023800
 800357c:	080135a4 	.word	0x080135a4
 8003580:	20000000 	.word	0x20000000
 8003584:	20000004 	.word	0x20000004

08003588 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800358c:	b094      	sub	sp, #80	@ 0x50
 800358e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003590:	2300      	movs	r3, #0
 8003592:	647b      	str	r3, [r7, #68]	@ 0x44
 8003594:	2300      	movs	r3, #0
 8003596:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003598:	2300      	movs	r3, #0
 800359a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800359c:	2300      	movs	r3, #0
 800359e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035a0:	4b79      	ldr	r3, [pc, #484]	@ (8003788 <HAL_RCC_GetSysClockFreq+0x200>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f003 030c 	and.w	r3, r3, #12
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d00d      	beq.n	80035c8 <HAL_RCC_GetSysClockFreq+0x40>
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	f200 80e1 	bhi.w	8003774 <HAL_RCC_GetSysClockFreq+0x1ec>
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d002      	beq.n	80035bc <HAL_RCC_GetSysClockFreq+0x34>
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	d003      	beq.n	80035c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80035ba:	e0db      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035bc:	4b73      	ldr	r3, [pc, #460]	@ (800378c <HAL_RCC_GetSysClockFreq+0x204>)
 80035be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035c0:	e0db      	b.n	800377a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035c2:	4b73      	ldr	r3, [pc, #460]	@ (8003790 <HAL_RCC_GetSysClockFreq+0x208>)
 80035c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035c6:	e0d8      	b.n	800377a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035c8:	4b6f      	ldr	r3, [pc, #444]	@ (8003788 <HAL_RCC_GetSysClockFreq+0x200>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80035d2:	4b6d      	ldr	r3, [pc, #436]	@ (8003788 <HAL_RCC_GetSysClockFreq+0x200>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d063      	beq.n	80036a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035de:	4b6a      	ldr	r3, [pc, #424]	@ (8003788 <HAL_RCC_GetSysClockFreq+0x200>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	099b      	lsrs	r3, r3, #6
 80035e4:	2200      	movs	r2, #0
 80035e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80035ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80035f2:	2300      	movs	r3, #0
 80035f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80035f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80035fa:	4622      	mov	r2, r4
 80035fc:	462b      	mov	r3, r5
 80035fe:	f04f 0000 	mov.w	r0, #0
 8003602:	f04f 0100 	mov.w	r1, #0
 8003606:	0159      	lsls	r1, r3, #5
 8003608:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800360c:	0150      	lsls	r0, r2, #5
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	4621      	mov	r1, r4
 8003614:	1a51      	subs	r1, r2, r1
 8003616:	6139      	str	r1, [r7, #16]
 8003618:	4629      	mov	r1, r5
 800361a:	eb63 0301 	sbc.w	r3, r3, r1
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800362c:	4659      	mov	r1, fp
 800362e:	018b      	lsls	r3, r1, #6
 8003630:	4651      	mov	r1, sl
 8003632:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003636:	4651      	mov	r1, sl
 8003638:	018a      	lsls	r2, r1, #6
 800363a:	4651      	mov	r1, sl
 800363c:	ebb2 0801 	subs.w	r8, r2, r1
 8003640:	4659      	mov	r1, fp
 8003642:	eb63 0901 	sbc.w	r9, r3, r1
 8003646:	f04f 0200 	mov.w	r2, #0
 800364a:	f04f 0300 	mov.w	r3, #0
 800364e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003652:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003656:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800365a:	4690      	mov	r8, r2
 800365c:	4699      	mov	r9, r3
 800365e:	4623      	mov	r3, r4
 8003660:	eb18 0303 	adds.w	r3, r8, r3
 8003664:	60bb      	str	r3, [r7, #8]
 8003666:	462b      	mov	r3, r5
 8003668:	eb49 0303 	adc.w	r3, r9, r3
 800366c:	60fb      	str	r3, [r7, #12]
 800366e:	f04f 0200 	mov.w	r2, #0
 8003672:	f04f 0300 	mov.w	r3, #0
 8003676:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800367a:	4629      	mov	r1, r5
 800367c:	024b      	lsls	r3, r1, #9
 800367e:	4621      	mov	r1, r4
 8003680:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003684:	4621      	mov	r1, r4
 8003686:	024a      	lsls	r2, r1, #9
 8003688:	4610      	mov	r0, r2
 800368a:	4619      	mov	r1, r3
 800368c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800368e:	2200      	movs	r2, #0
 8003690:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003692:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003694:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003698:	f7fc fe3a 	bl	8000310 <__aeabi_uldivmod>
 800369c:	4602      	mov	r2, r0
 800369e:	460b      	mov	r3, r1
 80036a0:	4613      	mov	r3, r2
 80036a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036a4:	e058      	b.n	8003758 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036a6:	4b38      	ldr	r3, [pc, #224]	@ (8003788 <HAL_RCC_GetSysClockFreq+0x200>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	099b      	lsrs	r3, r3, #6
 80036ac:	2200      	movs	r2, #0
 80036ae:	4618      	mov	r0, r3
 80036b0:	4611      	mov	r1, r2
 80036b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036b6:	623b      	str	r3, [r7, #32]
 80036b8:	2300      	movs	r3, #0
 80036ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80036bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036c0:	4642      	mov	r2, r8
 80036c2:	464b      	mov	r3, r9
 80036c4:	f04f 0000 	mov.w	r0, #0
 80036c8:	f04f 0100 	mov.w	r1, #0
 80036cc:	0159      	lsls	r1, r3, #5
 80036ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036d2:	0150      	lsls	r0, r2, #5
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4641      	mov	r1, r8
 80036da:	ebb2 0a01 	subs.w	sl, r2, r1
 80036de:	4649      	mov	r1, r9
 80036e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80036e4:	f04f 0200 	mov.w	r2, #0
 80036e8:	f04f 0300 	mov.w	r3, #0
 80036ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036f8:	ebb2 040a 	subs.w	r4, r2, sl
 80036fc:	eb63 050b 	sbc.w	r5, r3, fp
 8003700:	f04f 0200 	mov.w	r2, #0
 8003704:	f04f 0300 	mov.w	r3, #0
 8003708:	00eb      	lsls	r3, r5, #3
 800370a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800370e:	00e2      	lsls	r2, r4, #3
 8003710:	4614      	mov	r4, r2
 8003712:	461d      	mov	r5, r3
 8003714:	4643      	mov	r3, r8
 8003716:	18e3      	adds	r3, r4, r3
 8003718:	603b      	str	r3, [r7, #0]
 800371a:	464b      	mov	r3, r9
 800371c:	eb45 0303 	adc.w	r3, r5, r3
 8003720:	607b      	str	r3, [r7, #4]
 8003722:	f04f 0200 	mov.w	r2, #0
 8003726:	f04f 0300 	mov.w	r3, #0
 800372a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800372e:	4629      	mov	r1, r5
 8003730:	028b      	lsls	r3, r1, #10
 8003732:	4621      	mov	r1, r4
 8003734:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003738:	4621      	mov	r1, r4
 800373a:	028a      	lsls	r2, r1, #10
 800373c:	4610      	mov	r0, r2
 800373e:	4619      	mov	r1, r3
 8003740:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003742:	2200      	movs	r2, #0
 8003744:	61bb      	str	r3, [r7, #24]
 8003746:	61fa      	str	r2, [r7, #28]
 8003748:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800374c:	f7fc fde0 	bl	8000310 <__aeabi_uldivmod>
 8003750:	4602      	mov	r2, r0
 8003752:	460b      	mov	r3, r1
 8003754:	4613      	mov	r3, r2
 8003756:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003758:	4b0b      	ldr	r3, [pc, #44]	@ (8003788 <HAL_RCC_GetSysClockFreq+0x200>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	0c1b      	lsrs	r3, r3, #16
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	3301      	adds	r3, #1
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003768:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800376a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800376c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003770:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003772:	e002      	b.n	800377a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003774:	4b05      	ldr	r3, [pc, #20]	@ (800378c <HAL_RCC_GetSysClockFreq+0x204>)
 8003776:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003778:	bf00      	nop
    }
  }
  return sysclockfreq;
 800377a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800377c:	4618      	mov	r0, r3
 800377e:	3750      	adds	r7, #80	@ 0x50
 8003780:	46bd      	mov	sp, r7
 8003782:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003786:	bf00      	nop
 8003788:	40023800 	.word	0x40023800
 800378c:	00f42400 	.word	0x00f42400
 8003790:	007a1200 	.word	0x007a1200

08003794 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003798:	4b03      	ldr	r3, [pc, #12]	@ (80037a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800379a:	681b      	ldr	r3, [r3, #0]
}
 800379c:	4618      	mov	r0, r3
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	20000000 	.word	0x20000000

080037ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037b0:	f7ff fff0 	bl	8003794 <HAL_RCC_GetHCLKFreq>
 80037b4:	4602      	mov	r2, r0
 80037b6:	4b05      	ldr	r3, [pc, #20]	@ (80037cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	0a9b      	lsrs	r3, r3, #10
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	4903      	ldr	r1, [pc, #12]	@ (80037d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037c2:	5ccb      	ldrb	r3, [r1, r3]
 80037c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40023800 	.word	0x40023800
 80037d0:	080135b4 	.word	0x080135b4

080037d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037d8:	f7ff ffdc 	bl	8003794 <HAL_RCC_GetHCLKFreq>
 80037dc:	4602      	mov	r2, r0
 80037de:	4b05      	ldr	r3, [pc, #20]	@ (80037f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	0b5b      	lsrs	r3, r3, #13
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	4903      	ldr	r1, [pc, #12]	@ (80037f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037ea:	5ccb      	ldrb	r3, [r1, r3]
 80037ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40023800 	.word	0x40023800
 80037f8:	080135b4 	.word	0x080135b4

080037fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b088      	sub	sp, #32
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003804:	2300      	movs	r3, #0
 8003806:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003808:	2300      	movs	r3, #0
 800380a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800380c:	2300      	movs	r3, #0
 800380e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003810:	2300      	movs	r3, #0
 8003812:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003814:	2300      	movs	r3, #0
 8003816:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d012      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003824:	4b69      	ldr	r3, [pc, #420]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	4a68      	ldr	r2, [pc, #416]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800382a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800382e:	6093      	str	r3, [r2, #8]
 8003830:	4b66      	ldr	r3, [pc, #408]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003838:	4964      	ldr	r1, [pc, #400]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800383a:	4313      	orrs	r3, r2
 800383c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003846:	2301      	movs	r3, #1
 8003848:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d017      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003856:	4b5d      	ldr	r3, [pc, #372]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003858:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800385c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003864:	4959      	ldr	r1, [pc, #356]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003866:	4313      	orrs	r3, r2
 8003868:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003870:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003874:	d101      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003876:	2301      	movs	r3, #1
 8003878:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003882:	2301      	movs	r3, #1
 8003884:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d017      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003892:	4b4e      	ldr	r3, [pc, #312]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003894:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003898:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a0:	494a      	ldr	r1, [pc, #296]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038b0:	d101      	bne.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80038b2:	2301      	movs	r3, #1
 80038b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80038be:	2301      	movs	r3, #1
 80038c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80038ce:	2301      	movs	r3, #1
 80038d0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0320 	and.w	r3, r3, #32
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 808b 	beq.w	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038e0:	4b3a      	ldr	r3, [pc, #232]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e4:	4a39      	ldr	r2, [pc, #228]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80038ec:	4b37      	ldr	r3, [pc, #220]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038f4:	60bb      	str	r3, [r7, #8]
 80038f6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80038f8:	4b35      	ldr	r3, [pc, #212]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a34      	ldr	r2, [pc, #208]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003902:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003904:	f7fd fd16 	bl	8001334 <HAL_GetTick>
 8003908:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800390a:	e008      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800390c:	f7fd fd12 	bl	8001334 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b64      	cmp	r3, #100	@ 0x64
 8003918:	d901      	bls.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e38f      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800391e:	4b2c      	ldr	r3, [pc, #176]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0f0      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800392a:	4b28      	ldr	r3, [pc, #160]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800392c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800392e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003932:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d035      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	429a      	cmp	r2, r3
 8003946:	d02e      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003948:	4b20      	ldr	r3, [pc, #128]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800394a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800394c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003950:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003952:	4b1e      	ldr	r3, [pc, #120]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003956:	4a1d      	ldr	r2, [pc, #116]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800395c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800395e:	4b1b      	ldr	r3, [pc, #108]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003962:	4a1a      	ldr	r2, [pc, #104]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003964:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003968:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800396a:	4a18      	ldr	r2, [pc, #96]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003970:	4b16      	ldr	r3, [pc, #88]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b01      	cmp	r3, #1
 800397a:	d114      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397c:	f7fd fcda 	bl	8001334 <HAL_GetTick>
 8003980:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003982:	e00a      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003984:	f7fd fcd6 	bl	8001334 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003992:	4293      	cmp	r3, r2
 8003994:	d901      	bls.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e351      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800399a:	4b0c      	ldr	r3, [pc, #48]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800399c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0ee      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039b2:	d111      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80039b4:	4b05      	ldr	r3, [pc, #20]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80039c0:	4b04      	ldr	r3, [pc, #16]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80039c2:	400b      	ands	r3, r1
 80039c4:	4901      	ldr	r1, [pc, #4]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	608b      	str	r3, [r1, #8]
 80039ca:	e00b      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80039cc:	40023800 	.word	0x40023800
 80039d0:	40007000 	.word	0x40007000
 80039d4:	0ffffcff 	.word	0x0ffffcff
 80039d8:	4bac      	ldr	r3, [pc, #688]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	4aab      	ldr	r2, [pc, #684]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039de:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80039e2:	6093      	str	r3, [r2, #8]
 80039e4:	4ba9      	ldr	r3, [pc, #676]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039e6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f0:	49a6      	ldr	r1, [pc, #664]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0310 	and.w	r3, r3, #16
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d010      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a02:	4ba2      	ldr	r3, [pc, #648]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a08:	4aa0      	ldr	r2, [pc, #640]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a0e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003a12:	4b9e      	ldr	r3, [pc, #632]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a14:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a1c:	499b      	ldr	r1, [pc, #620]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00a      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a30:	4b96      	ldr	r3, [pc, #600]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a36:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a3e:	4993      	ldr	r1, [pc, #588]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00a      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a52:	4b8e      	ldr	r3, [pc, #568]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a58:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a60:	498a      	ldr	r1, [pc, #552]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00a      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a74:	4b85      	ldr	r3, [pc, #532]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a82:	4982      	ldr	r1, [pc, #520]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a96:	4b7d      	ldr	r3, [pc, #500]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a9c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa4:	4979      	ldr	r1, [pc, #484]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00a      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ab8:	4b74      	ldr	r3, [pc, #464]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003abe:	f023 0203 	bic.w	r2, r3, #3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac6:	4971      	ldr	r1, [pc, #452]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00a      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ada:	4b6c      	ldr	r3, [pc, #432]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae0:	f023 020c 	bic.w	r2, r3, #12
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ae8:	4968      	ldr	r1, [pc, #416]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00a      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003afc:	4b63      	ldr	r3, [pc, #396]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b02:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b0a:	4960      	ldr	r1, [pc, #384]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00a      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b1e:	4b5b      	ldr	r3, [pc, #364]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b24:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b2c:	4957      	ldr	r1, [pc, #348]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00a      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b40:	4b52      	ldr	r3, [pc, #328]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b46:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b4e:	494f      	ldr	r1, [pc, #316]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003b62:	4b4a      	ldr	r3, [pc, #296]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b68:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b70:	4946      	ldr	r1, [pc, #280]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00a      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003b84:	4b41      	ldr	r3, [pc, #260]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b8a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b92:	493e      	ldr	r1, [pc, #248]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003ba6:	4b39      	ldr	r3, [pc, #228]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bb4:	4935      	ldr	r1, [pc, #212]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00a      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003bc8:	4b30      	ldr	r3, [pc, #192]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bce:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bd6:	492d      	ldr	r1, [pc, #180]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d011      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003bea:	4b28      	ldr	r3, [pc, #160]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bf0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bf8:	4924      	ldr	r1, [pc, #144]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c08:	d101      	bne.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00a      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c2a:	4b18      	ldr	r3, [pc, #96]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c30:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c38:	4914      	ldr	r1, [pc, #80]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00b      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c52:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c5c:	490b      	ldr	r1, [pc, #44]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00f      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003c70:	4b06      	ldr	r3, [pc, #24]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c76:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c80:	4902      	ldr	r1, [pc, #8]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003c88:	e002      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003c8a:	bf00      	nop
 8003c8c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00b      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c9c:	4b8a      	ldr	r3, [pc, #552]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ca2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cac:	4986      	ldr	r1, [pc, #536]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00b      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003cc0:	4b81      	ldr	r3, [pc, #516]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cc6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cd0:	497d      	ldr	r1, [pc, #500]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d006      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 80d6 	beq.w	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003cec:	4b76      	ldr	r3, [pc, #472]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a75      	ldr	r2, [pc, #468]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cf2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003cf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cf8:	f7fd fb1c 	bl	8001334 <HAL_GetTick>
 8003cfc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d00:	f7fd fb18 	bl	8001334 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b64      	cmp	r3, #100	@ 0x64
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e195      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d12:	4b6d      	ldr	r3, [pc, #436]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d021      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d11d      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d32:	4b65      	ldr	r3, [pc, #404]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d38:	0c1b      	lsrs	r3, r3, #16
 8003d3a:	f003 0303 	and.w	r3, r3, #3
 8003d3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d40:	4b61      	ldr	r3, [pc, #388]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d46:	0e1b      	lsrs	r3, r3, #24
 8003d48:	f003 030f 	and.w	r3, r3, #15
 8003d4c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	019a      	lsls	r2, r3, #6
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	041b      	lsls	r3, r3, #16
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	061b      	lsls	r3, r3, #24
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	071b      	lsls	r3, r3, #28
 8003d66:	4958      	ldr	r1, [pc, #352]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d004      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d82:	d00a      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d02e      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d98:	d129      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d9a:	4b4b      	ldr	r3, [pc, #300]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003da0:	0c1b      	lsrs	r3, r3, #16
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003da8:	4b47      	ldr	r3, [pc, #284]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dae:	0f1b      	lsrs	r3, r3, #28
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	019a      	lsls	r2, r3, #6
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	041b      	lsls	r3, r3, #16
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	061b      	lsls	r3, r3, #24
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	071b      	lsls	r3, r3, #28
 8003dce:	493e      	ldr	r1, [pc, #248]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003dd6:	4b3c      	ldr	r3, [pc, #240]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ddc:	f023 021f 	bic.w	r2, r3, #31
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de4:	3b01      	subs	r3, #1
 8003de6:	4938      	ldr	r1, [pc, #224]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d01d      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003dfa:	4b33      	ldr	r3, [pc, #204]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e00:	0e1b      	lsrs	r3, r3, #24
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e08:	4b2f      	ldr	r3, [pc, #188]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e0e:	0f1b      	lsrs	r3, r3, #28
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	019a      	lsls	r2, r3, #6
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	041b      	lsls	r3, r3, #16
 8003e22:	431a      	orrs	r2, r3
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	061b      	lsls	r3, r3, #24
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	071b      	lsls	r3, r3, #28
 8003e2e:	4926      	ldr	r1, [pc, #152]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d011      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	019a      	lsls	r2, r3, #6
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	041b      	lsls	r3, r3, #16
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	061b      	lsls	r3, r3, #24
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	071b      	lsls	r3, r3, #28
 8003e5e:	491a      	ldr	r1, [pc, #104]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e66:	4b18      	ldr	r3, [pc, #96]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a17      	ldr	r2, [pc, #92]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e6c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e72:	f7fd fa5f 	bl	8001334 <HAL_GetTick>
 8003e76:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e78:	e008      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e7a:	f7fd fa5b 	bl	8001334 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b64      	cmp	r3, #100	@ 0x64
 8003e86:	d901      	bls.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e0d8      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0f0      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	f040 80ce 	bne.w	800403c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ea0:	4b09      	ldr	r3, [pc, #36]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a08      	ldr	r2, [pc, #32]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ea6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003eaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eac:	f7fd fa42 	bl	8001334 <HAL_GetTick>
 8003eb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003eb2:	e00b      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003eb4:	f7fd fa3e 	bl	8001334 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b64      	cmp	r3, #100	@ 0x64
 8003ec0:	d904      	bls.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e0bb      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003ec6:	bf00      	nop
 8003ec8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ecc:	4b5e      	ldr	r3, [pc, #376]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ed4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ed8:	d0ec      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d009      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d02e      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d12a      	bne.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f02:	4b51      	ldr	r3, [pc, #324]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f08:	0c1b      	lsrs	r3, r3, #16
 8003f0a:	f003 0303 	and.w	r3, r3, #3
 8003f0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f10:	4b4d      	ldr	r3, [pc, #308]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f16:	0f1b      	lsrs	r3, r3, #28
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	019a      	lsls	r2, r3, #6
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	041b      	lsls	r3, r3, #16
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	061b      	lsls	r3, r3, #24
 8003f30:	431a      	orrs	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	071b      	lsls	r3, r3, #28
 8003f36:	4944      	ldr	r1, [pc, #272]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f3e:	4b42      	ldr	r3, [pc, #264]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f44:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	021b      	lsls	r3, r3, #8
 8003f50:	493d      	ldr	r1, [pc, #244]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d022      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f6c:	d11d      	bne.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f6e:	4b36      	ldr	r3, [pc, #216]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f74:	0e1b      	lsrs	r3, r3, #24
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f7c:	4b32      	ldr	r3, [pc, #200]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f82:	0f1b      	lsrs	r3, r3, #28
 8003f84:	f003 0307 	and.w	r3, r3, #7
 8003f88:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	019a      	lsls	r2, r3, #6
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	041b      	lsls	r3, r3, #16
 8003f96:	431a      	orrs	r2, r3
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	061b      	lsls	r3, r3, #24
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	071b      	lsls	r3, r3, #28
 8003fa2:	4929      	ldr	r1, [pc, #164]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d028      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fb6:	4b24      	ldr	r3, [pc, #144]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fbc:	0e1b      	lsrs	r3, r3, #24
 8003fbe:	f003 030f 	and.w	r3, r3, #15
 8003fc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003fc4:	4b20      	ldr	r3, [pc, #128]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fca:	0c1b      	lsrs	r3, r3, #16
 8003fcc:	f003 0303 	and.w	r3, r3, #3
 8003fd0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	019a      	lsls	r2, r3, #6
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	041b      	lsls	r3, r3, #16
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	061b      	lsls	r3, r3, #24
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69db      	ldr	r3, [r3, #28]
 8003fe8:	071b      	lsls	r3, r3, #28
 8003fea:	4917      	ldr	r1, [pc, #92]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ff2:	4b15      	ldr	r3, [pc, #84]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ff8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004000:	4911      	ldr	r1, [pc, #68]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004002:	4313      	orrs	r3, r2
 8004004:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004008:	4b0f      	ldr	r3, [pc, #60]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a0e      	ldr	r2, [pc, #56]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800400e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004012:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004014:	f7fd f98e 	bl	8001334 <HAL_GetTick>
 8004018:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800401a:	e008      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800401c:	f7fd f98a 	bl	8001334 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b64      	cmp	r3, #100	@ 0x64
 8004028:	d901      	bls.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e007      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800402e:	4b06      	ldr	r3, [pc, #24]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004036:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800403a:	d1ef      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3720      	adds	r7, #32
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40023800 	.word	0x40023800

0800404c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e040      	b.n	80040e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004062:	2b00      	cmp	r3, #0
 8004064:	d106      	bne.n	8004074 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7fc fd90 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2224      	movs	r2, #36	@ 0x24
 8004078:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0201 	bic.w	r2, r2, #1
 8004088:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f82c 	bl	80040e8 <UART_SetConfig>
 8004090:	4603      	mov	r3, r0
 8004092:	2b01      	cmp	r3, #1
 8004094:	d101      	bne.n	800409a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e022      	b.n	80040e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d002      	beq.n	80040a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fa84 	bl	80045b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 0201 	orr.w	r2, r2, #1
 80040d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 fb0b 	bl	80046f4 <UART_CheckIdleState>
 80040de:	4603      	mov	r3, r0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b088      	sub	sp, #32
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040f0:	2300      	movs	r3, #0
 80040f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	431a      	orrs	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	4313      	orrs	r3, r2
 800410a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	4ba6      	ldr	r3, [pc, #664]	@ (80043ac <UART_SetConfig+0x2c4>)
 8004114:	4013      	ands	r3, r2
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	6812      	ldr	r2, [r2, #0]
 800411a:	6979      	ldr	r1, [r7, #20]
 800411c:	430b      	orrs	r3, r1
 800411e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	4313      	orrs	r3, r2
 8004144:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	430a      	orrs	r2, r1
 8004158:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a94      	ldr	r2, [pc, #592]	@ (80043b0 <UART_SetConfig+0x2c8>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d120      	bne.n	80041a6 <UART_SetConfig+0xbe>
 8004164:	4b93      	ldr	r3, [pc, #588]	@ (80043b4 <UART_SetConfig+0x2cc>)
 8004166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	2b03      	cmp	r3, #3
 8004170:	d816      	bhi.n	80041a0 <UART_SetConfig+0xb8>
 8004172:	a201      	add	r2, pc, #4	@ (adr r2, 8004178 <UART_SetConfig+0x90>)
 8004174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004178:	08004189 	.word	0x08004189
 800417c:	08004195 	.word	0x08004195
 8004180:	0800418f 	.word	0x0800418f
 8004184:	0800419b 	.word	0x0800419b
 8004188:	2301      	movs	r3, #1
 800418a:	77fb      	strb	r3, [r7, #31]
 800418c:	e150      	b.n	8004430 <UART_SetConfig+0x348>
 800418e:	2302      	movs	r3, #2
 8004190:	77fb      	strb	r3, [r7, #31]
 8004192:	e14d      	b.n	8004430 <UART_SetConfig+0x348>
 8004194:	2304      	movs	r3, #4
 8004196:	77fb      	strb	r3, [r7, #31]
 8004198:	e14a      	b.n	8004430 <UART_SetConfig+0x348>
 800419a:	2308      	movs	r3, #8
 800419c:	77fb      	strb	r3, [r7, #31]
 800419e:	e147      	b.n	8004430 <UART_SetConfig+0x348>
 80041a0:	2310      	movs	r3, #16
 80041a2:	77fb      	strb	r3, [r7, #31]
 80041a4:	e144      	b.n	8004430 <UART_SetConfig+0x348>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a83      	ldr	r2, [pc, #524]	@ (80043b8 <UART_SetConfig+0x2d0>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d132      	bne.n	8004216 <UART_SetConfig+0x12e>
 80041b0:	4b80      	ldr	r3, [pc, #512]	@ (80043b4 <UART_SetConfig+0x2cc>)
 80041b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041b6:	f003 030c 	and.w	r3, r3, #12
 80041ba:	2b0c      	cmp	r3, #12
 80041bc:	d828      	bhi.n	8004210 <UART_SetConfig+0x128>
 80041be:	a201      	add	r2, pc, #4	@ (adr r2, 80041c4 <UART_SetConfig+0xdc>)
 80041c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c4:	080041f9 	.word	0x080041f9
 80041c8:	08004211 	.word	0x08004211
 80041cc:	08004211 	.word	0x08004211
 80041d0:	08004211 	.word	0x08004211
 80041d4:	08004205 	.word	0x08004205
 80041d8:	08004211 	.word	0x08004211
 80041dc:	08004211 	.word	0x08004211
 80041e0:	08004211 	.word	0x08004211
 80041e4:	080041ff 	.word	0x080041ff
 80041e8:	08004211 	.word	0x08004211
 80041ec:	08004211 	.word	0x08004211
 80041f0:	08004211 	.word	0x08004211
 80041f4:	0800420b 	.word	0x0800420b
 80041f8:	2300      	movs	r3, #0
 80041fa:	77fb      	strb	r3, [r7, #31]
 80041fc:	e118      	b.n	8004430 <UART_SetConfig+0x348>
 80041fe:	2302      	movs	r3, #2
 8004200:	77fb      	strb	r3, [r7, #31]
 8004202:	e115      	b.n	8004430 <UART_SetConfig+0x348>
 8004204:	2304      	movs	r3, #4
 8004206:	77fb      	strb	r3, [r7, #31]
 8004208:	e112      	b.n	8004430 <UART_SetConfig+0x348>
 800420a:	2308      	movs	r3, #8
 800420c:	77fb      	strb	r3, [r7, #31]
 800420e:	e10f      	b.n	8004430 <UART_SetConfig+0x348>
 8004210:	2310      	movs	r3, #16
 8004212:	77fb      	strb	r3, [r7, #31]
 8004214:	e10c      	b.n	8004430 <UART_SetConfig+0x348>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a68      	ldr	r2, [pc, #416]	@ (80043bc <UART_SetConfig+0x2d4>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d120      	bne.n	8004262 <UART_SetConfig+0x17a>
 8004220:	4b64      	ldr	r3, [pc, #400]	@ (80043b4 <UART_SetConfig+0x2cc>)
 8004222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004226:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800422a:	2b30      	cmp	r3, #48	@ 0x30
 800422c:	d013      	beq.n	8004256 <UART_SetConfig+0x16e>
 800422e:	2b30      	cmp	r3, #48	@ 0x30
 8004230:	d814      	bhi.n	800425c <UART_SetConfig+0x174>
 8004232:	2b20      	cmp	r3, #32
 8004234:	d009      	beq.n	800424a <UART_SetConfig+0x162>
 8004236:	2b20      	cmp	r3, #32
 8004238:	d810      	bhi.n	800425c <UART_SetConfig+0x174>
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <UART_SetConfig+0x15c>
 800423e:	2b10      	cmp	r3, #16
 8004240:	d006      	beq.n	8004250 <UART_SetConfig+0x168>
 8004242:	e00b      	b.n	800425c <UART_SetConfig+0x174>
 8004244:	2300      	movs	r3, #0
 8004246:	77fb      	strb	r3, [r7, #31]
 8004248:	e0f2      	b.n	8004430 <UART_SetConfig+0x348>
 800424a:	2302      	movs	r3, #2
 800424c:	77fb      	strb	r3, [r7, #31]
 800424e:	e0ef      	b.n	8004430 <UART_SetConfig+0x348>
 8004250:	2304      	movs	r3, #4
 8004252:	77fb      	strb	r3, [r7, #31]
 8004254:	e0ec      	b.n	8004430 <UART_SetConfig+0x348>
 8004256:	2308      	movs	r3, #8
 8004258:	77fb      	strb	r3, [r7, #31]
 800425a:	e0e9      	b.n	8004430 <UART_SetConfig+0x348>
 800425c:	2310      	movs	r3, #16
 800425e:	77fb      	strb	r3, [r7, #31]
 8004260:	e0e6      	b.n	8004430 <UART_SetConfig+0x348>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a56      	ldr	r2, [pc, #344]	@ (80043c0 <UART_SetConfig+0x2d8>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d120      	bne.n	80042ae <UART_SetConfig+0x1c6>
 800426c:	4b51      	ldr	r3, [pc, #324]	@ (80043b4 <UART_SetConfig+0x2cc>)
 800426e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004272:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004276:	2bc0      	cmp	r3, #192	@ 0xc0
 8004278:	d013      	beq.n	80042a2 <UART_SetConfig+0x1ba>
 800427a:	2bc0      	cmp	r3, #192	@ 0xc0
 800427c:	d814      	bhi.n	80042a8 <UART_SetConfig+0x1c0>
 800427e:	2b80      	cmp	r3, #128	@ 0x80
 8004280:	d009      	beq.n	8004296 <UART_SetConfig+0x1ae>
 8004282:	2b80      	cmp	r3, #128	@ 0x80
 8004284:	d810      	bhi.n	80042a8 <UART_SetConfig+0x1c0>
 8004286:	2b00      	cmp	r3, #0
 8004288:	d002      	beq.n	8004290 <UART_SetConfig+0x1a8>
 800428a:	2b40      	cmp	r3, #64	@ 0x40
 800428c:	d006      	beq.n	800429c <UART_SetConfig+0x1b4>
 800428e:	e00b      	b.n	80042a8 <UART_SetConfig+0x1c0>
 8004290:	2300      	movs	r3, #0
 8004292:	77fb      	strb	r3, [r7, #31]
 8004294:	e0cc      	b.n	8004430 <UART_SetConfig+0x348>
 8004296:	2302      	movs	r3, #2
 8004298:	77fb      	strb	r3, [r7, #31]
 800429a:	e0c9      	b.n	8004430 <UART_SetConfig+0x348>
 800429c:	2304      	movs	r3, #4
 800429e:	77fb      	strb	r3, [r7, #31]
 80042a0:	e0c6      	b.n	8004430 <UART_SetConfig+0x348>
 80042a2:	2308      	movs	r3, #8
 80042a4:	77fb      	strb	r3, [r7, #31]
 80042a6:	e0c3      	b.n	8004430 <UART_SetConfig+0x348>
 80042a8:	2310      	movs	r3, #16
 80042aa:	77fb      	strb	r3, [r7, #31]
 80042ac:	e0c0      	b.n	8004430 <UART_SetConfig+0x348>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a44      	ldr	r2, [pc, #272]	@ (80043c4 <UART_SetConfig+0x2dc>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d125      	bne.n	8004304 <UART_SetConfig+0x21c>
 80042b8:	4b3e      	ldr	r3, [pc, #248]	@ (80043b4 <UART_SetConfig+0x2cc>)
 80042ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042c6:	d017      	beq.n	80042f8 <UART_SetConfig+0x210>
 80042c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042cc:	d817      	bhi.n	80042fe <UART_SetConfig+0x216>
 80042ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042d2:	d00b      	beq.n	80042ec <UART_SetConfig+0x204>
 80042d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042d8:	d811      	bhi.n	80042fe <UART_SetConfig+0x216>
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <UART_SetConfig+0x1fe>
 80042de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042e2:	d006      	beq.n	80042f2 <UART_SetConfig+0x20a>
 80042e4:	e00b      	b.n	80042fe <UART_SetConfig+0x216>
 80042e6:	2300      	movs	r3, #0
 80042e8:	77fb      	strb	r3, [r7, #31]
 80042ea:	e0a1      	b.n	8004430 <UART_SetConfig+0x348>
 80042ec:	2302      	movs	r3, #2
 80042ee:	77fb      	strb	r3, [r7, #31]
 80042f0:	e09e      	b.n	8004430 <UART_SetConfig+0x348>
 80042f2:	2304      	movs	r3, #4
 80042f4:	77fb      	strb	r3, [r7, #31]
 80042f6:	e09b      	b.n	8004430 <UART_SetConfig+0x348>
 80042f8:	2308      	movs	r3, #8
 80042fa:	77fb      	strb	r3, [r7, #31]
 80042fc:	e098      	b.n	8004430 <UART_SetConfig+0x348>
 80042fe:	2310      	movs	r3, #16
 8004300:	77fb      	strb	r3, [r7, #31]
 8004302:	e095      	b.n	8004430 <UART_SetConfig+0x348>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a2f      	ldr	r2, [pc, #188]	@ (80043c8 <UART_SetConfig+0x2e0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d125      	bne.n	800435a <UART_SetConfig+0x272>
 800430e:	4b29      	ldr	r3, [pc, #164]	@ (80043b4 <UART_SetConfig+0x2cc>)
 8004310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004314:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004318:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800431c:	d017      	beq.n	800434e <UART_SetConfig+0x266>
 800431e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004322:	d817      	bhi.n	8004354 <UART_SetConfig+0x26c>
 8004324:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004328:	d00b      	beq.n	8004342 <UART_SetConfig+0x25a>
 800432a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800432e:	d811      	bhi.n	8004354 <UART_SetConfig+0x26c>
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <UART_SetConfig+0x254>
 8004334:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004338:	d006      	beq.n	8004348 <UART_SetConfig+0x260>
 800433a:	e00b      	b.n	8004354 <UART_SetConfig+0x26c>
 800433c:	2301      	movs	r3, #1
 800433e:	77fb      	strb	r3, [r7, #31]
 8004340:	e076      	b.n	8004430 <UART_SetConfig+0x348>
 8004342:	2302      	movs	r3, #2
 8004344:	77fb      	strb	r3, [r7, #31]
 8004346:	e073      	b.n	8004430 <UART_SetConfig+0x348>
 8004348:	2304      	movs	r3, #4
 800434a:	77fb      	strb	r3, [r7, #31]
 800434c:	e070      	b.n	8004430 <UART_SetConfig+0x348>
 800434e:	2308      	movs	r3, #8
 8004350:	77fb      	strb	r3, [r7, #31]
 8004352:	e06d      	b.n	8004430 <UART_SetConfig+0x348>
 8004354:	2310      	movs	r3, #16
 8004356:	77fb      	strb	r3, [r7, #31]
 8004358:	e06a      	b.n	8004430 <UART_SetConfig+0x348>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a1b      	ldr	r2, [pc, #108]	@ (80043cc <UART_SetConfig+0x2e4>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d138      	bne.n	80043d6 <UART_SetConfig+0x2ee>
 8004364:	4b13      	ldr	r3, [pc, #76]	@ (80043b4 <UART_SetConfig+0x2cc>)
 8004366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800436a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800436e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004372:	d017      	beq.n	80043a4 <UART_SetConfig+0x2bc>
 8004374:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004378:	d82a      	bhi.n	80043d0 <UART_SetConfig+0x2e8>
 800437a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800437e:	d00b      	beq.n	8004398 <UART_SetConfig+0x2b0>
 8004380:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004384:	d824      	bhi.n	80043d0 <UART_SetConfig+0x2e8>
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <UART_SetConfig+0x2aa>
 800438a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800438e:	d006      	beq.n	800439e <UART_SetConfig+0x2b6>
 8004390:	e01e      	b.n	80043d0 <UART_SetConfig+0x2e8>
 8004392:	2300      	movs	r3, #0
 8004394:	77fb      	strb	r3, [r7, #31]
 8004396:	e04b      	b.n	8004430 <UART_SetConfig+0x348>
 8004398:	2302      	movs	r3, #2
 800439a:	77fb      	strb	r3, [r7, #31]
 800439c:	e048      	b.n	8004430 <UART_SetConfig+0x348>
 800439e:	2304      	movs	r3, #4
 80043a0:	77fb      	strb	r3, [r7, #31]
 80043a2:	e045      	b.n	8004430 <UART_SetConfig+0x348>
 80043a4:	2308      	movs	r3, #8
 80043a6:	77fb      	strb	r3, [r7, #31]
 80043a8:	e042      	b.n	8004430 <UART_SetConfig+0x348>
 80043aa:	bf00      	nop
 80043ac:	efff69f3 	.word	0xefff69f3
 80043b0:	40011000 	.word	0x40011000
 80043b4:	40023800 	.word	0x40023800
 80043b8:	40004400 	.word	0x40004400
 80043bc:	40004800 	.word	0x40004800
 80043c0:	40004c00 	.word	0x40004c00
 80043c4:	40005000 	.word	0x40005000
 80043c8:	40011400 	.word	0x40011400
 80043cc:	40007800 	.word	0x40007800
 80043d0:	2310      	movs	r3, #16
 80043d2:	77fb      	strb	r3, [r7, #31]
 80043d4:	e02c      	b.n	8004430 <UART_SetConfig+0x348>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a72      	ldr	r2, [pc, #456]	@ (80045a4 <UART_SetConfig+0x4bc>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d125      	bne.n	800442c <UART_SetConfig+0x344>
 80043e0:	4b71      	ldr	r3, [pc, #452]	@ (80045a8 <UART_SetConfig+0x4c0>)
 80043e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043e6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80043ea:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80043ee:	d017      	beq.n	8004420 <UART_SetConfig+0x338>
 80043f0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80043f4:	d817      	bhi.n	8004426 <UART_SetConfig+0x33e>
 80043f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043fa:	d00b      	beq.n	8004414 <UART_SetConfig+0x32c>
 80043fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004400:	d811      	bhi.n	8004426 <UART_SetConfig+0x33e>
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <UART_SetConfig+0x326>
 8004406:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800440a:	d006      	beq.n	800441a <UART_SetConfig+0x332>
 800440c:	e00b      	b.n	8004426 <UART_SetConfig+0x33e>
 800440e:	2300      	movs	r3, #0
 8004410:	77fb      	strb	r3, [r7, #31]
 8004412:	e00d      	b.n	8004430 <UART_SetConfig+0x348>
 8004414:	2302      	movs	r3, #2
 8004416:	77fb      	strb	r3, [r7, #31]
 8004418:	e00a      	b.n	8004430 <UART_SetConfig+0x348>
 800441a:	2304      	movs	r3, #4
 800441c:	77fb      	strb	r3, [r7, #31]
 800441e:	e007      	b.n	8004430 <UART_SetConfig+0x348>
 8004420:	2308      	movs	r3, #8
 8004422:	77fb      	strb	r3, [r7, #31]
 8004424:	e004      	b.n	8004430 <UART_SetConfig+0x348>
 8004426:	2310      	movs	r3, #16
 8004428:	77fb      	strb	r3, [r7, #31]
 800442a:	e001      	b.n	8004430 <UART_SetConfig+0x348>
 800442c:	2310      	movs	r3, #16
 800442e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	69db      	ldr	r3, [r3, #28]
 8004434:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004438:	d15b      	bne.n	80044f2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800443a:	7ffb      	ldrb	r3, [r7, #31]
 800443c:	2b08      	cmp	r3, #8
 800443e:	d828      	bhi.n	8004492 <UART_SetConfig+0x3aa>
 8004440:	a201      	add	r2, pc, #4	@ (adr r2, 8004448 <UART_SetConfig+0x360>)
 8004442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004446:	bf00      	nop
 8004448:	0800446d 	.word	0x0800446d
 800444c:	08004475 	.word	0x08004475
 8004450:	0800447d 	.word	0x0800447d
 8004454:	08004493 	.word	0x08004493
 8004458:	08004483 	.word	0x08004483
 800445c:	08004493 	.word	0x08004493
 8004460:	08004493 	.word	0x08004493
 8004464:	08004493 	.word	0x08004493
 8004468:	0800448b 	.word	0x0800448b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800446c:	f7ff f99e 	bl	80037ac <HAL_RCC_GetPCLK1Freq>
 8004470:	61b8      	str	r0, [r7, #24]
        break;
 8004472:	e013      	b.n	800449c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004474:	f7ff f9ae 	bl	80037d4 <HAL_RCC_GetPCLK2Freq>
 8004478:	61b8      	str	r0, [r7, #24]
        break;
 800447a:	e00f      	b.n	800449c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800447c:	4b4b      	ldr	r3, [pc, #300]	@ (80045ac <UART_SetConfig+0x4c4>)
 800447e:	61bb      	str	r3, [r7, #24]
        break;
 8004480:	e00c      	b.n	800449c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004482:	f7ff f881 	bl	8003588 <HAL_RCC_GetSysClockFreq>
 8004486:	61b8      	str	r0, [r7, #24]
        break;
 8004488:	e008      	b.n	800449c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800448a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800448e:	61bb      	str	r3, [r7, #24]
        break;
 8004490:	e004      	b.n	800449c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004492:	2300      	movs	r3, #0
 8004494:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	77bb      	strb	r3, [r7, #30]
        break;
 800449a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d074      	beq.n	800458c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	005a      	lsls	r2, r3, #1
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	085b      	lsrs	r3, r3, #1
 80044ac:	441a      	add	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	2b0f      	cmp	r3, #15
 80044bc:	d916      	bls.n	80044ec <UART_SetConfig+0x404>
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044c4:	d212      	bcs.n	80044ec <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	f023 030f 	bic.w	r3, r3, #15
 80044ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	085b      	lsrs	r3, r3, #1
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	b29a      	uxth	r2, r3
 80044dc:	89fb      	ldrh	r3, [r7, #14]
 80044de:	4313      	orrs	r3, r2
 80044e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	89fa      	ldrh	r2, [r7, #14]
 80044e8:	60da      	str	r2, [r3, #12]
 80044ea:	e04f      	b.n	800458c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	77bb      	strb	r3, [r7, #30]
 80044f0:	e04c      	b.n	800458c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044f2:	7ffb      	ldrb	r3, [r7, #31]
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d828      	bhi.n	800454a <UART_SetConfig+0x462>
 80044f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004500 <UART_SetConfig+0x418>)
 80044fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fe:	bf00      	nop
 8004500:	08004525 	.word	0x08004525
 8004504:	0800452d 	.word	0x0800452d
 8004508:	08004535 	.word	0x08004535
 800450c:	0800454b 	.word	0x0800454b
 8004510:	0800453b 	.word	0x0800453b
 8004514:	0800454b 	.word	0x0800454b
 8004518:	0800454b 	.word	0x0800454b
 800451c:	0800454b 	.word	0x0800454b
 8004520:	08004543 	.word	0x08004543
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004524:	f7ff f942 	bl	80037ac <HAL_RCC_GetPCLK1Freq>
 8004528:	61b8      	str	r0, [r7, #24]
        break;
 800452a:	e013      	b.n	8004554 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800452c:	f7ff f952 	bl	80037d4 <HAL_RCC_GetPCLK2Freq>
 8004530:	61b8      	str	r0, [r7, #24]
        break;
 8004532:	e00f      	b.n	8004554 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004534:	4b1d      	ldr	r3, [pc, #116]	@ (80045ac <UART_SetConfig+0x4c4>)
 8004536:	61bb      	str	r3, [r7, #24]
        break;
 8004538:	e00c      	b.n	8004554 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800453a:	f7ff f825 	bl	8003588 <HAL_RCC_GetSysClockFreq>
 800453e:	61b8      	str	r0, [r7, #24]
        break;
 8004540:	e008      	b.n	8004554 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004542:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004546:	61bb      	str	r3, [r7, #24]
        break;
 8004548:	e004      	b.n	8004554 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800454a:	2300      	movs	r3, #0
 800454c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	77bb      	strb	r3, [r7, #30]
        break;
 8004552:	bf00      	nop
    }

    if (pclk != 0U)
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d018      	beq.n	800458c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	085a      	lsrs	r2, r3, #1
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	441a      	add	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	fbb2 f3f3 	udiv	r3, r2, r3
 800456c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	2b0f      	cmp	r3, #15
 8004572:	d909      	bls.n	8004588 <UART_SetConfig+0x4a0>
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800457a:	d205      	bcs.n	8004588 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	b29a      	uxth	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	60da      	str	r2, [r3, #12]
 8004586:	e001      	b.n	800458c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004598:	7fbb      	ldrb	r3, [r7, #30]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3720      	adds	r7, #32
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	40007c00 	.word	0x40007c00
 80045a8:	40023800 	.word	0x40023800
 80045ac:	00f42400 	.word	0x00f42400

080045b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00a      	beq.n	80045da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00a      	beq.n	80045fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00a      	beq.n	800461e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004644:	f003 0310 	and.w	r3, r3, #16
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00a      	beq.n	8004662 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004666:	f003 0320 	and.w	r3, r3, #32
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00a      	beq.n	8004684 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800468c:	2b00      	cmp	r3, #0
 800468e:	d01a      	beq.n	80046c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046ae:	d10a      	bne.n	80046c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	605a      	str	r2, [r3, #4]
  }
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af02      	add	r7, sp, #8
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004704:	f7fc fe16 	bl	8001334 <HAL_GetTick>
 8004708:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0308 	and.w	r3, r3, #8
 8004714:	2b08      	cmp	r3, #8
 8004716:	d10e      	bne.n	8004736 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004718:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f831 	bl	800478e <UART_WaitOnFlagUntilTimeout>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e027      	b.n	8004786 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b04      	cmp	r3, #4
 8004742:	d10e      	bne.n	8004762 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004744:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004748:	9300      	str	r3, [sp, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f81b 	bl	800478e <UART_WaitOnFlagUntilTimeout>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e011      	b.n	8004786 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2220      	movs	r2, #32
 8004766:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2220      	movs	r2, #32
 800476c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b09c      	sub	sp, #112	@ 0x70
 8004792:	af00      	add	r7, sp, #0
 8004794:	60f8      	str	r0, [r7, #12]
 8004796:	60b9      	str	r1, [r7, #8]
 8004798:	603b      	str	r3, [r7, #0]
 800479a:	4613      	mov	r3, r2
 800479c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800479e:	e0a7      	b.n	80048f0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a6:	f000 80a3 	beq.w	80048f0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047aa:	f7fc fdc3 	bl	8001334 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d302      	bcc.n	80047c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80047ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d13f      	bne.n	8004840 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047c8:	e853 3f00 	ldrex	r3, [r3]
 80047cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80047ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047d0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80047d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	461a      	mov	r2, r3
 80047dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047e0:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80047e4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80047e6:	e841 2300 	strex	r3, r2, [r1]
 80047ea:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80047ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1e6      	bne.n	80047c0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	3308      	adds	r3, #8
 80047f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047fc:	e853 3f00 	ldrex	r3, [r3]
 8004800:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004804:	f023 0301 	bic.w	r3, r3, #1
 8004808:	663b      	str	r3, [r7, #96]	@ 0x60
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3308      	adds	r3, #8
 8004810:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004812:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004814:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004816:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004818:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800481a:	e841 2300 	strex	r3, r2, [r1]
 800481e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004820:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1e5      	bne.n	80047f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2220      	movs	r2, #32
 800482a:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2220      	movs	r2, #32
 8004830:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e068      	b.n	8004912 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0304 	and.w	r3, r3, #4
 800484a:	2b00      	cmp	r3, #0
 800484c:	d050      	beq.n	80048f0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	69db      	ldr	r3, [r3, #28]
 8004854:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004858:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800485c:	d148      	bne.n	80048f0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004866:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004870:	e853 3f00 	ldrex	r3, [r3]
 8004874:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004878:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800487c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	461a      	mov	r2, r3
 8004884:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004886:	637b      	str	r3, [r7, #52]	@ 0x34
 8004888:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800488c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800488e:	e841 2300 	strex	r3, r2, [r1]
 8004892:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1e6      	bne.n	8004868 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	3308      	adds	r3, #8
 80048a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	e853 3f00 	ldrex	r3, [r3]
 80048a8:	613b      	str	r3, [r7, #16]
   return(result);
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f023 0301 	bic.w	r3, r3, #1
 80048b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3308      	adds	r3, #8
 80048b8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80048ba:	623a      	str	r2, [r7, #32]
 80048bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048be:	69f9      	ldr	r1, [r7, #28]
 80048c0:	6a3a      	ldr	r2, [r7, #32]
 80048c2:	e841 2300 	strex	r3, r2, [r1]
 80048c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1e5      	bne.n	800489a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2220      	movs	r2, #32
 80048d2:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2220      	movs	r2, #32
 80048d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2220      	movs	r2, #32
 80048e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e010      	b.n	8004912 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	69da      	ldr	r2, [r3, #28]
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	4013      	ands	r3, r2
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	bf0c      	ite	eq
 8004900:	2301      	moveq	r3, #1
 8004902:	2300      	movne	r3, #0
 8004904:	b2db      	uxtb	r3, r3
 8004906:	461a      	mov	r2, r3
 8004908:	79fb      	ldrb	r3, [r7, #7]
 800490a:	429a      	cmp	r2, r3
 800490c:	f43f af48 	beq.w	80047a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3770      	adds	r7, #112	@ 0x70
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
	...

0800491c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800491c:	b084      	sub	sp, #16
 800491e:	b580      	push	{r7, lr}
 8004920:	b084      	sub	sp, #16
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
 8004926:	f107 001c 	add.w	r0, r7, #28
 800492a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800492e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004930:	2b01      	cmp	r3, #1
 8004932:	d120      	bne.n	8004976 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004938:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	4b20      	ldr	r3, [pc, #128]	@ (80049c8 <USB_CoreInit+0xac>)
 8004946:	4013      	ands	r3, r2
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004958:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800495a:	2b01      	cmp	r3, #1
 800495c:	d105      	bne.n	800496a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 fa96 	bl	8004e9c <USB_CoreReset>
 8004970:	4603      	mov	r3, r0
 8004972:	73fb      	strb	r3, [r7, #15]
 8004974:	e010      	b.n	8004998 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 fa8a 	bl	8004e9c <USB_CoreReset>
 8004988:	4603      	mov	r3, r0
 800498a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004990:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800499a:	2b01      	cmp	r3, #1
 800499c:	d10b      	bne.n	80049b6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f043 0206 	orr.w	r2, r3, #6
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f043 0220 	orr.w	r2, r3, #32
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049c2:	b004      	add	sp, #16
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	ffbdffbf 	.word	0xffbdffbf

080049cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f023 0201 	bic.w	r2, r3, #1
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b084      	sub	sp, #16
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
 80049f6:	460b      	mov	r3, r1
 80049f8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80049fa:	2300      	movs	r3, #0
 80049fc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a0a:	78fb      	ldrb	r3, [r7, #3]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d115      	bne.n	8004a3c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a1c:	2001      	movs	r0, #1
 8004a1e:	f7fc fc95 	bl	800134c <HAL_Delay>
      ms++;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	3301      	adds	r3, #1
 8004a26:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 fa29 	bl	8004e80 <USB_GetMode>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d01e      	beq.n	8004a72 <USB_SetCurrentMode+0x84>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2b31      	cmp	r3, #49	@ 0x31
 8004a38:	d9f0      	bls.n	8004a1c <USB_SetCurrentMode+0x2e>
 8004a3a:	e01a      	b.n	8004a72 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a3c:	78fb      	ldrb	r3, [r7, #3]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d115      	bne.n	8004a6e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a4e:	2001      	movs	r0, #1
 8004a50:	f7fc fc7c 	bl	800134c <HAL_Delay>
      ms++;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	3301      	adds	r3, #1
 8004a58:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fa10 	bl	8004e80 <USB_GetMode>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d005      	beq.n	8004a72 <USB_SetCurrentMode+0x84>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2b31      	cmp	r3, #49	@ 0x31
 8004a6a:	d9f0      	bls.n	8004a4e <USB_SetCurrentMode+0x60>
 8004a6c:	e001      	b.n	8004a72 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e005      	b.n	8004a7e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2b32      	cmp	r3, #50	@ 0x32
 8004a76:	d101      	bne.n	8004a7c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e000      	b.n	8004a7e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
	...

08004a88 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a88:	b084      	sub	sp, #16
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b086      	sub	sp, #24
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004a96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	613b      	str	r3, [r7, #16]
 8004aa6:	e009      	b.n	8004abc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	3340      	adds	r3, #64	@ 0x40
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4413      	add	r3, r2
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	613b      	str	r3, [r7, #16]
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	2b0e      	cmp	r3, #14
 8004ac0:	d9f2      	bls.n	8004aa8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004ac2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d11c      	bne.n	8004b02 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ad6:	f043 0302 	orr.w	r3, r3, #2
 8004ada:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	e005      	b.n	8004b0e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b06:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004b14:	461a      	mov	r2, r3
 8004b16:	2300      	movs	r3, #0
 8004b18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b20:	4619      	mov	r1, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b28:	461a      	mov	r2, r3
 8004b2a:	680b      	ldr	r3, [r1, #0]
 8004b2c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d10c      	bne.n	8004b4e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d104      	bne.n	8004b44 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b3a:	2100      	movs	r1, #0
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f965 	bl	8004e0c <USB_SetDevSpeed>
 8004b42:	e008      	b.n	8004b56 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b44:	2101      	movs	r1, #1
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f960 	bl	8004e0c <USB_SetDevSpeed>
 8004b4c:	e003      	b.n	8004b56 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b4e:	2103      	movs	r1, #3
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f95b 	bl	8004e0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b56:	2110      	movs	r1, #16
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f8f3 	bl	8004d44 <USB_FlushTxFifo>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f91f 	bl	8004dac <USB_FlushRxFifo>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b7e:	461a      	mov	r2, r3
 8004b80:	2300      	movs	r3, #0
 8004b82:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b96:	461a      	mov	r2, r3
 8004b98:	2300      	movs	r3, #0
 8004b9a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	613b      	str	r3, [r7, #16]
 8004ba0:	e043      	b.n	8004c2a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	015a      	lsls	r2, r3, #5
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004bb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bb8:	d118      	bne.n	8004bec <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10a      	bne.n	8004bd6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	015a      	lsls	r2, r3, #5
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bcc:	461a      	mov	r2, r3
 8004bce:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004bd2:	6013      	str	r3, [r2, #0]
 8004bd4:	e013      	b.n	8004bfe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004be2:	461a      	mov	r2, r3
 8004be4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004be8:	6013      	str	r3, [r2, #0]
 8004bea:	e008      	b.n	8004bfe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	015a      	lsls	r2, r3, #5
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	015a      	lsls	r2, r3, #5
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	4413      	add	r3, r2
 8004c06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004c22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	3301      	adds	r3, #1
 8004c28:	613b      	str	r3, [r7, #16]
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d3b7      	bcc.n	8004ba2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c32:	2300      	movs	r3, #0
 8004c34:	613b      	str	r3, [r7, #16]
 8004c36:	e043      	b.n	8004cc0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c4e:	d118      	bne.n	8004c82 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10a      	bne.n	8004c6c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	015a      	lsls	r2, r3, #5
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c62:	461a      	mov	r2, r3
 8004c64:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004c68:	6013      	str	r3, [r2, #0]
 8004c6a:	e013      	b.n	8004c94 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	015a      	lsls	r2, r3, #5
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c78:	461a      	mov	r2, r3
 8004c7a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004c7e:	6013      	str	r3, [r2, #0]
 8004c80:	e008      	b.n	8004c94 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c8e:	461a      	mov	r2, r3
 8004c90:	2300      	movs	r3, #0
 8004c92:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	015a      	lsls	r2, r3, #5
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	4413      	add	r3, r2
 8004cae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004cb8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	613b      	str	r3, [r7, #16]
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d3b7      	bcc.n	8004c38 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004cd6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cda:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004ce8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d105      	bne.n	8004cfc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	f043 0210 	orr.w	r2, r3, #16
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	699a      	ldr	r2, [r3, #24]
 8004d00:	4b0e      	ldr	r3, [pc, #56]	@ (8004d3c <USB_DevInit+0x2b4>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d005      	beq.n	8004d1a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	f043 0208 	orr.w	r2, r3, #8
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d105      	bne.n	8004d2c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	699a      	ldr	r2, [r3, #24]
 8004d24:	4b06      	ldr	r3, [pc, #24]	@ (8004d40 <USB_DevInit+0x2b8>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d38:	b004      	add	sp, #16
 8004d3a:	4770      	bx	lr
 8004d3c:	803c3800 	.word	0x803c3800
 8004d40:	40000004 	.word	0x40000004

08004d44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	3301      	adds	r3, #1
 8004d56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4a13      	ldr	r2, [pc, #76]	@ (8004da8 <USB_FlushTxFifo+0x64>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d901      	bls.n	8004d64 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e01b      	b.n	8004d9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	daf2      	bge.n	8004d52 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	019b      	lsls	r3, r3, #6
 8004d74:	f043 0220 	orr.w	r2, r3, #32
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	4a08      	ldr	r2, [pc, #32]	@ (8004da8 <USB_FlushTxFifo+0x64>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d901      	bls.n	8004d8e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e006      	b.n	8004d9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	f003 0320 	and.w	r3, r3, #32
 8004d96:	2b20      	cmp	r3, #32
 8004d98:	d0f0      	beq.n	8004d7c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3714      	adds	r7, #20
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	00030d40 	.word	0x00030d40

08004dac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	4a11      	ldr	r2, [pc, #68]	@ (8004e08 <USB_FlushRxFifo+0x5c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d901      	bls.n	8004dca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e018      	b.n	8004dfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	daf2      	bge.n	8004db8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2210      	movs	r2, #16
 8004dda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	3301      	adds	r3, #1
 8004de0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	4a08      	ldr	r2, [pc, #32]	@ (8004e08 <USB_FlushRxFifo+0x5c>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d901      	bls.n	8004dee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e006      	b.n	8004dfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	f003 0310 	and.w	r3, r3, #16
 8004df6:	2b10      	cmp	r3, #16
 8004df8:	d0f0      	beq.n	8004ddc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	00030d40 	.word	0x00030d40

08004e0c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	460b      	mov	r3, r1
 8004e16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	78fb      	ldrb	r3, [r7, #3]
 8004e26:	68f9      	ldr	r1, [r7, #12]
 8004e28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b085      	sub	sp, #20
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004e58:	f023 0303 	bic.w	r3, r3, #3
 8004e5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e6c:	f043 0302 	orr.w	r3, r3, #2
 8004e70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	f003 0301 	and.w	r3, r3, #1
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4a13      	ldr	r2, [pc, #76]	@ (8004f00 <USB_CoreReset+0x64>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d901      	bls.n	8004eba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e01b      	b.n	8004ef2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	daf2      	bge.n	8004ea8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	f043 0201 	orr.w	r2, r3, #1
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4a09      	ldr	r2, [pc, #36]	@ (8004f00 <USB_CoreReset+0x64>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d901      	bls.n	8004ee4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e006      	b.n	8004ef2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d0f0      	beq.n	8004ed2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3714      	adds	r7, #20
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	00030d40 	.word	0x00030d40

08004f04 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 8004f0a:	4b87      	ldr	r3, [pc, #540]	@ (8005128 <MX_LWIP_Init+0x224>)
 8004f0c:	220a      	movs	r2, #10
 8004f0e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 102;
 8004f10:	4b85      	ldr	r3, [pc, #532]	@ (8005128 <MX_LWIP_Init+0x224>)
 8004f12:	2266      	movs	r2, #102	@ 0x66
 8004f14:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 2;
 8004f16:	4b84      	ldr	r3, [pc, #528]	@ (8005128 <MX_LWIP_Init+0x224>)
 8004f18:	2202      	movs	r2, #2
 8004f1a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 86;
 8004f1c:	4b82      	ldr	r3, [pc, #520]	@ (8005128 <MX_LWIP_Init+0x224>)
 8004f1e:	2256      	movs	r2, #86	@ 0x56
 8004f20:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004f22:	4b82      	ldr	r3, [pc, #520]	@ (800512c <MX_LWIP_Init+0x228>)
 8004f24:	22ff      	movs	r2, #255	@ 0xff
 8004f26:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004f28:	4b80      	ldr	r3, [pc, #512]	@ (800512c <MX_LWIP_Init+0x228>)
 8004f2a:	22ff      	movs	r2, #255	@ 0xff
 8004f2c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004f2e:	4b7f      	ldr	r3, [pc, #508]	@ (800512c <MX_LWIP_Init+0x228>)
 8004f30:	22ff      	movs	r2, #255	@ 0xff
 8004f32:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004f34:	4b7d      	ldr	r3, [pc, #500]	@ (800512c <MX_LWIP_Init+0x228>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 8004f3a:	4b7d      	ldr	r3, [pc, #500]	@ (8005130 <MX_LWIP_Init+0x22c>)
 8004f3c:	220a      	movs	r2, #10
 8004f3e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 102;
 8004f40:	4b7b      	ldr	r3, [pc, #492]	@ (8005130 <MX_LWIP_Init+0x22c>)
 8004f42:	2266      	movs	r2, #102	@ 0x66
 8004f44:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 2;
 8004f46:	4b7a      	ldr	r3, [pc, #488]	@ (8005130 <MX_LWIP_Init+0x22c>)
 8004f48:	2202      	movs	r2, #2
 8004f4a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 254;
 8004f4c:	4b78      	ldr	r3, [pc, #480]	@ (8005130 <MX_LWIP_Init+0x22c>)
 8004f4e:	22fe      	movs	r2, #254	@ 0xfe
 8004f50:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8004f52:	f000 fd31 	bl	80059b8 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004f56:	4b74      	ldr	r3, [pc, #464]	@ (8005128 <MX_LWIP_Init+0x224>)
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	061a      	lsls	r2, r3, #24
 8004f5c:	4b72      	ldr	r3, [pc, #456]	@ (8005128 <MX_LWIP_Init+0x224>)
 8004f5e:	785b      	ldrb	r3, [r3, #1]
 8004f60:	041b      	lsls	r3, r3, #16
 8004f62:	431a      	orrs	r2, r3
 8004f64:	4b70      	ldr	r3, [pc, #448]	@ (8005128 <MX_LWIP_Init+0x224>)
 8004f66:	789b      	ldrb	r3, [r3, #2]
 8004f68:	021b      	lsls	r3, r3, #8
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	4a6e      	ldr	r2, [pc, #440]	@ (8005128 <MX_LWIP_Init+0x224>)
 8004f6e:	78d2      	ldrb	r2, [r2, #3]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	061a      	lsls	r2, r3, #24
 8004f74:	4b6c      	ldr	r3, [pc, #432]	@ (8005128 <MX_LWIP_Init+0x224>)
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	0619      	lsls	r1, r3, #24
 8004f7a:	4b6b      	ldr	r3, [pc, #428]	@ (8005128 <MX_LWIP_Init+0x224>)
 8004f7c:	785b      	ldrb	r3, [r3, #1]
 8004f7e:	041b      	lsls	r3, r3, #16
 8004f80:	4319      	orrs	r1, r3
 8004f82:	4b69      	ldr	r3, [pc, #420]	@ (8005128 <MX_LWIP_Init+0x224>)
 8004f84:	789b      	ldrb	r3, [r3, #2]
 8004f86:	021b      	lsls	r3, r3, #8
 8004f88:	430b      	orrs	r3, r1
 8004f8a:	4967      	ldr	r1, [pc, #412]	@ (8005128 <MX_LWIP_Init+0x224>)
 8004f8c:	78c9      	ldrb	r1, [r1, #3]
 8004f8e:	430b      	orrs	r3, r1
 8004f90:	021b      	lsls	r3, r3, #8
 8004f92:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004f96:	431a      	orrs	r2, r3
 8004f98:	4b63      	ldr	r3, [pc, #396]	@ (8005128 <MX_LWIP_Init+0x224>)
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	0619      	lsls	r1, r3, #24
 8004f9e:	4b62      	ldr	r3, [pc, #392]	@ (8005128 <MX_LWIP_Init+0x224>)
 8004fa0:	785b      	ldrb	r3, [r3, #1]
 8004fa2:	041b      	lsls	r3, r3, #16
 8004fa4:	4319      	orrs	r1, r3
 8004fa6:	4b60      	ldr	r3, [pc, #384]	@ (8005128 <MX_LWIP_Init+0x224>)
 8004fa8:	789b      	ldrb	r3, [r3, #2]
 8004faa:	021b      	lsls	r3, r3, #8
 8004fac:	430b      	orrs	r3, r1
 8004fae:	495e      	ldr	r1, [pc, #376]	@ (8005128 <MX_LWIP_Init+0x224>)
 8004fb0:	78c9      	ldrb	r1, [r1, #3]
 8004fb2:	430b      	orrs	r3, r1
 8004fb4:	0a1b      	lsrs	r3, r3, #8
 8004fb6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	4b5a      	ldr	r3, [pc, #360]	@ (8005128 <MX_LWIP_Init+0x224>)
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	0619      	lsls	r1, r3, #24
 8004fc2:	4b59      	ldr	r3, [pc, #356]	@ (8005128 <MX_LWIP_Init+0x224>)
 8004fc4:	785b      	ldrb	r3, [r3, #1]
 8004fc6:	041b      	lsls	r3, r3, #16
 8004fc8:	4319      	orrs	r1, r3
 8004fca:	4b57      	ldr	r3, [pc, #348]	@ (8005128 <MX_LWIP_Init+0x224>)
 8004fcc:	789b      	ldrb	r3, [r3, #2]
 8004fce:	021b      	lsls	r3, r3, #8
 8004fd0:	430b      	orrs	r3, r1
 8004fd2:	4955      	ldr	r1, [pc, #340]	@ (8005128 <MX_LWIP_Init+0x224>)
 8004fd4:	78c9      	ldrb	r1, [r1, #3]
 8004fd6:	430b      	orrs	r3, r1
 8004fd8:	0e1b      	lsrs	r3, r3, #24
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	4a55      	ldr	r2, [pc, #340]	@ (8005134 <MX_LWIP_Init+0x230>)
 8004fde:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004fe0:	4b52      	ldr	r3, [pc, #328]	@ (800512c <MX_LWIP_Init+0x228>)
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	061a      	lsls	r2, r3, #24
 8004fe6:	4b51      	ldr	r3, [pc, #324]	@ (800512c <MX_LWIP_Init+0x228>)
 8004fe8:	785b      	ldrb	r3, [r3, #1]
 8004fea:	041b      	lsls	r3, r3, #16
 8004fec:	431a      	orrs	r2, r3
 8004fee:	4b4f      	ldr	r3, [pc, #316]	@ (800512c <MX_LWIP_Init+0x228>)
 8004ff0:	789b      	ldrb	r3, [r3, #2]
 8004ff2:	021b      	lsls	r3, r3, #8
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	4a4d      	ldr	r2, [pc, #308]	@ (800512c <MX_LWIP_Init+0x228>)
 8004ff8:	78d2      	ldrb	r2, [r2, #3]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	061a      	lsls	r2, r3, #24
 8004ffe:	4b4b      	ldr	r3, [pc, #300]	@ (800512c <MX_LWIP_Init+0x228>)
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	0619      	lsls	r1, r3, #24
 8005004:	4b49      	ldr	r3, [pc, #292]	@ (800512c <MX_LWIP_Init+0x228>)
 8005006:	785b      	ldrb	r3, [r3, #1]
 8005008:	041b      	lsls	r3, r3, #16
 800500a:	4319      	orrs	r1, r3
 800500c:	4b47      	ldr	r3, [pc, #284]	@ (800512c <MX_LWIP_Init+0x228>)
 800500e:	789b      	ldrb	r3, [r3, #2]
 8005010:	021b      	lsls	r3, r3, #8
 8005012:	430b      	orrs	r3, r1
 8005014:	4945      	ldr	r1, [pc, #276]	@ (800512c <MX_LWIP_Init+0x228>)
 8005016:	78c9      	ldrb	r1, [r1, #3]
 8005018:	430b      	orrs	r3, r1
 800501a:	021b      	lsls	r3, r3, #8
 800501c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005020:	431a      	orrs	r2, r3
 8005022:	4b42      	ldr	r3, [pc, #264]	@ (800512c <MX_LWIP_Init+0x228>)
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	0619      	lsls	r1, r3, #24
 8005028:	4b40      	ldr	r3, [pc, #256]	@ (800512c <MX_LWIP_Init+0x228>)
 800502a:	785b      	ldrb	r3, [r3, #1]
 800502c:	041b      	lsls	r3, r3, #16
 800502e:	4319      	orrs	r1, r3
 8005030:	4b3e      	ldr	r3, [pc, #248]	@ (800512c <MX_LWIP_Init+0x228>)
 8005032:	789b      	ldrb	r3, [r3, #2]
 8005034:	021b      	lsls	r3, r3, #8
 8005036:	430b      	orrs	r3, r1
 8005038:	493c      	ldr	r1, [pc, #240]	@ (800512c <MX_LWIP_Init+0x228>)
 800503a:	78c9      	ldrb	r1, [r1, #3]
 800503c:	430b      	orrs	r3, r1
 800503e:	0a1b      	lsrs	r3, r3, #8
 8005040:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005044:	431a      	orrs	r2, r3
 8005046:	4b39      	ldr	r3, [pc, #228]	@ (800512c <MX_LWIP_Init+0x228>)
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	0619      	lsls	r1, r3, #24
 800504c:	4b37      	ldr	r3, [pc, #220]	@ (800512c <MX_LWIP_Init+0x228>)
 800504e:	785b      	ldrb	r3, [r3, #1]
 8005050:	041b      	lsls	r3, r3, #16
 8005052:	4319      	orrs	r1, r3
 8005054:	4b35      	ldr	r3, [pc, #212]	@ (800512c <MX_LWIP_Init+0x228>)
 8005056:	789b      	ldrb	r3, [r3, #2]
 8005058:	021b      	lsls	r3, r3, #8
 800505a:	430b      	orrs	r3, r1
 800505c:	4933      	ldr	r1, [pc, #204]	@ (800512c <MX_LWIP_Init+0x228>)
 800505e:	78c9      	ldrb	r1, [r1, #3]
 8005060:	430b      	orrs	r3, r1
 8005062:	0e1b      	lsrs	r3, r3, #24
 8005064:	4313      	orrs	r3, r2
 8005066:	4a34      	ldr	r2, [pc, #208]	@ (8005138 <MX_LWIP_Init+0x234>)
 8005068:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800506a:	4b31      	ldr	r3, [pc, #196]	@ (8005130 <MX_LWIP_Init+0x22c>)
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	061a      	lsls	r2, r3, #24
 8005070:	4b2f      	ldr	r3, [pc, #188]	@ (8005130 <MX_LWIP_Init+0x22c>)
 8005072:	785b      	ldrb	r3, [r3, #1]
 8005074:	041b      	lsls	r3, r3, #16
 8005076:	431a      	orrs	r2, r3
 8005078:	4b2d      	ldr	r3, [pc, #180]	@ (8005130 <MX_LWIP_Init+0x22c>)
 800507a:	789b      	ldrb	r3, [r3, #2]
 800507c:	021b      	lsls	r3, r3, #8
 800507e:	4313      	orrs	r3, r2
 8005080:	4a2b      	ldr	r2, [pc, #172]	@ (8005130 <MX_LWIP_Init+0x22c>)
 8005082:	78d2      	ldrb	r2, [r2, #3]
 8005084:	4313      	orrs	r3, r2
 8005086:	061a      	lsls	r2, r3, #24
 8005088:	4b29      	ldr	r3, [pc, #164]	@ (8005130 <MX_LWIP_Init+0x22c>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	0619      	lsls	r1, r3, #24
 800508e:	4b28      	ldr	r3, [pc, #160]	@ (8005130 <MX_LWIP_Init+0x22c>)
 8005090:	785b      	ldrb	r3, [r3, #1]
 8005092:	041b      	lsls	r3, r3, #16
 8005094:	4319      	orrs	r1, r3
 8005096:	4b26      	ldr	r3, [pc, #152]	@ (8005130 <MX_LWIP_Init+0x22c>)
 8005098:	789b      	ldrb	r3, [r3, #2]
 800509a:	021b      	lsls	r3, r3, #8
 800509c:	430b      	orrs	r3, r1
 800509e:	4924      	ldr	r1, [pc, #144]	@ (8005130 <MX_LWIP_Init+0x22c>)
 80050a0:	78c9      	ldrb	r1, [r1, #3]
 80050a2:	430b      	orrs	r3, r1
 80050a4:	021b      	lsls	r3, r3, #8
 80050a6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80050aa:	431a      	orrs	r2, r3
 80050ac:	4b20      	ldr	r3, [pc, #128]	@ (8005130 <MX_LWIP_Init+0x22c>)
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	0619      	lsls	r1, r3, #24
 80050b2:	4b1f      	ldr	r3, [pc, #124]	@ (8005130 <MX_LWIP_Init+0x22c>)
 80050b4:	785b      	ldrb	r3, [r3, #1]
 80050b6:	041b      	lsls	r3, r3, #16
 80050b8:	4319      	orrs	r1, r3
 80050ba:	4b1d      	ldr	r3, [pc, #116]	@ (8005130 <MX_LWIP_Init+0x22c>)
 80050bc:	789b      	ldrb	r3, [r3, #2]
 80050be:	021b      	lsls	r3, r3, #8
 80050c0:	430b      	orrs	r3, r1
 80050c2:	491b      	ldr	r1, [pc, #108]	@ (8005130 <MX_LWIP_Init+0x22c>)
 80050c4:	78c9      	ldrb	r1, [r1, #3]
 80050c6:	430b      	orrs	r3, r1
 80050c8:	0a1b      	lsrs	r3, r3, #8
 80050ca:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80050ce:	431a      	orrs	r2, r3
 80050d0:	4b17      	ldr	r3, [pc, #92]	@ (8005130 <MX_LWIP_Init+0x22c>)
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	0619      	lsls	r1, r3, #24
 80050d6:	4b16      	ldr	r3, [pc, #88]	@ (8005130 <MX_LWIP_Init+0x22c>)
 80050d8:	785b      	ldrb	r3, [r3, #1]
 80050da:	041b      	lsls	r3, r3, #16
 80050dc:	4319      	orrs	r1, r3
 80050de:	4b14      	ldr	r3, [pc, #80]	@ (8005130 <MX_LWIP_Init+0x22c>)
 80050e0:	789b      	ldrb	r3, [r3, #2]
 80050e2:	021b      	lsls	r3, r3, #8
 80050e4:	430b      	orrs	r3, r1
 80050e6:	4912      	ldr	r1, [pc, #72]	@ (8005130 <MX_LWIP_Init+0x22c>)
 80050e8:	78c9      	ldrb	r1, [r1, #3]
 80050ea:	430b      	orrs	r3, r1
 80050ec:	0e1b      	lsrs	r3, r3, #24
 80050ee:	4313      	orrs	r3, r2
 80050f0:	4a12      	ldr	r2, [pc, #72]	@ (800513c <MX_LWIP_Init+0x238>)
 80050f2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80050f4:	4b12      	ldr	r3, [pc, #72]	@ (8005140 <MX_LWIP_Init+0x23c>)
 80050f6:	9302      	str	r3, [sp, #8]
 80050f8:	4b12      	ldr	r3, [pc, #72]	@ (8005144 <MX_LWIP_Init+0x240>)
 80050fa:	9301      	str	r3, [sp, #4]
 80050fc:	2300      	movs	r3, #0
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	4b0e      	ldr	r3, [pc, #56]	@ (800513c <MX_LWIP_Init+0x238>)
 8005102:	4a0d      	ldr	r2, [pc, #52]	@ (8005138 <MX_LWIP_Init+0x234>)
 8005104:	490b      	ldr	r1, [pc, #44]	@ (8005134 <MX_LWIP_Init+0x230>)
 8005106:	4810      	ldr	r0, [pc, #64]	@ (8005148 <MX_LWIP_Init+0x244>)
 8005108:	f001 f942 	bl	8006390 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800510c:	480e      	ldr	r0, [pc, #56]	@ (8005148 <MX_LWIP_Init+0x244>)
 800510e:	f001 faf1 	bl	80066f4 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8005112:	480d      	ldr	r0, [pc, #52]	@ (8005148 <MX_LWIP_Init+0x244>)
 8005114:	f001 fafe 	bl	8006714 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005118:	490c      	ldr	r1, [pc, #48]	@ (800514c <MX_LWIP_Init+0x248>)
 800511a:	480b      	ldr	r0, [pc, #44]	@ (8005148 <MX_LWIP_Init+0x244>)
 800511c:	f001 fbfc 	bl	8006918 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005120:	bf00      	nop
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	200007c0 	.word	0x200007c0
 800512c:	200007c4 	.word	0x200007c4
 8005130:	200007c8 	.word	0x200007c8
 8005134:	200007b4 	.word	0x200007b4
 8005138:	200007b8 	.word	0x200007b8
 800513c:	200007bc 	.word	0x200007bc
 8005140:	0800f96d 	.word	0x0800f96d
 8005144:	080054b5 	.word	0x080054b5
 8005148:	20000780 	.word	0x20000780
 800514c:	080051a1 	.word	0x080051a1

08005150 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8005158:	f7fc f8ec 	bl	8001334 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	4b08      	ldr	r3, [pc, #32]	@ (8005180 <Ethernet_Link_Periodic_Handle+0x30>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b63      	cmp	r3, #99	@ 0x63
 8005166:	d907      	bls.n	8005178 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8005168:	f7fc f8e4 	bl	8001334 <HAL_GetTick>
 800516c:	4603      	mov	r3, r0
 800516e:	4a04      	ldr	r2, [pc, #16]	@ (8005180 <Ethernet_Link_Periodic_Handle+0x30>)
 8005170:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 faf4 	bl	8005760 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8005178:	bf00      	nop
 800517a:	3708      	adds	r7, #8
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	2000077c 	.word	0x2000077c

08005184 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8005188:	4804      	ldr	r0, [pc, #16]	@ (800519c <MX_LWIP_Process+0x18>)
 800518a:	f000 f973 	bl	8005474 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800518e:	f007 fcd3 	bl	800cb38 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8005192:	4802      	ldr	r0, [pc, #8]	@ (800519c <MX_LWIP_Process+0x18>)
 8005194:	f7ff ffdc 	bl	8005150 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8005198:	bf00      	nop
 800519a:	bd80      	pop	{r7, pc}
 800519c:	20000780 	.word	0x20000780

080051a0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <SCB_InvalidateDCache_by_Addr>:
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80051c6:	2320      	movs	r3, #32
 80051c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80051ca:	f3bf 8f4f 	dsb	sy
}
 80051ce:	bf00      	nop
    while (op_size > 0) {
 80051d0:	e00b      	b.n	80051ea <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 80051d2:	4a0d      	ldr	r2, [pc, #52]	@ (8005208 <SCB_InvalidateDCache_by_Addr+0x54>)
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	4413      	add	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	dcf0      	bgt.n	80051d2 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80051f0:	f3bf 8f4f 	dsb	sy
}
 80051f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80051f6:	f3bf 8f6f 	isb	sy
}
 80051fa:	bf00      	nop
}
 80051fc:	bf00      	nop
 80051fe:	371c      	adds	r7, #28
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	e000ed00 	.word	0xe000ed00

0800520c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005214:	2300      	movs	r3, #0
 8005216:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005218:	4b40      	ldr	r3, [pc, #256]	@ (800531c <low_level_init+0x110>)
 800521a:	4a41      	ldr	r2, [pc, #260]	@ (8005320 <low_level_init+0x114>)
 800521c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800521e:	2300      	movs	r3, #0
 8005220:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005222:	2380      	movs	r3, #128	@ 0x80
 8005224:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005226:	23e1      	movs	r3, #225	@ 0xe1
 8005228:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800522a:	2300      	movs	r3, #0
 800522c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800522e:	2300      	movs	r3, #0
 8005230:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005232:	2300      	movs	r3, #0
 8005234:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005236:	4a39      	ldr	r2, [pc, #228]	@ (800531c <low_level_init+0x110>)
 8005238:	f107 0308 	add.w	r3, r7, #8
 800523c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800523e:	4b37      	ldr	r3, [pc, #220]	@ (800531c <low_level_init+0x110>)
 8005240:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005244:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005246:	4b35      	ldr	r3, [pc, #212]	@ (800531c <low_level_init+0x110>)
 8005248:	4a36      	ldr	r2, [pc, #216]	@ (8005324 <low_level_init+0x118>)
 800524a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800524c:	4b33      	ldr	r3, [pc, #204]	@ (800531c <low_level_init+0x110>)
 800524e:	4a36      	ldr	r2, [pc, #216]	@ (8005328 <low_level_init+0x11c>)
 8005250:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005252:	4b32      	ldr	r3, [pc, #200]	@ (800531c <low_level_init+0x110>)
 8005254:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005258:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800525a:	4830      	ldr	r0, [pc, #192]	@ (800531c <low_level_init+0x110>)
 800525c:	f7fc f980 	bl	8001560 <HAL_ETH_Init>
 8005260:	4603      	mov	r3, r0
 8005262:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005264:	2238      	movs	r2, #56	@ 0x38
 8005266:	2100      	movs	r1, #0
 8005268:	4830      	ldr	r0, [pc, #192]	@ (800532c <low_level_init+0x120>)
 800526a:	f00a fdba 	bl	800fde2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800526e:	4b2f      	ldr	r3, [pc, #188]	@ (800532c <low_level_init+0x120>)
 8005270:	2221      	movs	r2, #33	@ 0x21
 8005272:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005274:	4b2d      	ldr	r3, [pc, #180]	@ (800532c <low_level_init+0x120>)
 8005276:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800527a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800527c:	4b2b      	ldr	r3, [pc, #172]	@ (800532c <low_level_init+0x120>)
 800527e:	2200      	movs	r2, #0
 8005280:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005282:	482b      	ldr	r0, [pc, #172]	@ (8005330 <low_level_init+0x124>)
 8005284:	f000 ff4c 	bl	8006120 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2206      	movs	r2, #6
 800528c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005290:	4b22      	ldr	r3, [pc, #136]	@ (800531c <low_level_init+0x110>)
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	781a      	ldrb	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800529c:	4b1f      	ldr	r3, [pc, #124]	@ (800531c <low_level_init+0x110>)
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	785a      	ldrb	r2, [r3, #1]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80052a8:	4b1c      	ldr	r3, [pc, #112]	@ (800531c <low_level_init+0x110>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	789a      	ldrb	r2, [r3, #2]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80052b4:	4b19      	ldr	r3, [pc, #100]	@ (800531c <low_level_init+0x110>)
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	78da      	ldrb	r2, [r3, #3]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80052c0:	4b16      	ldr	r3, [pc, #88]	@ (800531c <low_level_init+0x110>)
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	791a      	ldrb	r2, [r3, #4]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80052cc:	4b13      	ldr	r3, [pc, #76]	@ (800531c <low_level_init+0x110>)
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	795a      	ldrb	r2, [r3, #5]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80052de:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80052e6:	f043 030a 	orr.w	r3, r3, #10
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80052f2:	4910      	ldr	r1, [pc, #64]	@ (8005334 <low_level_init+0x128>)
 80052f4:	4810      	ldr	r0, [pc, #64]	@ (8005338 <low_level_init+0x12c>)
 80052f6:	f7fb fe6a 	bl	8000fce <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80052fa:	480f      	ldr	r0, [pc, #60]	@ (8005338 <low_level_init+0x12c>)
 80052fc:	f7fb fe99 	bl	8001032 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8005300:	7bfb      	ldrb	r3, [r7, #15]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d103      	bne.n	800530e <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 fa2a 	bl	8005760 <ethernet_link_check_state>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800530c:	e001      	b.n	8005312 <low_level_init+0x106>
    Error_Handler();
 800530e:	f7fb fc17 	bl	8000b40 <Error_Handler>
}
 8005312:	bf00      	nop
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	20005158 	.word	0x20005158
 8005320:	40028000 	.word	0x40028000
 8005324:	20000128 	.word	0x20000128
 8005328:	20000088 	.word	0x20000088
 800532c:	20005208 	.word	0x20005208
 8005330:	080135bc 	.word	0x080135bc
 8005334:	2000000c 	.word	0x2000000c
 8005338:	20005240 	.word	0x20005240

0800533c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b092      	sub	sp, #72	@ 0x48
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005346:	2300      	movs	r3, #0
 8005348:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800534a:	2300      	movs	r3, #0
 800534c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800534e:	2300      	movs	r3, #0
 8005350:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005354:	f107 030c 	add.w	r3, r7, #12
 8005358:	2230      	movs	r2, #48	@ 0x30
 800535a:	2100      	movs	r1, #0
 800535c:	4618      	mov	r0, r3
 800535e:	f00a fd40 	bl	800fde2 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005362:	f107 030c 	add.w	r3, r7, #12
 8005366:	2230      	movs	r2, #48	@ 0x30
 8005368:	2100      	movs	r1, #0
 800536a:	4618      	mov	r0, r3
 800536c:	f00a fd39 	bl	800fde2 <memset>

  for(q = p; q != NULL; q = q->next)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	643b      	str	r3, [r7, #64]	@ 0x40
 8005374:	e045      	b.n	8005402 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005376:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005378:	2b03      	cmp	r3, #3
 800537a:	d902      	bls.n	8005382 <low_level_output+0x46>
      return ERR_IF;
 800537c:	f06f 030b 	mvn.w	r3, #11
 8005380:	e055      	b.n	800542e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8005382:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005384:	6859      	ldr	r1, [r3, #4]
 8005386:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005388:	4613      	mov	r3, r2
 800538a:	005b      	lsls	r3, r3, #1
 800538c:	4413      	add	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	3348      	adds	r3, #72	@ 0x48
 8005392:	443b      	add	r3, r7
 8005394:	3b3c      	subs	r3, #60	@ 0x3c
 8005396:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005398:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800539a:	895b      	ldrh	r3, [r3, #10]
 800539c:	4619      	mov	r1, r3
 800539e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053a0:	4613      	mov	r3, r2
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	4413      	add	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	3348      	adds	r3, #72	@ 0x48
 80053aa:	443b      	add	r3, r7
 80053ac:	3b38      	subs	r3, #56	@ 0x38
 80053ae:	6019      	str	r1, [r3, #0]

    if(i>0)
 80053b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d011      	beq.n	80053da <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80053b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053b8:	1e5a      	subs	r2, r3, #1
 80053ba:	f107 000c 	add.w	r0, r7, #12
 80053be:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80053c0:	460b      	mov	r3, r1
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	440b      	add	r3, r1
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	18c1      	adds	r1, r0, r3
 80053ca:	4613      	mov	r3, r2
 80053cc:	005b      	lsls	r3, r3, #1
 80053ce:	4413      	add	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	3348      	adds	r3, #72	@ 0x48
 80053d4:	443b      	add	r3, r7
 80053d6:	3b34      	subs	r3, #52	@ 0x34
 80053d8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80053da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d109      	bne.n	80053f6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80053e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053e4:	4613      	mov	r3, r2
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	4413      	add	r3, r2
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	3348      	adds	r3, #72	@ 0x48
 80053ee:	443b      	add	r3, r7
 80053f0:	3b34      	subs	r3, #52	@ 0x34
 80053f2:	2200      	movs	r2, #0
 80053f4:	601a      	str	r2, [r3, #0]
    }

    i++;
 80053f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053f8:	3301      	adds	r3, #1
 80053fa:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 80053fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	643b      	str	r3, [r7, #64]	@ 0x40
 8005402:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1b6      	bne.n	8005376 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	891b      	ldrh	r3, [r3, #8]
 800540c:	461a      	mov	r2, r3
 800540e:	4b0a      	ldr	r3, [pc, #40]	@ (8005438 <low_level_output+0xfc>)
 8005410:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005412:	4a09      	ldr	r2, [pc, #36]	@ (8005438 <low_level_output+0xfc>)
 8005414:	f107 030c 	add.w	r3, r7, #12
 8005418:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800541a:	4a07      	ldr	r2, [pc, #28]	@ (8005438 <low_level_output+0xfc>)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8005420:	2214      	movs	r2, #20
 8005422:	4905      	ldr	r1, [pc, #20]	@ (8005438 <low_level_output+0xfc>)
 8005424:	4805      	ldr	r0, [pc, #20]	@ (800543c <low_level_output+0x100>)
 8005426:	f7fc f9cf 	bl	80017c8 <HAL_ETH_Transmit>

  return errval;
 800542a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800542e:	4618      	mov	r0, r3
 8005430:	3748      	adds	r7, #72	@ 0x48
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	20005208 	.word	0x20005208
 800543c:	20005158 	.word	0x20005158

08005440 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005448:	2300      	movs	r3, #0
 800544a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800544c:	4b07      	ldr	r3, [pc, #28]	@ (800546c <low_level_input+0x2c>)
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d105      	bne.n	8005460 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005454:	f107 030c 	add.w	r3, r7, #12
 8005458:	4619      	mov	r1, r3
 800545a:	4805      	ldr	r0, [pc, #20]	@ (8005470 <low_level_input+0x30>)
 800545c:	f7fc fa48 	bl	80018f0 <HAL_ETH_ReadData>
  }

  return p;
 8005460:	68fb      	ldr	r3, [r7, #12]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	20005154 	.word	0x20005154
 8005470:	20005158 	.word	0x20005158

08005474 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800547c:	2300      	movs	r3, #0
 800547e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f7ff ffdd 	bl	8005440 <low_level_input>
 8005486:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00a      	beq.n	80054a4 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	6879      	ldr	r1, [r7, #4]
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	4798      	blx	r3
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d002      	beq.n	80054a4 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f001 fdba 	bl	8007018 <pbuf_free>
      }
    }
  } while(p!=NULL);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1ea      	bne.n	8005480 <ethernetif_input+0xc>
}
 80054aa:	bf00      	nop
 80054ac:	bf00      	nop
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d106      	bne.n	80054d0 <ethernetif_init+0x1c>
 80054c2:	4b0e      	ldr	r3, [pc, #56]	@ (80054fc <ethernetif_init+0x48>)
 80054c4:	f240 127b 	movw	r2, #379	@ 0x17b
 80054c8:	490d      	ldr	r1, [pc, #52]	@ (8005500 <ethernetif_init+0x4c>)
 80054ca:	480e      	ldr	r0, [pc, #56]	@ (8005504 <ethernetif_init+0x50>)
 80054cc:	f00a fc24 	bl	800fd18 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2273      	movs	r2, #115	@ 0x73
 80054d4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2274      	movs	r2, #116	@ 0x74
 80054dc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a09      	ldr	r2, [pc, #36]	@ (8005508 <ethernetif_init+0x54>)
 80054e4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a08      	ldr	r2, [pc, #32]	@ (800550c <ethernetif_init+0x58>)
 80054ea:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f7ff fe8d 	bl	800520c <low_level_init>

  return ERR_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3708      	adds	r7, #8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	08010bc4 	.word	0x08010bc4
 8005500:	08010be0 	.word	0x08010be0
 8005504:	08010bf0 	.word	0x08010bf0
 8005508:	0800dd25 	.word	0x0800dd25
 800550c:	0800533d 	.word	0x0800533d

08005510 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800551c:	68f9      	ldr	r1, [r7, #12]
 800551e:	4807      	ldr	r0, [pc, #28]	@ (800553c <pbuf_free_custom+0x2c>)
 8005520:	f000 fee0 	bl	80062e4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005524:	4b06      	ldr	r3, [pc, #24]	@ (8005540 <pbuf_free_custom+0x30>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d102      	bne.n	8005532 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800552c:	4b04      	ldr	r3, [pc, #16]	@ (8005540 <pbuf_free_custom+0x30>)
 800552e:	2200      	movs	r2, #0
 8005530:	701a      	strb	r2, [r3, #0]
  }
}
 8005532:	bf00      	nop
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	080135bc 	.word	0x080135bc
 8005540:	20005154 	.word	0x20005154

08005544 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005548:	f7fb fef4 	bl	8001334 <HAL_GetTick>
 800554c:	4603      	mov	r3, r0
}
 800554e:	4618      	mov	r0, r3
 8005550:	bd80      	pop	{r7, pc}
	...

08005554 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b08e      	sub	sp, #56	@ 0x38
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800555c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005560:	2200      	movs	r2, #0
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	605a      	str	r2, [r3, #4]
 8005566:	609a      	str	r2, [r3, #8]
 8005568:	60da      	str	r2, [r3, #12]
 800556a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a4e      	ldr	r2, [pc, #312]	@ (80056ac <HAL_ETH_MspInit+0x158>)
 8005572:	4293      	cmp	r3, r2
 8005574:	f040 8096 	bne.w	80056a4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005578:	4b4d      	ldr	r3, [pc, #308]	@ (80056b0 <HAL_ETH_MspInit+0x15c>)
 800557a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800557c:	4a4c      	ldr	r2, [pc, #304]	@ (80056b0 <HAL_ETH_MspInit+0x15c>)
 800557e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005582:	6313      	str	r3, [r2, #48]	@ 0x30
 8005584:	4b4a      	ldr	r3, [pc, #296]	@ (80056b0 <HAL_ETH_MspInit+0x15c>)
 8005586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005588:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800558c:	623b      	str	r3, [r7, #32]
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	4b47      	ldr	r3, [pc, #284]	@ (80056b0 <HAL_ETH_MspInit+0x15c>)
 8005592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005594:	4a46      	ldr	r2, [pc, #280]	@ (80056b0 <HAL_ETH_MspInit+0x15c>)
 8005596:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800559a:	6313      	str	r3, [r2, #48]	@ 0x30
 800559c:	4b44      	ldr	r3, [pc, #272]	@ (80056b0 <HAL_ETH_MspInit+0x15c>)
 800559e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80055a4:	61fb      	str	r3, [r7, #28]
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	4b41      	ldr	r3, [pc, #260]	@ (80056b0 <HAL_ETH_MspInit+0x15c>)
 80055aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ac:	4a40      	ldr	r2, [pc, #256]	@ (80056b0 <HAL_ETH_MspInit+0x15c>)
 80055ae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80055b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80055b4:	4b3e      	ldr	r3, [pc, #248]	@ (80056b0 <HAL_ETH_MspInit+0x15c>)
 80055b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055bc:	61bb      	str	r3, [r7, #24]
 80055be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80055c0:	4b3b      	ldr	r3, [pc, #236]	@ (80056b0 <HAL_ETH_MspInit+0x15c>)
 80055c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055c4:	4a3a      	ldr	r2, [pc, #232]	@ (80056b0 <HAL_ETH_MspInit+0x15c>)
 80055c6:	f043 0304 	orr.w	r3, r3, #4
 80055ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80055cc:	4b38      	ldr	r3, [pc, #224]	@ (80056b0 <HAL_ETH_MspInit+0x15c>)
 80055ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	617b      	str	r3, [r7, #20]
 80055d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055d8:	4b35      	ldr	r3, [pc, #212]	@ (80056b0 <HAL_ETH_MspInit+0x15c>)
 80055da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055dc:	4a34      	ldr	r2, [pc, #208]	@ (80056b0 <HAL_ETH_MspInit+0x15c>)
 80055de:	f043 0301 	orr.w	r3, r3, #1
 80055e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80055e4:	4b32      	ldr	r3, [pc, #200]	@ (80056b0 <HAL_ETH_MspInit+0x15c>)
 80055e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	613b      	str	r3, [r7, #16]
 80055ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055f0:	4b2f      	ldr	r3, [pc, #188]	@ (80056b0 <HAL_ETH_MspInit+0x15c>)
 80055f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055f4:	4a2e      	ldr	r2, [pc, #184]	@ (80056b0 <HAL_ETH_MspInit+0x15c>)
 80055f6:	f043 0302 	orr.w	r3, r3, #2
 80055fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80055fc:	4b2c      	ldr	r3, [pc, #176]	@ (80056b0 <HAL_ETH_MspInit+0x15c>)
 80055fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005608:	4b29      	ldr	r3, [pc, #164]	@ (80056b0 <HAL_ETH_MspInit+0x15c>)
 800560a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800560c:	4a28      	ldr	r2, [pc, #160]	@ (80056b0 <HAL_ETH_MspInit+0x15c>)
 800560e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005612:	6313      	str	r3, [r2, #48]	@ 0x30
 8005614:	4b26      	ldr	r3, [pc, #152]	@ (80056b0 <HAL_ETH_MspInit+0x15c>)
 8005616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800561c:	60bb      	str	r3, [r7, #8]
 800561e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005620:	2332      	movs	r3, #50	@ 0x32
 8005622:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005624:	2302      	movs	r3, #2
 8005626:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005628:	2300      	movs	r3, #0
 800562a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800562c:	2303      	movs	r3, #3
 800562e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005630:	230b      	movs	r3, #11
 8005632:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005634:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005638:	4619      	mov	r1, r3
 800563a:	481e      	ldr	r0, [pc, #120]	@ (80056b4 <HAL_ETH_MspInit+0x160>)
 800563c:	f7fd f882 	bl	8002744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005640:	2386      	movs	r3, #134	@ 0x86
 8005642:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005644:	2302      	movs	r3, #2
 8005646:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005648:	2300      	movs	r3, #0
 800564a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800564c:	2303      	movs	r3, #3
 800564e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005650:	230b      	movs	r3, #11
 8005652:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005654:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005658:	4619      	mov	r1, r3
 800565a:	4817      	ldr	r0, [pc, #92]	@ (80056b8 <HAL_ETH_MspInit+0x164>)
 800565c:	f7fd f872 	bl	8002744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005660:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005664:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005666:	2302      	movs	r3, #2
 8005668:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800566a:	2300      	movs	r3, #0
 800566c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800566e:	2303      	movs	r3, #3
 8005670:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005672:	230b      	movs	r3, #11
 8005674:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005676:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800567a:	4619      	mov	r1, r3
 800567c:	480f      	ldr	r0, [pc, #60]	@ (80056bc <HAL_ETH_MspInit+0x168>)
 800567e:	f7fd f861 	bl	8002744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005682:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8005686:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005688:	2302      	movs	r3, #2
 800568a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800568c:	2300      	movs	r3, #0
 800568e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005690:	2303      	movs	r3, #3
 8005692:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005694:	230b      	movs	r3, #11
 8005696:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005698:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800569c:	4619      	mov	r1, r3
 800569e:	4808      	ldr	r0, [pc, #32]	@ (80056c0 <HAL_ETH_MspInit+0x16c>)
 80056a0:	f7fd f850 	bl	8002744 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80056a4:	bf00      	nop
 80056a6:	3738      	adds	r7, #56	@ 0x38
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	40028000 	.word	0x40028000
 80056b0:	40023800 	.word	0x40023800
 80056b4:	40020800 	.word	0x40020800
 80056b8:	40020000 	.word	0x40020000
 80056bc:	40020400 	.word	0x40020400
 80056c0:	40021800 	.word	0x40021800

080056c4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80056c8:	4802      	ldr	r0, [pc, #8]	@ (80056d4 <ETH_PHY_IO_Init+0x10>)
 80056ca:	f7fc fbe1 	bl	8001e90 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	20005158 	.word	0x20005158

080056d8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80056d8:	b480      	push	{r7}
 80056da:	af00      	add	r7, sp, #0
  return 0;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	68f9      	ldr	r1, [r7, #12]
 80056fa:	4807      	ldr	r0, [pc, #28]	@ (8005718 <ETH_PHY_IO_ReadReg+0x30>)
 80056fc:	f7fc fa30 	bl	8001b60 <HAL_ETH_ReadPHYRegister>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d002      	beq.n	800570c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005706:	f04f 33ff 	mov.w	r3, #4294967295
 800570a:	e000      	b.n	800570e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	20005158 	.word	0x20005158

0800571c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	68f9      	ldr	r1, [r7, #12]
 800572e:	4807      	ldr	r0, [pc, #28]	@ (800574c <ETH_PHY_IO_WriteReg+0x30>)
 8005730:	f7fc fa61 	bl	8001bf6 <HAL_ETH_WritePHYRegister>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d002      	beq.n	8005740 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800573a:	f04f 33ff 	mov.w	r3, #4294967295
 800573e:	e000      	b.n	8005742 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	20005158 	.word	0x20005158

08005750 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005754:	f7fb fdee 	bl	8001334 <HAL_GetTick>
 8005758:	4603      	mov	r3, r0
}
 800575a:	4618      	mov	r0, r3
 800575c:	bd80      	pop	{r7, pc}
	...

08005760 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b0a0      	sub	sp, #128	@ 0x80
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005768:	f107 030c 	add.w	r3, r7, #12
 800576c:	2264      	movs	r2, #100	@ 0x64
 800576e:	2100      	movs	r1, #0
 8005770:	4618      	mov	r0, r3
 8005772:	f00a fb36 	bl	800fde2 <memset>
  int32_t PHYLinkState = 0;
 8005776:	2300      	movs	r3, #0
 8005778:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800577a:	2300      	movs	r3, #0
 800577c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800577e:	2300      	movs	r3, #0
 8005780:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005782:	2300      	movs	r3, #0
 8005784:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005786:	483a      	ldr	r0, [pc, #232]	@ (8005870 <ethernet_link_check_state+0x110>)
 8005788:	f7fb fcfb 	bl	8001182 <LAN8742_GetLinkState>
 800578c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005794:	089b      	lsrs	r3, r3, #2
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	b2db      	uxtb	r3, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00c      	beq.n	80057ba <ethernet_link_check_state+0x5a>
 80057a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	dc09      	bgt.n	80057ba <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 80057a6:	4833      	ldr	r0, [pc, #204]	@ (8005874 <ethernet_link_check_state+0x114>)
 80057a8:	f7fb ffb5 	bl	8001716 <HAL_ETH_Stop>
    netif_set_down(netif);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f001 f81d 	bl	80067ec <netif_set_down>
    netif_set_link_down(netif);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f001 f880 	bl	80068b8 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80057b8:	e055      	b.n	8005866 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d14e      	bne.n	8005866 <ethernet_link_check_state+0x106>
 80057c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	dd4b      	ble.n	8005866 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80057ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057d0:	3b02      	subs	r3, #2
 80057d2:	2b03      	cmp	r3, #3
 80057d4:	d82a      	bhi.n	800582c <ethernet_link_check_state+0xcc>
 80057d6:	a201      	add	r2, pc, #4	@ (adr r2, 80057dc <ethernet_link_check_state+0x7c>)
 80057d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057dc:	080057ed 	.word	0x080057ed
 80057e0:	080057ff 	.word	0x080057ff
 80057e4:	0800580f 	.word	0x0800580f
 80057e8:	0800581f 	.word	0x0800581f
      duplex = ETH_FULLDUPLEX_MODE;
 80057ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80057f0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80057f2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80057f6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80057f8:	2301      	movs	r3, #1
 80057fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80057fc:	e017      	b.n	800582e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80057fe:	2300      	movs	r3, #0
 8005800:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005802:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005806:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005808:	2301      	movs	r3, #1
 800580a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800580c:	e00f      	b.n	800582e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800580e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005812:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005814:	2300      	movs	r3, #0
 8005816:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005818:	2301      	movs	r3, #1
 800581a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800581c:	e007      	b.n	800582e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800581e:	2300      	movs	r3, #0
 8005820:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005822:	2300      	movs	r3, #0
 8005824:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005826:	2301      	movs	r3, #1
 8005828:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800582a:	e000      	b.n	800582e <ethernet_link_check_state+0xce>
      break;
 800582c:	bf00      	nop
    if(linkchanged)
 800582e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005830:	2b00      	cmp	r3, #0
 8005832:	d018      	beq.n	8005866 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005834:	f107 030c 	add.w	r3, r7, #12
 8005838:	4619      	mov	r1, r3
 800583a:	480e      	ldr	r0, [pc, #56]	@ (8005874 <ethernet_link_check_state+0x114>)
 800583c:	f7fc fa24 	bl	8001c88 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005840:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005842:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8005844:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005846:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005848:	f107 030c 	add.w	r3, r7, #12
 800584c:	4619      	mov	r1, r3
 800584e:	4809      	ldr	r0, [pc, #36]	@ (8005874 <ethernet_link_check_state+0x114>)
 8005850:	f7fc fb04 	bl	8001e5c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8005854:	4807      	ldr	r0, [pc, #28]	@ (8005874 <ethernet_link_check_state+0x114>)
 8005856:	f7fb feff 	bl	8001658 <HAL_ETH_Start>
      netif_set_up(netif);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 ff5a 	bl	8006714 <netif_set_up>
      netif_set_link_up(netif);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 fff5 	bl	8006850 <netif_set_link_up>
}
 8005866:	bf00      	nop
 8005868:	3780      	adds	r7, #128	@ 0x80
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	20005240 	.word	0x20005240
 8005874:	20005158 	.word	0x20005158

08005878 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af02      	add	r7, sp, #8
 800587e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005880:	4812      	ldr	r0, [pc, #72]	@ (80058cc <HAL_ETH_RxAllocateCallback+0x54>)
 8005882:	f000 fcc1 	bl	8006208 <memp_malloc_pool>
 8005886:	60f8      	str	r0, [r7, #12]
  if (p)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d014      	beq.n	80058b8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f103 0220 	add.w	r2, r3, #32
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4a0d      	ldr	r2, [pc, #52]	@ (80058d0 <HAL_ETH_RxAllocateCallback+0x58>)
 800589c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80058a6:	9201      	str	r2, [sp, #4]
 80058a8:	9300      	str	r3, [sp, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2241      	movs	r2, #65	@ 0x41
 80058ae:	2100      	movs	r1, #0
 80058b0:	2000      	movs	r0, #0
 80058b2:	f001 f9f7 	bl	8006ca4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80058b6:	e005      	b.n	80058c4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80058b8:	4b06      	ldr	r3, [pc, #24]	@ (80058d4 <HAL_ETH_RxAllocateCallback+0x5c>)
 80058ba:	2201      	movs	r2, #1
 80058bc:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	601a      	str	r2, [r3, #0]
}
 80058c4:	bf00      	nop
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	080135bc 	.word	0x080135bc
 80058d0:	08005511 	.word	0x08005511
 80058d4:	20005154 	.word	0x20005154

080058d8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b088      	sub	sp, #32
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
 80058e4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80058ee:	2300      	movs	r3, #0
 80058f0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	3b20      	subs	r3, #32
 80058f6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	2200      	movs	r2, #0
 80058fc:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	2200      	movs	r2, #0
 8005902:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	887a      	ldrh	r2, [r7, #2]
 8005908:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d103      	bne.n	800591a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	69fa      	ldr	r2, [r7, #28]
 8005916:	601a      	str	r2, [r3, #0]
 8005918:	e003      	b.n	8005922 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	69fa      	ldr	r2, [r7, #28]
 8005920:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	69fa      	ldr	r2, [r7, #28]
 8005926:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	61fb      	str	r3, [r7, #28]
 800592e:	e009      	b.n	8005944 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	891a      	ldrh	r2, [r3, #8]
 8005934:	887b      	ldrh	r3, [r7, #2]
 8005936:	4413      	add	r3, r2
 8005938:	b29a      	uxth	r2, r3
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	61fb      	str	r3, [r7, #28]
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1f2      	bne.n	8005930 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800594a:	887b      	ldrh	r3, [r7, #2]
 800594c:	4619      	mov	r1, r3
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f7ff fc30 	bl	80051b4 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005954:	bf00      	nop
 8005956:	3720      	adds	r7, #32
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	4603      	mov	r3, r0
 8005964:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8005966:	88fb      	ldrh	r3, [r7, #6]
 8005968:	021b      	lsls	r3, r3, #8
 800596a:	b21a      	sxth	r2, r3
 800596c:	88fb      	ldrh	r3, [r7, #6]
 800596e:	0a1b      	lsrs	r3, r3, #8
 8005970:	b29b      	uxth	r3, r3
 8005972:	b21b      	sxth	r3, r3
 8005974:	4313      	orrs	r3, r2
 8005976:	b21b      	sxth	r3, r3
 8005978:	b29b      	uxth	r3, r3
}
 800597a:	4618      	mov	r0, r3
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005986:	b480      	push	{r7}
 8005988:	b083      	sub	sp, #12
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	061a      	lsls	r2, r3, #24
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	021b      	lsls	r3, r3, #8
 8005996:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800599a:	431a      	orrs	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	0a1b      	lsrs	r3, r3, #8
 80059a0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80059a4:	431a      	orrs	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	0e1b      	lsrs	r3, r3, #24
 80059aa:	4313      	orrs	r3, r2
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80059be:	2300      	movs	r3, #0
 80059c0:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80059c2:	f000 f8d5 	bl	8005b70 <mem_init>
  memp_init();
 80059c6:	f000 fbdb 	bl	8006180 <memp_init>
  pbuf_init();
  netif_init();
 80059ca:	f000 fcd9 	bl	8006380 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80059ce:	f007 f8f5 	bl	800cbbc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80059d2:	f001 fe51 	bl	8007678 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80059d6:	f007 f867 	bl	800caa8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80059da:	bf00      	nop
 80059dc:	3708      	adds	r7, #8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
	...

080059e4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	4603      	mov	r3, r0
 80059ec:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80059ee:	4b05      	ldr	r3, [pc, #20]	@ (8005a04 <ptr_to_mem+0x20>)
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	88fb      	ldrh	r3, [r7, #6]
 80059f4:	4413      	add	r3, r2
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	200058cc 	.word	0x200058cc

08005a08 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005a10:	4b05      	ldr	r3, [pc, #20]	@ (8005a28 <mem_to_ptr+0x20>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	b29b      	uxth	r3, r3
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	200058cc 	.word	0x200058cc

08005a2c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8005a2c:	b590      	push	{r4, r7, lr}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005a34:	4b45      	ldr	r3, [pc, #276]	@ (8005b4c <plug_holes+0x120>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d206      	bcs.n	8005a4c <plug_holes+0x20>
 8005a3e:	4b44      	ldr	r3, [pc, #272]	@ (8005b50 <plug_holes+0x124>)
 8005a40:	f240 12df 	movw	r2, #479	@ 0x1df
 8005a44:	4943      	ldr	r1, [pc, #268]	@ (8005b54 <plug_holes+0x128>)
 8005a46:	4844      	ldr	r0, [pc, #272]	@ (8005b58 <plug_holes+0x12c>)
 8005a48:	f00a f966 	bl	800fd18 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005a4c:	4b43      	ldr	r3, [pc, #268]	@ (8005b5c <plug_holes+0x130>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d306      	bcc.n	8005a64 <plug_holes+0x38>
 8005a56:	4b3e      	ldr	r3, [pc, #248]	@ (8005b50 <plug_holes+0x124>)
 8005a58:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8005a5c:	4940      	ldr	r1, [pc, #256]	@ (8005b60 <plug_holes+0x134>)
 8005a5e:	483e      	ldr	r0, [pc, #248]	@ (8005b58 <plug_holes+0x12c>)
 8005a60:	f00a f95a 	bl	800fd18 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	791b      	ldrb	r3, [r3, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d006      	beq.n	8005a7a <plug_holes+0x4e>
 8005a6c:	4b38      	ldr	r3, [pc, #224]	@ (8005b50 <plug_holes+0x124>)
 8005a6e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8005a72:	493c      	ldr	r1, [pc, #240]	@ (8005b64 <plug_holes+0x138>)
 8005a74:	4838      	ldr	r0, [pc, #224]	@ (8005b58 <plug_holes+0x12c>)
 8005a76:	f00a f94f 	bl	800fd18 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005a82:	d906      	bls.n	8005a92 <plug_holes+0x66>
 8005a84:	4b32      	ldr	r3, [pc, #200]	@ (8005b50 <plug_holes+0x124>)
 8005a86:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8005a8a:	4937      	ldr	r1, [pc, #220]	@ (8005b68 <plug_holes+0x13c>)
 8005a8c:	4832      	ldr	r0, [pc, #200]	@ (8005b58 <plug_holes+0x12c>)
 8005a8e:	f00a f943 	bl	800fd18 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	881b      	ldrh	r3, [r3, #0]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7ff ffa4 	bl	80059e4 <ptr_to_mem>
 8005a9c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d024      	beq.n	8005af0 <plug_holes+0xc4>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	791b      	ldrb	r3, [r3, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d120      	bne.n	8005af0 <plug_holes+0xc4>
 8005aae:	4b2b      	ldr	r3, [pc, #172]	@ (8005b5c <plug_holes+0x130>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d01b      	beq.n	8005af0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8005b6c <plug_holes+0x140>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d102      	bne.n	8005ac8 <plug_holes+0x9c>
      lfree = mem;
 8005ac2:	4a2a      	ldr	r2, [pc, #168]	@ (8005b6c <plug_holes+0x140>)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	881a      	ldrh	r2, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	881b      	ldrh	r3, [r3, #0]
 8005ad4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005ad8:	d00a      	beq.n	8005af0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7ff ff80 	bl	80059e4 <ptr_to_mem>
 8005ae4:	4604      	mov	r4, r0
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7ff ff8e 	bl	8005a08 <mem_to_ptr>
 8005aec:	4603      	mov	r3, r0
 8005aee:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	885b      	ldrh	r3, [r3, #2]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7ff ff75 	bl	80059e4 <ptr_to_mem>
 8005afa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d01f      	beq.n	8005b44 <plug_holes+0x118>
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	791b      	ldrb	r3, [r3, #4]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d11b      	bne.n	8005b44 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005b0c:	4b17      	ldr	r3, [pc, #92]	@ (8005b6c <plug_holes+0x140>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d102      	bne.n	8005b1c <plug_holes+0xf0>
      lfree = pmem;
 8005b16:	4a15      	ldr	r2, [pc, #84]	@ (8005b6c <plug_holes+0x140>)
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	881a      	ldrh	r2, [r3, #0]
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005b2c:	d00a      	beq.n	8005b44 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	881b      	ldrh	r3, [r3, #0]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7ff ff56 	bl	80059e4 <ptr_to_mem>
 8005b38:	4604      	mov	r4, r0
 8005b3a:	68b8      	ldr	r0, [r7, #8]
 8005b3c:	f7ff ff64 	bl	8005a08 <mem_to_ptr>
 8005b40:	4603      	mov	r3, r0
 8005b42:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005b44:	bf00      	nop
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd90      	pop	{r4, r7, pc}
 8005b4c:	200058cc 	.word	0x200058cc
 8005b50:	08010c18 	.word	0x08010c18
 8005b54:	08010c48 	.word	0x08010c48
 8005b58:	08010c60 	.word	0x08010c60
 8005b5c:	200058d0 	.word	0x200058d0
 8005b60:	08010c88 	.word	0x08010c88
 8005b64:	08010ca4 	.word	0x08010ca4
 8005b68:	08010cc0 	.word	0x08010cc0
 8005b6c:	200058d4 	.word	0x200058d4

08005b70 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005b76:	4b18      	ldr	r3, [pc, #96]	@ (8005bd8 <mem_init+0x68>)
 8005b78:	3303      	adds	r3, #3
 8005b7a:	f023 0303 	bic.w	r3, r3, #3
 8005b7e:	461a      	mov	r2, r3
 8005b80:	4b16      	ldr	r3, [pc, #88]	@ (8005bdc <mem_init+0x6c>)
 8005b82:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005b84:	4b15      	ldr	r3, [pc, #84]	@ (8005bdc <mem_init+0x6c>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8005b90:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8005b9e:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8005ba2:	f7ff ff1f 	bl	80059e4 <ptr_to_mem>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8005be0 <mem_init+0x70>)
 8005baa:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8005bac:	4b0c      	ldr	r3, [pc, #48]	@ (8005be0 <mem_init+0x70>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8005be0 <mem_init+0x70>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8005bbc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005bbe:	4b08      	ldr	r3, [pc, #32]	@ (8005be0 <mem_init+0x70>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8005bc6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005bc8:	4b04      	ldr	r3, [pc, #16]	@ (8005bdc <mem_init+0x6c>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a05      	ldr	r2, [pc, #20]	@ (8005be4 <mem_init+0x74>)
 8005bce:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005bd0:	bf00      	nop
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	20005278 	.word	0x20005278
 8005bdc:	200058cc 	.word	0x200058cc
 8005be0:	200058d0 	.word	0x200058d0
 8005be4:	200058d4 	.word	0x200058d4

08005be8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f7ff ff09 	bl	8005a08 <mem_to_ptr>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	881b      	ldrh	r3, [r3, #0]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7ff fef0 	bl	80059e4 <ptr_to_mem>
 8005c04:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	885b      	ldrh	r3, [r3, #2]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7ff feea 	bl	80059e4 <ptr_to_mem>
 8005c10:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005c1a:	d818      	bhi.n	8005c4e <mem_link_valid+0x66>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	885b      	ldrh	r3, [r3, #2]
 8005c20:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005c24:	d813      	bhi.n	8005c4e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005c2a:	8afa      	ldrh	r2, [r7, #22]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d004      	beq.n	8005c3a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	881b      	ldrh	r3, [r3, #0]
 8005c34:	8afa      	ldrh	r2, [r7, #22]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d109      	bne.n	8005c4e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005c3a:	4b08      	ldr	r3, [pc, #32]	@ (8005c5c <mem_link_valid+0x74>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d006      	beq.n	8005c52 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	885b      	ldrh	r3, [r3, #2]
 8005c48:	8afa      	ldrh	r2, [r7, #22]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d001      	beq.n	8005c52 <mem_link_valid+0x6a>
    return 0;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	e000      	b.n	8005c54 <mem_link_valid+0x6c>
  }
  return 1;
 8005c52:	2301      	movs	r3, #1
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3718      	adds	r7, #24
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	200058d0 	.word	0x200058d0

08005c60 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d04c      	beq.n	8005d08 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f003 0303 	and.w	r3, r3, #3
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d007      	beq.n	8005c88 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005c78:	4b25      	ldr	r3, [pc, #148]	@ (8005d10 <mem_free+0xb0>)
 8005c7a:	f240 2273 	movw	r2, #627	@ 0x273
 8005c7e:	4925      	ldr	r1, [pc, #148]	@ (8005d14 <mem_free+0xb4>)
 8005c80:	4825      	ldr	r0, [pc, #148]	@ (8005d18 <mem_free+0xb8>)
 8005c82:	f00a f849 	bl	800fd18 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005c86:	e040      	b.n	8005d0a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	3b08      	subs	r3, #8
 8005c8c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005c8e:	4b23      	ldr	r3, [pc, #140]	@ (8005d1c <mem_free+0xbc>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d306      	bcc.n	8005ca6 <mem_free+0x46>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f103 020c 	add.w	r2, r3, #12
 8005c9e:	4b20      	ldr	r3, [pc, #128]	@ (8005d20 <mem_free+0xc0>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d907      	bls.n	8005cb6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8005ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8005d10 <mem_free+0xb0>)
 8005ca8:	f240 227f 	movw	r2, #639	@ 0x27f
 8005cac:	491d      	ldr	r1, [pc, #116]	@ (8005d24 <mem_free+0xc4>)
 8005cae:	481a      	ldr	r0, [pc, #104]	@ (8005d18 <mem_free+0xb8>)
 8005cb0:	f00a f832 	bl	800fd18 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005cb4:	e029      	b.n	8005d0a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	791b      	ldrb	r3, [r3, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d107      	bne.n	8005cce <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8005cbe:	4b14      	ldr	r3, [pc, #80]	@ (8005d10 <mem_free+0xb0>)
 8005cc0:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8005cc4:	4918      	ldr	r1, [pc, #96]	@ (8005d28 <mem_free+0xc8>)
 8005cc6:	4814      	ldr	r0, [pc, #80]	@ (8005d18 <mem_free+0xb8>)
 8005cc8:	f00a f826 	bl	800fd18 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005ccc:	e01d      	b.n	8005d0a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f7ff ff8a 	bl	8005be8 <mem_link_valid>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d107      	bne.n	8005cea <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8005cda:	4b0d      	ldr	r3, [pc, #52]	@ (8005d10 <mem_free+0xb0>)
 8005cdc:	f240 2295 	movw	r2, #661	@ 0x295
 8005ce0:	4912      	ldr	r1, [pc, #72]	@ (8005d2c <mem_free+0xcc>)
 8005ce2:	480d      	ldr	r0, [pc, #52]	@ (8005d18 <mem_free+0xb8>)
 8005ce4:	f00a f818 	bl	800fd18 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005ce8:	e00f      	b.n	8005d0a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8005d30 <mem_free+0xd0>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d202      	bcs.n	8005d00 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005cfa:	4a0d      	ldr	r2, [pc, #52]	@ (8005d30 <mem_free+0xd0>)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f7ff fe93 	bl	8005a2c <plug_holes>
 8005d06:	e000      	b.n	8005d0a <mem_free+0xaa>
    return;
 8005d08:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	08010c18 	.word	0x08010c18
 8005d14:	08010cec 	.word	0x08010cec
 8005d18:	08010c60 	.word	0x08010c60
 8005d1c:	200058cc 	.word	0x200058cc
 8005d20:	200058d0 	.word	0x200058d0
 8005d24:	08010d10 	.word	0x08010d10
 8005d28:	08010d2c 	.word	0x08010d2c
 8005d2c:	08010d54 	.word	0x08010d54
 8005d30:	200058d4 	.word	0x200058d4

08005d34 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b088      	sub	sp, #32
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005d40:	887b      	ldrh	r3, [r7, #2]
 8005d42:	3303      	adds	r3, #3
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	f023 0303 	bic.w	r3, r3, #3
 8005d4a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005d4c:	8bfb      	ldrh	r3, [r7, #30]
 8005d4e:	2b0b      	cmp	r3, #11
 8005d50:	d801      	bhi.n	8005d56 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005d52:	230c      	movs	r3, #12
 8005d54:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005d56:	8bfb      	ldrh	r3, [r7, #30]
 8005d58:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005d5c:	d803      	bhi.n	8005d66 <mem_trim+0x32>
 8005d5e:	8bfa      	ldrh	r2, [r7, #30]
 8005d60:	887b      	ldrh	r3, [r7, #2]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d201      	bcs.n	8005d6a <mem_trim+0x36>
    return NULL;
 8005d66:	2300      	movs	r3, #0
 8005d68:	e0cc      	b.n	8005f04 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005d6a:	4b68      	ldr	r3, [pc, #416]	@ (8005f0c <mem_trim+0x1d8>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d304      	bcc.n	8005d7e <mem_trim+0x4a>
 8005d74:	4b66      	ldr	r3, [pc, #408]	@ (8005f10 <mem_trim+0x1dc>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d306      	bcc.n	8005d8c <mem_trim+0x58>
 8005d7e:	4b65      	ldr	r3, [pc, #404]	@ (8005f14 <mem_trim+0x1e0>)
 8005d80:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8005d84:	4964      	ldr	r1, [pc, #400]	@ (8005f18 <mem_trim+0x1e4>)
 8005d86:	4865      	ldr	r0, [pc, #404]	@ (8005f1c <mem_trim+0x1e8>)
 8005d88:	f009 ffc6 	bl	800fd18 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005d8c:	4b5f      	ldr	r3, [pc, #380]	@ (8005f0c <mem_trim+0x1d8>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d304      	bcc.n	8005da0 <mem_trim+0x6c>
 8005d96:	4b5e      	ldr	r3, [pc, #376]	@ (8005f10 <mem_trim+0x1dc>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d301      	bcc.n	8005da4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	e0af      	b.n	8005f04 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	3b08      	subs	r3, #8
 8005da8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8005daa:	69b8      	ldr	r0, [r7, #24]
 8005dac:	f7ff fe2c 	bl	8005a08 <mem_to_ptr>
 8005db0:	4603      	mov	r3, r0
 8005db2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	881a      	ldrh	r2, [r3, #0]
 8005db8:	8afb      	ldrh	r3, [r7, #22]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	3b08      	subs	r3, #8
 8005dc0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005dc2:	8bfa      	ldrh	r2, [r7, #30]
 8005dc4:	8abb      	ldrh	r3, [r7, #20]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d906      	bls.n	8005dd8 <mem_trim+0xa4>
 8005dca:	4b52      	ldr	r3, [pc, #328]	@ (8005f14 <mem_trim+0x1e0>)
 8005dcc:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8005dd0:	4953      	ldr	r1, [pc, #332]	@ (8005f20 <mem_trim+0x1ec>)
 8005dd2:	4852      	ldr	r0, [pc, #328]	@ (8005f1c <mem_trim+0x1e8>)
 8005dd4:	f009 ffa0 	bl	800fd18 <iprintf>
  if (newsize > size) {
 8005dd8:	8bfa      	ldrh	r2, [r7, #30]
 8005dda:	8abb      	ldrh	r3, [r7, #20]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d901      	bls.n	8005de4 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005de0:	2300      	movs	r3, #0
 8005de2:	e08f      	b.n	8005f04 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005de4:	8bfa      	ldrh	r2, [r7, #30]
 8005de6:	8abb      	ldrh	r3, [r7, #20]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d101      	bne.n	8005df0 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	e089      	b.n	8005f04 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	881b      	ldrh	r3, [r3, #0]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7ff fdf5 	bl	80059e4 <ptr_to_mem>
 8005dfa:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	791b      	ldrb	r3, [r3, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d13f      	bne.n	8005e84 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005e0c:	d106      	bne.n	8005e1c <mem_trim+0xe8>
 8005e0e:	4b41      	ldr	r3, [pc, #260]	@ (8005f14 <mem_trim+0x1e0>)
 8005e10:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8005e14:	4943      	ldr	r1, [pc, #268]	@ (8005f24 <mem_trim+0x1f0>)
 8005e16:	4841      	ldr	r0, [pc, #260]	@ (8005f1c <mem_trim+0x1e8>)
 8005e18:	f009 ff7e 	bl	800fd18 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	881b      	ldrh	r3, [r3, #0]
 8005e20:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005e22:	8afa      	ldrh	r2, [r7, #22]
 8005e24:	8bfb      	ldrh	r3, [r7, #30]
 8005e26:	4413      	add	r3, r2
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	3308      	adds	r3, #8
 8005e2c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005e2e:	4b3e      	ldr	r3, [pc, #248]	@ (8005f28 <mem_trim+0x1f4>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d106      	bne.n	8005e46 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005e38:	89fb      	ldrh	r3, [r7, #14]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7ff fdd2 	bl	80059e4 <ptr_to_mem>
 8005e40:	4603      	mov	r3, r0
 8005e42:	4a39      	ldr	r2, [pc, #228]	@ (8005f28 <mem_trim+0x1f4>)
 8005e44:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005e46:	89fb      	ldrh	r3, [r7, #14]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7ff fdcb 	bl	80059e4 <ptr_to_mem>
 8005e4e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	2200      	movs	r2, #0
 8005e54:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	89ba      	ldrh	r2, [r7, #12]
 8005e5a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	8afa      	ldrh	r2, [r7, #22]
 8005e60:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	89fa      	ldrh	r2, [r7, #14]
 8005e66:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	881b      	ldrh	r3, [r3, #0]
 8005e6c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005e70:	d047      	beq.n	8005f02 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	881b      	ldrh	r3, [r3, #0]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7ff fdb4 	bl	80059e4 <ptr_to_mem>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	89fb      	ldrh	r3, [r7, #14]
 8005e80:	8053      	strh	r3, [r2, #2]
 8005e82:	e03e      	b.n	8005f02 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005e84:	8bfb      	ldrh	r3, [r7, #30]
 8005e86:	f103 0214 	add.w	r2, r3, #20
 8005e8a:	8abb      	ldrh	r3, [r7, #20]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d838      	bhi.n	8005f02 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005e90:	8afa      	ldrh	r2, [r7, #22]
 8005e92:	8bfb      	ldrh	r3, [r7, #30]
 8005e94:	4413      	add	r3, r2
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	3308      	adds	r3, #8
 8005e9a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	881b      	ldrh	r3, [r3, #0]
 8005ea0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005ea4:	d106      	bne.n	8005eb4 <mem_trim+0x180>
 8005ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8005f14 <mem_trim+0x1e0>)
 8005ea8:	f240 3216 	movw	r2, #790	@ 0x316
 8005eac:	491d      	ldr	r1, [pc, #116]	@ (8005f24 <mem_trim+0x1f0>)
 8005eae:	481b      	ldr	r0, [pc, #108]	@ (8005f1c <mem_trim+0x1e8>)
 8005eb0:	f009 ff32 	bl	800fd18 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005eb4:	89fb      	ldrh	r3, [r7, #14]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7ff fd94 	bl	80059e4 <ptr_to_mem>
 8005ebc:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8005ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8005f28 <mem_trim+0x1f4>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d202      	bcs.n	8005ece <mem_trim+0x19a>
      lfree = mem2;
 8005ec8:	4a17      	ldr	r2, [pc, #92]	@ (8005f28 <mem_trim+0x1f4>)
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	881a      	ldrh	r2, [r3, #0]
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	8afa      	ldrh	r2, [r7, #22]
 8005ee0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	89fa      	ldrh	r2, [r7, #14]
 8005ee6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	881b      	ldrh	r3, [r3, #0]
 8005eec:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005ef0:	d007      	beq.n	8005f02 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	881b      	ldrh	r3, [r3, #0]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7ff fd74 	bl	80059e4 <ptr_to_mem>
 8005efc:	4602      	mov	r2, r0
 8005efe:	89fb      	ldrh	r3, [r7, #14]
 8005f00:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005f02:	687b      	ldr	r3, [r7, #4]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3720      	adds	r7, #32
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	200058cc 	.word	0x200058cc
 8005f10:	200058d0 	.word	0x200058d0
 8005f14:	08010c18 	.word	0x08010c18
 8005f18:	08010d88 	.word	0x08010d88
 8005f1c:	08010c60 	.word	0x08010c60
 8005f20:	08010da0 	.word	0x08010da0
 8005f24:	08010dc0 	.word	0x08010dc0
 8005f28:	200058d4 	.word	0x200058d4

08005f2c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b088      	sub	sp, #32
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	4603      	mov	r3, r0
 8005f34:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005f36:	88fb      	ldrh	r3, [r7, #6]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <mem_malloc+0x14>
    return NULL;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	e0d9      	b.n	80060f4 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005f40:	88fb      	ldrh	r3, [r7, #6]
 8005f42:	3303      	adds	r3, #3
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	f023 0303 	bic.w	r3, r3, #3
 8005f4a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005f4c:	8bbb      	ldrh	r3, [r7, #28]
 8005f4e:	2b0b      	cmp	r3, #11
 8005f50:	d801      	bhi.n	8005f56 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005f52:	230c      	movs	r3, #12
 8005f54:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005f56:	8bbb      	ldrh	r3, [r7, #28]
 8005f58:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005f5c:	d803      	bhi.n	8005f66 <mem_malloc+0x3a>
 8005f5e:	8bba      	ldrh	r2, [r7, #28]
 8005f60:	88fb      	ldrh	r3, [r7, #6]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d201      	bcs.n	8005f6a <mem_malloc+0x3e>
    return NULL;
 8005f66:	2300      	movs	r3, #0
 8005f68:	e0c4      	b.n	80060f4 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005f6a:	4b64      	ldr	r3, [pc, #400]	@ (80060fc <mem_malloc+0x1d0>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7ff fd4a 	bl	8005a08 <mem_to_ptr>
 8005f74:	4603      	mov	r3, r0
 8005f76:	83fb      	strh	r3, [r7, #30]
 8005f78:	e0b4      	b.n	80060e4 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005f7a:	8bfb      	ldrh	r3, [r7, #30]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7ff fd31 	bl	80059e4 <ptr_to_mem>
 8005f82:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	791b      	ldrb	r3, [r3, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f040 80a4 	bne.w	80060d6 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	881b      	ldrh	r3, [r3, #0]
 8005f92:	461a      	mov	r2, r3
 8005f94:	8bfb      	ldrh	r3, [r7, #30]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	f1a3 0208 	sub.w	r2, r3, #8
 8005f9c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	f0c0 8099 	bcc.w	80060d6 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	881b      	ldrh	r3, [r3, #0]
 8005fa8:	461a      	mov	r2, r3
 8005faa:	8bfb      	ldrh	r3, [r7, #30]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	f1a3 0208 	sub.w	r2, r3, #8
 8005fb2:	8bbb      	ldrh	r3, [r7, #28]
 8005fb4:	3314      	adds	r3, #20
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d333      	bcc.n	8006022 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005fba:	8bfa      	ldrh	r2, [r7, #30]
 8005fbc:	8bbb      	ldrh	r3, [r7, #28]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	3308      	adds	r3, #8
 8005fc4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005fc6:	8a7b      	ldrh	r3, [r7, #18]
 8005fc8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005fcc:	d106      	bne.n	8005fdc <mem_malloc+0xb0>
 8005fce:	4b4c      	ldr	r3, [pc, #304]	@ (8006100 <mem_malloc+0x1d4>)
 8005fd0:	f240 3287 	movw	r2, #903	@ 0x387
 8005fd4:	494b      	ldr	r1, [pc, #300]	@ (8006104 <mem_malloc+0x1d8>)
 8005fd6:	484c      	ldr	r0, [pc, #304]	@ (8006108 <mem_malloc+0x1dc>)
 8005fd8:	f009 fe9e 	bl	800fd18 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005fdc:	8a7b      	ldrh	r3, [r7, #18]
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7ff fd00 	bl	80059e4 <ptr_to_mem>
 8005fe4:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	881a      	ldrh	r2, [r3, #0]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8bfa      	ldrh	r2, [r7, #30]
 8005ff8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	8a7a      	ldrh	r2, [r7, #18]
 8005ffe:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	2201      	movs	r2, #1
 8006004:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800600e:	d00b      	beq.n	8006028 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	4618      	mov	r0, r3
 8006016:	f7ff fce5 	bl	80059e4 <ptr_to_mem>
 800601a:	4602      	mov	r2, r0
 800601c:	8a7b      	ldrh	r3, [r7, #18]
 800601e:	8053      	strh	r3, [r2, #2]
 8006020:	e002      	b.n	8006028 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	2201      	movs	r2, #1
 8006026:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006028:	4b34      	ldr	r3, [pc, #208]	@ (80060fc <mem_malloc+0x1d0>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	429a      	cmp	r2, r3
 8006030:	d127      	bne.n	8006082 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8006032:	4b32      	ldr	r3, [pc, #200]	@ (80060fc <mem_malloc+0x1d0>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006038:	e005      	b.n	8006046 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	881b      	ldrh	r3, [r3, #0]
 800603e:	4618      	mov	r0, r3
 8006040:	f7ff fcd0 	bl	80059e4 <ptr_to_mem>
 8006044:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	791b      	ldrb	r3, [r3, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d004      	beq.n	8006058 <mem_malloc+0x12c>
 800604e:	4b2f      	ldr	r3, [pc, #188]	@ (800610c <mem_malloc+0x1e0>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	69ba      	ldr	r2, [r7, #24]
 8006054:	429a      	cmp	r2, r3
 8006056:	d1f0      	bne.n	800603a <mem_malloc+0x10e>
          }
          lfree = cur;
 8006058:	4a28      	ldr	r2, [pc, #160]	@ (80060fc <mem_malloc+0x1d0>)
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800605e:	4b27      	ldr	r3, [pc, #156]	@ (80060fc <mem_malloc+0x1d0>)
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	4b2a      	ldr	r3, [pc, #168]	@ (800610c <mem_malloc+0x1e0>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	429a      	cmp	r2, r3
 8006068:	d00b      	beq.n	8006082 <mem_malloc+0x156>
 800606a:	4b24      	ldr	r3, [pc, #144]	@ (80060fc <mem_malloc+0x1d0>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	791b      	ldrb	r3, [r3, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d006      	beq.n	8006082 <mem_malloc+0x156>
 8006074:	4b22      	ldr	r3, [pc, #136]	@ (8006100 <mem_malloc+0x1d4>)
 8006076:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800607a:	4925      	ldr	r1, [pc, #148]	@ (8006110 <mem_malloc+0x1e4>)
 800607c:	4822      	ldr	r0, [pc, #136]	@ (8006108 <mem_malloc+0x1dc>)
 800607e:	f009 fe4b 	bl	800fd18 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006082:	8bba      	ldrh	r2, [r7, #28]
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	4413      	add	r3, r2
 8006088:	3308      	adds	r3, #8
 800608a:	4a20      	ldr	r2, [pc, #128]	@ (800610c <mem_malloc+0x1e0>)
 800608c:	6812      	ldr	r2, [r2, #0]
 800608e:	4293      	cmp	r3, r2
 8006090:	d906      	bls.n	80060a0 <mem_malloc+0x174>
 8006092:	4b1b      	ldr	r3, [pc, #108]	@ (8006100 <mem_malloc+0x1d4>)
 8006094:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8006098:	491e      	ldr	r1, [pc, #120]	@ (8006114 <mem_malloc+0x1e8>)
 800609a:	481b      	ldr	r0, [pc, #108]	@ (8006108 <mem_malloc+0x1dc>)
 800609c:	f009 fe3c 	bl	800fd18 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	f003 0303 	and.w	r3, r3, #3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d006      	beq.n	80060b8 <mem_malloc+0x18c>
 80060aa:	4b15      	ldr	r3, [pc, #84]	@ (8006100 <mem_malloc+0x1d4>)
 80060ac:	f240 32bb 	movw	r2, #955	@ 0x3bb
 80060b0:	4919      	ldr	r1, [pc, #100]	@ (8006118 <mem_malloc+0x1ec>)
 80060b2:	4815      	ldr	r0, [pc, #84]	@ (8006108 <mem_malloc+0x1dc>)
 80060b4:	f009 fe30 	bl	800fd18 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	f003 0303 	and.w	r3, r3, #3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d006      	beq.n	80060d0 <mem_malloc+0x1a4>
 80060c2:	4b0f      	ldr	r3, [pc, #60]	@ (8006100 <mem_malloc+0x1d4>)
 80060c4:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80060c8:	4914      	ldr	r1, [pc, #80]	@ (800611c <mem_malloc+0x1f0>)
 80060ca:	480f      	ldr	r0, [pc, #60]	@ (8006108 <mem_malloc+0x1dc>)
 80060cc:	f009 fe24 	bl	800fd18 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	3308      	adds	r3, #8
 80060d4:	e00e      	b.n	80060f4 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80060d6:	8bfb      	ldrh	r3, [r7, #30]
 80060d8:	4618      	mov	r0, r3
 80060da:	f7ff fc83 	bl	80059e4 <ptr_to_mem>
 80060de:	4603      	mov	r3, r0
 80060e0:	881b      	ldrh	r3, [r3, #0]
 80060e2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80060e4:	8bfa      	ldrh	r2, [r7, #30]
 80060e6:	8bbb      	ldrh	r3, [r7, #28]
 80060e8:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 80060ec:	429a      	cmp	r2, r3
 80060ee:	f4ff af44 	bcc.w	8005f7a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3720      	adds	r7, #32
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	200058d4 	.word	0x200058d4
 8006100:	08010c18 	.word	0x08010c18
 8006104:	08010dc0 	.word	0x08010dc0
 8006108:	08010c60 	.word	0x08010c60
 800610c:	200058d0 	.word	0x200058d0
 8006110:	08010dd4 	.word	0x08010dd4
 8006114:	08010df0 	.word	0x08010df0
 8006118:	08010e20 	.word	0x08010e20
 800611c:	08010e50 	.word	0x08010e50

08006120 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	2200      	movs	r2, #0
 800612e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	3303      	adds	r3, #3
 8006136:	f023 0303 	bic.w	r3, r3, #3
 800613a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800613c:	2300      	movs	r3, #0
 800613e:	60fb      	str	r3, [r7, #12]
 8006140:	e011      	b.n	8006166 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	461a      	mov	r2, r3
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	4413      	add	r3, r2
 800615e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	3301      	adds	r3, #1
 8006164:	60fb      	str	r3, [r7, #12]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	885b      	ldrh	r3, [r3, #2]
 800616a:	461a      	mov	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	4293      	cmp	r3, r2
 8006170:	dbe7      	blt.n	8006142 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006172:	bf00      	nop
 8006174:	bf00      	nop
 8006176:	3714      	adds	r7, #20
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006186:	2300      	movs	r3, #0
 8006188:	80fb      	strh	r3, [r7, #6]
 800618a:	e009      	b.n	80061a0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800618c:	88fb      	ldrh	r3, [r7, #6]
 800618e:	4a08      	ldr	r2, [pc, #32]	@ (80061b0 <memp_init+0x30>)
 8006190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006194:	4618      	mov	r0, r3
 8006196:	f7ff ffc3 	bl	8006120 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800619a:	88fb      	ldrh	r3, [r7, #6]
 800619c:	3301      	adds	r3, #1
 800619e:	80fb      	strh	r3, [r7, #6]
 80061a0:	88fb      	ldrh	r3, [r7, #6]
 80061a2:	2b08      	cmp	r3, #8
 80061a4:	d9f2      	bls.n	800618c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80061a6:	bf00      	nop
 80061a8:	bf00      	nop
 80061aa:	3708      	adds	r7, #8
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	08013634 	.word	0x08013634

080061b4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d012      	beq.n	80061f0 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	6812      	ldr	r2, [r2, #0]
 80061d2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f003 0303 	and.w	r3, r3, #3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d006      	beq.n	80061ec <do_memp_malloc_pool+0x38>
 80061de:	4b07      	ldr	r3, [pc, #28]	@ (80061fc <do_memp_malloc_pool+0x48>)
 80061e0:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80061e4:	4906      	ldr	r1, [pc, #24]	@ (8006200 <do_memp_malloc_pool+0x4c>)
 80061e6:	4807      	ldr	r0, [pc, #28]	@ (8006204 <do_memp_malloc_pool+0x50>)
 80061e8:	f009 fd96 	bl	800fd18 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	e000      	b.n	80061f2 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	08010e74 	.word	0x08010e74
 8006200:	08010ea4 	.word	0x08010ea4
 8006204:	08010ec8 	.word	0x08010ec8

08006208 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d106      	bne.n	8006224 <memp_malloc_pool+0x1c>
 8006216:	4b0a      	ldr	r3, [pc, #40]	@ (8006240 <memp_malloc_pool+0x38>)
 8006218:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800621c:	4909      	ldr	r1, [pc, #36]	@ (8006244 <memp_malloc_pool+0x3c>)
 800621e:	480a      	ldr	r0, [pc, #40]	@ (8006248 <memp_malloc_pool+0x40>)
 8006220:	f009 fd7a 	bl	800fd18 <iprintf>
  if (desc == NULL) {
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <memp_malloc_pool+0x26>
    return NULL;
 800622a:	2300      	movs	r3, #0
 800622c:	e003      	b.n	8006236 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7ff ffc0 	bl	80061b4 <do_memp_malloc_pool>
 8006234:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8006236:	4618      	mov	r0, r3
 8006238:	3708      	adds	r7, #8
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	08010e74 	.word	0x08010e74
 8006244:	08010ef0 	.word	0x08010ef0
 8006248:	08010ec8 	.word	0x08010ec8

0800624c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	4603      	mov	r3, r0
 8006254:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006256:	79fb      	ldrb	r3, [r7, #7]
 8006258:	2b08      	cmp	r3, #8
 800625a:	d908      	bls.n	800626e <memp_malloc+0x22>
 800625c:	4b0a      	ldr	r3, [pc, #40]	@ (8006288 <memp_malloc+0x3c>)
 800625e:	f240 1257 	movw	r2, #343	@ 0x157
 8006262:	490a      	ldr	r1, [pc, #40]	@ (800628c <memp_malloc+0x40>)
 8006264:	480a      	ldr	r0, [pc, #40]	@ (8006290 <memp_malloc+0x44>)
 8006266:	f009 fd57 	bl	800fd18 <iprintf>
 800626a:	2300      	movs	r3, #0
 800626c:	e008      	b.n	8006280 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800626e:	79fb      	ldrb	r3, [r7, #7]
 8006270:	4a08      	ldr	r2, [pc, #32]	@ (8006294 <memp_malloc+0x48>)
 8006272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006276:	4618      	mov	r0, r3
 8006278:	f7ff ff9c 	bl	80061b4 <do_memp_malloc_pool>
 800627c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800627e:	68fb      	ldr	r3, [r7, #12]
}
 8006280:	4618      	mov	r0, r3
 8006282:	3710      	adds	r7, #16
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	08010e74 	.word	0x08010e74
 800628c:	08010f04 	.word	0x08010f04
 8006290:	08010ec8 	.word	0x08010ec8
 8006294:	08013634 	.word	0x08013634

08006298 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	f003 0303 	and.w	r3, r3, #3
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d006      	beq.n	80062ba <do_memp_free_pool+0x22>
 80062ac:	4b0a      	ldr	r3, [pc, #40]	@ (80062d8 <do_memp_free_pool+0x40>)
 80062ae:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80062b2:	490a      	ldr	r1, [pc, #40]	@ (80062dc <do_memp_free_pool+0x44>)
 80062b4:	480a      	ldr	r0, [pc, #40]	@ (80062e0 <do_memp_free_pool+0x48>)
 80062b6:	f009 fd2f 	bl	800fd18 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80062d0:	bf00      	nop
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	08010e74 	.word	0x08010e74
 80062dc:	08010f24 	.word	0x08010f24
 80062e0:	08010ec8 	.word	0x08010ec8

080062e4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d106      	bne.n	8006302 <memp_free_pool+0x1e>
 80062f4:	4b0a      	ldr	r3, [pc, #40]	@ (8006320 <memp_free_pool+0x3c>)
 80062f6:	f240 1295 	movw	r2, #405	@ 0x195
 80062fa:	490a      	ldr	r1, [pc, #40]	@ (8006324 <memp_free_pool+0x40>)
 80062fc:	480a      	ldr	r0, [pc, #40]	@ (8006328 <memp_free_pool+0x44>)
 80062fe:	f009 fd0b 	bl	800fd18 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d007      	beq.n	8006318 <memp_free_pool+0x34>
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d004      	beq.n	8006318 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800630e:	6839      	ldr	r1, [r7, #0]
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f7ff ffc1 	bl	8006298 <do_memp_free_pool>
 8006316:	e000      	b.n	800631a <memp_free_pool+0x36>
    return;
 8006318:	bf00      	nop
}
 800631a:	3708      	adds	r7, #8
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	08010e74 	.word	0x08010e74
 8006324:	08010ef0 	.word	0x08010ef0
 8006328:	08010ec8 	.word	0x08010ec8

0800632c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	4603      	mov	r3, r0
 8006334:	6039      	str	r1, [r7, #0]
 8006336:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006338:	79fb      	ldrb	r3, [r7, #7]
 800633a:	2b08      	cmp	r3, #8
 800633c:	d907      	bls.n	800634e <memp_free+0x22>
 800633e:	4b0c      	ldr	r3, [pc, #48]	@ (8006370 <memp_free+0x44>)
 8006340:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8006344:	490b      	ldr	r1, [pc, #44]	@ (8006374 <memp_free+0x48>)
 8006346:	480c      	ldr	r0, [pc, #48]	@ (8006378 <memp_free+0x4c>)
 8006348:	f009 fce6 	bl	800fd18 <iprintf>
 800634c:	e00c      	b.n	8006368 <memp_free+0x3c>

  if (mem == NULL) {
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d008      	beq.n	8006366 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006354:	79fb      	ldrb	r3, [r7, #7]
 8006356:	4a09      	ldr	r2, [pc, #36]	@ (800637c <memp_free+0x50>)
 8006358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800635c:	6839      	ldr	r1, [r7, #0]
 800635e:	4618      	mov	r0, r3
 8006360:	f7ff ff9a 	bl	8006298 <do_memp_free_pool>
 8006364:	e000      	b.n	8006368 <memp_free+0x3c>
    return;
 8006366:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006368:	3708      	adds	r7, #8
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	08010e74 	.word	0x08010e74
 8006374:	08010f44 	.word	0x08010f44
 8006378:	08010ec8 	.word	0x08010ec8
 800637c:	08013634 	.word	0x08013634

08006380 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006380:	b480      	push	{r7}
 8006382:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006384:	bf00      	nop
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
	...

08006390 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b086      	sub	sp, #24
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
 800639c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d108      	bne.n	80063b6 <netif_add+0x26>
 80063a4:	4b57      	ldr	r3, [pc, #348]	@ (8006504 <netif_add+0x174>)
 80063a6:	f240 1227 	movw	r2, #295	@ 0x127
 80063aa:	4957      	ldr	r1, [pc, #348]	@ (8006508 <netif_add+0x178>)
 80063ac:	4857      	ldr	r0, [pc, #348]	@ (800650c <netif_add+0x17c>)
 80063ae:	f009 fcb3 	bl	800fd18 <iprintf>
 80063b2:	2300      	movs	r3, #0
 80063b4:	e0a2      	b.n	80064fc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80063b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d108      	bne.n	80063ce <netif_add+0x3e>
 80063bc:	4b51      	ldr	r3, [pc, #324]	@ (8006504 <netif_add+0x174>)
 80063be:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80063c2:	4953      	ldr	r1, [pc, #332]	@ (8006510 <netif_add+0x180>)
 80063c4:	4851      	ldr	r0, [pc, #324]	@ (800650c <netif_add+0x17c>)
 80063c6:	f009 fca7 	bl	800fd18 <iprintf>
 80063ca:	2300      	movs	r3, #0
 80063cc:	e096      	b.n	80064fc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d101      	bne.n	80063d8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80063d4:	4b4f      	ldr	r3, [pc, #316]	@ (8006514 <netif_add+0x184>)
 80063d6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80063de:	4b4d      	ldr	r3, [pc, #308]	@ (8006514 <netif_add+0x184>)
 80063e0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80063e8:	4b4a      	ldr	r3, [pc, #296]	@ (8006514 <netif_add+0x184>)
 80063ea:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	4a45      	ldr	r2, [pc, #276]	@ (8006518 <netif_add+0x188>)
 8006402:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6a3a      	ldr	r2, [r7, #32]
 800641c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800641e:	4b3f      	ldr	r3, [pc, #252]	@ (800651c <netif_add+0x18c>)
 8006420:	781a      	ldrb	r2, [r3, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800642c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	68b9      	ldr	r1, [r7, #8]
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f000 f913 	bl	8006660 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800643a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	4798      	blx	r3
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d001      	beq.n	800644a <netif_add+0xba>
    return NULL;
 8006446:	2300      	movs	r3, #0
 8006448:	e058      	b.n	80064fc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006450:	2bff      	cmp	r3, #255	@ 0xff
 8006452:	d103      	bne.n	800645c <netif_add+0xcc>
        netif->num = 0;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800645c:	2300      	movs	r3, #0
 800645e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006460:	4b2f      	ldr	r3, [pc, #188]	@ (8006520 <netif_add+0x190>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	617b      	str	r3, [r7, #20]
 8006466:	e02b      	b.n	80064c0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	429a      	cmp	r2, r3
 800646e:	d106      	bne.n	800647e <netif_add+0xee>
 8006470:	4b24      	ldr	r3, [pc, #144]	@ (8006504 <netif_add+0x174>)
 8006472:	f240 128b 	movw	r2, #395	@ 0x18b
 8006476:	492b      	ldr	r1, [pc, #172]	@ (8006524 <netif_add+0x194>)
 8006478:	4824      	ldr	r0, [pc, #144]	@ (800650c <netif_add+0x17c>)
 800647a:	f009 fc4d 	bl	800fd18 <iprintf>
        num_netifs++;
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	3301      	adds	r3, #1
 8006482:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	2bff      	cmp	r3, #255	@ 0xff
 8006488:	dd06      	ble.n	8006498 <netif_add+0x108>
 800648a:	4b1e      	ldr	r3, [pc, #120]	@ (8006504 <netif_add+0x174>)
 800648c:	f240 128d 	movw	r2, #397	@ 0x18d
 8006490:	4925      	ldr	r1, [pc, #148]	@ (8006528 <netif_add+0x198>)
 8006492:	481e      	ldr	r0, [pc, #120]	@ (800650c <netif_add+0x17c>)
 8006494:	f009 fc40 	bl	800fd18 <iprintf>
        if (netif2->num == netif->num) {
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d108      	bne.n	80064ba <netif_add+0x12a>
          netif->num++;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80064ae:	3301      	adds	r3, #1
 80064b0:	b2da      	uxtb	r2, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 80064b8:	e005      	b.n	80064c6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	617b      	str	r3, [r7, #20]
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1d0      	bne.n	8006468 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1be      	bne.n	800644a <netif_add+0xba>
  }
  if (netif->num == 254) {
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80064d2:	2bfe      	cmp	r3, #254	@ 0xfe
 80064d4:	d103      	bne.n	80064de <netif_add+0x14e>
    netif_num = 0;
 80064d6:	4b11      	ldr	r3, [pc, #68]	@ (800651c <netif_add+0x18c>)
 80064d8:	2200      	movs	r2, #0
 80064da:	701a      	strb	r2, [r3, #0]
 80064dc:	e006      	b.n	80064ec <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80064e4:	3301      	adds	r3, #1
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	4b0c      	ldr	r3, [pc, #48]	@ (800651c <netif_add+0x18c>)
 80064ea:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80064ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006520 <netif_add+0x190>)
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80064f4:	4a0a      	ldr	r2, [pc, #40]	@ (8006520 <netif_add+0x190>)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80064fa:	68fb      	ldr	r3, [r7, #12]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3718      	adds	r7, #24
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	08010f60 	.word	0x08010f60
 8006508:	08010ff4 	.word	0x08010ff4
 800650c:	08010fb0 	.word	0x08010fb0
 8006510:	08011010 	.word	0x08011010
 8006514:	08013698 	.word	0x08013698
 8006518:	0800693b 	.word	0x0800693b
 800651c:	200087cc 	.word	0x200087cc
 8006520:	200087c4 	.word	0x200087c4
 8006524:	08011034 	.word	0x08011034
 8006528:	08011048 	.word	0x08011048

0800652c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8006536:	6839      	ldr	r1, [r7, #0]
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f002 fbe7 	bl	8008d0c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800653e:	6839      	ldr	r1, [r7, #0]
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f006 ff73 	bl	800d42c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8006546:	bf00      	nop
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
	...

08006550 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d106      	bne.n	8006570 <netif_do_set_ipaddr+0x20>
 8006562:	4b1d      	ldr	r3, [pc, #116]	@ (80065d8 <netif_do_set_ipaddr+0x88>)
 8006564:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8006568:	491c      	ldr	r1, [pc, #112]	@ (80065dc <netif_do_set_ipaddr+0x8c>)
 800656a:	481d      	ldr	r0, [pc, #116]	@ (80065e0 <netif_do_set_ipaddr+0x90>)
 800656c:	f009 fbd4 	bl	800fd18 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d106      	bne.n	8006584 <netif_do_set_ipaddr+0x34>
 8006576:	4b18      	ldr	r3, [pc, #96]	@ (80065d8 <netif_do_set_ipaddr+0x88>)
 8006578:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800657c:	4917      	ldr	r1, [pc, #92]	@ (80065dc <netif_do_set_ipaddr+0x8c>)
 800657e:	4818      	ldr	r0, [pc, #96]	@ (80065e0 <netif_do_set_ipaddr+0x90>)
 8006580:	f009 fbca 	bl	800fd18 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	3304      	adds	r3, #4
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	429a      	cmp	r2, r3
 8006590:	d01c      	beq.n	80065cc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	3304      	adds	r3, #4
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80065a2:	f107 0314 	add.w	r3, r7, #20
 80065a6:	4619      	mov	r1, r3
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f7ff ffbf 	bl	800652c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d002      	beq.n	80065ba <netif_do_set_ipaddr+0x6a>
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	e000      	b.n	80065bc <netif_do_set_ipaddr+0x6c>
 80065ba:	2300      	movs	r3, #0
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80065c0:	2101      	movs	r1, #1
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f000 f8d2 	bl	800676c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80065c8:	2301      	movs	r3, #1
 80065ca:	e000      	b.n	80065ce <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3718      	adds	r7, #24
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	08010f60 	.word	0x08010f60
 80065dc:	08011078 	.word	0x08011078
 80065e0:	08010fb0 	.word	0x08010fb0

080065e4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	3308      	adds	r3, #8
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d00a      	beq.n	8006614 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d002      	beq.n	800660a <netif_do_set_netmask+0x26>
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	e000      	b.n	800660c <netif_do_set_netmask+0x28>
 800660a:	2300      	movs	r3, #0
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006610:	2301      	movs	r3, #1
 8006612:	e000      	b.n	8006616 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8006622:	b480      	push	{r7}
 8006624:	b085      	sub	sp, #20
 8006626:	af00      	add	r7, sp, #0
 8006628:	60f8      	str	r0, [r7, #12]
 800662a:	60b9      	str	r1, [r7, #8]
 800662c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	330c      	adds	r3, #12
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	429a      	cmp	r2, r3
 800663a:	d00a      	beq.n	8006652 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d002      	beq.n	8006648 <netif_do_set_gw+0x26>
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	e000      	b.n	800664a <netif_do_set_gw+0x28>
 8006648:	2300      	movs	r3, #0
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800664e:	2301      	movs	r3, #1
 8006650:	e000      	b.n	8006654 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b088      	sub	sp, #32
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
 800666c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800666e:	2300      	movs	r3, #0
 8006670:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8006672:	2300      	movs	r3, #0
 8006674:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d101      	bne.n	8006680 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800667c:	4b1c      	ldr	r3, [pc, #112]	@ (80066f0 <netif_set_addr+0x90>)
 800667e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d101      	bne.n	800668a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8006686:	4b1a      	ldr	r3, [pc, #104]	@ (80066f0 <netif_set_addr+0x90>)
 8006688:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d101      	bne.n	8006694 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8006690:	4b17      	ldr	r3, [pc, #92]	@ (80066f0 <netif_set_addr+0x90>)
 8006692:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <netif_set_addr+0x42>
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <netif_set_addr+0x46>
 80066a2:	2301      	movs	r3, #1
 80066a4:	e000      	b.n	80066a8 <netif_set_addr+0x48>
 80066a6:	2300      	movs	r3, #0
 80066a8:	617b      	str	r3, [r7, #20]
  if (remove) {
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d006      	beq.n	80066be <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80066b0:	f107 0310 	add.w	r3, r7, #16
 80066b4:	461a      	mov	r2, r3
 80066b6:	68b9      	ldr	r1, [r7, #8]
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f7ff ff49 	bl	8006550 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80066be:	69fa      	ldr	r2, [r7, #28]
 80066c0:	6879      	ldr	r1, [r7, #4]
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f7ff ff8e 	bl	80065e4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80066c8:	69ba      	ldr	r2, [r7, #24]
 80066ca:	6839      	ldr	r1, [r7, #0]
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f7ff ffa8 	bl	8006622 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d106      	bne.n	80066e6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80066d8:	f107 0310 	add.w	r3, r7, #16
 80066dc:	461a      	mov	r2, r3
 80066de:	68b9      	ldr	r1, [r7, #8]
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f7ff ff35 	bl	8006550 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80066e6:	bf00      	nop
 80066e8:	3720      	adds	r7, #32
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	08013698 	.word	0x08013698

080066f4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80066fc:	4a04      	ldr	r2, [pc, #16]	@ (8006710 <netif_set_default+0x1c>)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8006702:	bf00      	nop
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	200087c8 	.word	0x200087c8

08006714 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d107      	bne.n	8006732 <netif_set_up+0x1e>
 8006722:	4b0f      	ldr	r3, [pc, #60]	@ (8006760 <netif_set_up+0x4c>)
 8006724:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8006728:	490e      	ldr	r1, [pc, #56]	@ (8006764 <netif_set_up+0x50>)
 800672a:	480f      	ldr	r0, [pc, #60]	@ (8006768 <netif_set_up+0x54>)
 800672c:	f009 faf4 	bl	800fd18 <iprintf>
 8006730:	e013      	b.n	800675a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	2b00      	cmp	r3, #0
 800673e:	d10c      	bne.n	800675a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006746:	f043 0301 	orr.w	r3, r3, #1
 800674a:	b2da      	uxtb	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8006752:	2103      	movs	r1, #3
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f809 	bl	800676c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800675a:	3708      	adds	r7, #8
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	08010f60 	.word	0x08010f60
 8006764:	080110e8 	.word	0x080110e8
 8006768:	08010fb0 	.word	0x08010fb0

0800676c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	460b      	mov	r3, r1
 8006776:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d106      	bne.n	800678c <netif_issue_reports+0x20>
 800677e:	4b18      	ldr	r3, [pc, #96]	@ (80067e0 <netif_issue_reports+0x74>)
 8006780:	f240 326d 	movw	r2, #877	@ 0x36d
 8006784:	4917      	ldr	r1, [pc, #92]	@ (80067e4 <netif_issue_reports+0x78>)
 8006786:	4818      	ldr	r0, [pc, #96]	@ (80067e8 <netif_issue_reports+0x7c>)
 8006788:	f009 fac6 	bl	800fd18 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006792:	f003 0304 	and.w	r3, r3, #4
 8006796:	2b00      	cmp	r3, #0
 8006798:	d01e      	beq.n	80067d8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80067a0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d017      	beq.n	80067d8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80067a8:	78fb      	ldrb	r3, [r7, #3]
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d013      	beq.n	80067da <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	3304      	adds	r3, #4
 80067b6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00e      	beq.n	80067da <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80067c2:	f003 0308 	and.w	r3, r3, #8
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d007      	beq.n	80067da <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	3304      	adds	r3, #4
 80067ce:	4619      	mov	r1, r3
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f007 fd95 	bl	800e300 <etharp_request>
 80067d6:	e000      	b.n	80067da <netif_issue_reports+0x6e>
    return;
 80067d8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	08010f60 	.word	0x08010f60
 80067e4:	08011104 	.word	0x08011104
 80067e8:	08010fb0 	.word	0x08010fb0

080067ec <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d107      	bne.n	800680a <netif_set_down+0x1e>
 80067fa:	4b12      	ldr	r3, [pc, #72]	@ (8006844 <netif_set_down+0x58>)
 80067fc:	f240 329b 	movw	r2, #923	@ 0x39b
 8006800:	4911      	ldr	r1, [pc, #68]	@ (8006848 <netif_set_down+0x5c>)
 8006802:	4812      	ldr	r0, [pc, #72]	@ (800684c <netif_set_down+0x60>)
 8006804:	f009 fa88 	bl	800fd18 <iprintf>
 8006808:	e019      	b.n	800683e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	2b00      	cmp	r3, #0
 8006816:	d012      	beq.n	800683e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800681e:	f023 0301 	bic.w	r3, r3, #1
 8006822:	b2da      	uxtb	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006830:	f003 0308 	and.w	r3, r3, #8
 8006834:	2b00      	cmp	r3, #0
 8006836:	d002      	beq.n	800683e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f007 f91f 	bl	800da7c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800683e:	3708      	adds	r7, #8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	08010f60 	.word	0x08010f60
 8006848:	08011128 	.word	0x08011128
 800684c:	08010fb0 	.word	0x08010fb0

08006850 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d107      	bne.n	800686e <netif_set_link_up+0x1e>
 800685e:	4b13      	ldr	r3, [pc, #76]	@ (80068ac <netif_set_link_up+0x5c>)
 8006860:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8006864:	4912      	ldr	r1, [pc, #72]	@ (80068b0 <netif_set_link_up+0x60>)
 8006866:	4813      	ldr	r0, [pc, #76]	@ (80068b4 <netif_set_link_up+0x64>)
 8006868:	f009 fa56 	bl	800fd18 <iprintf>
 800686c:	e01b      	b.n	80068a6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006874:	f003 0304 	and.w	r3, r3, #4
 8006878:	2b00      	cmp	r3, #0
 800687a:	d114      	bne.n	80068a6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006882:	f043 0304 	orr.w	r3, r3, #4
 8006886:	b2da      	uxtb	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800688e:	2103      	movs	r1, #3
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f7ff ff6b 	bl	800676c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	69db      	ldr	r3, [r3, #28]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d003      	beq.n	80068a6 <netif_set_link_up+0x56>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	69db      	ldr	r3, [r3, #28]
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	08010f60 	.word	0x08010f60
 80068b0:	08011148 	.word	0x08011148
 80068b4:	08010fb0 	.word	0x08010fb0

080068b8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d107      	bne.n	80068d6 <netif_set_link_down+0x1e>
 80068c6:	4b11      	ldr	r3, [pc, #68]	@ (800690c <netif_set_link_down+0x54>)
 80068c8:	f240 4206 	movw	r2, #1030	@ 0x406
 80068cc:	4910      	ldr	r1, [pc, #64]	@ (8006910 <netif_set_link_down+0x58>)
 80068ce:	4811      	ldr	r0, [pc, #68]	@ (8006914 <netif_set_link_down+0x5c>)
 80068d0:	f009 fa22 	bl	800fd18 <iprintf>
 80068d4:	e017      	b.n	8006906 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80068dc:	f003 0304 	and.w	r3, r3, #4
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d010      	beq.n	8006906 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80068ea:	f023 0304 	bic.w	r3, r3, #4
 80068ee:	b2da      	uxtb	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d003      	beq.n	8006906 <netif_set_link_down+0x4e>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	69db      	ldr	r3, [r3, #28]
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	08010f60 	.word	0x08010f60
 8006910:	0801116c 	.word	0x0801116c
 8006914:	08010fb0 	.word	0x08010fb0

08006918 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d002      	beq.n	800692e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	683a      	ldr	r2, [r7, #0]
 800692c:	61da      	str	r2, [r3, #28]
  }
}
 800692e:	bf00      	nop
 8006930:	370c      	adds	r7, #12
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800693a:	b480      	push	{r7}
 800693c:	b085      	sub	sp, #20
 800693e:	af00      	add	r7, sp, #0
 8006940:	60f8      	str	r0, [r7, #12]
 8006942:	60b9      	str	r1, [r7, #8]
 8006944:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8006946:	f06f 030b 	mvn.w	r3, #11
}
 800694a:	4618      	mov	r0, r3
 800694c:	3714      	adds	r7, #20
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
	...

08006958 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
 800695e:	4603      	mov	r3, r0
 8006960:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8006962:	79fb      	ldrb	r3, [r7, #7]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d013      	beq.n	8006990 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8006968:	4b0d      	ldr	r3, [pc, #52]	@ (80069a0 <netif_get_by_index+0x48>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	60fb      	str	r3, [r7, #12]
 800696e:	e00c      	b.n	800698a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006976:	3301      	adds	r3, #1
 8006978:	b2db      	uxtb	r3, r3
 800697a:	79fa      	ldrb	r2, [r7, #7]
 800697c:	429a      	cmp	r2, r3
 800697e:	d101      	bne.n	8006984 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	e006      	b.n	8006992 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	60fb      	str	r3, [r7, #12]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1ef      	bne.n	8006970 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3714      	adds	r7, #20
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	200087c4 	.word	0x200087c4

080069a4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80069aa:	4b0c      	ldr	r3, [pc, #48]	@ (80069dc <pbuf_free_ooseq+0x38>)
 80069ac:	2200      	movs	r2, #0
 80069ae:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80069b0:	4b0b      	ldr	r3, [pc, #44]	@ (80069e0 <pbuf_free_ooseq+0x3c>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	607b      	str	r3, [r7, #4]
 80069b6:	e00a      	b.n	80069ce <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d003      	beq.n	80069c8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f002 f9e1 	bl	8008d88 <tcp_free_ooseq>
      return;
 80069c6:	e005      	b.n	80069d4 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	607b      	str	r3, [r7, #4]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1f1      	bne.n	80069b8 <pbuf_free_ooseq+0x14>
    }
  }
}
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	200087cd 	.word	0x200087cd
 80069e0:	200087dc 	.word	0x200087dc

080069e4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80069e4:	b480      	push	{r7}
 80069e6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80069e8:	4b03      	ldr	r3, [pc, #12]	@ (80069f8 <pbuf_pool_is_empty+0x14>)
 80069ea:	2201      	movs	r2, #1
 80069ec:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80069ee:	bf00      	nop
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	200087cd 	.word	0x200087cd

080069fc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	4611      	mov	r1, r2
 8006a08:	461a      	mov	r2, r3
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	80fb      	strh	r3, [r7, #6]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	88fa      	ldrh	r2, [r7, #6]
 8006a22:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	88ba      	ldrh	r2, [r7, #4]
 8006a28:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8006a2a:	8b3b      	ldrh	r3, [r7, #24]
 8006a2c:	b2da      	uxtb	r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	7f3a      	ldrb	r2, [r7, #28]
 8006a36:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	73da      	strb	r2, [r3, #15]
}
 8006a44:	bf00      	nop
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b08c      	sub	sp, #48	@ 0x30
 8006a54:	af02      	add	r7, sp, #8
 8006a56:	4603      	mov	r3, r0
 8006a58:	71fb      	strb	r3, [r7, #7]
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	80bb      	strh	r3, [r7, #4]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8006a62:	79fb      	ldrb	r3, [r7, #7]
 8006a64:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8006a66:	887b      	ldrh	r3, [r7, #2]
 8006a68:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8006a6c:	d07f      	beq.n	8006b6e <pbuf_alloc+0x11e>
 8006a6e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8006a72:	f300 80c8 	bgt.w	8006c06 <pbuf_alloc+0x1b6>
 8006a76:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8006a7a:	d010      	beq.n	8006a9e <pbuf_alloc+0x4e>
 8006a7c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8006a80:	f300 80c1 	bgt.w	8006c06 <pbuf_alloc+0x1b6>
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d002      	beq.n	8006a8e <pbuf_alloc+0x3e>
 8006a88:	2b41      	cmp	r3, #65	@ 0x41
 8006a8a:	f040 80bc 	bne.w	8006c06 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8006a8e:	887a      	ldrh	r2, [r7, #2]
 8006a90:	88bb      	ldrh	r3, [r7, #4]
 8006a92:	4619      	mov	r1, r3
 8006a94:	2000      	movs	r0, #0
 8006a96:	f000 f8d1 	bl	8006c3c <pbuf_alloc_reference>
 8006a9a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8006a9c:	e0bd      	b.n	8006c1a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8006aa6:	88bb      	ldrh	r3, [r7, #4]
 8006aa8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006aaa:	2008      	movs	r0, #8
 8006aac:	f7ff fbce 	bl	800624c <memp_malloc>
 8006ab0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d109      	bne.n	8006acc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8006ab8:	f7ff ff94 	bl	80069e4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8006abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d002      	beq.n	8006ac8 <pbuf_alloc+0x78>
            pbuf_free(p);
 8006ac2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006ac4:	f000 faa8 	bl	8007018 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	e0a7      	b.n	8006c1c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8006acc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006ace:	3303      	adds	r3, #3
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	f023 0303 	bic.w	r3, r3, #3
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	8b7a      	ldrh	r2, [r7, #26]
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	bf28      	it	cs
 8006ae4:	4613      	movcs	r3, r2
 8006ae6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8006ae8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006aea:	3310      	adds	r3, #16
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	4413      	add	r3, r2
 8006af0:	3303      	adds	r3, #3
 8006af2:	f023 0303 	bic.w	r3, r3, #3
 8006af6:	4618      	mov	r0, r3
 8006af8:	89f9      	ldrh	r1, [r7, #14]
 8006afa:	8b7a      	ldrh	r2, [r7, #26]
 8006afc:	2300      	movs	r3, #0
 8006afe:	9301      	str	r3, [sp, #4]
 8006b00:	887b      	ldrh	r3, [r7, #2]
 8006b02:	9300      	str	r3, [sp, #0]
 8006b04:	460b      	mov	r3, r1
 8006b06:	4601      	mov	r1, r0
 8006b08:	6938      	ldr	r0, [r7, #16]
 8006b0a:	f7ff ff77 	bl	80069fc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f003 0303 	and.w	r3, r3, #3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d006      	beq.n	8006b28 <pbuf_alloc+0xd8>
 8006b1a:	4b42      	ldr	r3, [pc, #264]	@ (8006c24 <pbuf_alloc+0x1d4>)
 8006b1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b20:	4941      	ldr	r1, [pc, #260]	@ (8006c28 <pbuf_alloc+0x1d8>)
 8006b22:	4842      	ldr	r0, [pc, #264]	@ (8006c2c <pbuf_alloc+0x1dc>)
 8006b24:	f009 f8f8 	bl	800fd18 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006b28:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006b2a:	3303      	adds	r3, #3
 8006b2c:	f023 0303 	bic.w	r3, r3, #3
 8006b30:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8006b34:	d106      	bne.n	8006b44 <pbuf_alloc+0xf4>
 8006b36:	4b3b      	ldr	r3, [pc, #236]	@ (8006c24 <pbuf_alloc+0x1d4>)
 8006b38:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8006b3c:	493c      	ldr	r1, [pc, #240]	@ (8006c30 <pbuf_alloc+0x1e0>)
 8006b3e:	483b      	ldr	r0, [pc, #236]	@ (8006c2c <pbuf_alloc+0x1dc>)
 8006b40:	f009 f8ea 	bl	800fd18 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d102      	bne.n	8006b50 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b4e:	e002      	b.n	8006b56 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	693a      	ldr	r2, [r7, #16]
 8006b54:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8006b5a:	8b7a      	ldrh	r2, [r7, #26]
 8006b5c:	89fb      	ldrh	r3, [r7, #14]
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006b62:	2300      	movs	r3, #0
 8006b64:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8006b66:	8b7b      	ldrh	r3, [r7, #26]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d19e      	bne.n	8006aaa <pbuf_alloc+0x5a>
      break;
 8006b6c:	e055      	b.n	8006c1a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8006b6e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006b70:	3303      	adds	r3, #3
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	f023 0303 	bic.w	r3, r3, #3
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	88bb      	ldrh	r3, [r7, #4]
 8006b7c:	3303      	adds	r3, #3
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	f023 0303 	bic.w	r3, r3, #3
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	4413      	add	r3, r2
 8006b88:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8006b8a:	8b3b      	ldrh	r3, [r7, #24]
 8006b8c:	3310      	adds	r3, #16
 8006b8e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006b90:	8b3a      	ldrh	r2, [r7, #24]
 8006b92:	88bb      	ldrh	r3, [r7, #4]
 8006b94:	3303      	adds	r3, #3
 8006b96:	f023 0303 	bic.w	r3, r3, #3
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d306      	bcc.n	8006bac <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8006b9e:	8afa      	ldrh	r2, [r7, #22]
 8006ba0:	88bb      	ldrh	r3, [r7, #4]
 8006ba2:	3303      	adds	r3, #3
 8006ba4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d201      	bcs.n	8006bb0 <pbuf_alloc+0x160>
        return NULL;
 8006bac:	2300      	movs	r3, #0
 8006bae:	e035      	b.n	8006c1c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8006bb0:	8afb      	ldrh	r3, [r7, #22]
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7ff f9ba 	bl	8005f2c <mem_malloc>
 8006bb8:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8006bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d101      	bne.n	8006bc4 <pbuf_alloc+0x174>
        return NULL;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	e02b      	b.n	8006c1c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006bc4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006bc6:	3310      	adds	r3, #16
 8006bc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bca:	4413      	add	r3, r2
 8006bcc:	3303      	adds	r3, #3
 8006bce:	f023 0303 	bic.w	r3, r3, #3
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	88b9      	ldrh	r1, [r7, #4]
 8006bd6:	88ba      	ldrh	r2, [r7, #4]
 8006bd8:	2300      	movs	r3, #0
 8006bda:	9301      	str	r3, [sp, #4]
 8006bdc:	887b      	ldrh	r3, [r7, #2]
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	460b      	mov	r3, r1
 8006be2:	4601      	mov	r1, r0
 8006be4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006be6:	f7ff ff09 	bl	80069fc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8006bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f003 0303 	and.w	r3, r3, #3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d010      	beq.n	8006c18 <pbuf_alloc+0x1c8>
 8006bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8006c24 <pbuf_alloc+0x1d4>)
 8006bf8:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8006bfc:	490d      	ldr	r1, [pc, #52]	@ (8006c34 <pbuf_alloc+0x1e4>)
 8006bfe:	480b      	ldr	r0, [pc, #44]	@ (8006c2c <pbuf_alloc+0x1dc>)
 8006c00:	f009 f88a 	bl	800fd18 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8006c04:	e008      	b.n	8006c18 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006c06:	4b07      	ldr	r3, [pc, #28]	@ (8006c24 <pbuf_alloc+0x1d4>)
 8006c08:	f240 1227 	movw	r2, #295	@ 0x127
 8006c0c:	490a      	ldr	r1, [pc, #40]	@ (8006c38 <pbuf_alloc+0x1e8>)
 8006c0e:	4807      	ldr	r0, [pc, #28]	@ (8006c2c <pbuf_alloc+0x1dc>)
 8006c10:	f009 f882 	bl	800fd18 <iprintf>
      return NULL;
 8006c14:	2300      	movs	r3, #0
 8006c16:	e001      	b.n	8006c1c <pbuf_alloc+0x1cc>
      break;
 8006c18:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3728      	adds	r7, #40	@ 0x28
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	08011190 	.word	0x08011190
 8006c28:	080111c0 	.word	0x080111c0
 8006c2c:	080111f0 	.word	0x080111f0
 8006c30:	08011218 	.word	0x08011218
 8006c34:	0801124c 	.word	0x0801124c
 8006c38:	08011278 	.word	0x08011278

08006c3c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b086      	sub	sp, #24
 8006c40:	af02      	add	r7, sp, #8
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	460b      	mov	r3, r1
 8006c46:	807b      	strh	r3, [r7, #2]
 8006c48:	4613      	mov	r3, r2
 8006c4a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006c4c:	883b      	ldrh	r3, [r7, #0]
 8006c4e:	2b41      	cmp	r3, #65	@ 0x41
 8006c50:	d009      	beq.n	8006c66 <pbuf_alloc_reference+0x2a>
 8006c52:	883b      	ldrh	r3, [r7, #0]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d006      	beq.n	8006c66 <pbuf_alloc_reference+0x2a>
 8006c58:	4b0f      	ldr	r3, [pc, #60]	@ (8006c98 <pbuf_alloc_reference+0x5c>)
 8006c5a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8006c5e:	490f      	ldr	r1, [pc, #60]	@ (8006c9c <pbuf_alloc_reference+0x60>)
 8006c60:	480f      	ldr	r0, [pc, #60]	@ (8006ca0 <pbuf_alloc_reference+0x64>)
 8006c62:	f009 f859 	bl	800fd18 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006c66:	2007      	movs	r0, #7
 8006c68:	f7ff faf0 	bl	800624c <memp_malloc>
 8006c6c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d101      	bne.n	8006c78 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006c74:	2300      	movs	r3, #0
 8006c76:	e00b      	b.n	8006c90 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006c78:	8879      	ldrh	r1, [r7, #2]
 8006c7a:	887a      	ldrh	r2, [r7, #2]
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	9301      	str	r3, [sp, #4]
 8006c80:	883b      	ldrh	r3, [r7, #0]
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	460b      	mov	r3, r1
 8006c86:	6879      	ldr	r1, [r7, #4]
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f7ff feb7 	bl	80069fc <pbuf_init_alloced_pbuf>
  return p;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	08011190 	.word	0x08011190
 8006c9c:	08011294 	.word	0x08011294
 8006ca0:	080111f0 	.word	0x080111f0

08006ca4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b088      	sub	sp, #32
 8006ca8:	af02      	add	r7, sp, #8
 8006caa:	607b      	str	r3, [r7, #4]
 8006cac:	4603      	mov	r3, r0
 8006cae:	73fb      	strb	r3, [r7, #15]
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	81bb      	strh	r3, [r7, #12]
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
 8006cba:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006cbc:	8a7b      	ldrh	r3, [r7, #18]
 8006cbe:	3303      	adds	r3, #3
 8006cc0:	f023 0203 	bic.w	r2, r3, #3
 8006cc4:	89bb      	ldrh	r3, [r7, #12]
 8006cc6:	441a      	add	r2, r3
 8006cc8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d901      	bls.n	8006cd2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	e018      	b.n	8006d04 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8006cd2:	6a3b      	ldr	r3, [r7, #32]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d007      	beq.n	8006ce8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006cd8:	8a7b      	ldrh	r3, [r7, #18]
 8006cda:	3303      	adds	r3, #3
 8006cdc:	f023 0303 	bic.w	r3, r3, #3
 8006ce0:	6a3a      	ldr	r2, [r7, #32]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	617b      	str	r3, [r7, #20]
 8006ce6:	e001      	b.n	8006cec <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	89b9      	ldrh	r1, [r7, #12]
 8006cf0:	89ba      	ldrh	r2, [r7, #12]
 8006cf2:	2302      	movs	r3, #2
 8006cf4:	9301      	str	r3, [sp, #4]
 8006cf6:	897b      	ldrh	r3, [r7, #10]
 8006cf8:	9300      	str	r3, [sp, #0]
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	6979      	ldr	r1, [r7, #20]
 8006cfe:	f7ff fe7d 	bl	80069fc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8006d02:	687b      	ldr	r3, [r7, #4]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3718      	adds	r7, #24
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	460b      	mov	r3, r1
 8006d16:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d106      	bne.n	8006d2c <pbuf_realloc+0x20>
 8006d1e:	4b3a      	ldr	r3, [pc, #232]	@ (8006e08 <pbuf_realloc+0xfc>)
 8006d20:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8006d24:	4939      	ldr	r1, [pc, #228]	@ (8006e0c <pbuf_realloc+0x100>)
 8006d26:	483a      	ldr	r0, [pc, #232]	@ (8006e10 <pbuf_realloc+0x104>)
 8006d28:	f008 fff6 	bl	800fd18 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	891b      	ldrh	r3, [r3, #8]
 8006d30:	887a      	ldrh	r2, [r7, #2]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d263      	bcs.n	8006dfe <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	891a      	ldrh	r2, [r3, #8]
 8006d3a:	887b      	ldrh	r3, [r7, #2]
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006d40:	887b      	ldrh	r3, [r7, #2]
 8006d42:	817b      	strh	r3, [r7, #10]
  q = p;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006d48:	e018      	b.n	8006d7c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	895b      	ldrh	r3, [r3, #10]
 8006d4e:	897a      	ldrh	r2, [r7, #10]
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	891a      	ldrh	r2, [r3, #8]
 8006d58:	893b      	ldrh	r3, [r7, #8]
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d106      	bne.n	8006d7c <pbuf_realloc+0x70>
 8006d6e:	4b26      	ldr	r3, [pc, #152]	@ (8006e08 <pbuf_realloc+0xfc>)
 8006d70:	f240 12af 	movw	r2, #431	@ 0x1af
 8006d74:	4927      	ldr	r1, [pc, #156]	@ (8006e14 <pbuf_realloc+0x108>)
 8006d76:	4826      	ldr	r0, [pc, #152]	@ (8006e10 <pbuf_realloc+0x104>)
 8006d78:	f008 ffce 	bl	800fd18 <iprintf>
  while (rem_len > q->len) {
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	895b      	ldrh	r3, [r3, #10]
 8006d80:	897a      	ldrh	r2, [r7, #10]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d8e1      	bhi.n	8006d4a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	7b1b      	ldrb	r3, [r3, #12]
 8006d8a:	f003 030f 	and.w	r3, r3, #15
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d121      	bne.n	8006dd6 <pbuf_realloc+0xca>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	895b      	ldrh	r3, [r3, #10]
 8006d96:	897a      	ldrh	r2, [r7, #10]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d01c      	beq.n	8006dd6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	7b5b      	ldrb	r3, [r3, #13]
 8006da0:	f003 0302 	and.w	r3, r3, #2
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d116      	bne.n	8006dd6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	897b      	ldrh	r3, [r7, #10]
 8006db4:	4413      	add	r3, r2
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	4619      	mov	r1, r3
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f7fe ffba 	bl	8005d34 <mem_trim>
 8006dc0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d106      	bne.n	8006dd6 <pbuf_realloc+0xca>
 8006dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8006e08 <pbuf_realloc+0xfc>)
 8006dca:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8006dce:	4912      	ldr	r1, [pc, #72]	@ (8006e18 <pbuf_realloc+0x10c>)
 8006dd0:	480f      	ldr	r0, [pc, #60]	@ (8006e10 <pbuf_realloc+0x104>)
 8006dd2:	f008 ffa1 	bl	800fd18 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	897a      	ldrh	r2, [r7, #10]
 8006dda:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	895a      	ldrh	r2, [r3, #10]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d004      	beq.n	8006df6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f000 f911 	bl	8007018 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	601a      	str	r2, [r3, #0]
 8006dfc:	e000      	b.n	8006e00 <pbuf_realloc+0xf4>
    return;
 8006dfe:	bf00      	nop

}
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	08011190 	.word	0x08011190
 8006e0c:	080112a8 	.word	0x080112a8
 8006e10:	080111f0 	.word	0x080111f0
 8006e14:	080112c0 	.word	0x080112c0
 8006e18:	080112d8 	.word	0x080112d8

08006e1c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b086      	sub	sp, #24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	4613      	mov	r3, r2
 8006e28:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d106      	bne.n	8006e3e <pbuf_add_header_impl+0x22>
 8006e30:	4b2b      	ldr	r3, [pc, #172]	@ (8006ee0 <pbuf_add_header_impl+0xc4>)
 8006e32:	f240 12df 	movw	r2, #479	@ 0x1df
 8006e36:	492b      	ldr	r1, [pc, #172]	@ (8006ee4 <pbuf_add_header_impl+0xc8>)
 8006e38:	482b      	ldr	r0, [pc, #172]	@ (8006ee8 <pbuf_add_header_impl+0xcc>)
 8006e3a:	f008 ff6d 	bl	800fd18 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d003      	beq.n	8006e4c <pbuf_add_header_impl+0x30>
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e4a:	d301      	bcc.n	8006e50 <pbuf_add_header_impl+0x34>
    return 1;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e043      	b.n	8006ed8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d101      	bne.n	8006e5a <pbuf_add_header_impl+0x3e>
    return 0;
 8006e56:	2300      	movs	r3, #0
 8006e58:	e03e      	b.n	8006ed8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	891a      	ldrh	r2, [r3, #8]
 8006e62:	8a7b      	ldrh	r3, [r7, #18]
 8006e64:	4413      	add	r3, r2
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	8a7a      	ldrh	r2, [r7, #18]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d901      	bls.n	8006e72 <pbuf_add_header_impl+0x56>
    return 1;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e032      	b.n	8006ed8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	7b1b      	ldrb	r3, [r3, #12]
 8006e76:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006e78:	8a3b      	ldrh	r3, [r7, #16]
 8006e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00c      	beq.n	8006e9c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	425b      	negs	r3, r3
 8006e8a:	4413      	add	r3, r2
 8006e8c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3310      	adds	r3, #16
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d20d      	bcs.n	8006eb4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e01d      	b.n	8006ed8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006e9c:	79fb      	ldrb	r3, [r7, #7]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d006      	beq.n	8006eb0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	685a      	ldr	r2, [r3, #4]
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	425b      	negs	r3, r3
 8006eaa:	4413      	add	r3, r2
 8006eac:	617b      	str	r3, [r7, #20]
 8006eae:	e001      	b.n	8006eb4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e011      	b.n	8006ed8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	895a      	ldrh	r2, [r3, #10]
 8006ebe:	8a7b      	ldrh	r3, [r7, #18]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	b29a      	uxth	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	891a      	ldrh	r2, [r3, #8]
 8006ecc:	8a7b      	ldrh	r3, [r7, #18]
 8006ece:	4413      	add	r3, r2
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	811a      	strh	r2, [r3, #8]


  return 0;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3718      	adds	r7, #24
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	08011190 	.word	0x08011190
 8006ee4:	080112f4 	.word	0x080112f4
 8006ee8:	080111f0 	.word	0x080111f0

08006eec <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	6839      	ldr	r1, [r7, #0]
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7ff ff8e 	bl	8006e1c <pbuf_add_header_impl>
 8006f00:	4603      	mov	r3, r0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
	...

08006f0c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d106      	bne.n	8006f2a <pbuf_remove_header+0x1e>
 8006f1c:	4b20      	ldr	r3, [pc, #128]	@ (8006fa0 <pbuf_remove_header+0x94>)
 8006f1e:	f240 224b 	movw	r2, #587	@ 0x24b
 8006f22:	4920      	ldr	r1, [pc, #128]	@ (8006fa4 <pbuf_remove_header+0x98>)
 8006f24:	4820      	ldr	r0, [pc, #128]	@ (8006fa8 <pbuf_remove_header+0x9c>)
 8006f26:	f008 fef7 	bl	800fd18 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d003      	beq.n	8006f38 <pbuf_remove_header+0x2c>
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f36:	d301      	bcc.n	8006f3c <pbuf_remove_header+0x30>
    return 1;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e02c      	b.n	8006f96 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d101      	bne.n	8006f46 <pbuf_remove_header+0x3a>
    return 0;
 8006f42:	2300      	movs	r3, #0
 8006f44:	e027      	b.n	8006f96 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	895b      	ldrh	r3, [r3, #10]
 8006f4e:	89fa      	ldrh	r2, [r7, #14]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d908      	bls.n	8006f66 <pbuf_remove_header+0x5a>
 8006f54:	4b12      	ldr	r3, [pc, #72]	@ (8006fa0 <pbuf_remove_header+0x94>)
 8006f56:	f240 2255 	movw	r2, #597	@ 0x255
 8006f5a:	4914      	ldr	r1, [pc, #80]	@ (8006fac <pbuf_remove_header+0xa0>)
 8006f5c:	4812      	ldr	r0, [pc, #72]	@ (8006fa8 <pbuf_remove_header+0x9c>)
 8006f5e:	f008 fedb 	bl	800fd18 <iprintf>
 8006f62:	2301      	movs	r3, #1
 8006f64:	e017      	b.n	8006f96 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685a      	ldr	r2, [r3, #4]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	441a      	add	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	895a      	ldrh	r2, [r3, #10]
 8006f7c:	89fb      	ldrh	r3, [r7, #14]
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	891a      	ldrh	r2, [r3, #8]
 8006f8a:	89fb      	ldrh	r3, [r7, #14]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	08011190 	.word	0x08011190
 8006fa4:	080112f4 	.word	0x080112f4
 8006fa8:	080111f0 	.word	0x080111f0
 8006fac:	08011300 	.word	0x08011300

08006fb0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	460b      	mov	r3, r1
 8006fba:	807b      	strh	r3, [r7, #2]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8006fc0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	da08      	bge.n	8006fda <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006fc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006fcc:	425b      	negs	r3, r3
 8006fce:	4619      	mov	r1, r3
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f7ff ff9b 	bl	8006f0c <pbuf_remove_header>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	e007      	b.n	8006fea <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006fda:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006fde:	787a      	ldrb	r2, [r7, #1]
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7ff ff1a 	bl	8006e1c <pbuf_add_header_impl>
 8006fe8:	4603      	mov	r3, r0
  }
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3708      	adds	r7, #8
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b082      	sub	sp, #8
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006ffe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007002:	2201      	movs	r2, #1
 8007004:	4619      	mov	r1, r3
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f7ff ffd2 	bl	8006fb0 <pbuf_header_impl>
 800700c:	4603      	mov	r3, r0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
	...

08007018 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d10b      	bne.n	800703e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d106      	bne.n	800703a <pbuf_free+0x22>
 800702c:	4b38      	ldr	r3, [pc, #224]	@ (8007110 <pbuf_free+0xf8>)
 800702e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8007032:	4938      	ldr	r1, [pc, #224]	@ (8007114 <pbuf_free+0xfc>)
 8007034:	4838      	ldr	r0, [pc, #224]	@ (8007118 <pbuf_free+0x100>)
 8007036:	f008 fe6f 	bl	800fd18 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800703a:	2300      	movs	r3, #0
 800703c:	e063      	b.n	8007106 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800703e:	2300      	movs	r3, #0
 8007040:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8007042:	e05c      	b.n	80070fe <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	7b9b      	ldrb	r3, [r3, #14]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d106      	bne.n	800705a <pbuf_free+0x42>
 800704c:	4b30      	ldr	r3, [pc, #192]	@ (8007110 <pbuf_free+0xf8>)
 800704e:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8007052:	4932      	ldr	r1, [pc, #200]	@ (800711c <pbuf_free+0x104>)
 8007054:	4830      	ldr	r0, [pc, #192]	@ (8007118 <pbuf_free+0x100>)
 8007056:	f008 fe5f 	bl	800fd18 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	7b9b      	ldrb	r3, [r3, #14]
 800705e:	3b01      	subs	r3, #1
 8007060:	b2da      	uxtb	r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	739a      	strb	r2, [r3, #14]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	7b9b      	ldrb	r3, [r3, #14]
 800706a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800706c:	7dbb      	ldrb	r3, [r7, #22]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d143      	bne.n	80070fa <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	7b1b      	ldrb	r3, [r3, #12]
 800707c:	f003 030f 	and.w	r3, r3, #15
 8007080:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	7b5b      	ldrb	r3, [r3, #13]
 8007086:	f003 0302 	and.w	r3, r3, #2
 800708a:	2b00      	cmp	r3, #0
 800708c:	d011      	beq.n	80070b2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d106      	bne.n	80070a8 <pbuf_free+0x90>
 800709a:	4b1d      	ldr	r3, [pc, #116]	@ (8007110 <pbuf_free+0xf8>)
 800709c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80070a0:	491f      	ldr	r1, [pc, #124]	@ (8007120 <pbuf_free+0x108>)
 80070a2:	481d      	ldr	r0, [pc, #116]	@ (8007118 <pbuf_free+0x100>)
 80070a4:	f008 fe38 	bl	800fd18 <iprintf>
        pc->custom_free_function(p);
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	4798      	blx	r3
 80070b0:	e01d      	b.n	80070ee <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80070b2:	7bfb      	ldrb	r3, [r7, #15]
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d104      	bne.n	80070c2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80070b8:	6879      	ldr	r1, [r7, #4]
 80070ba:	2008      	movs	r0, #8
 80070bc:	f7ff f936 	bl	800632c <memp_free>
 80070c0:	e015      	b.n	80070ee <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80070c2:	7bfb      	ldrb	r3, [r7, #15]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d104      	bne.n	80070d2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80070c8:	6879      	ldr	r1, [r7, #4]
 80070ca:	2007      	movs	r0, #7
 80070cc:	f7ff f92e 	bl	800632c <memp_free>
 80070d0:	e00d      	b.n	80070ee <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80070d2:	7bfb      	ldrb	r3, [r7, #15]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d103      	bne.n	80070e0 <pbuf_free+0xc8>
          mem_free(p);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f7fe fdc1 	bl	8005c60 <mem_free>
 80070de:	e006      	b.n	80070ee <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80070e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007110 <pbuf_free+0xf8>)
 80070e2:	f240 320f 	movw	r2, #783	@ 0x30f
 80070e6:	490f      	ldr	r1, [pc, #60]	@ (8007124 <pbuf_free+0x10c>)
 80070e8:	480b      	ldr	r0, [pc, #44]	@ (8007118 <pbuf_free+0x100>)
 80070ea:	f008 fe15 	bl	800fd18 <iprintf>
        }
      }
      count++;
 80070ee:	7dfb      	ldrb	r3, [r7, #23]
 80070f0:	3301      	adds	r3, #1
 80070f2:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	607b      	str	r3, [r7, #4]
 80070f8:	e001      	b.n	80070fe <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80070fa:	2300      	movs	r3, #0
 80070fc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d19f      	bne.n	8007044 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007104:	7dfb      	ldrb	r3, [r7, #23]
}
 8007106:	4618      	mov	r0, r3
 8007108:	3718      	adds	r7, #24
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	08011190 	.word	0x08011190
 8007114:	080112f4 	.word	0x080112f4
 8007118:	080111f0 	.word	0x080111f0
 800711c:	08011320 	.word	0x08011320
 8007120:	08011338 	.word	0x08011338
 8007124:	0801135c 	.word	0x0801135c

08007128 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007130:	2300      	movs	r3, #0
 8007132:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007134:	e005      	b.n	8007142 <pbuf_clen+0x1a>
    ++len;
 8007136:	89fb      	ldrh	r3, [r7, #14]
 8007138:	3301      	adds	r3, #1
 800713a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1f6      	bne.n	8007136 <pbuf_clen+0xe>
  }
  return len;
 8007148:	89fb      	ldrh	r3, [r7, #14]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3714      	adds	r7, #20
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
	...

08007158 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d010      	beq.n	8007188 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	7b9b      	ldrb	r3, [r3, #14]
 800716a:	3301      	adds	r3, #1
 800716c:	b2da      	uxtb	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	7b9b      	ldrb	r3, [r3, #14]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d106      	bne.n	8007188 <pbuf_ref+0x30>
 800717a:	4b05      	ldr	r3, [pc, #20]	@ (8007190 <pbuf_ref+0x38>)
 800717c:	f240 3242 	movw	r2, #834	@ 0x342
 8007180:	4904      	ldr	r1, [pc, #16]	@ (8007194 <pbuf_ref+0x3c>)
 8007182:	4805      	ldr	r0, [pc, #20]	@ (8007198 <pbuf_ref+0x40>)
 8007184:	f008 fdc8 	bl	800fd18 <iprintf>
  }
}
 8007188:	bf00      	nop
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	08011190 	.word	0x08011190
 8007194:	08011370 	.word	0x08011370
 8007198:	080111f0 	.word	0x080111f0

0800719c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d002      	beq.n	80071b2 <pbuf_cat+0x16>
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d107      	bne.n	80071c2 <pbuf_cat+0x26>
 80071b2:	4b20      	ldr	r3, [pc, #128]	@ (8007234 <pbuf_cat+0x98>)
 80071b4:	f240 3259 	movw	r2, #857	@ 0x359
 80071b8:	491f      	ldr	r1, [pc, #124]	@ (8007238 <pbuf_cat+0x9c>)
 80071ba:	4820      	ldr	r0, [pc, #128]	@ (800723c <pbuf_cat+0xa0>)
 80071bc:	f008 fdac 	bl	800fd18 <iprintf>
 80071c0:	e034      	b.n	800722c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	60fb      	str	r3, [r7, #12]
 80071c6:	e00a      	b.n	80071de <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	891a      	ldrh	r2, [r3, #8]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	891b      	ldrh	r3, [r3, #8]
 80071d0:	4413      	add	r3, r2
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	60fb      	str	r3, [r7, #12]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1f0      	bne.n	80071c8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	891a      	ldrh	r2, [r3, #8]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	895b      	ldrh	r3, [r3, #10]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d006      	beq.n	8007200 <pbuf_cat+0x64>
 80071f2:	4b10      	ldr	r3, [pc, #64]	@ (8007234 <pbuf_cat+0x98>)
 80071f4:	f240 3262 	movw	r2, #866	@ 0x362
 80071f8:	4911      	ldr	r1, [pc, #68]	@ (8007240 <pbuf_cat+0xa4>)
 80071fa:	4810      	ldr	r0, [pc, #64]	@ (800723c <pbuf_cat+0xa0>)
 80071fc:	f008 fd8c 	bl	800fd18 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d006      	beq.n	8007216 <pbuf_cat+0x7a>
 8007208:	4b0a      	ldr	r3, [pc, #40]	@ (8007234 <pbuf_cat+0x98>)
 800720a:	f240 3263 	movw	r2, #867	@ 0x363
 800720e:	490d      	ldr	r1, [pc, #52]	@ (8007244 <pbuf_cat+0xa8>)
 8007210:	480a      	ldr	r0, [pc, #40]	@ (800723c <pbuf_cat+0xa0>)
 8007212:	f008 fd81 	bl	800fd18 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	891a      	ldrh	r2, [r3, #8]
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	891b      	ldrh	r3, [r3, #8]
 800721e:	4413      	add	r3, r2
 8007220:	b29a      	uxth	r2, r3
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	683a      	ldr	r2, [r7, #0]
 800722a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	08011190 	.word	0x08011190
 8007238:	08011384 	.word	0x08011384
 800723c:	080111f0 	.word	0x080111f0
 8007240:	080113bc 	.word	0x080113bc
 8007244:	080113ec 	.word	0x080113ec

08007248 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8007252:	6839      	ldr	r1, [r7, #0]
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f7ff ffa1 	bl	800719c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800725a:	6838      	ldr	r0, [r7, #0]
 800725c:	f7ff ff7c 	bl	8007158 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8007260:	bf00      	nop
 8007262:	3708      	adds	r7, #8
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007272:	2300      	movs	r3, #0
 8007274:	617b      	str	r3, [r7, #20]
 8007276:	2300      	movs	r3, #0
 8007278:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d008      	beq.n	8007292 <pbuf_copy+0x2a>
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d005      	beq.n	8007292 <pbuf_copy+0x2a>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	891a      	ldrh	r2, [r3, #8]
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	891b      	ldrh	r3, [r3, #8]
 800728e:	429a      	cmp	r2, r3
 8007290:	d209      	bcs.n	80072a6 <pbuf_copy+0x3e>
 8007292:	4b57      	ldr	r3, [pc, #348]	@ (80073f0 <pbuf_copy+0x188>)
 8007294:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8007298:	4956      	ldr	r1, [pc, #344]	@ (80073f4 <pbuf_copy+0x18c>)
 800729a:	4857      	ldr	r0, [pc, #348]	@ (80073f8 <pbuf_copy+0x190>)
 800729c:	f008 fd3c 	bl	800fd18 <iprintf>
 80072a0:	f06f 030f 	mvn.w	r3, #15
 80072a4:	e09f      	b.n	80073e6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	895b      	ldrh	r3, [r3, #10]
 80072aa:	461a      	mov	r2, r3
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	1ad2      	subs	r2, r2, r3
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	895b      	ldrh	r3, [r3, #10]
 80072b4:	4619      	mov	r1, r3
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	1acb      	subs	r3, r1, r3
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d306      	bcc.n	80072cc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	895b      	ldrh	r3, [r3, #10]
 80072c2:	461a      	mov	r2, r3
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	60fb      	str	r3, [r7, #12]
 80072ca:	e005      	b.n	80072d8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	895b      	ldrh	r3, [r3, #10]
 80072d0:	461a      	mov	r2, r3
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	18d0      	adds	r0, r2, r3
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	685a      	ldr	r2, [r3, #4]
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	4413      	add	r3, r2
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	4619      	mov	r1, r3
 80072ec:	f008 fe19 	bl	800ff22 <memcpy>
    offset_to += len;
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	4413      	add	r3, r2
 80072f6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	4413      	add	r3, r2
 80072fe:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	895b      	ldrh	r3, [r3, #10]
 8007304:	461a      	mov	r2, r3
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	4293      	cmp	r3, r2
 800730a:	d906      	bls.n	800731a <pbuf_copy+0xb2>
 800730c:	4b38      	ldr	r3, [pc, #224]	@ (80073f0 <pbuf_copy+0x188>)
 800730e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8007312:	493a      	ldr	r1, [pc, #232]	@ (80073fc <pbuf_copy+0x194>)
 8007314:	4838      	ldr	r0, [pc, #224]	@ (80073f8 <pbuf_copy+0x190>)
 8007316:	f008 fcff 	bl	800fd18 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	895b      	ldrh	r3, [r3, #10]
 800731e:	461a      	mov	r2, r3
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	4293      	cmp	r3, r2
 8007324:	d906      	bls.n	8007334 <pbuf_copy+0xcc>
 8007326:	4b32      	ldr	r3, [pc, #200]	@ (80073f0 <pbuf_copy+0x188>)
 8007328:	f240 32da 	movw	r2, #986	@ 0x3da
 800732c:	4934      	ldr	r1, [pc, #208]	@ (8007400 <pbuf_copy+0x198>)
 800732e:	4832      	ldr	r0, [pc, #200]	@ (80073f8 <pbuf_copy+0x190>)
 8007330:	f008 fcf2 	bl	800fd18 <iprintf>
    if (offset_from >= p_from->len) {
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	895b      	ldrh	r3, [r3, #10]
 8007338:	461a      	mov	r2, r3
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	4293      	cmp	r3, r2
 800733e:	d304      	bcc.n	800734a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007340:	2300      	movs	r3, #0
 8007342:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	895b      	ldrh	r3, [r3, #10]
 800734e:	461a      	mov	r2, r3
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	4293      	cmp	r3, r2
 8007354:	d114      	bne.n	8007380 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007356:	2300      	movs	r3, #0
 8007358:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d10c      	bne.n	8007380 <pbuf_copy+0x118>
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d009      	beq.n	8007380 <pbuf_copy+0x118>
 800736c:	4b20      	ldr	r3, [pc, #128]	@ (80073f0 <pbuf_copy+0x188>)
 800736e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8007372:	4924      	ldr	r1, [pc, #144]	@ (8007404 <pbuf_copy+0x19c>)
 8007374:	4820      	ldr	r0, [pc, #128]	@ (80073f8 <pbuf_copy+0x190>)
 8007376:	f008 fccf 	bl	800fd18 <iprintf>
 800737a:	f06f 030f 	mvn.w	r3, #15
 800737e:	e032      	b.n	80073e6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d013      	beq.n	80073ae <pbuf_copy+0x146>
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	895a      	ldrh	r2, [r3, #10]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	891b      	ldrh	r3, [r3, #8]
 800738e:	429a      	cmp	r2, r3
 8007390:	d10d      	bne.n	80073ae <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d009      	beq.n	80073ae <pbuf_copy+0x146>
 800739a:	4b15      	ldr	r3, [pc, #84]	@ (80073f0 <pbuf_copy+0x188>)
 800739c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80073a0:	4919      	ldr	r1, [pc, #100]	@ (8007408 <pbuf_copy+0x1a0>)
 80073a2:	4815      	ldr	r0, [pc, #84]	@ (80073f8 <pbuf_copy+0x190>)
 80073a4:	f008 fcb8 	bl	800fd18 <iprintf>
 80073a8:	f06f 0305 	mvn.w	r3, #5
 80073ac:	e01b      	b.n	80073e6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d013      	beq.n	80073dc <pbuf_copy+0x174>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	895a      	ldrh	r2, [r3, #10]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	891b      	ldrh	r3, [r3, #8]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d10d      	bne.n	80073dc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d009      	beq.n	80073dc <pbuf_copy+0x174>
 80073c8:	4b09      	ldr	r3, [pc, #36]	@ (80073f0 <pbuf_copy+0x188>)
 80073ca:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80073ce:	490e      	ldr	r1, [pc, #56]	@ (8007408 <pbuf_copy+0x1a0>)
 80073d0:	4809      	ldr	r0, [pc, #36]	@ (80073f8 <pbuf_copy+0x190>)
 80073d2:	f008 fca1 	bl	800fd18 <iprintf>
 80073d6:	f06f 0305 	mvn.w	r3, #5
 80073da:	e004      	b.n	80073e6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	f47f af61 	bne.w	80072a6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3718      	adds	r7, #24
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	08011190 	.word	0x08011190
 80073f4:	08011438 	.word	0x08011438
 80073f8:	080111f0 	.word	0x080111f0
 80073fc:	08011468 	.word	0x08011468
 8007400:	08011480 	.word	0x08011480
 8007404:	0801149c 	.word	0x0801149c
 8007408:	080114ac 	.word	0x080114ac

0800740c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b088      	sub	sp, #32
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	4611      	mov	r1, r2
 8007418:	461a      	mov	r2, r3
 800741a:	460b      	mov	r3, r1
 800741c:	80fb      	strh	r3, [r7, #6]
 800741e:	4613      	mov	r3, r2
 8007420:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007422:	2300      	movs	r3, #0
 8007424:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007426:	2300      	movs	r3, #0
 8007428:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d108      	bne.n	8007442 <pbuf_copy_partial+0x36>
 8007430:	4b2b      	ldr	r3, [pc, #172]	@ (80074e0 <pbuf_copy_partial+0xd4>)
 8007432:	f240 420a 	movw	r2, #1034	@ 0x40a
 8007436:	492b      	ldr	r1, [pc, #172]	@ (80074e4 <pbuf_copy_partial+0xd8>)
 8007438:	482b      	ldr	r0, [pc, #172]	@ (80074e8 <pbuf_copy_partial+0xdc>)
 800743a:	f008 fc6d 	bl	800fd18 <iprintf>
 800743e:	2300      	movs	r3, #0
 8007440:	e04a      	b.n	80074d8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d108      	bne.n	800745a <pbuf_copy_partial+0x4e>
 8007448:	4b25      	ldr	r3, [pc, #148]	@ (80074e0 <pbuf_copy_partial+0xd4>)
 800744a:	f240 420b 	movw	r2, #1035	@ 0x40b
 800744e:	4927      	ldr	r1, [pc, #156]	@ (80074ec <pbuf_copy_partial+0xe0>)
 8007450:	4825      	ldr	r0, [pc, #148]	@ (80074e8 <pbuf_copy_partial+0xdc>)
 8007452:	f008 fc61 	bl	800fd18 <iprintf>
 8007456:	2300      	movs	r3, #0
 8007458:	e03e      	b.n	80074d8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	61fb      	str	r3, [r7, #28]
 800745e:	e034      	b.n	80074ca <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8007460:	88bb      	ldrh	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00a      	beq.n	800747c <pbuf_copy_partial+0x70>
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	895b      	ldrh	r3, [r3, #10]
 800746a:	88ba      	ldrh	r2, [r7, #4]
 800746c:	429a      	cmp	r2, r3
 800746e:	d305      	bcc.n	800747c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	895b      	ldrh	r3, [r3, #10]
 8007474:	88ba      	ldrh	r2, [r7, #4]
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	80bb      	strh	r3, [r7, #4]
 800747a:	e023      	b.n	80074c4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	895a      	ldrh	r2, [r3, #10]
 8007480:	88bb      	ldrh	r3, [r7, #4]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8007486:	8b3a      	ldrh	r2, [r7, #24]
 8007488:	88fb      	ldrh	r3, [r7, #6]
 800748a:	429a      	cmp	r2, r3
 800748c:	d901      	bls.n	8007492 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800748e:	88fb      	ldrh	r3, [r7, #6]
 8007490:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007492:	8b7b      	ldrh	r3, [r7, #26]
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	18d0      	adds	r0, r2, r3
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	685a      	ldr	r2, [r3, #4]
 800749c:	88bb      	ldrh	r3, [r7, #4]
 800749e:	4413      	add	r3, r2
 80074a0:	8b3a      	ldrh	r2, [r7, #24]
 80074a2:	4619      	mov	r1, r3
 80074a4:	f008 fd3d 	bl	800ff22 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80074a8:	8afa      	ldrh	r2, [r7, #22]
 80074aa:	8b3b      	ldrh	r3, [r7, #24]
 80074ac:	4413      	add	r3, r2
 80074ae:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80074b0:	8b7a      	ldrh	r2, [r7, #26]
 80074b2:	8b3b      	ldrh	r3, [r7, #24]
 80074b4:	4413      	add	r3, r2
 80074b6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80074b8:	88fa      	ldrh	r2, [r7, #6]
 80074ba:	8b3b      	ldrh	r3, [r7, #24]
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80074c0:	2300      	movs	r3, #0
 80074c2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	61fb      	str	r3, [r7, #28]
 80074ca:	88fb      	ldrh	r3, [r7, #6]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d002      	beq.n	80074d6 <pbuf_copy_partial+0xca>
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1c4      	bne.n	8007460 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80074d6:	8afb      	ldrh	r3, [r7, #22]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3720      	adds	r7, #32
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	08011190 	.word	0x08011190
 80074e4:	080114d8 	.word	0x080114d8
 80074e8:	080111f0 	.word	0x080111f0
 80074ec:	080114f8 	.word	0x080114f8

080074f0 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b088      	sub	sp, #32
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	4613      	mov	r3, r2
 80074fc:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 80074fe:	88fb      	ldrh	r3, [r7, #6]
 8007500:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8007502:	2300      	movs	r3, #0
 8007504:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d109      	bne.n	8007520 <pbuf_take+0x30>
 800750c:	4b3a      	ldr	r3, [pc, #232]	@ (80075f8 <pbuf_take+0x108>)
 800750e:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 8007512:	493a      	ldr	r1, [pc, #232]	@ (80075fc <pbuf_take+0x10c>)
 8007514:	483a      	ldr	r0, [pc, #232]	@ (8007600 <pbuf_take+0x110>)
 8007516:	f008 fbff 	bl	800fd18 <iprintf>
 800751a:	f06f 030f 	mvn.w	r3, #15
 800751e:	e067      	b.n	80075f0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d109      	bne.n	800753a <pbuf_take+0x4a>
 8007526:	4b34      	ldr	r3, [pc, #208]	@ (80075f8 <pbuf_take+0x108>)
 8007528:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 800752c:	4935      	ldr	r1, [pc, #212]	@ (8007604 <pbuf_take+0x114>)
 800752e:	4834      	ldr	r0, [pc, #208]	@ (8007600 <pbuf_take+0x110>)
 8007530:	f008 fbf2 	bl	800fd18 <iprintf>
 8007534:	f06f 030f 	mvn.w	r3, #15
 8007538:	e05a      	b.n	80075f0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	891b      	ldrh	r3, [r3, #8]
 800753e:	88fa      	ldrh	r2, [r7, #6]
 8007540:	429a      	cmp	r2, r3
 8007542:	d909      	bls.n	8007558 <pbuf_take+0x68>
 8007544:	4b2c      	ldr	r3, [pc, #176]	@ (80075f8 <pbuf_take+0x108>)
 8007546:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 800754a:	492f      	ldr	r1, [pc, #188]	@ (8007608 <pbuf_take+0x118>)
 800754c:	482c      	ldr	r0, [pc, #176]	@ (8007600 <pbuf_take+0x110>)
 800754e:	f008 fbe3 	bl	800fd18 <iprintf>
 8007552:	f04f 33ff 	mov.w	r3, #4294967295
 8007556:	e04b      	b.n	80075f0 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d007      	beq.n	800756e <pbuf_take+0x7e>
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d004      	beq.n	800756e <pbuf_take+0x7e>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	891b      	ldrh	r3, [r3, #8]
 8007568:	88fa      	ldrh	r2, [r7, #6]
 800756a:	429a      	cmp	r2, r3
 800756c:	d902      	bls.n	8007574 <pbuf_take+0x84>
    return ERR_ARG;
 800756e:	f06f 030f 	mvn.w	r3, #15
 8007572:	e03d      	b.n	80075f0 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	61fb      	str	r3, [r7, #28]
 8007578:	e028      	b.n	80075cc <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d106      	bne.n	800758e <pbuf_take+0x9e>
 8007580:	4b1d      	ldr	r3, [pc, #116]	@ (80075f8 <pbuf_take+0x108>)
 8007582:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 8007586:	4921      	ldr	r1, [pc, #132]	@ (800760c <pbuf_take+0x11c>)
 8007588:	481d      	ldr	r0, [pc, #116]	@ (8007600 <pbuf_take+0x110>)
 800758a:	f008 fbc5 	bl	800fd18 <iprintf>
    buf_copy_len = total_copy_len;
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	895b      	ldrh	r3, [r3, #10]
 8007596:	461a      	mov	r2, r3
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	4293      	cmp	r3, r2
 800759c:	d902      	bls.n	80075a4 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	895b      	ldrh	r3, [r3, #10]
 80075a2:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	6858      	ldr	r0, [r3, #4]
 80075a8:	68ba      	ldr	r2, [r7, #8]
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	4413      	add	r3, r2
 80075ae:	69ba      	ldr	r2, [r7, #24]
 80075b0:	4619      	mov	r1, r3
 80075b2:	f008 fcb6 	bl	800ff22 <memcpy>
    total_copy_len -= buf_copy_len;
 80075b6:	697a      	ldr	r2, [r7, #20]
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 80075be:	693a      	ldr	r2, [r7, #16]
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	4413      	add	r3, r2
 80075c4:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	61fb      	str	r3, [r7, #28]
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1d3      	bne.n	800757a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d103      	bne.n	80075e0 <pbuf_take+0xf0>
 80075d8:	88fb      	ldrh	r3, [r7, #6]
 80075da:	693a      	ldr	r2, [r7, #16]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d006      	beq.n	80075ee <pbuf_take+0xfe>
 80075e0:	4b05      	ldr	r3, [pc, #20]	@ (80075f8 <pbuf_take+0x108>)
 80075e2:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 80075e6:	490a      	ldr	r1, [pc, #40]	@ (8007610 <pbuf_take+0x120>)
 80075e8:	4805      	ldr	r0, [pc, #20]	@ (8007600 <pbuf_take+0x110>)
 80075ea:	f008 fb95 	bl	800fd18 <iprintf>
  return ERR_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3720      	adds	r7, #32
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	08011190 	.word	0x08011190
 80075fc:	08011568 	.word	0x08011568
 8007600:	080111f0 	.word	0x080111f0
 8007604:	08011580 	.word	0x08011580
 8007608:	0801159c 	.word	0x0801159c
 800760c:	080115bc 	.word	0x080115bc
 8007610:	080115d4 	.word	0x080115d4

08007614 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	4603      	mov	r3, r0
 800761c:	603a      	str	r2, [r7, #0]
 800761e:	71fb      	strb	r3, [r7, #7]
 8007620:	460b      	mov	r3, r1
 8007622:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	8919      	ldrh	r1, [r3, #8]
 8007628:	88ba      	ldrh	r2, [r7, #4]
 800762a:	79fb      	ldrb	r3, [r7, #7]
 800762c:	4618      	mov	r0, r3
 800762e:	f7ff fa0f 	bl	8006a50 <pbuf_alloc>
 8007632:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d101      	bne.n	800763e <pbuf_clone+0x2a>
    return NULL;
 800763a:	2300      	movs	r3, #0
 800763c:	e011      	b.n	8007662 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800763e:	6839      	ldr	r1, [r7, #0]
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f7ff fe11 	bl	8007268 <pbuf_copy>
 8007646:	4603      	mov	r3, r0
 8007648:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800764a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d006      	beq.n	8007660 <pbuf_clone+0x4c>
 8007652:	4b06      	ldr	r3, [pc, #24]	@ (800766c <pbuf_clone+0x58>)
 8007654:	f240 5224 	movw	r2, #1316	@ 0x524
 8007658:	4905      	ldr	r1, [pc, #20]	@ (8007670 <pbuf_clone+0x5c>)
 800765a:	4806      	ldr	r0, [pc, #24]	@ (8007674 <pbuf_clone+0x60>)
 800765c:	f008 fb5c 	bl	800fd18 <iprintf>
  return q;
 8007660:	68fb      	ldr	r3, [r7, #12]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	08011190 	.word	0x08011190
 8007670:	08011604 	.word	0x08011604
 8007674:	080111f0 	.word	0x080111f0

08007678 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800767c:	f008 fa4c 	bl	800fb18 <rand>
 8007680:	4603      	mov	r3, r0
 8007682:	b29b      	uxth	r3, r3
 8007684:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007688:	b29b      	uxth	r3, r3
 800768a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800768e:	b29a      	uxth	r2, r3
 8007690:	4b01      	ldr	r3, [pc, #4]	@ (8007698 <tcp_init+0x20>)
 8007692:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007694:	bf00      	nop
 8007696:	bd80      	pop	{r7, pc}
 8007698:	20000020 	.word	0x20000020

0800769c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	7d1b      	ldrb	r3, [r3, #20]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d105      	bne.n	80076b8 <tcp_free+0x1c>
 80076ac:	4b06      	ldr	r3, [pc, #24]	@ (80076c8 <tcp_free+0x2c>)
 80076ae:	22d4      	movs	r2, #212	@ 0xd4
 80076b0:	4906      	ldr	r1, [pc, #24]	@ (80076cc <tcp_free+0x30>)
 80076b2:	4807      	ldr	r0, [pc, #28]	@ (80076d0 <tcp_free+0x34>)
 80076b4:	f008 fb30 	bl	800fd18 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80076b8:	6879      	ldr	r1, [r7, #4]
 80076ba:	2001      	movs	r0, #1
 80076bc:	f7fe fe36 	bl	800632c <memp_free>
}
 80076c0:	bf00      	nop
 80076c2:	3708      	adds	r7, #8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	08011690 	.word	0x08011690
 80076cc:	080116c0 	.word	0x080116c0
 80076d0:	080116d4 	.word	0x080116d4

080076d4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	7d1b      	ldrb	r3, [r3, #20]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d105      	bne.n	80076f0 <tcp_free_listen+0x1c>
 80076e4:	4b06      	ldr	r3, [pc, #24]	@ (8007700 <tcp_free_listen+0x2c>)
 80076e6:	22df      	movs	r2, #223	@ 0xdf
 80076e8:	4906      	ldr	r1, [pc, #24]	@ (8007704 <tcp_free_listen+0x30>)
 80076ea:	4807      	ldr	r0, [pc, #28]	@ (8007708 <tcp_free_listen+0x34>)
 80076ec:	f008 fb14 	bl	800fd18 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80076f0:	6879      	ldr	r1, [r7, #4]
 80076f2:	2002      	movs	r0, #2
 80076f4:	f7fe fe1a 	bl	800632c <memp_free>
}
 80076f8:	bf00      	nop
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	08011690 	.word	0x08011690
 8007704:	080116fc 	.word	0x080116fc
 8007708:	080116d4 	.word	0x080116d4

0800770c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8007710:	f000 fea4 	bl	800845c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8007714:	4b07      	ldr	r3, [pc, #28]	@ (8007734 <tcp_tmr+0x28>)
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	3301      	adds	r3, #1
 800771a:	b2da      	uxtb	r2, r3
 800771c:	4b05      	ldr	r3, [pc, #20]	@ (8007734 <tcp_tmr+0x28>)
 800771e:	701a      	strb	r2, [r3, #0]
 8007720:	4b04      	ldr	r3, [pc, #16]	@ (8007734 <tcp_tmr+0x28>)
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	f003 0301 	and.w	r3, r3, #1
 8007728:	2b00      	cmp	r3, #0
 800772a:	d001      	beq.n	8007730 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800772c:	f000 fb54 	bl	8007dd8 <tcp_slowtmr>
  }
}
 8007730:	bf00      	nop
 8007732:	bd80      	pop	{r7, pc}
 8007734:	200087e5 	.word	0x200087e5

08007738 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d105      	bne.n	8007754 <tcp_remove_listener+0x1c>
 8007748:	4b0d      	ldr	r3, [pc, #52]	@ (8007780 <tcp_remove_listener+0x48>)
 800774a:	22ff      	movs	r2, #255	@ 0xff
 800774c:	490d      	ldr	r1, [pc, #52]	@ (8007784 <tcp_remove_listener+0x4c>)
 800774e:	480e      	ldr	r0, [pc, #56]	@ (8007788 <tcp_remove_listener+0x50>)
 8007750:	f008 fae2 	bl	800fd18 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	60fb      	str	r3, [r7, #12]
 8007758:	e00a      	b.n	8007770 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800775e:	683a      	ldr	r2, [r7, #0]
 8007760:	429a      	cmp	r2, r3
 8007762:	d102      	bne.n	800776a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	60fb      	str	r3, [r7, #12]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1f1      	bne.n	800775a <tcp_remove_listener+0x22>
    }
  }
}
 8007776:	bf00      	nop
 8007778:	bf00      	nop
 800777a:	3710      	adds	r7, #16
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	08011690 	.word	0x08011690
 8007784:	08011718 	.word	0x08011718
 8007788:	080116d4 	.word	0x080116d4

0800778c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d106      	bne.n	80077a8 <tcp_listen_closed+0x1c>
 800779a:	4b14      	ldr	r3, [pc, #80]	@ (80077ec <tcp_listen_closed+0x60>)
 800779c:	f240 1211 	movw	r2, #273	@ 0x111
 80077a0:	4913      	ldr	r1, [pc, #76]	@ (80077f0 <tcp_listen_closed+0x64>)
 80077a2:	4814      	ldr	r0, [pc, #80]	@ (80077f4 <tcp_listen_closed+0x68>)
 80077a4:	f008 fab8 	bl	800fd18 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	7d1b      	ldrb	r3, [r3, #20]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d006      	beq.n	80077be <tcp_listen_closed+0x32>
 80077b0:	4b0e      	ldr	r3, [pc, #56]	@ (80077ec <tcp_listen_closed+0x60>)
 80077b2:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80077b6:	4910      	ldr	r1, [pc, #64]	@ (80077f8 <tcp_listen_closed+0x6c>)
 80077b8:	480e      	ldr	r0, [pc, #56]	@ (80077f4 <tcp_listen_closed+0x68>)
 80077ba:	f008 faad 	bl	800fd18 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80077be:	2301      	movs	r3, #1
 80077c0:	60fb      	str	r3, [r7, #12]
 80077c2:	e00b      	b.n	80077dc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80077c4:	4a0d      	ldr	r2, [pc, #52]	@ (80077fc <tcp_listen_closed+0x70>)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	6879      	ldr	r1, [r7, #4]
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7ff ffb1 	bl	8007738 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	3301      	adds	r3, #1
 80077da:	60fb      	str	r3, [r7, #12]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2b03      	cmp	r3, #3
 80077e0:	d9f0      	bls.n	80077c4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80077e2:	bf00      	nop
 80077e4:	bf00      	nop
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	08011690 	.word	0x08011690
 80077f0:	08011740 	.word	0x08011740
 80077f4:	080116d4 	.word	0x080116d4
 80077f8:	0801174c 	.word	0x0801174c
 80077fc:	08013670 	.word	0x08013670

08007800 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8007800:	b5b0      	push	{r4, r5, r7, lr}
 8007802:	b088      	sub	sp, #32
 8007804:	af04      	add	r7, sp, #16
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	460b      	mov	r3, r1
 800780a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d106      	bne.n	8007820 <tcp_close_shutdown+0x20>
 8007812:	4b63      	ldr	r3, [pc, #396]	@ (80079a0 <tcp_close_shutdown+0x1a0>)
 8007814:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8007818:	4962      	ldr	r1, [pc, #392]	@ (80079a4 <tcp_close_shutdown+0x1a4>)
 800781a:	4863      	ldr	r0, [pc, #396]	@ (80079a8 <tcp_close_shutdown+0x1a8>)
 800781c:	f008 fa7c 	bl	800fd18 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007820:	78fb      	ldrb	r3, [r7, #3]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d066      	beq.n	80078f4 <tcp_close_shutdown+0xf4>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	7d1b      	ldrb	r3, [r3, #20]
 800782a:	2b04      	cmp	r3, #4
 800782c:	d003      	beq.n	8007836 <tcp_close_shutdown+0x36>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	7d1b      	ldrb	r3, [r3, #20]
 8007832:	2b07      	cmp	r3, #7
 8007834:	d15e      	bne.n	80078f4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800783a:	2b00      	cmp	r3, #0
 800783c:	d104      	bne.n	8007848 <tcp_close_shutdown+0x48>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007842:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8007846:	d055      	beq.n	80078f4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	8b5b      	ldrh	r3, [r3, #26]
 800784c:	f003 0310 	and.w	r3, r3, #16
 8007850:	2b00      	cmp	r3, #0
 8007852:	d106      	bne.n	8007862 <tcp_close_shutdown+0x62>
 8007854:	4b52      	ldr	r3, [pc, #328]	@ (80079a0 <tcp_close_shutdown+0x1a0>)
 8007856:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800785a:	4954      	ldr	r1, [pc, #336]	@ (80079ac <tcp_close_shutdown+0x1ac>)
 800785c:	4852      	ldr	r0, [pc, #328]	@ (80079a8 <tcp_close_shutdown+0x1a8>)
 800785e:	f008 fa5b 	bl	800fd18 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800786a:	687d      	ldr	r5, [r7, #4]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	3304      	adds	r3, #4
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	8ad2      	ldrh	r2, [r2, #22]
 8007874:	6879      	ldr	r1, [r7, #4]
 8007876:	8b09      	ldrh	r1, [r1, #24]
 8007878:	9102      	str	r1, [sp, #8]
 800787a:	9201      	str	r2, [sp, #4]
 800787c:	9300      	str	r3, [sp, #0]
 800787e:	462b      	mov	r3, r5
 8007880:	4622      	mov	r2, r4
 8007882:	4601      	mov	r1, r0
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f004 fe8d 	bl	800c5a4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f001 f8c8 	bl	8008a20 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007890:	4b47      	ldr	r3, [pc, #284]	@ (80079b0 <tcp_close_shutdown+0x1b0>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	429a      	cmp	r2, r3
 8007898:	d105      	bne.n	80078a6 <tcp_close_shutdown+0xa6>
 800789a:	4b45      	ldr	r3, [pc, #276]	@ (80079b0 <tcp_close_shutdown+0x1b0>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	4a43      	ldr	r2, [pc, #268]	@ (80079b0 <tcp_close_shutdown+0x1b0>)
 80078a2:	6013      	str	r3, [r2, #0]
 80078a4:	e013      	b.n	80078ce <tcp_close_shutdown+0xce>
 80078a6:	4b42      	ldr	r3, [pc, #264]	@ (80079b0 <tcp_close_shutdown+0x1b0>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	60fb      	str	r3, [r7, #12]
 80078ac:	e00c      	b.n	80078c8 <tcp_close_shutdown+0xc8>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d104      	bne.n	80078c2 <tcp_close_shutdown+0xc2>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	68da      	ldr	r2, [r3, #12]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	60da      	str	r2, [r3, #12]
 80078c0:	e005      	b.n	80078ce <tcp_close_shutdown+0xce>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	60fb      	str	r3, [r7, #12]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1ef      	bne.n	80078ae <tcp_close_shutdown+0xae>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	60da      	str	r2, [r3, #12]
 80078d4:	4b37      	ldr	r3, [pc, #220]	@ (80079b4 <tcp_close_shutdown+0x1b4>)
 80078d6:	2201      	movs	r2, #1
 80078d8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80078da:	4b37      	ldr	r3, [pc, #220]	@ (80079b8 <tcp_close_shutdown+0x1b8>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d102      	bne.n	80078ea <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80078e4:	f003 fd5c 	bl	800b3a0 <tcp_trigger_input_pcb_close>
 80078e8:	e002      	b.n	80078f0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f7ff fed6 	bl	800769c <tcp_free>
      }
      return ERR_OK;
 80078f0:	2300      	movs	r3, #0
 80078f2:	e050      	b.n	8007996 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	7d1b      	ldrb	r3, [r3, #20]
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d03b      	beq.n	8007974 <tcp_close_shutdown+0x174>
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	dc44      	bgt.n	800798a <tcp_close_shutdown+0x18a>
 8007900:	2b00      	cmp	r3, #0
 8007902:	d002      	beq.n	800790a <tcp_close_shutdown+0x10a>
 8007904:	2b01      	cmp	r3, #1
 8007906:	d02a      	beq.n	800795e <tcp_close_shutdown+0x15e>
 8007908:	e03f      	b.n	800798a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	8adb      	ldrh	r3, [r3, #22]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d021      	beq.n	8007956 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007912:	4b2a      	ldr	r3, [pc, #168]	@ (80079bc <tcp_close_shutdown+0x1bc>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	429a      	cmp	r2, r3
 800791a:	d105      	bne.n	8007928 <tcp_close_shutdown+0x128>
 800791c:	4b27      	ldr	r3, [pc, #156]	@ (80079bc <tcp_close_shutdown+0x1bc>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	4a26      	ldr	r2, [pc, #152]	@ (80079bc <tcp_close_shutdown+0x1bc>)
 8007924:	6013      	str	r3, [r2, #0]
 8007926:	e013      	b.n	8007950 <tcp_close_shutdown+0x150>
 8007928:	4b24      	ldr	r3, [pc, #144]	@ (80079bc <tcp_close_shutdown+0x1bc>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	60bb      	str	r3, [r7, #8]
 800792e:	e00c      	b.n	800794a <tcp_close_shutdown+0x14a>
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	429a      	cmp	r2, r3
 8007938:	d104      	bne.n	8007944 <tcp_close_shutdown+0x144>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	68da      	ldr	r2, [r3, #12]
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	60da      	str	r2, [r3, #12]
 8007942:	e005      	b.n	8007950 <tcp_close_shutdown+0x150>
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	60bb      	str	r3, [r7, #8]
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1ef      	bne.n	8007930 <tcp_close_shutdown+0x130>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f7ff fea0 	bl	800769c <tcp_free>
      break;
 800795c:	e01a      	b.n	8007994 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f7ff ff14 	bl	800778c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007964:	6879      	ldr	r1, [r7, #4]
 8007966:	4816      	ldr	r0, [pc, #88]	@ (80079c0 <tcp_close_shutdown+0x1c0>)
 8007968:	f001 f8aa 	bl	8008ac0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f7ff feb1 	bl	80076d4 <tcp_free_listen>
      break;
 8007972:	e00f      	b.n	8007994 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007974:	6879      	ldr	r1, [r7, #4]
 8007976:	480e      	ldr	r0, [pc, #56]	@ (80079b0 <tcp_close_shutdown+0x1b0>)
 8007978:	f001 f8a2 	bl	8008ac0 <tcp_pcb_remove>
 800797c:	4b0d      	ldr	r3, [pc, #52]	@ (80079b4 <tcp_close_shutdown+0x1b4>)
 800797e:	2201      	movs	r2, #1
 8007980:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f7ff fe8a 	bl	800769c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8007988:	e004      	b.n	8007994 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f81a 	bl	80079c4 <tcp_close_shutdown_fin>
 8007990:	4603      	mov	r3, r0
 8007992:	e000      	b.n	8007996 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bdb0      	pop	{r4, r5, r7, pc}
 800799e:	bf00      	nop
 80079a0:	08011690 	.word	0x08011690
 80079a4:	08011764 	.word	0x08011764
 80079a8:	080116d4 	.word	0x080116d4
 80079ac:	08011784 	.word	0x08011784
 80079b0:	200087dc 	.word	0x200087dc
 80079b4:	200087e4 	.word	0x200087e4
 80079b8:	2000881c 	.word	0x2000881c
 80079bc:	200087d4 	.word	0x200087d4
 80079c0:	200087d8 	.word	0x200087d8

080079c4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d106      	bne.n	80079e0 <tcp_close_shutdown_fin+0x1c>
 80079d2:	4b2e      	ldr	r3, [pc, #184]	@ (8007a8c <tcp_close_shutdown_fin+0xc8>)
 80079d4:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80079d8:	492d      	ldr	r1, [pc, #180]	@ (8007a90 <tcp_close_shutdown_fin+0xcc>)
 80079da:	482e      	ldr	r0, [pc, #184]	@ (8007a94 <tcp_close_shutdown_fin+0xd0>)
 80079dc:	f008 f99c 	bl	800fd18 <iprintf>

  switch (pcb->state) {
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	7d1b      	ldrb	r3, [r3, #20]
 80079e4:	2b07      	cmp	r3, #7
 80079e6:	d020      	beq.n	8007a2a <tcp_close_shutdown_fin+0x66>
 80079e8:	2b07      	cmp	r3, #7
 80079ea:	dc2b      	bgt.n	8007a44 <tcp_close_shutdown_fin+0x80>
 80079ec:	2b03      	cmp	r3, #3
 80079ee:	d002      	beq.n	80079f6 <tcp_close_shutdown_fin+0x32>
 80079f0:	2b04      	cmp	r3, #4
 80079f2:	d00d      	beq.n	8007a10 <tcp_close_shutdown_fin+0x4c>
 80079f4:	e026      	b.n	8007a44 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f003 fee2 	bl	800b7c0 <tcp_send_fin>
 80079fc:	4603      	mov	r3, r0
 80079fe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007a00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d11f      	bne.n	8007a48 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2205      	movs	r2, #5
 8007a0c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007a0e:	e01b      	b.n	8007a48 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f003 fed5 	bl	800b7c0 <tcp_send_fin>
 8007a16:	4603      	mov	r3, r0
 8007a18:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d114      	bne.n	8007a4c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2205      	movs	r2, #5
 8007a26:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007a28:	e010      	b.n	8007a4c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f003 fec8 	bl	800b7c0 <tcp_send_fin>
 8007a30:	4603      	mov	r3, r0
 8007a32:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d109      	bne.n	8007a50 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2209      	movs	r2, #9
 8007a40:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007a42:	e005      	b.n	8007a50 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8007a44:	2300      	movs	r3, #0
 8007a46:	e01c      	b.n	8007a82 <tcp_close_shutdown_fin+0xbe>
      break;
 8007a48:	bf00      	nop
 8007a4a:	e002      	b.n	8007a52 <tcp_close_shutdown_fin+0x8e>
      break;
 8007a4c:	bf00      	nop
 8007a4e:	e000      	b.n	8007a52 <tcp_close_shutdown_fin+0x8e>
      break;
 8007a50:	bf00      	nop
  }

  if (err == ERR_OK) {
 8007a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d103      	bne.n	8007a62 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f003 ffee 	bl	800ba3c <tcp_output>
 8007a60:	e00d      	b.n	8007a7e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8007a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a6a:	d108      	bne.n	8007a7e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	8b5b      	ldrh	r3, [r3, #26]
 8007a70:	f043 0308 	orr.w	r3, r3, #8
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	e001      	b.n	8007a82 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8007a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	08011690 	.word	0x08011690
 8007a90:	08011740 	.word	0x08011740
 8007a94:	080116d4 	.word	0x080116d4

08007a98 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d109      	bne.n	8007aba <tcp_close+0x22>
 8007aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8007ae4 <tcp_close+0x4c>)
 8007aa8:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8007aac:	490e      	ldr	r1, [pc, #56]	@ (8007ae8 <tcp_close+0x50>)
 8007aae:	480f      	ldr	r0, [pc, #60]	@ (8007aec <tcp_close+0x54>)
 8007ab0:	f008 f932 	bl	800fd18 <iprintf>
 8007ab4:	f06f 030f 	mvn.w	r3, #15
 8007ab8:	e00f      	b.n	8007ada <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	7d1b      	ldrb	r3, [r3, #20]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d006      	beq.n	8007ad0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	8b5b      	ldrh	r3, [r3, #26]
 8007ac6:	f043 0310 	orr.w	r3, r3, #16
 8007aca:	b29a      	uxth	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8007ad0:	2101      	movs	r1, #1
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f7ff fe94 	bl	8007800 <tcp_close_shutdown>
 8007ad8:	4603      	mov	r3, r0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3708      	adds	r7, #8
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	08011690 	.word	0x08011690
 8007ae8:	080117a0 	.word	0x080117a0
 8007aec:	080116d4 	.word	0x080116d4

08007af0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b08e      	sub	sp, #56	@ 0x38
 8007af4:	af04      	add	r7, sp, #16
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d107      	bne.n	8007b10 <tcp_abandon+0x20>
 8007b00:	4b52      	ldr	r3, [pc, #328]	@ (8007c4c <tcp_abandon+0x15c>)
 8007b02:	f240 223d 	movw	r2, #573	@ 0x23d
 8007b06:	4952      	ldr	r1, [pc, #328]	@ (8007c50 <tcp_abandon+0x160>)
 8007b08:	4852      	ldr	r0, [pc, #328]	@ (8007c54 <tcp_abandon+0x164>)
 8007b0a:	f008 f905 	bl	800fd18 <iprintf>
 8007b0e:	e099      	b.n	8007c44 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	7d1b      	ldrb	r3, [r3, #20]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d106      	bne.n	8007b26 <tcp_abandon+0x36>
 8007b18:	4b4c      	ldr	r3, [pc, #304]	@ (8007c4c <tcp_abandon+0x15c>)
 8007b1a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8007b1e:	494e      	ldr	r1, [pc, #312]	@ (8007c58 <tcp_abandon+0x168>)
 8007b20:	484c      	ldr	r0, [pc, #304]	@ (8007c54 <tcp_abandon+0x164>)
 8007b22:	f008 f8f9 	bl	800fd18 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	7d1b      	ldrb	r3, [r3, #20]
 8007b2a:	2b0a      	cmp	r3, #10
 8007b2c:	d107      	bne.n	8007b3e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8007b2e:	6879      	ldr	r1, [r7, #4]
 8007b30:	484a      	ldr	r0, [pc, #296]	@ (8007c5c <tcp_abandon+0x16c>)
 8007b32:	f000 ffc5 	bl	8008ac0 <tcp_pcb_remove>
    tcp_free(pcb);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7ff fdb0 	bl	800769c <tcp_free>
 8007b3c:	e082      	b.n	8007c44 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8007b42:	2300      	movs	r3, #0
 8007b44:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b4a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b50:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b58:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	7d1b      	ldrb	r3, [r3, #20]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d126      	bne.n	8007bb6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	8adb      	ldrh	r3, [r3, #22]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d02e      	beq.n	8007bce <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007b70:	4b3b      	ldr	r3, [pc, #236]	@ (8007c60 <tcp_abandon+0x170>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d105      	bne.n	8007b86 <tcp_abandon+0x96>
 8007b7a:	4b39      	ldr	r3, [pc, #228]	@ (8007c60 <tcp_abandon+0x170>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	4a37      	ldr	r2, [pc, #220]	@ (8007c60 <tcp_abandon+0x170>)
 8007b82:	6013      	str	r3, [r2, #0]
 8007b84:	e013      	b.n	8007bae <tcp_abandon+0xbe>
 8007b86:	4b36      	ldr	r3, [pc, #216]	@ (8007c60 <tcp_abandon+0x170>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	61fb      	str	r3, [r7, #28]
 8007b8c:	e00c      	b.n	8007ba8 <tcp_abandon+0xb8>
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d104      	bne.n	8007ba2 <tcp_abandon+0xb2>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	68da      	ldr	r2, [r3, #12]
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	60da      	str	r2, [r3, #12]
 8007ba0:	e005      	b.n	8007bae <tcp_abandon+0xbe>
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	61fb      	str	r3, [r7, #28]
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1ef      	bne.n	8007b8e <tcp_abandon+0x9e>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	60da      	str	r2, [r3, #12]
 8007bb4:	e00b      	b.n	8007bce <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	8adb      	ldrh	r3, [r3, #22]
 8007bbe:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007bc0:	6879      	ldr	r1, [r7, #4]
 8007bc2:	4828      	ldr	r0, [pc, #160]	@ (8007c64 <tcp_abandon+0x174>)
 8007bc4:	f000 ff7c 	bl	8008ac0 <tcp_pcb_remove>
 8007bc8:	4b27      	ldr	r3, [pc, #156]	@ (8007c68 <tcp_abandon+0x178>)
 8007bca:	2201      	movs	r2, #1
 8007bcc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d004      	beq.n	8007be0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f000 fd1e 	bl	800861c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d004      	beq.n	8007bf2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bec:	4618      	mov	r0, r3
 8007bee:	f000 fd15 	bl	800861c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d004      	beq.n	8007c04 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f000 fd0c 	bl	800861c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8007c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00e      	beq.n	8007c28 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007c0a:	6879      	ldr	r1, [r7, #4]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	3304      	adds	r3, #4
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	8b12      	ldrh	r2, [r2, #24]
 8007c14:	9202      	str	r2, [sp, #8]
 8007c16:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8007c18:	9201      	str	r2, [sp, #4]
 8007c1a:	9300      	str	r3, [sp, #0]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	697a      	ldr	r2, [r7, #20]
 8007c20:	69b9      	ldr	r1, [r7, #24]
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f004 fcbe 	bl	800c5a4 <tcp_rst>
    }
    last_state = pcb->state;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	7d1b      	ldrb	r3, [r3, #20]
 8007c2c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f7ff fd34 	bl	800769c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d004      	beq.n	8007c44 <tcp_abandon+0x154>
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	f06f 010c 	mvn.w	r1, #12
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	4798      	blx	r3
  }
}
 8007c44:	3728      	adds	r7, #40	@ 0x28
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	08011690 	.word	0x08011690
 8007c50:	080117d4 	.word	0x080117d4
 8007c54:	080116d4 	.word	0x080116d4
 8007c58:	080117f0 	.word	0x080117f0
 8007c5c:	200087e0 	.word	0x200087e0
 8007c60:	200087d4 	.word	0x200087d4
 8007c64:	200087dc 	.word	0x200087dc
 8007c68:	200087e4 	.word	0x200087e4

08007c6c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007c74:	2101      	movs	r1, #1
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f7ff ff3a 	bl	8007af0 <tcp_abandon>
}
 8007c7c:	bf00      	nop
 8007c7e:	3708      	adds	r7, #8
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d106      	bne.n	8007ca0 <tcp_update_rcv_ann_wnd+0x1c>
 8007c92:	4b25      	ldr	r3, [pc, #148]	@ (8007d28 <tcp_update_rcv_ann_wnd+0xa4>)
 8007c94:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8007c98:	4924      	ldr	r1, [pc, #144]	@ (8007d2c <tcp_update_rcv_ann_wnd+0xa8>)
 8007c9a:	4825      	ldr	r0, [pc, #148]	@ (8007d30 <tcp_update_rcv_ann_wnd+0xac>)
 8007c9c:	f008 f83c 	bl	800fd18 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007ca8:	4413      	add	r3, r2
 8007caa:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8007cb4:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8007cb8:	bf28      	it	cs
 8007cba:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8007cbe:	b292      	uxth	r2, r2
 8007cc0:	4413      	add	r3, r2
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	db08      	blt.n	8007cdc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	e020      	b.n	8007d1e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	dd03      	ble.n	8007cf2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007cf0:	e014      	b.n	8007d1c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d04:	d306      	bcc.n	8007d14 <tcp_update_rcv_ann_wnd+0x90>
 8007d06:	4b08      	ldr	r3, [pc, #32]	@ (8007d28 <tcp_update_rcv_ann_wnd+0xa4>)
 8007d08:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8007d0c:	4909      	ldr	r1, [pc, #36]	@ (8007d34 <tcp_update_rcv_ann_wnd+0xb0>)
 8007d0e:	4808      	ldr	r0, [pc, #32]	@ (8007d30 <tcp_update_rcv_ann_wnd+0xac>)
 8007d10:	f008 f802 	bl	800fd18 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8007d1c:	2300      	movs	r3, #0
  }
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	08011690 	.word	0x08011690
 8007d2c:	080118ec 	.word	0x080118ec
 8007d30:	080116d4 	.word	0x080116d4
 8007d34:	08011910 	.word	0x08011910

08007d38 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	460b      	mov	r3, r1
 8007d42:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d107      	bne.n	8007d5a <tcp_recved+0x22>
 8007d4a:	4b1f      	ldr	r3, [pc, #124]	@ (8007dc8 <tcp_recved+0x90>)
 8007d4c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8007d50:	491e      	ldr	r1, [pc, #120]	@ (8007dcc <tcp_recved+0x94>)
 8007d52:	481f      	ldr	r0, [pc, #124]	@ (8007dd0 <tcp_recved+0x98>)
 8007d54:	f007 ffe0 	bl	800fd18 <iprintf>
 8007d58:	e032      	b.n	8007dc0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	7d1b      	ldrb	r3, [r3, #20]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d106      	bne.n	8007d70 <tcp_recved+0x38>
 8007d62:	4b19      	ldr	r3, [pc, #100]	@ (8007dc8 <tcp_recved+0x90>)
 8007d64:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8007d68:	491a      	ldr	r1, [pc, #104]	@ (8007dd4 <tcp_recved+0x9c>)
 8007d6a:	4819      	ldr	r0, [pc, #100]	@ (8007dd0 <tcp_recved+0x98>)
 8007d6c:	f007 ffd4 	bl	800fd18 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8007d74:	887b      	ldrh	r3, [r7, #2]
 8007d76:	4413      	add	r3, r2
 8007d78:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007d7a:	89fb      	ldrh	r3, [r7, #14]
 8007d7c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8007d80:	d804      	bhi.n	8007d8c <tcp_recved+0x54>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d86:	89fa      	ldrh	r2, [r7, #14]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d204      	bcs.n	8007d96 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8007d92:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007d94:	e002      	b.n	8007d9c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	89fa      	ldrh	r2, [r7, #14]
 8007d9a:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f7ff ff71 	bl	8007c84 <tcp_update_rcv_ann_wnd>
 8007da2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8007daa:	d309      	bcc.n	8007dc0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	8b5b      	ldrh	r3, [r3, #26]
 8007db0:	f043 0302 	orr.w	r3, r3, #2
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f003 fe3e 	bl	800ba3c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	08011690 	.word	0x08011690
 8007dcc:	0801192c 	.word	0x0801192c
 8007dd0:	080116d4 	.word	0x080116d4
 8007dd4:	08011944 	.word	0x08011944

08007dd8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007dd8:	b5b0      	push	{r4, r5, r7, lr}
 8007dda:	b090      	sub	sp, #64	@ 0x40
 8007ddc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8007de4:	4b95      	ldr	r3, [pc, #596]	@ (800803c <tcp_slowtmr+0x264>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	3301      	adds	r3, #1
 8007dea:	4a94      	ldr	r2, [pc, #592]	@ (800803c <tcp_slowtmr+0x264>)
 8007dec:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8007dee:	4b94      	ldr	r3, [pc, #592]	@ (8008040 <tcp_slowtmr+0x268>)
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	3301      	adds	r3, #1
 8007df4:	b2da      	uxtb	r2, r3
 8007df6:	4b92      	ldr	r3, [pc, #584]	@ (8008040 <tcp_slowtmr+0x268>)
 8007df8:	701a      	strb	r2, [r3, #0]
 8007dfa:	e000      	b.n	8007dfe <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8007dfc:	bf00      	nop
  prev = NULL;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8007e02:	4b90      	ldr	r3, [pc, #576]	@ (8008044 <tcp_slowtmr+0x26c>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8007e08:	e29d      	b.n	8008346 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e0c:	7d1b      	ldrb	r3, [r3, #20]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d106      	bne.n	8007e20 <tcp_slowtmr+0x48>
 8007e12:	4b8d      	ldr	r3, [pc, #564]	@ (8008048 <tcp_slowtmr+0x270>)
 8007e14:	f240 42be 	movw	r2, #1214	@ 0x4be
 8007e18:	498c      	ldr	r1, [pc, #560]	@ (800804c <tcp_slowtmr+0x274>)
 8007e1a:	488d      	ldr	r0, [pc, #564]	@ (8008050 <tcp_slowtmr+0x278>)
 8007e1c:	f007 ff7c 	bl	800fd18 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e22:	7d1b      	ldrb	r3, [r3, #20]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d106      	bne.n	8007e36 <tcp_slowtmr+0x5e>
 8007e28:	4b87      	ldr	r3, [pc, #540]	@ (8008048 <tcp_slowtmr+0x270>)
 8007e2a:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8007e2e:	4989      	ldr	r1, [pc, #548]	@ (8008054 <tcp_slowtmr+0x27c>)
 8007e30:	4887      	ldr	r0, [pc, #540]	@ (8008050 <tcp_slowtmr+0x278>)
 8007e32:	f007 ff71 	bl	800fd18 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e38:	7d1b      	ldrb	r3, [r3, #20]
 8007e3a:	2b0a      	cmp	r3, #10
 8007e3c:	d106      	bne.n	8007e4c <tcp_slowtmr+0x74>
 8007e3e:	4b82      	ldr	r3, [pc, #520]	@ (8008048 <tcp_slowtmr+0x270>)
 8007e40:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8007e44:	4984      	ldr	r1, [pc, #528]	@ (8008058 <tcp_slowtmr+0x280>)
 8007e46:	4882      	ldr	r0, [pc, #520]	@ (8008050 <tcp_slowtmr+0x278>)
 8007e48:	f007 ff66 	bl	800fd18 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e4e:	7f9a      	ldrb	r2, [r3, #30]
 8007e50:	4b7b      	ldr	r3, [pc, #492]	@ (8008040 <tcp_slowtmr+0x268>)
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d105      	bne.n	8007e64 <tcp_slowtmr+0x8c>
      prev = pcb;
 8007e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8007e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8007e62:	e270      	b.n	8008346 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8007e64:	4b76      	ldr	r3, [pc, #472]	@ (8008040 <tcp_slowtmr+0x268>)
 8007e66:	781a      	ldrb	r2, [r3, #0]
 8007e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e6a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8007e72:	2300      	movs	r3, #0
 8007e74:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e7a:	7d1b      	ldrb	r3, [r3, #20]
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d10a      	bne.n	8007e96 <tcp_slowtmr+0xbe>
 8007e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e86:	2b05      	cmp	r3, #5
 8007e88:	d905      	bls.n	8007e96 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8007e8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e8e:	3301      	adds	r3, #1
 8007e90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007e94:	e11e      	b.n	80080d4 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8007e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e98:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e9c:	2b0b      	cmp	r3, #11
 8007e9e:	d905      	bls.n	8007eac <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8007ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007eaa:	e113      	b.n	80080d4 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8007eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eae:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d075      	beq.n	8007fa2 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8007eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d006      	beq.n	8007ecc <tcp_slowtmr+0xf4>
 8007ebe:	4b62      	ldr	r3, [pc, #392]	@ (8008048 <tcp_slowtmr+0x270>)
 8007ec0:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8007ec4:	4965      	ldr	r1, [pc, #404]	@ (800805c <tcp_slowtmr+0x284>)
 8007ec6:	4862      	ldr	r0, [pc, #392]	@ (8008050 <tcp_slowtmr+0x278>)
 8007ec8:	f007 ff26 	bl	800fd18 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ece:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d106      	bne.n	8007ee2 <tcp_slowtmr+0x10a>
 8007ed4:	4b5c      	ldr	r3, [pc, #368]	@ (8008048 <tcp_slowtmr+0x270>)
 8007ed6:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8007eda:	4961      	ldr	r1, [pc, #388]	@ (8008060 <tcp_slowtmr+0x288>)
 8007edc:	485c      	ldr	r0, [pc, #368]	@ (8008050 <tcp_slowtmr+0x278>)
 8007ede:	f007 ff1b 	bl	800fd18 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8007ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ee4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8007ee8:	2b0b      	cmp	r3, #11
 8007eea:	d905      	bls.n	8007ef8 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8007eec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007ef6:	e0ed      	b.n	80080d4 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007efa:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8007efe:	3b01      	subs	r3, #1
 8007f00:	4a58      	ldr	r2, [pc, #352]	@ (8008064 <tcp_slowtmr+0x28c>)
 8007f02:	5cd3      	ldrb	r3, [r2, r3]
 8007f04:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8007f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f08:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007f0c:	7c7a      	ldrb	r2, [r7, #17]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d907      	bls.n	8007f22 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8007f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f14:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007f18:	3301      	adds	r3, #1
 8007f1a:	b2da      	uxtb	r2, r3
 8007f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f1e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8007f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f24:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007f28:	7c7a      	ldrb	r2, [r7, #17]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	f200 80d2 	bhi.w	80080d4 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8007f30:	2301      	movs	r3, #1
 8007f32:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8007f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d108      	bne.n	8007f50 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007f3e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f40:	f004 fc24 	bl	800c78c <tcp_zero_window_probe>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d014      	beq.n	8007f74 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	623b      	str	r3, [r7, #32]
 8007f4e:	e011      	b.n	8007f74 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007f56:	4619      	mov	r1, r3
 8007f58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f5a:	f003 fae9 	bl	800b530 <tcp_split_unsent_seg>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d107      	bne.n	8007f74 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8007f64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f66:	f003 fd69 	bl	800ba3c <tcp_output>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d101      	bne.n	8007f74 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8007f70:	2300      	movs	r3, #0
 8007f72:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8007f74:	6a3b      	ldr	r3, [r7, #32]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f000 80ac 	beq.w	80080d4 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8007f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f86:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8007f8a:	2b06      	cmp	r3, #6
 8007f8c:	f200 80a2 	bhi.w	80080d4 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8007f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f92:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8007f96:	3301      	adds	r3, #1
 8007f98:	b2da      	uxtb	r2, r3
 8007f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f9c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8007fa0:	e098      	b.n	80080d4 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8007fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fa4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	db0f      	blt.n	8007fcc <tcp_slowtmr+0x1f4>
 8007fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fae:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8007fb2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d008      	beq.n	8007fcc <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8007fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fbc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	b21a      	sxth	r2, r3
 8007fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fca:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8007fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fce:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8007fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fd4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	db7b      	blt.n	80080d4 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007fdc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007fde:	f004 f821 	bl	800c024 <tcp_rexmit_rto_prepare>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d007      	beq.n	8007ff8 <tcp_slowtmr+0x220>
 8007fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d171      	bne.n	80080d4 <tcp_slowtmr+0x2fc>
 8007ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ff2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d06d      	beq.n	80080d4 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8007ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ffa:	7d1b      	ldrb	r3, [r3, #20]
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d03a      	beq.n	8008076 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008002:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008006:	2b0c      	cmp	r3, #12
 8008008:	bf28      	it	cs
 800800a:	230c      	movcs	r3, #12
 800800c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800800e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008010:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008014:	10db      	asrs	r3, r3, #3
 8008016:	b21b      	sxth	r3, r3
 8008018:	461a      	mov	r2, r3
 800801a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800801c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008020:	4413      	add	r3, r2
 8008022:	7efa      	ldrb	r2, [r7, #27]
 8008024:	4910      	ldr	r1, [pc, #64]	@ (8008068 <tcp_slowtmr+0x290>)
 8008026:	5c8a      	ldrb	r2, [r1, r2]
 8008028:	4093      	lsls	r3, r2
 800802a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8008032:	4293      	cmp	r3, r2
 8008034:	dc1a      	bgt.n	800806c <tcp_slowtmr+0x294>
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	b21a      	sxth	r2, r3
 800803a:	e019      	b.n	8008070 <tcp_slowtmr+0x298>
 800803c:	200087d0 	.word	0x200087d0
 8008040:	200087e6 	.word	0x200087e6
 8008044:	200087dc 	.word	0x200087dc
 8008048:	08011690 	.word	0x08011690
 800804c:	080119d4 	.word	0x080119d4
 8008050:	080116d4 	.word	0x080116d4
 8008054:	08011a00 	.word	0x08011a00
 8008058:	08011a2c 	.word	0x08011a2c
 800805c:	08011a5c 	.word	0x08011a5c
 8008060:	08011a90 	.word	0x08011a90
 8008064:	08013668 	.word	0x08013668
 8008068:	08013658 	.word	0x08013658
 800806c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008072:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8008076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008078:	2200      	movs	r2, #0
 800807a:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800807c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800807e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008084:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008088:	4293      	cmp	r3, r2
 800808a:	bf28      	it	cs
 800808c:	4613      	movcs	r3, r2
 800808e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008090:	8a7b      	ldrh	r3, [r7, #18]
 8008092:	085b      	lsrs	r3, r3, #1
 8008094:	b29a      	uxth	r2, r3
 8008096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008098:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800809c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800809e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80080a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80080a6:	005b      	lsls	r3, r3, #1
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d206      	bcs.n	80080bc <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80080ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80080b2:	005b      	lsls	r3, r3, #1
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 80080bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080be:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80080c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080c2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80080c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080c8:	2200      	movs	r2, #0
 80080ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80080ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80080d0:	f004 f818 	bl	800c104 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80080d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080d6:	7d1b      	ldrb	r3, [r3, #20]
 80080d8:	2b06      	cmp	r3, #6
 80080da:	d111      	bne.n	8008100 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80080dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080de:	8b5b      	ldrh	r3, [r3, #26]
 80080e0:	f003 0310 	and.w	r3, r3, #16
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d00b      	beq.n	8008100 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80080e8:	4b9c      	ldr	r3, [pc, #624]	@ (800835c <tcp_slowtmr+0x584>)
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ee:	6a1b      	ldr	r3, [r3, #32]
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	2b28      	cmp	r3, #40	@ 0x28
 80080f4:	d904      	bls.n	8008100 <tcp_slowtmr+0x328>
          ++pcb_remove;
 80080f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080fa:	3301      	adds	r3, #1
 80080fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008102:	7a5b      	ldrb	r3, [r3, #9]
 8008104:	f003 0308 	and.w	r3, r3, #8
 8008108:	2b00      	cmp	r3, #0
 800810a:	d04a      	beq.n	80081a2 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800810c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800810e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008110:	2b04      	cmp	r3, #4
 8008112:	d003      	beq.n	800811c <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8008114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008116:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8008118:	2b07      	cmp	r3, #7
 800811a:	d142      	bne.n	80081a2 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800811c:	4b8f      	ldr	r3, [pc, #572]	@ (800835c <tcp_slowtmr+0x584>)
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008122:	6a1b      	ldr	r3, [r3, #32]
 8008124:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008128:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800812c:	4b8c      	ldr	r3, [pc, #560]	@ (8008360 <tcp_slowtmr+0x588>)
 800812e:	440b      	add	r3, r1
 8008130:	498c      	ldr	r1, [pc, #560]	@ (8008364 <tcp_slowtmr+0x58c>)
 8008132:	fba1 1303 	umull	r1, r3, r1, r3
 8008136:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008138:	429a      	cmp	r2, r3
 800813a:	d90a      	bls.n	8008152 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800813c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008140:	3301      	adds	r3, #1
 8008142:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8008146:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800814a:	3301      	adds	r3, #1
 800814c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008150:	e027      	b.n	80081a2 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008152:	4b82      	ldr	r3, [pc, #520]	@ (800835c <tcp_slowtmr+0x584>)
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800815c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800815e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8008162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008164:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8008168:	4618      	mov	r0, r3
 800816a:	4b7f      	ldr	r3, [pc, #508]	@ (8008368 <tcp_slowtmr+0x590>)
 800816c:	fb00 f303 	mul.w	r3, r0, r3
 8008170:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008172:	497c      	ldr	r1, [pc, #496]	@ (8008364 <tcp_slowtmr+0x58c>)
 8008174:	fba1 1303 	umull	r1, r3, r1, r3
 8008178:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800817a:	429a      	cmp	r2, r3
 800817c:	d911      	bls.n	80081a2 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800817e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008180:	f004 fac4 	bl	800c70c <tcp_keepalive>
 8008184:	4603      	mov	r3, r0
 8008186:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800818a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800818e:	2b00      	cmp	r3, #0
 8008190:	d107      	bne.n	80081a2 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8008192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008194:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8008198:	3301      	adds	r3, #1
 800819a:	b2da      	uxtb	r2, r3
 800819c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800819e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 80081a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d011      	beq.n	80081ce <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80081aa:	4b6c      	ldr	r3, [pc, #432]	@ (800835c <tcp_slowtmr+0x584>)
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081b0:	6a1b      	ldr	r3, [r3, #32]
 80081b2:	1ad2      	subs	r2, r2, r3
 80081b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081b6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80081ba:	4619      	mov	r1, r3
 80081bc:	460b      	mov	r3, r1
 80081be:	005b      	lsls	r3, r3, #1
 80081c0:	440b      	add	r3, r1
 80081c2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d302      	bcc.n	80081ce <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 80081c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80081ca:	f000 fddd 	bl	8008d88 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80081ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d0:	7d1b      	ldrb	r3, [r3, #20]
 80081d2:	2b03      	cmp	r3, #3
 80081d4:	d10b      	bne.n	80081ee <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80081d6:	4b61      	ldr	r3, [pc, #388]	@ (800835c <tcp_slowtmr+0x584>)
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081dc:	6a1b      	ldr	r3, [r3, #32]
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	2b28      	cmp	r3, #40	@ 0x28
 80081e2:	d904      	bls.n	80081ee <tcp_slowtmr+0x416>
        ++pcb_remove;
 80081e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80081e8:	3301      	adds	r3, #1
 80081ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80081ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081f0:	7d1b      	ldrb	r3, [r3, #20]
 80081f2:	2b09      	cmp	r3, #9
 80081f4:	d10b      	bne.n	800820e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80081f6:	4b59      	ldr	r3, [pc, #356]	@ (800835c <tcp_slowtmr+0x584>)
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081fc:	6a1b      	ldr	r3, [r3, #32]
 80081fe:	1ad3      	subs	r3, r2, r3
 8008200:	2bf0      	cmp	r3, #240	@ 0xf0
 8008202:	d904      	bls.n	800820e <tcp_slowtmr+0x436>
        ++pcb_remove;
 8008204:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008208:	3301      	adds	r3, #1
 800820a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800820e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008212:	2b00      	cmp	r3, #0
 8008214:	d060      	beq.n	80082d8 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8008216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800821c:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800821e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008220:	f000 fbfe 	bl	8008a20 <tcp_pcb_purge>
      if (prev != NULL) {
 8008224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008226:	2b00      	cmp	r3, #0
 8008228:	d010      	beq.n	800824c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800822a:	4b50      	ldr	r3, [pc, #320]	@ (800836c <tcp_slowtmr+0x594>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008230:	429a      	cmp	r2, r3
 8008232:	d106      	bne.n	8008242 <tcp_slowtmr+0x46a>
 8008234:	4b4e      	ldr	r3, [pc, #312]	@ (8008370 <tcp_slowtmr+0x598>)
 8008236:	f240 526d 	movw	r2, #1389	@ 0x56d
 800823a:	494e      	ldr	r1, [pc, #312]	@ (8008374 <tcp_slowtmr+0x59c>)
 800823c:	484e      	ldr	r0, [pc, #312]	@ (8008378 <tcp_slowtmr+0x5a0>)
 800823e:	f007 fd6b 	bl	800fd18 <iprintf>
        prev->next = pcb->next;
 8008242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008244:	68da      	ldr	r2, [r3, #12]
 8008246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008248:	60da      	str	r2, [r3, #12]
 800824a:	e00f      	b.n	800826c <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800824c:	4b47      	ldr	r3, [pc, #284]	@ (800836c <tcp_slowtmr+0x594>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008252:	429a      	cmp	r2, r3
 8008254:	d006      	beq.n	8008264 <tcp_slowtmr+0x48c>
 8008256:	4b46      	ldr	r3, [pc, #280]	@ (8008370 <tcp_slowtmr+0x598>)
 8008258:	f240 5271 	movw	r2, #1393	@ 0x571
 800825c:	4947      	ldr	r1, [pc, #284]	@ (800837c <tcp_slowtmr+0x5a4>)
 800825e:	4846      	ldr	r0, [pc, #280]	@ (8008378 <tcp_slowtmr+0x5a0>)
 8008260:	f007 fd5a 	bl	800fd18 <iprintf>
        tcp_active_pcbs = pcb->next;
 8008264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	4a40      	ldr	r2, [pc, #256]	@ (800836c <tcp_slowtmr+0x594>)
 800826a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800826c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008270:	2b00      	cmp	r3, #0
 8008272:	d013      	beq.n	800829c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008276:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8008278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800827a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800827c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800827e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008280:	3304      	adds	r3, #4
 8008282:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008284:	8ad2      	ldrh	r2, [r2, #22]
 8008286:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008288:	8b09      	ldrh	r1, [r1, #24]
 800828a:	9102      	str	r1, [sp, #8]
 800828c:	9201      	str	r2, [sp, #4]
 800828e:	9300      	str	r3, [sp, #0]
 8008290:	462b      	mov	r3, r5
 8008292:	4622      	mov	r2, r4
 8008294:	4601      	mov	r1, r0
 8008296:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008298:	f004 f984 	bl	800c5a4 <tcp_rst>
      err_arg = pcb->callback_arg;
 800829c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80082a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082a4:	7d1b      	ldrb	r3, [r3, #20]
 80082a6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80082a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082aa:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80082ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80082b2:	6838      	ldr	r0, [r7, #0]
 80082b4:	f7ff f9f2 	bl	800769c <tcp_free>
      tcp_active_pcbs_changed = 0;
 80082b8:	4b31      	ldr	r3, [pc, #196]	@ (8008380 <tcp_slowtmr+0x5a8>)
 80082ba:	2200      	movs	r2, #0
 80082bc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d004      	beq.n	80082ce <tcp_slowtmr+0x4f6>
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f06f 010c 	mvn.w	r1, #12
 80082ca:	68b8      	ldr	r0, [r7, #8]
 80082cc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80082ce:	4b2c      	ldr	r3, [pc, #176]	@ (8008380 <tcp_slowtmr+0x5a8>)
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d037      	beq.n	8008346 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80082d6:	e592      	b.n	8007dfe <tcp_slowtmr+0x26>
      prev = pcb;
 80082d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082da:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80082dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80082e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e4:	7f1b      	ldrb	r3, [r3, #28]
 80082e6:	3301      	adds	r3, #1
 80082e8:	b2da      	uxtb	r2, r3
 80082ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ec:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80082ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f0:	7f1a      	ldrb	r2, [r3, #28]
 80082f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f4:	7f5b      	ldrb	r3, [r3, #29]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d325      	bcc.n	8008346 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80082fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082fc:	2200      	movs	r2, #0
 80082fe:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8008300:	4b1f      	ldr	r3, [pc, #124]	@ (8008380 <tcp_slowtmr+0x5a8>)
 8008302:	2200      	movs	r2, #0
 8008304:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8008306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008308:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00b      	beq.n	8008328 <tcp_slowtmr+0x550>
 8008310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008312:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008316:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008318:	6912      	ldr	r2, [r2, #16]
 800831a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800831c:	4610      	mov	r0, r2
 800831e:	4798      	blx	r3
 8008320:	4603      	mov	r3, r0
 8008322:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8008326:	e002      	b.n	800832e <tcp_slowtmr+0x556>
 8008328:	2300      	movs	r3, #0
 800832a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800832e:	4b14      	ldr	r3, [pc, #80]	@ (8008380 <tcp_slowtmr+0x5a8>)
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	f47f ad62 	bne.w	8007dfc <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8008338:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800833c:	2b00      	cmp	r3, #0
 800833e:	d102      	bne.n	8008346 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8008340:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008342:	f003 fb7b 	bl	800ba3c <tcp_output>
  while (pcb != NULL) {
 8008346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008348:	2b00      	cmp	r3, #0
 800834a:	f47f ad5e 	bne.w	8007e0a <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800834e:	2300      	movs	r3, #0
 8008350:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8008352:	4b0c      	ldr	r3, [pc, #48]	@ (8008384 <tcp_slowtmr+0x5ac>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8008358:	e069      	b.n	800842e <tcp_slowtmr+0x656>
 800835a:	bf00      	nop
 800835c:	200087d0 	.word	0x200087d0
 8008360:	000a4cb8 	.word	0x000a4cb8
 8008364:	10624dd3 	.word	0x10624dd3
 8008368:	000124f8 	.word	0x000124f8
 800836c:	200087dc 	.word	0x200087dc
 8008370:	08011690 	.word	0x08011690
 8008374:	08011ac8 	.word	0x08011ac8
 8008378:	080116d4 	.word	0x080116d4
 800837c:	08011af4 	.word	0x08011af4
 8008380:	200087e4 	.word	0x200087e4
 8008384:	200087e0 	.word	0x200087e0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800838a:	7d1b      	ldrb	r3, [r3, #20]
 800838c:	2b0a      	cmp	r3, #10
 800838e:	d006      	beq.n	800839e <tcp_slowtmr+0x5c6>
 8008390:	4b2b      	ldr	r3, [pc, #172]	@ (8008440 <tcp_slowtmr+0x668>)
 8008392:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8008396:	492b      	ldr	r1, [pc, #172]	@ (8008444 <tcp_slowtmr+0x66c>)
 8008398:	482b      	ldr	r0, [pc, #172]	@ (8008448 <tcp_slowtmr+0x670>)
 800839a:	f007 fcbd 	bl	800fd18 <iprintf>
    pcb_remove = 0;
 800839e:	2300      	movs	r3, #0
 80083a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80083a4:	4b29      	ldr	r3, [pc, #164]	@ (800844c <tcp_slowtmr+0x674>)
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083aa:	6a1b      	ldr	r3, [r3, #32]
 80083ac:	1ad3      	subs	r3, r2, r3
 80083ae:	2bf0      	cmp	r3, #240	@ 0xf0
 80083b0:	d904      	bls.n	80083bc <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 80083b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083b6:	3301      	adds	r3, #1
 80083b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80083bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d02f      	beq.n	8008424 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80083c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80083c6:	f000 fb2b 	bl	8008a20 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80083ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d010      	beq.n	80083f2 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80083d0:	4b1f      	ldr	r3, [pc, #124]	@ (8008450 <tcp_slowtmr+0x678>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d106      	bne.n	80083e8 <tcp_slowtmr+0x610>
 80083da:	4b19      	ldr	r3, [pc, #100]	@ (8008440 <tcp_slowtmr+0x668>)
 80083dc:	f240 52af 	movw	r2, #1455	@ 0x5af
 80083e0:	491c      	ldr	r1, [pc, #112]	@ (8008454 <tcp_slowtmr+0x67c>)
 80083e2:	4819      	ldr	r0, [pc, #100]	@ (8008448 <tcp_slowtmr+0x670>)
 80083e4:	f007 fc98 	bl	800fd18 <iprintf>
        prev->next = pcb->next;
 80083e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083ea:	68da      	ldr	r2, [r3, #12]
 80083ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ee:	60da      	str	r2, [r3, #12]
 80083f0:	e00f      	b.n	8008412 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80083f2:	4b17      	ldr	r3, [pc, #92]	@ (8008450 <tcp_slowtmr+0x678>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d006      	beq.n	800840a <tcp_slowtmr+0x632>
 80083fc:	4b10      	ldr	r3, [pc, #64]	@ (8008440 <tcp_slowtmr+0x668>)
 80083fe:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8008402:	4915      	ldr	r1, [pc, #84]	@ (8008458 <tcp_slowtmr+0x680>)
 8008404:	4810      	ldr	r0, [pc, #64]	@ (8008448 <tcp_slowtmr+0x670>)
 8008406:	f007 fc87 	bl	800fd18 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800840a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	4a10      	ldr	r2, [pc, #64]	@ (8008450 <tcp_slowtmr+0x678>)
 8008410:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008414:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8008416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800841c:	69f8      	ldr	r0, [r7, #28]
 800841e:	f7ff f93d 	bl	800769c <tcp_free>
 8008422:	e004      	b.n	800842e <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8008424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008426:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8008428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800842e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008430:	2b00      	cmp	r3, #0
 8008432:	d1a9      	bne.n	8008388 <tcp_slowtmr+0x5b0>
    }
  }
}
 8008434:	bf00      	nop
 8008436:	bf00      	nop
 8008438:	3730      	adds	r7, #48	@ 0x30
 800843a:	46bd      	mov	sp, r7
 800843c:	bdb0      	pop	{r4, r5, r7, pc}
 800843e:	bf00      	nop
 8008440:	08011690 	.word	0x08011690
 8008444:	08011b20 	.word	0x08011b20
 8008448:	080116d4 	.word	0x080116d4
 800844c:	200087d0 	.word	0x200087d0
 8008450:	200087e0 	.word	0x200087e0
 8008454:	08011b50 	.word	0x08011b50
 8008458:	08011b78 	.word	0x08011b78

0800845c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8008462:	4b2d      	ldr	r3, [pc, #180]	@ (8008518 <tcp_fasttmr+0xbc>)
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	3301      	adds	r3, #1
 8008468:	b2da      	uxtb	r2, r3
 800846a:	4b2b      	ldr	r3, [pc, #172]	@ (8008518 <tcp_fasttmr+0xbc>)
 800846c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800846e:	4b2b      	ldr	r3, [pc, #172]	@ (800851c <tcp_fasttmr+0xc0>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008474:	e048      	b.n	8008508 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	7f9a      	ldrb	r2, [r3, #30]
 800847a:	4b27      	ldr	r3, [pc, #156]	@ (8008518 <tcp_fasttmr+0xbc>)
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	429a      	cmp	r2, r3
 8008480:	d03f      	beq.n	8008502 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8008482:	4b25      	ldr	r3, [pc, #148]	@ (8008518 <tcp_fasttmr+0xbc>)
 8008484:	781a      	ldrb	r2, [r3, #0]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	8b5b      	ldrh	r3, [r3, #26]
 800848e:	f003 0301 	and.w	r3, r3, #1
 8008492:	2b00      	cmp	r3, #0
 8008494:	d010      	beq.n	80084b8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	8b5b      	ldrh	r3, [r3, #26]
 800849a:	f043 0302 	orr.w	r3, r3, #2
 800849e:	b29a      	uxth	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f003 fac9 	bl	800ba3c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	8b5b      	ldrh	r3, [r3, #26]
 80084ae:	f023 0303 	bic.w	r3, r3, #3
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	8b5b      	ldrh	r3, [r3, #26]
 80084bc:	f003 0308 	and.w	r3, r3, #8
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d009      	beq.n	80084d8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	8b5b      	ldrh	r3, [r3, #26]
 80084c8:	f023 0308 	bic.w	r3, r3, #8
 80084cc:	b29a      	uxth	r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f7ff fa76 	bl	80079c4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00a      	beq.n	80084fc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80084e6:	4b0e      	ldr	r3, [pc, #56]	@ (8008520 <tcp_fasttmr+0xc4>)
 80084e8:	2200      	movs	r2, #0
 80084ea:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 f819 	bl	8008524 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80084f2:	4b0b      	ldr	r3, [pc, #44]	@ (8008520 <tcp_fasttmr+0xc4>)
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d000      	beq.n	80084fc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80084fa:	e7b8      	b.n	800846e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	607b      	str	r3, [r7, #4]
 8008500:	e002      	b.n	8008508 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1b3      	bne.n	8008476 <tcp_fasttmr+0x1a>
    }
  }
}
 800850e:	bf00      	nop
 8008510:	bf00      	nop
 8008512:	3708      	adds	r7, #8
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}
 8008518:	200087e6 	.word	0x200087e6
 800851c:	200087dc 	.word	0x200087dc
 8008520:	200087e4 	.word	0x200087e4

08008524 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008524:	b590      	push	{r4, r7, lr}
 8008526:	b085      	sub	sp, #20
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d109      	bne.n	8008546 <tcp_process_refused_data+0x22>
 8008532:	4b37      	ldr	r3, [pc, #220]	@ (8008610 <tcp_process_refused_data+0xec>)
 8008534:	f240 6209 	movw	r2, #1545	@ 0x609
 8008538:	4936      	ldr	r1, [pc, #216]	@ (8008614 <tcp_process_refused_data+0xf0>)
 800853a:	4837      	ldr	r0, [pc, #220]	@ (8008618 <tcp_process_refused_data+0xf4>)
 800853c:	f007 fbec 	bl	800fd18 <iprintf>
 8008540:	f06f 030f 	mvn.w	r3, #15
 8008544:	e060      	b.n	8008608 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800854a:	7b5b      	ldrb	r3, [r3, #13]
 800854c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008552:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00b      	beq.n	800857c <tcp_process_refused_data+0x58>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6918      	ldr	r0, [r3, #16]
 800856e:	2300      	movs	r3, #0
 8008570:	68ba      	ldr	r2, [r7, #8]
 8008572:	6879      	ldr	r1, [r7, #4]
 8008574:	47a0      	blx	r4
 8008576:	4603      	mov	r3, r0
 8008578:	73fb      	strb	r3, [r7, #15]
 800857a:	e007      	b.n	800858c <tcp_process_refused_data+0x68>
 800857c:	2300      	movs	r3, #0
 800857e:	68ba      	ldr	r2, [r7, #8]
 8008580:	6879      	ldr	r1, [r7, #4]
 8008582:	2000      	movs	r0, #0
 8008584:	f000 f8a4 	bl	80086d0 <tcp_recv_null>
 8008588:	4603      	mov	r3, r0
 800858a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800858c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d12a      	bne.n	80085ea <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008594:	7bbb      	ldrb	r3, [r7, #14]
 8008596:	f003 0320 	and.w	r3, r3, #32
 800859a:	2b00      	cmp	r3, #0
 800859c:	d033      	beq.n	8008606 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085a2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80085a6:	d005      	beq.n	80085b4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085ac:	3301      	adds	r3, #1
 80085ae:	b29a      	uxth	r2, r3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00b      	beq.n	80085d6 <tcp_process_refused_data+0xb2>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6918      	ldr	r0, [r3, #16]
 80085c8:	2300      	movs	r3, #0
 80085ca:	2200      	movs	r2, #0
 80085cc:	6879      	ldr	r1, [r7, #4]
 80085ce:	47a0      	blx	r4
 80085d0:	4603      	mov	r3, r0
 80085d2:	73fb      	strb	r3, [r7, #15]
 80085d4:	e001      	b.n	80085da <tcp_process_refused_data+0xb6>
 80085d6:	2300      	movs	r3, #0
 80085d8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80085da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085de:	f113 0f0d 	cmn.w	r3, #13
 80085e2:	d110      	bne.n	8008606 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80085e4:	f06f 030c 	mvn.w	r3, #12
 80085e8:	e00e      	b.n	8008608 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80085ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085ee:	f113 0f0d 	cmn.w	r3, #13
 80085f2:	d102      	bne.n	80085fa <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80085f4:	f06f 030c 	mvn.w	r3, #12
 80085f8:	e006      	b.n	8008608 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	68ba      	ldr	r2, [r7, #8]
 80085fe:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8008600:	f06f 0304 	mvn.w	r3, #4
 8008604:	e000      	b.n	8008608 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8008606:	2300      	movs	r3, #0
}
 8008608:	4618      	mov	r0, r3
 800860a:	3714      	adds	r7, #20
 800860c:	46bd      	mov	sp, r7
 800860e:	bd90      	pop	{r4, r7, pc}
 8008610:	08011690 	.word	0x08011690
 8008614:	08011ba0 	.word	0x08011ba0
 8008618:	080116d4 	.word	0x080116d4

0800861c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8008624:	e007      	b.n	8008636 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 f80a 	bl	8008646 <tcp_seg_free>
    seg = next;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1f4      	bne.n	8008626 <tcp_segs_free+0xa>
  }
}
 800863c:	bf00      	nop
 800863e:	bf00      	nop
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b082      	sub	sp, #8
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d00c      	beq.n	800866e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d004      	beq.n	8008666 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	4618      	mov	r0, r3
 8008662:	f7fe fcd9 	bl	8007018 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8008666:	6879      	ldr	r1, [r7, #4]
 8008668:	2003      	movs	r0, #3
 800866a:	f7fd fe5f 	bl	800632c <memp_free>
  }
}
 800866e:	bf00      	nop
 8008670:	3708      	adds	r7, #8
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
	...

08008678 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d106      	bne.n	8008694 <tcp_seg_copy+0x1c>
 8008686:	4b0f      	ldr	r3, [pc, #60]	@ (80086c4 <tcp_seg_copy+0x4c>)
 8008688:	f240 6282 	movw	r2, #1666	@ 0x682
 800868c:	490e      	ldr	r1, [pc, #56]	@ (80086c8 <tcp_seg_copy+0x50>)
 800868e:	480f      	ldr	r0, [pc, #60]	@ (80086cc <tcp_seg_copy+0x54>)
 8008690:	f007 fb42 	bl	800fd18 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008694:	2003      	movs	r0, #3
 8008696:	f7fd fdd9 	bl	800624c <memp_malloc>
 800869a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d101      	bne.n	80086a6 <tcp_seg_copy+0x2e>
    return NULL;
 80086a2:	2300      	movs	r3, #0
 80086a4:	e00a      	b.n	80086bc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80086a6:	2210      	movs	r2, #16
 80086a8:	6879      	ldr	r1, [r7, #4]
 80086aa:	68f8      	ldr	r0, [r7, #12]
 80086ac:	f007 fc39 	bl	800ff22 <memcpy>
  pbuf_ref(cseg->p);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7fe fd4f 	bl	8007158 <pbuf_ref>
  return cseg;
 80086ba:	68fb      	ldr	r3, [r7, #12]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	08011690 	.word	0x08011690
 80086c8:	08011be4 	.word	0x08011be4
 80086cc:	080116d4 	.word	0x080116d4

080086d0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
 80086dc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d109      	bne.n	80086f8 <tcp_recv_null+0x28>
 80086e4:	4b12      	ldr	r3, [pc, #72]	@ (8008730 <tcp_recv_null+0x60>)
 80086e6:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80086ea:	4912      	ldr	r1, [pc, #72]	@ (8008734 <tcp_recv_null+0x64>)
 80086ec:	4812      	ldr	r0, [pc, #72]	@ (8008738 <tcp_recv_null+0x68>)
 80086ee:	f007 fb13 	bl	800fd18 <iprintf>
 80086f2:	f06f 030f 	mvn.w	r3, #15
 80086f6:	e016      	b.n	8008726 <tcp_recv_null+0x56>

  if (p != NULL) {
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d009      	beq.n	8008712 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	891b      	ldrh	r3, [r3, #8]
 8008702:	4619      	mov	r1, r3
 8008704:	68b8      	ldr	r0, [r7, #8]
 8008706:	f7ff fb17 	bl	8007d38 <tcp_recved>
    pbuf_free(p);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f7fe fc84 	bl	8007018 <pbuf_free>
 8008710:	e008      	b.n	8008724 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8008712:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d104      	bne.n	8008724 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800871a:	68b8      	ldr	r0, [r7, #8]
 800871c:	f7ff f9bc 	bl	8007a98 <tcp_close>
 8008720:	4603      	mov	r3, r0
 8008722:	e000      	b.n	8008726 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	08011690 	.word	0x08011690
 8008734:	08011c00 	.word	0x08011c00
 8008738:	080116d4 	.word	0x080116d4

0800873c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b086      	sub	sp, #24
 8008740:	af00      	add	r7, sp, #0
 8008742:	4603      	mov	r3, r0
 8008744:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800874a:	2b00      	cmp	r3, #0
 800874c:	db01      	blt.n	8008752 <tcp_kill_prio+0x16>
 800874e:	79fb      	ldrb	r3, [r7, #7]
 8008750:	e000      	b.n	8008754 <tcp_kill_prio+0x18>
 8008752:	237f      	movs	r3, #127	@ 0x7f
 8008754:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8008756:	7afb      	ldrb	r3, [r7, #11]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d034      	beq.n	80087c6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800875c:	7afb      	ldrb	r3, [r7, #11]
 800875e:	3b01      	subs	r3, #1
 8008760:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8008762:	2300      	movs	r3, #0
 8008764:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008766:	2300      	movs	r3, #0
 8008768:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800876a:	4b19      	ldr	r3, [pc, #100]	@ (80087d0 <tcp_kill_prio+0x94>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	617b      	str	r3, [r7, #20]
 8008770:	e01f      	b.n	80087b2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	7d5b      	ldrb	r3, [r3, #21]
 8008776:	7afa      	ldrb	r2, [r7, #11]
 8008778:	429a      	cmp	r2, r3
 800877a:	d80c      	bhi.n	8008796 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8008780:	7afa      	ldrb	r2, [r7, #11]
 8008782:	429a      	cmp	r2, r3
 8008784:	d112      	bne.n	80087ac <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008786:	4b13      	ldr	r3, [pc, #76]	@ (80087d4 <tcp_kill_prio+0x98>)
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	6a1b      	ldr	r3, [r3, #32]
 800878e:	1ad3      	subs	r3, r2, r3
 8008790:	68fa      	ldr	r2, [r7, #12]
 8008792:	429a      	cmp	r2, r3
 8008794:	d80a      	bhi.n	80087ac <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8008796:	4b0f      	ldr	r3, [pc, #60]	@ (80087d4 <tcp_kill_prio+0x98>)
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	6a1b      	ldr	r3, [r3, #32]
 800879e:	1ad3      	subs	r3, r2, r3
 80087a0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	7d5b      	ldrb	r3, [r3, #21]
 80087aa:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	617b      	str	r3, [r7, #20]
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d1dc      	bne.n	8008772 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d004      	beq.n	80087c8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80087be:	6938      	ldr	r0, [r7, #16]
 80087c0:	f7ff fa54 	bl	8007c6c <tcp_abort>
 80087c4:	e000      	b.n	80087c8 <tcp_kill_prio+0x8c>
    return;
 80087c6:	bf00      	nop
  }
}
 80087c8:	3718      	adds	r7, #24
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	200087dc 	.word	0x200087dc
 80087d4:	200087d0 	.word	0x200087d0

080087d8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b086      	sub	sp, #24
 80087dc:	af00      	add	r7, sp, #0
 80087de:	4603      	mov	r3, r0
 80087e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80087e2:	79fb      	ldrb	r3, [r7, #7]
 80087e4:	2b08      	cmp	r3, #8
 80087e6:	d009      	beq.n	80087fc <tcp_kill_state+0x24>
 80087e8:	79fb      	ldrb	r3, [r7, #7]
 80087ea:	2b09      	cmp	r3, #9
 80087ec:	d006      	beq.n	80087fc <tcp_kill_state+0x24>
 80087ee:	4b1a      	ldr	r3, [pc, #104]	@ (8008858 <tcp_kill_state+0x80>)
 80087f0:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 80087f4:	4919      	ldr	r1, [pc, #100]	@ (800885c <tcp_kill_state+0x84>)
 80087f6:	481a      	ldr	r0, [pc, #104]	@ (8008860 <tcp_kill_state+0x88>)
 80087f8:	f007 fa8e 	bl	800fd18 <iprintf>

  inactivity = 0;
 80087fc:	2300      	movs	r3, #0
 80087fe:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008800:	2300      	movs	r3, #0
 8008802:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008804:	4b17      	ldr	r3, [pc, #92]	@ (8008864 <tcp_kill_state+0x8c>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	617b      	str	r3, [r7, #20]
 800880a:	e017      	b.n	800883c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	7d1b      	ldrb	r3, [r3, #20]
 8008810:	79fa      	ldrb	r2, [r7, #7]
 8008812:	429a      	cmp	r2, r3
 8008814:	d10f      	bne.n	8008836 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008816:	4b14      	ldr	r3, [pc, #80]	@ (8008868 <tcp_kill_state+0x90>)
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	6a1b      	ldr	r3, [r3, #32]
 800881e:	1ad3      	subs	r3, r2, r3
 8008820:	68fa      	ldr	r2, [r7, #12]
 8008822:	429a      	cmp	r2, r3
 8008824:	d807      	bhi.n	8008836 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8008826:	4b10      	ldr	r3, [pc, #64]	@ (8008868 <tcp_kill_state+0x90>)
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	6a1b      	ldr	r3, [r3, #32]
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	617b      	str	r3, [r7, #20]
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1e4      	bne.n	800880c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d003      	beq.n	8008850 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8008848:	2100      	movs	r1, #0
 800884a:	6938      	ldr	r0, [r7, #16]
 800884c:	f7ff f950 	bl	8007af0 <tcp_abandon>
  }
}
 8008850:	bf00      	nop
 8008852:	3718      	adds	r7, #24
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	08011690 	.word	0x08011690
 800885c:	08011c1c 	.word	0x08011c1c
 8008860:	080116d4 	.word	0x080116d4
 8008864:	200087dc 	.word	0x200087dc
 8008868:	200087d0 	.word	0x200087d0

0800886c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8008872:	2300      	movs	r3, #0
 8008874:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8008876:	2300      	movs	r3, #0
 8008878:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800887a:	4b12      	ldr	r3, [pc, #72]	@ (80088c4 <tcp_kill_timewait+0x58>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	60fb      	str	r3, [r7, #12]
 8008880:	e012      	b.n	80088a8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008882:	4b11      	ldr	r3, [pc, #68]	@ (80088c8 <tcp_kill_timewait+0x5c>)
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6a1b      	ldr	r3, [r3, #32]
 800888a:	1ad3      	subs	r3, r2, r3
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	429a      	cmp	r2, r3
 8008890:	d807      	bhi.n	80088a2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8008892:	4b0d      	ldr	r3, [pc, #52]	@ (80088c8 <tcp_kill_timewait+0x5c>)
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6a1b      	ldr	r3, [r3, #32]
 800889a:	1ad3      	subs	r3, r2, r3
 800889c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	60fb      	str	r3, [r7, #12]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d1e9      	bne.n	8008882 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d002      	beq.n	80088ba <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80088b4:	68b8      	ldr	r0, [r7, #8]
 80088b6:	f7ff f9d9 	bl	8007c6c <tcp_abort>
  }
}
 80088ba:	bf00      	nop
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	200087e0 	.word	0x200087e0
 80088c8:	200087d0 	.word	0x200087d0

080088cc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80088d2:	4b10      	ldr	r3, [pc, #64]	@ (8008914 <tcp_handle_closepend+0x48>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80088d8:	e014      	b.n	8008904 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	8b5b      	ldrh	r3, [r3, #26]
 80088e4:	f003 0308 	and.w	r3, r3, #8
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d009      	beq.n	8008900 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	8b5b      	ldrh	r3, [r3, #26]
 80088f0:	f023 0308 	bic.w	r3, r3, #8
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f7ff f862 	bl	80079c4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1e7      	bne.n	80088da <tcp_handle_closepend+0xe>
  }
}
 800890a:	bf00      	nop
 800890c:	bf00      	nop
 800890e:	3708      	adds	r7, #8
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	200087dc 	.word	0x200087dc

08008918 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	4603      	mov	r3, r0
 8008920:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008922:	2001      	movs	r0, #1
 8008924:	f7fd fc92 	bl	800624c <memp_malloc>
 8008928:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d126      	bne.n	800897e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8008930:	f7ff ffcc 	bl	80088cc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8008934:	f7ff ff9a 	bl	800886c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008938:	2001      	movs	r0, #1
 800893a:	f7fd fc87 	bl	800624c <memp_malloc>
 800893e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d11b      	bne.n	800897e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8008946:	2009      	movs	r0, #9
 8008948:	f7ff ff46 	bl	80087d8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800894c:	2001      	movs	r0, #1
 800894e:	f7fd fc7d 	bl	800624c <memp_malloc>
 8008952:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d111      	bne.n	800897e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800895a:	2008      	movs	r0, #8
 800895c:	f7ff ff3c 	bl	80087d8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008960:	2001      	movs	r0, #1
 8008962:	f7fd fc73 	bl	800624c <memp_malloc>
 8008966:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d107      	bne.n	800897e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800896e:	79fb      	ldrb	r3, [r7, #7]
 8008970:	4618      	mov	r0, r3
 8008972:	f7ff fee3 	bl	800873c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008976:	2001      	movs	r0, #1
 8008978:	f7fd fc68 	bl	800624c <memp_malloc>
 800897c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d03f      	beq.n	8008a04 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008984:	229c      	movs	r2, #156	@ 0x9c
 8008986:	2100      	movs	r1, #0
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f007 fa2a 	bl	800fde2 <memset>
    pcb->prio = prio;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	79fa      	ldrb	r2, [r7, #7]
 8008992:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800899a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80089a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	22ff      	movs	r2, #255	@ 0xff
 80089b2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80089ba:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2206      	movs	r2, #6
 80089c0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2206      	movs	r2, #6
 80089c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80089d0:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2201      	movs	r2, #1
 80089d6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80089da:	4b0d      	ldr	r3, [pc, #52]	@ (8008a10 <tcp_alloc+0xf8>)
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80089e2:	4b0c      	ldr	r3, [pc, #48]	@ (8008a14 <tcp_alloc+0xfc>)
 80089e4:	781a      	ldrb	r2, [r3, #0]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80089f0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	4a08      	ldr	r2, [pc, #32]	@ (8008a18 <tcp_alloc+0x100>)
 80089f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	4a07      	ldr	r2, [pc, #28]	@ (8008a1c <tcp_alloc+0x104>)
 8008a00:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8008a04:	68fb      	ldr	r3, [r7, #12]
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	200087d0 	.word	0x200087d0
 8008a14:	200087e6 	.word	0x200087e6
 8008a18:	080086d1 	.word	0x080086d1
 8008a1c:	006ddd00 	.word	0x006ddd00

08008a20 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d107      	bne.n	8008a3e <tcp_pcb_purge+0x1e>
 8008a2e:	4b21      	ldr	r3, [pc, #132]	@ (8008ab4 <tcp_pcb_purge+0x94>)
 8008a30:	f640 0251 	movw	r2, #2129	@ 0x851
 8008a34:	4920      	ldr	r1, [pc, #128]	@ (8008ab8 <tcp_pcb_purge+0x98>)
 8008a36:	4821      	ldr	r0, [pc, #132]	@ (8008abc <tcp_pcb_purge+0x9c>)
 8008a38:	f007 f96e 	bl	800fd18 <iprintf>
 8008a3c:	e037      	b.n	8008aae <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	7d1b      	ldrb	r3, [r3, #20]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d033      	beq.n	8008aae <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8008a4a:	2b0a      	cmp	r3, #10
 8008a4c:	d02f      	beq.n	8008aae <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d02b      	beq.n	8008aae <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d007      	beq.n	8008a6e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7fe fad8 	bl	8007018 <pbuf_free>
      pcb->refused_data = NULL;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d002      	beq.n	8008a7c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 f986 	bl	8008d88 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008a82:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7ff fdc7 	bl	800861c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7ff fdc2 	bl	800861c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	08011690 	.word	0x08011690
 8008ab8:	08011cdc 	.word	0x08011cdc
 8008abc:	080116d4 	.word	0x080116d4

08008ac0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d106      	bne.n	8008ade <tcp_pcb_remove+0x1e>
 8008ad0:	4b3e      	ldr	r3, [pc, #248]	@ (8008bcc <tcp_pcb_remove+0x10c>)
 8008ad2:	f640 0283 	movw	r2, #2179	@ 0x883
 8008ad6:	493e      	ldr	r1, [pc, #248]	@ (8008bd0 <tcp_pcb_remove+0x110>)
 8008ad8:	483e      	ldr	r0, [pc, #248]	@ (8008bd4 <tcp_pcb_remove+0x114>)
 8008ada:	f007 f91d 	bl	800fd18 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d106      	bne.n	8008af2 <tcp_pcb_remove+0x32>
 8008ae4:	4b39      	ldr	r3, [pc, #228]	@ (8008bcc <tcp_pcb_remove+0x10c>)
 8008ae6:	f640 0284 	movw	r2, #2180	@ 0x884
 8008aea:	493b      	ldr	r1, [pc, #236]	@ (8008bd8 <tcp_pcb_remove+0x118>)
 8008aec:	4839      	ldr	r0, [pc, #228]	@ (8008bd4 <tcp_pcb_remove+0x114>)
 8008aee:	f007 f913 	bl	800fd18 <iprintf>

  TCP_RMV(pcblist, pcb);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	683a      	ldr	r2, [r7, #0]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d105      	bne.n	8008b08 <tcp_pcb_remove+0x48>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	68da      	ldr	r2, [r3, #12]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	601a      	str	r2, [r3, #0]
 8008b06:	e013      	b.n	8008b30 <tcp_pcb_remove+0x70>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	60fb      	str	r3, [r7, #12]
 8008b0e:	e00c      	b.n	8008b2a <tcp_pcb_remove+0x6a>
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	683a      	ldr	r2, [r7, #0]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d104      	bne.n	8008b24 <tcp_pcb_remove+0x64>
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	68da      	ldr	r2, [r3, #12]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	60da      	str	r2, [r3, #12]
 8008b22:	e005      	b.n	8008b30 <tcp_pcb_remove+0x70>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	60fb      	str	r3, [r7, #12]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d1ef      	bne.n	8008b10 <tcp_pcb_remove+0x50>
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	2200      	movs	r2, #0
 8008b34:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8008b36:	6838      	ldr	r0, [r7, #0]
 8008b38:	f7ff ff72 	bl	8008a20 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	7d1b      	ldrb	r3, [r3, #20]
 8008b40:	2b0a      	cmp	r3, #10
 8008b42:	d013      	beq.n	8008b6c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d00f      	beq.n	8008b6c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	8b5b      	ldrh	r3, [r3, #26]
 8008b50:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d009      	beq.n	8008b6c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	8b5b      	ldrh	r3, [r3, #26]
 8008b5c:	f043 0302 	orr.w	r3, r3, #2
 8008b60:	b29a      	uxth	r2, r3
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008b66:	6838      	ldr	r0, [r7, #0]
 8008b68:	f002 ff68 	bl	800ba3c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	7d1b      	ldrb	r3, [r3, #20]
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d020      	beq.n	8008bb6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d006      	beq.n	8008b8a <tcp_pcb_remove+0xca>
 8008b7c:	4b13      	ldr	r3, [pc, #76]	@ (8008bcc <tcp_pcb_remove+0x10c>)
 8008b7e:	f640 0293 	movw	r2, #2195	@ 0x893
 8008b82:	4916      	ldr	r1, [pc, #88]	@ (8008bdc <tcp_pcb_remove+0x11c>)
 8008b84:	4813      	ldr	r0, [pc, #76]	@ (8008bd4 <tcp_pcb_remove+0x114>)
 8008b86:	f007 f8c7 	bl	800fd18 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d006      	beq.n	8008ba0 <tcp_pcb_remove+0xe0>
 8008b92:	4b0e      	ldr	r3, [pc, #56]	@ (8008bcc <tcp_pcb_remove+0x10c>)
 8008b94:	f640 0294 	movw	r2, #2196	@ 0x894
 8008b98:	4911      	ldr	r1, [pc, #68]	@ (8008be0 <tcp_pcb_remove+0x120>)
 8008b9a:	480e      	ldr	r0, [pc, #56]	@ (8008bd4 <tcp_pcb_remove+0x114>)
 8008b9c:	f007 f8bc 	bl	800fd18 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d006      	beq.n	8008bb6 <tcp_pcb_remove+0xf6>
 8008ba8:	4b08      	ldr	r3, [pc, #32]	@ (8008bcc <tcp_pcb_remove+0x10c>)
 8008baa:	f640 0296 	movw	r2, #2198	@ 0x896
 8008bae:	490d      	ldr	r1, [pc, #52]	@ (8008be4 <tcp_pcb_remove+0x124>)
 8008bb0:	4808      	ldr	r0, [pc, #32]	@ (8008bd4 <tcp_pcb_remove+0x114>)
 8008bb2:	f007 f8b1 	bl	800fd18 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8008bc2:	bf00      	nop
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	08011690 	.word	0x08011690
 8008bd0:	08011cf8 	.word	0x08011cf8
 8008bd4:	080116d4 	.word	0x080116d4
 8008bd8:	08011d14 	.word	0x08011d14
 8008bdc:	08011d34 	.word	0x08011d34
 8008be0:	08011d4c 	.word	0x08011d4c
 8008be4:	08011d68 	.word	0x08011d68

08008be8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d106      	bne.n	8008c04 <tcp_next_iss+0x1c>
 8008bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8008c20 <tcp_next_iss+0x38>)
 8008bf8:	f640 02af 	movw	r2, #2223	@ 0x8af
 8008bfc:	4909      	ldr	r1, [pc, #36]	@ (8008c24 <tcp_next_iss+0x3c>)
 8008bfe:	480a      	ldr	r0, [pc, #40]	@ (8008c28 <tcp_next_iss+0x40>)
 8008c00:	f007 f88a 	bl	800fd18 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8008c04:	4b09      	ldr	r3, [pc, #36]	@ (8008c2c <tcp_next_iss+0x44>)
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	4b09      	ldr	r3, [pc, #36]	@ (8008c30 <tcp_next_iss+0x48>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	4a07      	ldr	r2, [pc, #28]	@ (8008c2c <tcp_next_iss+0x44>)
 8008c10:	6013      	str	r3, [r2, #0]
  return iss;
 8008c12:	4b06      	ldr	r3, [pc, #24]	@ (8008c2c <tcp_next_iss+0x44>)
 8008c14:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3708      	adds	r7, #8
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	08011690 	.word	0x08011690
 8008c24:	08011d80 	.word	0x08011d80
 8008c28:	080116d4 	.word	0x080116d4
 8008c2c:	20000024 	.word	0x20000024
 8008c30:	200087d0 	.word	0x200087d0

08008c34 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b086      	sub	sp, #24
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	607a      	str	r2, [r7, #4]
 8008c40:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d106      	bne.n	8008c56 <tcp_eff_send_mss_netif+0x22>
 8008c48:	4b14      	ldr	r3, [pc, #80]	@ (8008c9c <tcp_eff_send_mss_netif+0x68>)
 8008c4a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8008c4e:	4914      	ldr	r1, [pc, #80]	@ (8008ca0 <tcp_eff_send_mss_netif+0x6c>)
 8008c50:	4814      	ldr	r0, [pc, #80]	@ (8008ca4 <tcp_eff_send_mss_netif+0x70>)
 8008c52:	f007 f861 	bl	800fd18 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d101      	bne.n	8008c60 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8008c5c:	89fb      	ldrh	r3, [r7, #14]
 8008c5e:	e019      	b.n	8008c94 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008c64:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008c66:	8afb      	ldrh	r3, [r7, #22]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d012      	beq.n	8008c92 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008c6c:	2328      	movs	r3, #40	@ 0x28
 8008c6e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008c70:	8afa      	ldrh	r2, [r7, #22]
 8008c72:	8abb      	ldrh	r3, [r7, #20]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d904      	bls.n	8008c82 <tcp_eff_send_mss_netif+0x4e>
 8008c78:	8afa      	ldrh	r2, [r7, #22]
 8008c7a:	8abb      	ldrh	r3, [r7, #20]
 8008c7c:	1ad3      	subs	r3, r2, r3
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	e000      	b.n	8008c84 <tcp_eff_send_mss_netif+0x50>
 8008c82:	2300      	movs	r3, #0
 8008c84:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008c86:	8a7a      	ldrh	r2, [r7, #18]
 8008c88:	89fb      	ldrh	r3, [r7, #14]
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	bf28      	it	cs
 8008c8e:	4613      	movcs	r3, r2
 8008c90:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8008c92:	89fb      	ldrh	r3, [r7, #14]
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3718      	adds	r7, #24
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	08011690 	.word	0x08011690
 8008ca0:	08011d9c 	.word	0x08011d9c
 8008ca4:	080116d4 	.word	0x080116d4

08008ca8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d119      	bne.n	8008cf0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8008cbc:	4b10      	ldr	r3, [pc, #64]	@ (8008d00 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8008cbe:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8008cc2:	4910      	ldr	r1, [pc, #64]	@ (8008d04 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008cc4:	4810      	ldr	r0, [pc, #64]	@ (8008d08 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8008cc6:	f007 f827 	bl	800fd18 <iprintf>

  while (pcb != NULL) {
 8008cca:	e011      	b.n	8008cf0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d108      	bne.n	8008cea <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8008cde:	68f8      	ldr	r0, [r7, #12]
 8008ce0:	f7fe ffc4 	bl	8007c6c <tcp_abort>
      pcb = next;
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	60fb      	str	r3, [r7, #12]
 8008ce8:	e002      	b.n	8008cf0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d1ea      	bne.n	8008ccc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8008cf6:	bf00      	nop
 8008cf8:	bf00      	nop
 8008cfa:	3710      	adds	r7, #16
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	08011690 	.word	0x08011690
 8008d04:	08011dc4 	.word	0x08011dc4
 8008d08:	080116d4 	.word	0x080116d4

08008d0c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d02a      	beq.n	8008d72 <tcp_netif_ip_addr_changed+0x66>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d026      	beq.n	8008d72 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008d24:	4b15      	ldr	r3, [pc, #84]	@ (8008d7c <tcp_netif_ip_addr_changed+0x70>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4619      	mov	r1, r3
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f7ff ffbc 	bl	8008ca8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008d30:	4b13      	ldr	r3, [pc, #76]	@ (8008d80 <tcp_netif_ip_addr_changed+0x74>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4619      	mov	r1, r3
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f7ff ffb6 	bl	8008ca8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d017      	beq.n	8008d72 <tcp_netif_ip_addr_changed+0x66>
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d013      	beq.n	8008d72 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8008d84 <tcp_netif_ip_addr_changed+0x78>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	60fb      	str	r3, [r7, #12]
 8008d50:	e00c      	b.n	8008d6c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d103      	bne.n	8008d66 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	60fb      	str	r3, [r7, #12]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d1ef      	bne.n	8008d52 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8008d72:	bf00      	nop
 8008d74:	3710      	adds	r7, #16
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	200087dc 	.word	0x200087dc
 8008d80:	200087d4 	.word	0x200087d4
 8008d84:	200087d8 	.word	0x200087d8

08008d88 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d007      	beq.n	8008da8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7ff fc3d 	bl	800861c <tcp_segs_free>
    pcb->ooseq = NULL;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008da8:	bf00      	nop
 8008daa:	3708      	adds	r7, #8
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008db0:	b590      	push	{r4, r7, lr}
 8008db2:	b08d      	sub	sp, #52	@ 0x34
 8008db4:	af04      	add	r7, sp, #16
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d105      	bne.n	8008dcc <tcp_input+0x1c>
 8008dc0:	4b9b      	ldr	r3, [pc, #620]	@ (8009030 <tcp_input+0x280>)
 8008dc2:	2283      	movs	r2, #131	@ 0x83
 8008dc4:	499b      	ldr	r1, [pc, #620]	@ (8009034 <tcp_input+0x284>)
 8008dc6:	489c      	ldr	r0, [pc, #624]	@ (8009038 <tcp_input+0x288>)
 8008dc8:	f006 ffa6 	bl	800fd18 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	4a9a      	ldr	r2, [pc, #616]	@ (800903c <tcp_input+0x28c>)
 8008dd2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	895b      	ldrh	r3, [r3, #10]
 8008dd8:	2b13      	cmp	r3, #19
 8008dda:	f240 83d1 	bls.w	8009580 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008dde:	4b98      	ldr	r3, [pc, #608]	@ (8009040 <tcp_input+0x290>)
 8008de0:	695b      	ldr	r3, [r3, #20]
 8008de2:	4a97      	ldr	r2, [pc, #604]	@ (8009040 <tcp_input+0x290>)
 8008de4:	6812      	ldr	r2, [r2, #0]
 8008de6:	4611      	mov	r1, r2
 8008de8:	4618      	mov	r0, r3
 8008dea:	f005 febf 	bl	800eb6c <ip4_addr_isbroadcast_u32>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	f040 83c7 	bne.w	8009584 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008df6:	4b92      	ldr	r3, [pc, #584]	@ (8009040 <tcp_input+0x290>)
 8008df8:	695b      	ldr	r3, [r3, #20]
 8008dfa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008dfe:	2be0      	cmp	r3, #224	@ 0xe0
 8008e00:	f000 83c0 	beq.w	8009584 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008e04:	4b8d      	ldr	r3, [pc, #564]	@ (800903c <tcp_input+0x28c>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	899b      	ldrh	r3, [r3, #12]
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7fc fda5 	bl	800595c <lwip_htons>
 8008e12:	4603      	mov	r3, r0
 8008e14:	0b1b      	lsrs	r3, r3, #12
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008e1e:	7cbb      	ldrb	r3, [r7, #18]
 8008e20:	2b13      	cmp	r3, #19
 8008e22:	f240 83b1 	bls.w	8009588 <tcp_input+0x7d8>
 8008e26:	7cbb      	ldrb	r3, [r7, #18]
 8008e28:	b29a      	uxth	r2, r3
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	891b      	ldrh	r3, [r3, #8]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	f200 83aa 	bhi.w	8009588 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008e34:	7cbb      	ldrb	r3, [r7, #18]
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	3b14      	subs	r3, #20
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	4b81      	ldr	r3, [pc, #516]	@ (8009044 <tcp_input+0x294>)
 8008e3e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008e40:	4b81      	ldr	r3, [pc, #516]	@ (8009048 <tcp_input+0x298>)
 8008e42:	2200      	movs	r2, #0
 8008e44:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	895a      	ldrh	r2, [r3, #10]
 8008e4a:	7cbb      	ldrb	r3, [r7, #18]
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d309      	bcc.n	8008e66 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008e52:	4b7c      	ldr	r3, [pc, #496]	@ (8009044 <tcp_input+0x294>)
 8008e54:	881a      	ldrh	r2, [r3, #0]
 8008e56:	4b7d      	ldr	r3, [pc, #500]	@ (800904c <tcp_input+0x29c>)
 8008e58:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8008e5a:	7cbb      	ldrb	r3, [r7, #18]
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f7fe f854 	bl	8006f0c <pbuf_remove_header>
 8008e64:	e04e      	b.n	8008f04 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d105      	bne.n	8008e7a <tcp_input+0xca>
 8008e6e:	4b70      	ldr	r3, [pc, #448]	@ (8009030 <tcp_input+0x280>)
 8008e70:	22c2      	movs	r2, #194	@ 0xc2
 8008e72:	4977      	ldr	r1, [pc, #476]	@ (8009050 <tcp_input+0x2a0>)
 8008e74:	4870      	ldr	r0, [pc, #448]	@ (8009038 <tcp_input+0x288>)
 8008e76:	f006 ff4f 	bl	800fd18 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8008e7a:	2114      	movs	r1, #20
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f7fe f845 	bl	8006f0c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	895a      	ldrh	r2, [r3, #10]
 8008e86:	4b71      	ldr	r3, [pc, #452]	@ (800904c <tcp_input+0x29c>)
 8008e88:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008e8a:	4b6e      	ldr	r3, [pc, #440]	@ (8009044 <tcp_input+0x294>)
 8008e8c:	881a      	ldrh	r2, [r3, #0]
 8008e8e:	4b6f      	ldr	r3, [pc, #444]	@ (800904c <tcp_input+0x29c>)
 8008e90:	881b      	ldrh	r3, [r3, #0]
 8008e92:	1ad3      	subs	r3, r2, r3
 8008e94:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008e96:	4b6d      	ldr	r3, [pc, #436]	@ (800904c <tcp_input+0x29c>)
 8008e98:	881b      	ldrh	r3, [r3, #0]
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f7fe f835 	bl	8006f0c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	895b      	ldrh	r3, [r3, #10]
 8008ea8:	8a3a      	ldrh	r2, [r7, #16]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	f200 836e 	bhi.w	800958c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	4a64      	ldr	r2, [pc, #400]	@ (8009048 <tcp_input+0x298>)
 8008eb8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	8a3a      	ldrh	r2, [r7, #16]
 8008ec0:	4611      	mov	r1, r2
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7fe f822 	bl	8006f0c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	891a      	ldrh	r2, [r3, #8]
 8008ecc:	8a3b      	ldrh	r3, [r7, #16]
 8008ece:	1ad3      	subs	r3, r2, r3
 8008ed0:	b29a      	uxth	r2, r3
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	895b      	ldrh	r3, [r3, #10]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d005      	beq.n	8008eea <tcp_input+0x13a>
 8008ede:	4b54      	ldr	r3, [pc, #336]	@ (8009030 <tcp_input+0x280>)
 8008ee0:	22df      	movs	r2, #223	@ 0xdf
 8008ee2:	495c      	ldr	r1, [pc, #368]	@ (8009054 <tcp_input+0x2a4>)
 8008ee4:	4854      	ldr	r0, [pc, #336]	@ (8009038 <tcp_input+0x288>)
 8008ee6:	f006 ff17 	bl	800fd18 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	891a      	ldrh	r2, [r3, #8]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	891b      	ldrh	r3, [r3, #8]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d005      	beq.n	8008f04 <tcp_input+0x154>
 8008ef8:	4b4d      	ldr	r3, [pc, #308]	@ (8009030 <tcp_input+0x280>)
 8008efa:	22e0      	movs	r2, #224	@ 0xe0
 8008efc:	4956      	ldr	r1, [pc, #344]	@ (8009058 <tcp_input+0x2a8>)
 8008efe:	484e      	ldr	r0, [pc, #312]	@ (8009038 <tcp_input+0x288>)
 8008f00:	f006 ff0a 	bl	800fd18 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008f04:	4b4d      	ldr	r3, [pc, #308]	@ (800903c <tcp_input+0x28c>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	881b      	ldrh	r3, [r3, #0]
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	4a4b      	ldr	r2, [pc, #300]	@ (800903c <tcp_input+0x28c>)
 8008f0e:	6814      	ldr	r4, [r2, #0]
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7fc fd23 	bl	800595c <lwip_htons>
 8008f16:	4603      	mov	r3, r0
 8008f18:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008f1a:	4b48      	ldr	r3, [pc, #288]	@ (800903c <tcp_input+0x28c>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	885b      	ldrh	r3, [r3, #2]
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	4a46      	ldr	r2, [pc, #280]	@ (800903c <tcp_input+0x28c>)
 8008f24:	6814      	ldr	r4, [r2, #0]
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7fc fd18 	bl	800595c <lwip_htons>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008f30:	4b42      	ldr	r3, [pc, #264]	@ (800903c <tcp_input+0x28c>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	4a41      	ldr	r2, [pc, #260]	@ (800903c <tcp_input+0x28c>)
 8008f38:	6814      	ldr	r4, [r2, #0]
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7fc fd23 	bl	8005986 <lwip_htonl>
 8008f40:	4603      	mov	r3, r0
 8008f42:	6063      	str	r3, [r4, #4]
 8008f44:	6863      	ldr	r3, [r4, #4]
 8008f46:	4a45      	ldr	r2, [pc, #276]	@ (800905c <tcp_input+0x2ac>)
 8008f48:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008f4a:	4b3c      	ldr	r3, [pc, #240]	@ (800903c <tcp_input+0x28c>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	4a3a      	ldr	r2, [pc, #232]	@ (800903c <tcp_input+0x28c>)
 8008f52:	6814      	ldr	r4, [r2, #0]
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7fc fd16 	bl	8005986 <lwip_htonl>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	60a3      	str	r3, [r4, #8]
 8008f5e:	68a3      	ldr	r3, [r4, #8]
 8008f60:	4a3f      	ldr	r2, [pc, #252]	@ (8009060 <tcp_input+0x2b0>)
 8008f62:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008f64:	4b35      	ldr	r3, [pc, #212]	@ (800903c <tcp_input+0x28c>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	89db      	ldrh	r3, [r3, #14]
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	4a33      	ldr	r2, [pc, #204]	@ (800903c <tcp_input+0x28c>)
 8008f6e:	6814      	ldr	r4, [r2, #0]
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7fc fcf3 	bl	800595c <lwip_htons>
 8008f76:	4603      	mov	r3, r0
 8008f78:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008f7a:	4b30      	ldr	r3, [pc, #192]	@ (800903c <tcp_input+0x28c>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	899b      	ldrh	r3, [r3, #12]
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7fc fcea 	bl	800595c <lwip_htons>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f90:	b2da      	uxtb	r2, r3
 8008f92:	4b34      	ldr	r3, [pc, #208]	@ (8009064 <tcp_input+0x2b4>)
 8008f94:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	891a      	ldrh	r2, [r3, #8]
 8008f9a:	4b33      	ldr	r3, [pc, #204]	@ (8009068 <tcp_input+0x2b8>)
 8008f9c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008f9e:	4b31      	ldr	r3, [pc, #196]	@ (8009064 <tcp_input+0x2b4>)
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	f003 0303 	and.w	r3, r3, #3
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00c      	beq.n	8008fc4 <tcp_input+0x214>
    tcplen++;
 8008faa:	4b2f      	ldr	r3, [pc, #188]	@ (8009068 <tcp_input+0x2b8>)
 8008fac:	881b      	ldrh	r3, [r3, #0]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	b29a      	uxth	r2, r3
 8008fb2:	4b2d      	ldr	r3, [pc, #180]	@ (8009068 <tcp_input+0x2b8>)
 8008fb4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	891a      	ldrh	r2, [r3, #8]
 8008fba:	4b2b      	ldr	r3, [pc, #172]	@ (8009068 <tcp_input+0x2b8>)
 8008fbc:	881b      	ldrh	r3, [r3, #0]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	f200 82e6 	bhi.w	8009590 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008fc8:	4b28      	ldr	r3, [pc, #160]	@ (800906c <tcp_input+0x2bc>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	61fb      	str	r3, [r7, #28]
 8008fce:	e09d      	b.n	800910c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	7d1b      	ldrb	r3, [r3, #20]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d105      	bne.n	8008fe4 <tcp_input+0x234>
 8008fd8:	4b15      	ldr	r3, [pc, #84]	@ (8009030 <tcp_input+0x280>)
 8008fda:	22fb      	movs	r2, #251	@ 0xfb
 8008fdc:	4924      	ldr	r1, [pc, #144]	@ (8009070 <tcp_input+0x2c0>)
 8008fde:	4816      	ldr	r0, [pc, #88]	@ (8009038 <tcp_input+0x288>)
 8008fe0:	f006 fe9a 	bl	800fd18 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	7d1b      	ldrb	r3, [r3, #20]
 8008fe8:	2b0a      	cmp	r3, #10
 8008fea:	d105      	bne.n	8008ff8 <tcp_input+0x248>
 8008fec:	4b10      	ldr	r3, [pc, #64]	@ (8009030 <tcp_input+0x280>)
 8008fee:	22fc      	movs	r2, #252	@ 0xfc
 8008ff0:	4920      	ldr	r1, [pc, #128]	@ (8009074 <tcp_input+0x2c4>)
 8008ff2:	4811      	ldr	r0, [pc, #68]	@ (8009038 <tcp_input+0x288>)
 8008ff4:	f006 fe90 	bl	800fd18 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	7d1b      	ldrb	r3, [r3, #20]
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d105      	bne.n	800900c <tcp_input+0x25c>
 8009000:	4b0b      	ldr	r3, [pc, #44]	@ (8009030 <tcp_input+0x280>)
 8009002:	22fd      	movs	r2, #253	@ 0xfd
 8009004:	491c      	ldr	r1, [pc, #112]	@ (8009078 <tcp_input+0x2c8>)
 8009006:	480c      	ldr	r0, [pc, #48]	@ (8009038 <tcp_input+0x288>)
 8009008:	f006 fe86 	bl	800fd18 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	7a1b      	ldrb	r3, [r3, #8]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d033      	beq.n	800907c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	7a1a      	ldrb	r2, [r3, #8]
 8009018:	4b09      	ldr	r3, [pc, #36]	@ (8009040 <tcp_input+0x290>)
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009020:	3301      	adds	r3, #1
 8009022:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009024:	429a      	cmp	r2, r3
 8009026:	d029      	beq.n	800907c <tcp_input+0x2cc>
      prev = pcb;
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	61bb      	str	r3, [r7, #24]
      continue;
 800902c:	e06b      	b.n	8009106 <tcp_input+0x356>
 800902e:	bf00      	nop
 8009030:	08011df8 	.word	0x08011df8
 8009034:	08011e2c 	.word	0x08011e2c
 8009038:	08011e44 	.word	0x08011e44
 800903c:	200087f8 	.word	0x200087f8
 8009040:	20005260 	.word	0x20005260
 8009044:	200087fc 	.word	0x200087fc
 8009048:	20008800 	.word	0x20008800
 800904c:	200087fe 	.word	0x200087fe
 8009050:	08011e6c 	.word	0x08011e6c
 8009054:	08011e7c 	.word	0x08011e7c
 8009058:	08011e88 	.word	0x08011e88
 800905c:	20008808 	.word	0x20008808
 8009060:	2000880c 	.word	0x2000880c
 8009064:	20008814 	.word	0x20008814
 8009068:	20008812 	.word	0x20008812
 800906c:	200087dc 	.word	0x200087dc
 8009070:	08011ea8 	.word	0x08011ea8
 8009074:	08011ed0 	.word	0x08011ed0
 8009078:	08011efc 	.word	0x08011efc
    }

    if (pcb->remote_port == tcphdr->src &&
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	8b1a      	ldrh	r2, [r3, #24]
 8009080:	4b72      	ldr	r3, [pc, #456]	@ (800924c <tcp_input+0x49c>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	881b      	ldrh	r3, [r3, #0]
 8009086:	b29b      	uxth	r3, r3
 8009088:	429a      	cmp	r2, r3
 800908a:	d13a      	bne.n	8009102 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	8ada      	ldrh	r2, [r3, #22]
 8009090:	4b6e      	ldr	r3, [pc, #440]	@ (800924c <tcp_input+0x49c>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	885b      	ldrh	r3, [r3, #2]
 8009096:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8009098:	429a      	cmp	r2, r3
 800909a:	d132      	bne.n	8009102 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	685a      	ldr	r2, [r3, #4]
 80090a0:	4b6b      	ldr	r3, [pc, #428]	@ (8009250 <tcp_input+0x4a0>)
 80090a2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d12c      	bne.n	8009102 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	4b68      	ldr	r3, [pc, #416]	@ (8009250 <tcp_input+0x4a0>)
 80090ae:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d126      	bne.n	8009102 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	69fa      	ldr	r2, [r7, #28]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d106      	bne.n	80090cc <tcp_input+0x31c>
 80090be:	4b65      	ldr	r3, [pc, #404]	@ (8009254 <tcp_input+0x4a4>)
 80090c0:	f240 120d 	movw	r2, #269	@ 0x10d
 80090c4:	4964      	ldr	r1, [pc, #400]	@ (8009258 <tcp_input+0x4a8>)
 80090c6:	4865      	ldr	r0, [pc, #404]	@ (800925c <tcp_input+0x4ac>)
 80090c8:	f006 fe26 	bl	800fd18 <iprintf>
      if (prev != NULL) {
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00a      	beq.n	80090e8 <tcp_input+0x338>
        prev->next = pcb->next;
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	68da      	ldr	r2, [r3, #12]
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80090da:	4b61      	ldr	r3, [pc, #388]	@ (8009260 <tcp_input+0x4b0>)
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80090e2:	4a5f      	ldr	r2, [pc, #380]	@ (8009260 <tcp_input+0x4b0>)
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	69fa      	ldr	r2, [r7, #28]
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d111      	bne.n	8009116 <tcp_input+0x366>
 80090f2:	4b58      	ldr	r3, [pc, #352]	@ (8009254 <tcp_input+0x4a4>)
 80090f4:	f240 1215 	movw	r2, #277	@ 0x115
 80090f8:	495a      	ldr	r1, [pc, #360]	@ (8009264 <tcp_input+0x4b4>)
 80090fa:	4858      	ldr	r0, [pc, #352]	@ (800925c <tcp_input+0x4ac>)
 80090fc:	f006 fe0c 	bl	800fd18 <iprintf>
      break;
 8009100:	e009      	b.n	8009116 <tcp_input+0x366>
    }
    prev = pcb;
 8009102:	69fb      	ldr	r3, [r7, #28]
 8009104:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009106:	69fb      	ldr	r3, [r7, #28]
 8009108:	68db      	ldr	r3, [r3, #12]
 800910a:	61fb      	str	r3, [r7, #28]
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	2b00      	cmp	r3, #0
 8009110:	f47f af5e 	bne.w	8008fd0 <tcp_input+0x220>
 8009114:	e000      	b.n	8009118 <tcp_input+0x368>
      break;
 8009116:	bf00      	nop
  }

  if (pcb == NULL) {
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	2b00      	cmp	r3, #0
 800911c:	f040 80aa 	bne.w	8009274 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009120:	4b51      	ldr	r3, [pc, #324]	@ (8009268 <tcp_input+0x4b8>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	61fb      	str	r3, [r7, #28]
 8009126:	e03f      	b.n	80091a8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009128:	69fb      	ldr	r3, [r7, #28]
 800912a:	7d1b      	ldrb	r3, [r3, #20]
 800912c:	2b0a      	cmp	r3, #10
 800912e:	d006      	beq.n	800913e <tcp_input+0x38e>
 8009130:	4b48      	ldr	r3, [pc, #288]	@ (8009254 <tcp_input+0x4a4>)
 8009132:	f240 121f 	movw	r2, #287	@ 0x11f
 8009136:	494d      	ldr	r1, [pc, #308]	@ (800926c <tcp_input+0x4bc>)
 8009138:	4848      	ldr	r0, [pc, #288]	@ (800925c <tcp_input+0x4ac>)
 800913a:	f006 fded 	bl	800fd18 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	7a1b      	ldrb	r3, [r3, #8]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d009      	beq.n	800915a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	7a1a      	ldrb	r2, [r3, #8]
 800914a:	4b41      	ldr	r3, [pc, #260]	@ (8009250 <tcp_input+0x4a0>)
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009152:	3301      	adds	r3, #1
 8009154:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009156:	429a      	cmp	r2, r3
 8009158:	d122      	bne.n	80091a0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	8b1a      	ldrh	r2, [r3, #24]
 800915e:	4b3b      	ldr	r3, [pc, #236]	@ (800924c <tcp_input+0x49c>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	881b      	ldrh	r3, [r3, #0]
 8009164:	b29b      	uxth	r3, r3
 8009166:	429a      	cmp	r2, r3
 8009168:	d11b      	bne.n	80091a2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800916a:	69fb      	ldr	r3, [r7, #28]
 800916c:	8ada      	ldrh	r2, [r3, #22]
 800916e:	4b37      	ldr	r3, [pc, #220]	@ (800924c <tcp_input+0x49c>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	885b      	ldrh	r3, [r3, #2]
 8009174:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8009176:	429a      	cmp	r2, r3
 8009178:	d113      	bne.n	80091a2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	685a      	ldr	r2, [r3, #4]
 800917e:	4b34      	ldr	r3, [pc, #208]	@ (8009250 <tcp_input+0x4a0>)
 8009180:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009182:	429a      	cmp	r2, r3
 8009184:	d10d      	bne.n	80091a2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	4b31      	ldr	r3, [pc, #196]	@ (8009250 <tcp_input+0x4a0>)
 800918c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800918e:	429a      	cmp	r2, r3
 8009190:	d107      	bne.n	80091a2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8009192:	69f8      	ldr	r0, [r7, #28]
 8009194:	f000 fb56 	bl	8009844 <tcp_timewait_input>
        }
        pbuf_free(p);
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f7fd ff3d 	bl	8007018 <pbuf_free>
        return;
 800919e:	e1fd      	b.n	800959c <tcp_input+0x7ec>
        continue;
 80091a0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	61fb      	str	r3, [r7, #28]
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1bc      	bne.n	8009128 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80091ae:	2300      	movs	r3, #0
 80091b0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80091b2:	4b2f      	ldr	r3, [pc, #188]	@ (8009270 <tcp_input+0x4c0>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	617b      	str	r3, [r7, #20]
 80091b8:	e02a      	b.n	8009210 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	7a1b      	ldrb	r3, [r3, #8]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00c      	beq.n	80091dc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	7a1a      	ldrb	r2, [r3, #8]
 80091c6:	4b22      	ldr	r3, [pc, #136]	@ (8009250 <tcp_input+0x4a0>)
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80091ce:	3301      	adds	r3, #1
 80091d0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d002      	beq.n	80091dc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	61bb      	str	r3, [r7, #24]
        continue;
 80091da:	e016      	b.n	800920a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	8ada      	ldrh	r2, [r3, #22]
 80091e0:	4b1a      	ldr	r3, [pc, #104]	@ (800924c <tcp_input+0x49c>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	885b      	ldrh	r3, [r3, #2]
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d10c      	bne.n	8009206 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	4b17      	ldr	r3, [pc, #92]	@ (8009250 <tcp_input+0x4a0>)
 80091f2:	695b      	ldr	r3, [r3, #20]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d00f      	beq.n	8009218 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d00d      	beq.n	800921a <tcp_input+0x46a>
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d009      	beq.n	800921a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	617b      	str	r3, [r7, #20]
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d1d1      	bne.n	80091ba <tcp_input+0x40a>
 8009216:	e000      	b.n	800921a <tcp_input+0x46a>
            break;
 8009218:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d029      	beq.n	8009274 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d00a      	beq.n	800923c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	68da      	ldr	r2, [r3, #12]
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800922e:	4b10      	ldr	r3, [pc, #64]	@ (8009270 <tcp_input+0x4c0>)
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009236:	4a0e      	ldr	r2, [pc, #56]	@ (8009270 <tcp_input+0x4c0>)
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800923c:	6978      	ldr	r0, [r7, #20]
 800923e:	f000 fa03 	bl	8009648 <tcp_listen_input>
      }
      pbuf_free(p);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7fd fee8 	bl	8007018 <pbuf_free>
      return;
 8009248:	e1a8      	b.n	800959c <tcp_input+0x7ec>
 800924a:	bf00      	nop
 800924c:	200087f8 	.word	0x200087f8
 8009250:	20005260 	.word	0x20005260
 8009254:	08011df8 	.word	0x08011df8
 8009258:	08011f24 	.word	0x08011f24
 800925c:	08011e44 	.word	0x08011e44
 8009260:	200087dc 	.word	0x200087dc
 8009264:	08011f50 	.word	0x08011f50
 8009268:	200087e0 	.word	0x200087e0
 800926c:	08011f7c 	.word	0x08011f7c
 8009270:	200087d8 	.word	0x200087d8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	2b00      	cmp	r3, #0
 8009278:	f000 8158 	beq.w	800952c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800927c:	4b95      	ldr	r3, [pc, #596]	@ (80094d4 <tcp_input+0x724>)
 800927e:	2200      	movs	r2, #0
 8009280:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	891a      	ldrh	r2, [r3, #8]
 8009286:	4b93      	ldr	r3, [pc, #588]	@ (80094d4 <tcp_input+0x724>)
 8009288:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800928a:	4a92      	ldr	r2, [pc, #584]	@ (80094d4 <tcp_input+0x724>)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009290:	4b91      	ldr	r3, [pc, #580]	@ (80094d8 <tcp_input+0x728>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a8f      	ldr	r2, [pc, #572]	@ (80094d4 <tcp_input+0x724>)
 8009296:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8009298:	4b90      	ldr	r3, [pc, #576]	@ (80094dc <tcp_input+0x72c>)
 800929a:	2200      	movs	r2, #0
 800929c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800929e:	4b90      	ldr	r3, [pc, #576]	@ (80094e0 <tcp_input+0x730>)
 80092a0:	2200      	movs	r2, #0
 80092a2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80092a4:	4b8f      	ldr	r3, [pc, #572]	@ (80094e4 <tcp_input+0x734>)
 80092a6:	2200      	movs	r2, #0
 80092a8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80092aa:	4b8f      	ldr	r3, [pc, #572]	@ (80094e8 <tcp_input+0x738>)
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	f003 0308 	and.w	r3, r3, #8
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d006      	beq.n	80092c4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	7b5b      	ldrb	r3, [r3, #13]
 80092ba:	f043 0301 	orr.w	r3, r3, #1
 80092be:	b2da      	uxtb	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d017      	beq.n	80092fc <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80092cc:	69f8      	ldr	r0, [r7, #28]
 80092ce:	f7ff f929 	bl	8008524 <tcp_process_refused_data>
 80092d2:	4603      	mov	r3, r0
 80092d4:	f113 0f0d 	cmn.w	r3, #13
 80092d8:	d007      	beq.n	80092ea <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d00c      	beq.n	80092fc <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80092e2:	4b82      	ldr	r3, [pc, #520]	@ (80094ec <tcp_input+0x73c>)
 80092e4:	881b      	ldrh	r3, [r3, #0]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d008      	beq.n	80092fc <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	f040 80e3 	bne.w	80094ba <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80092f4:	69f8      	ldr	r0, [r7, #28]
 80092f6:	f003 f9a7 	bl	800c648 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80092fa:	e0de      	b.n	80094ba <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80092fc:	4a7c      	ldr	r2, [pc, #496]	@ (80094f0 <tcp_input+0x740>)
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8009302:	69f8      	ldr	r0, [r7, #28]
 8009304:	f000 fb18 	bl	8009938 <tcp_process>
 8009308:	4603      	mov	r3, r0
 800930a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800930c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009310:	f113 0f0d 	cmn.w	r3, #13
 8009314:	f000 80d3 	beq.w	80094be <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8009318:	4b71      	ldr	r3, [pc, #452]	@ (80094e0 <tcp_input+0x730>)
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	f003 0308 	and.w	r3, r3, #8
 8009320:	2b00      	cmp	r3, #0
 8009322:	d015      	beq.n	8009350 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800932a:	2b00      	cmp	r3, #0
 800932c:	d008      	beq.n	8009340 <tcp_input+0x590>
 800932e:	69fb      	ldr	r3, [r7, #28]
 8009330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009334:	69fa      	ldr	r2, [r7, #28]
 8009336:	6912      	ldr	r2, [r2, #16]
 8009338:	f06f 010d 	mvn.w	r1, #13
 800933c:	4610      	mov	r0, r2
 800933e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009340:	69f9      	ldr	r1, [r7, #28]
 8009342:	486c      	ldr	r0, [pc, #432]	@ (80094f4 <tcp_input+0x744>)
 8009344:	f7ff fbbc 	bl	8008ac0 <tcp_pcb_remove>
        tcp_free(pcb);
 8009348:	69f8      	ldr	r0, [r7, #28]
 800934a:	f7fe f9a7 	bl	800769c <tcp_free>
 800934e:	e0da      	b.n	8009506 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8009350:	2300      	movs	r3, #0
 8009352:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8009354:	4b63      	ldr	r3, [pc, #396]	@ (80094e4 <tcp_input+0x734>)
 8009356:	881b      	ldrh	r3, [r3, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d01d      	beq.n	8009398 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800935c:	4b61      	ldr	r3, [pc, #388]	@ (80094e4 <tcp_input+0x734>)
 800935e:	881b      	ldrh	r3, [r3, #0]
 8009360:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009368:	2b00      	cmp	r3, #0
 800936a:	d00a      	beq.n	8009382 <tcp_input+0x5d2>
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009372:	69fa      	ldr	r2, [r7, #28]
 8009374:	6910      	ldr	r0, [r2, #16]
 8009376:	89fa      	ldrh	r2, [r7, #14]
 8009378:	69f9      	ldr	r1, [r7, #28]
 800937a:	4798      	blx	r3
 800937c:	4603      	mov	r3, r0
 800937e:	74fb      	strb	r3, [r7, #19]
 8009380:	e001      	b.n	8009386 <tcp_input+0x5d6>
 8009382:	2300      	movs	r3, #0
 8009384:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009386:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800938a:	f113 0f0d 	cmn.w	r3, #13
 800938e:	f000 8098 	beq.w	80094c2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8009392:	4b54      	ldr	r3, [pc, #336]	@ (80094e4 <tcp_input+0x734>)
 8009394:	2200      	movs	r2, #0
 8009396:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009398:	69f8      	ldr	r0, [r7, #28]
 800939a:	f000 f915 	bl	80095c8 <tcp_input_delayed_close>
 800939e:	4603      	mov	r3, r0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f040 8090 	bne.w	80094c6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80093a6:	4b4d      	ldr	r3, [pc, #308]	@ (80094dc <tcp_input+0x72c>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d041      	beq.n	8009432 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d006      	beq.n	80093c4 <tcp_input+0x614>
 80093b6:	4b50      	ldr	r3, [pc, #320]	@ (80094f8 <tcp_input+0x748>)
 80093b8:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80093bc:	494f      	ldr	r1, [pc, #316]	@ (80094fc <tcp_input+0x74c>)
 80093be:	4850      	ldr	r0, [pc, #320]	@ (8009500 <tcp_input+0x750>)
 80093c0:	f006 fcaa 	bl	800fd18 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80093c4:	69fb      	ldr	r3, [r7, #28]
 80093c6:	8b5b      	ldrh	r3, [r3, #26]
 80093c8:	f003 0310 	and.w	r3, r3, #16
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d008      	beq.n	80093e2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80093d0:	4b42      	ldr	r3, [pc, #264]	@ (80094dc <tcp_input+0x72c>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7fd fe1f 	bl	8007018 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80093da:	69f8      	ldr	r0, [r7, #28]
 80093dc:	f7fe fc46 	bl	8007c6c <tcp_abort>
            goto aborted;
 80093e0:	e091      	b.n	8009506 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d00c      	beq.n	8009406 <tcp_input+0x656>
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80093f2:	69fb      	ldr	r3, [r7, #28]
 80093f4:	6918      	ldr	r0, [r3, #16]
 80093f6:	4b39      	ldr	r3, [pc, #228]	@ (80094dc <tcp_input+0x72c>)
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	2300      	movs	r3, #0
 80093fc:	69f9      	ldr	r1, [r7, #28]
 80093fe:	47a0      	blx	r4
 8009400:	4603      	mov	r3, r0
 8009402:	74fb      	strb	r3, [r7, #19]
 8009404:	e008      	b.n	8009418 <tcp_input+0x668>
 8009406:	4b35      	ldr	r3, [pc, #212]	@ (80094dc <tcp_input+0x72c>)
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	2300      	movs	r3, #0
 800940c:	69f9      	ldr	r1, [r7, #28]
 800940e:	2000      	movs	r0, #0
 8009410:	f7ff f95e 	bl	80086d0 <tcp_recv_null>
 8009414:	4603      	mov	r3, r0
 8009416:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009418:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800941c:	f113 0f0d 	cmn.w	r3, #13
 8009420:	d053      	beq.n	80094ca <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8009422:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d003      	beq.n	8009432 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800942a:	4b2c      	ldr	r3, [pc, #176]	@ (80094dc <tcp_input+0x72c>)
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	69fb      	ldr	r3, [r7, #28]
 8009430:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8009432:	4b2b      	ldr	r3, [pc, #172]	@ (80094e0 <tcp_input+0x730>)
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	f003 0320 	and.w	r3, r3, #32
 800943a:	2b00      	cmp	r3, #0
 800943c:	d030      	beq.n	80094a0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009442:	2b00      	cmp	r3, #0
 8009444:	d009      	beq.n	800945a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009446:	69fb      	ldr	r3, [r7, #28]
 8009448:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800944a:	7b5a      	ldrb	r2, [r3, #13]
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009450:	f042 0220 	orr.w	r2, r2, #32
 8009454:	b2d2      	uxtb	r2, r2
 8009456:	735a      	strb	r2, [r3, #13]
 8009458:	e022      	b.n	80094a0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800945e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8009462:	d005      	beq.n	8009470 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8009464:	69fb      	ldr	r3, [r7, #28]
 8009466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009468:	3301      	adds	r3, #1
 800946a:	b29a      	uxth	r2, r3
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009476:	2b00      	cmp	r3, #0
 8009478:	d00b      	beq.n	8009492 <tcp_input+0x6e2>
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	6918      	ldr	r0, [r3, #16]
 8009484:	2300      	movs	r3, #0
 8009486:	2200      	movs	r2, #0
 8009488:	69f9      	ldr	r1, [r7, #28]
 800948a:	47a0      	blx	r4
 800948c:	4603      	mov	r3, r0
 800948e:	74fb      	strb	r3, [r7, #19]
 8009490:	e001      	b.n	8009496 <tcp_input+0x6e6>
 8009492:	2300      	movs	r3, #0
 8009494:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009496:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800949a:	f113 0f0d 	cmn.w	r3, #13
 800949e:	d016      	beq.n	80094ce <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80094a0:	4b13      	ldr	r3, [pc, #76]	@ (80094f0 <tcp_input+0x740>)
 80094a2:	2200      	movs	r2, #0
 80094a4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80094a6:	69f8      	ldr	r0, [r7, #28]
 80094a8:	f000 f88e 	bl	80095c8 <tcp_input_delayed_close>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d128      	bne.n	8009504 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80094b2:	69f8      	ldr	r0, [r7, #28]
 80094b4:	f002 fac2 	bl	800ba3c <tcp_output>
 80094b8:	e025      	b.n	8009506 <tcp_input+0x756>
        goto aborted;
 80094ba:	bf00      	nop
 80094bc:	e023      	b.n	8009506 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80094be:	bf00      	nop
 80094c0:	e021      	b.n	8009506 <tcp_input+0x756>
              goto aborted;
 80094c2:	bf00      	nop
 80094c4:	e01f      	b.n	8009506 <tcp_input+0x756>
          goto aborted;
 80094c6:	bf00      	nop
 80094c8:	e01d      	b.n	8009506 <tcp_input+0x756>
            goto aborted;
 80094ca:	bf00      	nop
 80094cc:	e01b      	b.n	8009506 <tcp_input+0x756>
              goto aborted;
 80094ce:	bf00      	nop
 80094d0:	e019      	b.n	8009506 <tcp_input+0x756>
 80094d2:	bf00      	nop
 80094d4:	200087e8 	.word	0x200087e8
 80094d8:	200087f8 	.word	0x200087f8
 80094dc:	20008818 	.word	0x20008818
 80094e0:	20008815 	.word	0x20008815
 80094e4:	20008810 	.word	0x20008810
 80094e8:	20008814 	.word	0x20008814
 80094ec:	20008812 	.word	0x20008812
 80094f0:	2000881c 	.word	0x2000881c
 80094f4:	200087dc 	.word	0x200087dc
 80094f8:	08011df8 	.word	0x08011df8
 80094fc:	08011fac 	.word	0x08011fac
 8009500:	08011e44 	.word	0x08011e44
          goto aborted;
 8009504:	bf00      	nop
    tcp_input_pcb = NULL;
 8009506:	4b27      	ldr	r3, [pc, #156]	@ (80095a4 <tcp_input+0x7f4>)
 8009508:	2200      	movs	r2, #0
 800950a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800950c:	4b26      	ldr	r3, [pc, #152]	@ (80095a8 <tcp_input+0x7f8>)
 800950e:	2200      	movs	r2, #0
 8009510:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8009512:	4b26      	ldr	r3, [pc, #152]	@ (80095ac <tcp_input+0x7fc>)
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d03f      	beq.n	800959a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800951a:	4b24      	ldr	r3, [pc, #144]	@ (80095ac <tcp_input+0x7fc>)
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	4618      	mov	r0, r3
 8009520:	f7fd fd7a 	bl	8007018 <pbuf_free>
      inseg.p = NULL;
 8009524:	4b21      	ldr	r3, [pc, #132]	@ (80095ac <tcp_input+0x7fc>)
 8009526:	2200      	movs	r2, #0
 8009528:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800952a:	e036      	b.n	800959a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800952c:	4b20      	ldr	r3, [pc, #128]	@ (80095b0 <tcp_input+0x800>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	899b      	ldrh	r3, [r3, #12]
 8009532:	b29b      	uxth	r3, r3
 8009534:	4618      	mov	r0, r3
 8009536:	f7fc fa11 	bl	800595c <lwip_htons>
 800953a:	4603      	mov	r3, r0
 800953c:	b2db      	uxtb	r3, r3
 800953e:	f003 0304 	and.w	r3, r3, #4
 8009542:	2b00      	cmp	r3, #0
 8009544:	d118      	bne.n	8009578 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009546:	4b1b      	ldr	r3, [pc, #108]	@ (80095b4 <tcp_input+0x804>)
 8009548:	6819      	ldr	r1, [r3, #0]
 800954a:	4b1b      	ldr	r3, [pc, #108]	@ (80095b8 <tcp_input+0x808>)
 800954c:	881b      	ldrh	r3, [r3, #0]
 800954e:	461a      	mov	r2, r3
 8009550:	4b1a      	ldr	r3, [pc, #104]	@ (80095bc <tcp_input+0x80c>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009556:	4b16      	ldr	r3, [pc, #88]	@ (80095b0 <tcp_input+0x800>)
 8009558:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800955a:	885b      	ldrh	r3, [r3, #2]
 800955c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800955e:	4a14      	ldr	r2, [pc, #80]	@ (80095b0 <tcp_input+0x800>)
 8009560:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009562:	8812      	ldrh	r2, [r2, #0]
 8009564:	b292      	uxth	r2, r2
 8009566:	9202      	str	r2, [sp, #8]
 8009568:	9301      	str	r3, [sp, #4]
 800956a:	4b15      	ldr	r3, [pc, #84]	@ (80095c0 <tcp_input+0x810>)
 800956c:	9300      	str	r3, [sp, #0]
 800956e:	4b15      	ldr	r3, [pc, #84]	@ (80095c4 <tcp_input+0x814>)
 8009570:	4602      	mov	r2, r0
 8009572:	2000      	movs	r0, #0
 8009574:	f003 f816 	bl	800c5a4 <tcp_rst>
    pbuf_free(p);
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f7fd fd4d 	bl	8007018 <pbuf_free>
  return;
 800957e:	e00c      	b.n	800959a <tcp_input+0x7ea>
    goto dropped;
 8009580:	bf00      	nop
 8009582:	e006      	b.n	8009592 <tcp_input+0x7e2>
    goto dropped;
 8009584:	bf00      	nop
 8009586:	e004      	b.n	8009592 <tcp_input+0x7e2>
    goto dropped;
 8009588:	bf00      	nop
 800958a:	e002      	b.n	8009592 <tcp_input+0x7e2>
      goto dropped;
 800958c:	bf00      	nop
 800958e:	e000      	b.n	8009592 <tcp_input+0x7e2>
      goto dropped;
 8009590:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f7fd fd40 	bl	8007018 <pbuf_free>
 8009598:	e000      	b.n	800959c <tcp_input+0x7ec>
  return;
 800959a:	bf00      	nop
}
 800959c:	3724      	adds	r7, #36	@ 0x24
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd90      	pop	{r4, r7, pc}
 80095a2:	bf00      	nop
 80095a4:	2000881c 	.word	0x2000881c
 80095a8:	20008818 	.word	0x20008818
 80095ac:	200087e8 	.word	0x200087e8
 80095b0:	200087f8 	.word	0x200087f8
 80095b4:	2000880c 	.word	0x2000880c
 80095b8:	20008812 	.word	0x20008812
 80095bc:	20008808 	.word	0x20008808
 80095c0:	20005270 	.word	0x20005270
 80095c4:	20005274 	.word	0x20005274

080095c8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d106      	bne.n	80095e4 <tcp_input_delayed_close+0x1c>
 80095d6:	4b17      	ldr	r3, [pc, #92]	@ (8009634 <tcp_input_delayed_close+0x6c>)
 80095d8:	f240 225a 	movw	r2, #602	@ 0x25a
 80095dc:	4916      	ldr	r1, [pc, #88]	@ (8009638 <tcp_input_delayed_close+0x70>)
 80095de:	4817      	ldr	r0, [pc, #92]	@ (800963c <tcp_input_delayed_close+0x74>)
 80095e0:	f006 fb9a 	bl	800fd18 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80095e4:	4b16      	ldr	r3, [pc, #88]	@ (8009640 <tcp_input_delayed_close+0x78>)
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	f003 0310 	and.w	r3, r3, #16
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d01c      	beq.n	800962a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	8b5b      	ldrh	r3, [r3, #26]
 80095f4:	f003 0310 	and.w	r3, r3, #16
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d10d      	bne.n	8009618 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009602:	2b00      	cmp	r3, #0
 8009604:	d008      	beq.n	8009618 <tcp_input_delayed_close+0x50>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	6912      	ldr	r2, [r2, #16]
 8009610:	f06f 010e 	mvn.w	r1, #14
 8009614:	4610      	mov	r0, r2
 8009616:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009618:	6879      	ldr	r1, [r7, #4]
 800961a:	480a      	ldr	r0, [pc, #40]	@ (8009644 <tcp_input_delayed_close+0x7c>)
 800961c:	f7ff fa50 	bl	8008ac0 <tcp_pcb_remove>
    tcp_free(pcb);
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f7fe f83b 	bl	800769c <tcp_free>
    return 1;
 8009626:	2301      	movs	r3, #1
 8009628:	e000      	b.n	800962c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800962a:	2300      	movs	r3, #0
}
 800962c:	4618      	mov	r0, r3
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}
 8009634:	08011df8 	.word	0x08011df8
 8009638:	08011fc8 	.word	0x08011fc8
 800963c:	08011e44 	.word	0x08011e44
 8009640:	20008815 	.word	0x20008815
 8009644:	200087dc 	.word	0x200087dc

08009648 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8009648:	b590      	push	{r4, r7, lr}
 800964a:	b08b      	sub	sp, #44	@ 0x2c
 800964c:	af04      	add	r7, sp, #16
 800964e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009650:	4b6f      	ldr	r3, [pc, #444]	@ (8009810 <tcp_listen_input+0x1c8>)
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	f003 0304 	and.w	r3, r3, #4
 8009658:	2b00      	cmp	r3, #0
 800965a:	f040 80d2 	bne.w	8009802 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d106      	bne.n	8009672 <tcp_listen_input+0x2a>
 8009664:	4b6b      	ldr	r3, [pc, #428]	@ (8009814 <tcp_listen_input+0x1cc>)
 8009666:	f240 2281 	movw	r2, #641	@ 0x281
 800966a:	496b      	ldr	r1, [pc, #428]	@ (8009818 <tcp_listen_input+0x1d0>)
 800966c:	486b      	ldr	r0, [pc, #428]	@ (800981c <tcp_listen_input+0x1d4>)
 800966e:	f006 fb53 	bl	800fd18 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8009672:	4b67      	ldr	r3, [pc, #412]	@ (8009810 <tcp_listen_input+0x1c8>)
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	f003 0310 	and.w	r3, r3, #16
 800967a:	2b00      	cmp	r3, #0
 800967c:	d019      	beq.n	80096b2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800967e:	4b68      	ldr	r3, [pc, #416]	@ (8009820 <tcp_listen_input+0x1d8>)
 8009680:	6819      	ldr	r1, [r3, #0]
 8009682:	4b68      	ldr	r3, [pc, #416]	@ (8009824 <tcp_listen_input+0x1dc>)
 8009684:	881b      	ldrh	r3, [r3, #0]
 8009686:	461a      	mov	r2, r3
 8009688:	4b67      	ldr	r3, [pc, #412]	@ (8009828 <tcp_listen_input+0x1e0>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800968e:	4b67      	ldr	r3, [pc, #412]	@ (800982c <tcp_listen_input+0x1e4>)
 8009690:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009692:	885b      	ldrh	r3, [r3, #2]
 8009694:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009696:	4a65      	ldr	r2, [pc, #404]	@ (800982c <tcp_listen_input+0x1e4>)
 8009698:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800969a:	8812      	ldrh	r2, [r2, #0]
 800969c:	b292      	uxth	r2, r2
 800969e:	9202      	str	r2, [sp, #8]
 80096a0:	9301      	str	r3, [sp, #4]
 80096a2:	4b63      	ldr	r3, [pc, #396]	@ (8009830 <tcp_listen_input+0x1e8>)
 80096a4:	9300      	str	r3, [sp, #0]
 80096a6:	4b63      	ldr	r3, [pc, #396]	@ (8009834 <tcp_listen_input+0x1ec>)
 80096a8:	4602      	mov	r2, r0
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f002 ff7a 	bl	800c5a4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80096b0:	e0a9      	b.n	8009806 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80096b2:	4b57      	ldr	r3, [pc, #348]	@ (8009810 <tcp_listen_input+0x1c8>)
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	f003 0302 	and.w	r3, r3, #2
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	f000 80a3 	beq.w	8009806 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	7d5b      	ldrb	r3, [r3, #21]
 80096c4:	4618      	mov	r0, r3
 80096c6:	f7ff f927 	bl	8008918 <tcp_alloc>
 80096ca:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d111      	bne.n	80096f6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	699b      	ldr	r3, [r3, #24]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d00a      	beq.n	80096f0 <tcp_listen_input+0xa8>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	6910      	ldr	r0, [r2, #16]
 80096e2:	f04f 32ff 	mov.w	r2, #4294967295
 80096e6:	2100      	movs	r1, #0
 80096e8:	4798      	blx	r3
 80096ea:	4603      	mov	r3, r0
 80096ec:	73bb      	strb	r3, [r7, #14]
      return;
 80096ee:	e08b      	b.n	8009808 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80096f0:	23f0      	movs	r3, #240	@ 0xf0
 80096f2:	73bb      	strb	r3, [r7, #14]
      return;
 80096f4:	e088      	b.n	8009808 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80096f6:	4b50      	ldr	r3, [pc, #320]	@ (8009838 <tcp_listen_input+0x1f0>)
 80096f8:	695a      	ldr	r2, [r3, #20]
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80096fe:	4b4e      	ldr	r3, [pc, #312]	@ (8009838 <tcp_listen_input+0x1f0>)
 8009700:	691a      	ldr	r2, [r3, #16]
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	8ada      	ldrh	r2, [r3, #22]
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800970e:	4b47      	ldr	r3, [pc, #284]	@ (800982c <tcp_listen_input+0x1e4>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	881b      	ldrh	r3, [r3, #0]
 8009714:	b29a      	uxth	r2, r3
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	2203      	movs	r2, #3
 800971e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8009720:	4b41      	ldr	r3, [pc, #260]	@ (8009828 <tcp_listen_input+0x1e0>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	1c5a      	adds	r2, r3, #1
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8009732:	6978      	ldr	r0, [r7, #20]
 8009734:	f7ff fa58 	bl	8008be8 <tcp_next_iss>
 8009738:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	693a      	ldr	r2, [r7, #16]
 800973e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	693a      	ldr	r2, [r7, #16]
 8009744:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	693a      	ldr	r2, [r7, #16]
 800974a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	693a      	ldr	r2, [r7, #16]
 8009750:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009752:	4b35      	ldr	r3, [pc, #212]	@ (8009828 <tcp_listen_input+0x1e0>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	1e5a      	subs	r2, r3, #1
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	691a      	ldr	r2, [r3, #16]
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	7a5b      	ldrb	r3, [r3, #9]
 800976e:	f003 030c 	and.w	r3, r3, #12
 8009772:	b2da      	uxtb	r2, r3
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	7a1a      	ldrb	r2, [r3, #8]
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009780:	4b2e      	ldr	r3, [pc, #184]	@ (800983c <tcp_listen_input+0x1f4>)
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	60da      	str	r2, [r3, #12]
 8009788:	4a2c      	ldr	r2, [pc, #176]	@ (800983c <tcp_listen_input+0x1f4>)
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	6013      	str	r3, [r2, #0]
 800978e:	f003 f8cb 	bl	800c928 <tcp_timer_needed>
 8009792:	4b2b      	ldr	r3, [pc, #172]	@ (8009840 <tcp_listen_input+0x1f8>)
 8009794:	2201      	movs	r2, #1
 8009796:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009798:	6978      	ldr	r0, [r7, #20]
 800979a:	f001 fd8b 	bl	800b2b4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800979e:	4b23      	ldr	r3, [pc, #140]	@ (800982c <tcp_listen_input+0x1e4>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	89db      	ldrh	r3, [r3, #14]
 80097a4:	b29a      	uxth	r2, r3
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	3304      	adds	r3, #4
 80097c0:	4618      	mov	r0, r3
 80097c2:	f004 ff3d 	bl	800e640 <ip4_route>
 80097c6:	4601      	mov	r1, r0
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	3304      	adds	r3, #4
 80097cc:	461a      	mov	r2, r3
 80097ce:	4620      	mov	r0, r4
 80097d0:	f7ff fa30 	bl	8008c34 <tcp_eff_send_mss_netif>
 80097d4:	4603      	mov	r3, r0
 80097d6:	461a      	mov	r2, r3
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80097dc:	2112      	movs	r1, #18
 80097de:	6978      	ldr	r0, [r7, #20]
 80097e0:	f002 f83e 	bl	800b860 <tcp_enqueue_flags>
 80097e4:	4603      	mov	r3, r0
 80097e6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80097e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d004      	beq.n	80097fa <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80097f0:	2100      	movs	r1, #0
 80097f2:	6978      	ldr	r0, [r7, #20]
 80097f4:	f7fe f97c 	bl	8007af0 <tcp_abandon>
      return;
 80097f8:	e006      	b.n	8009808 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80097fa:	6978      	ldr	r0, [r7, #20]
 80097fc:	f002 f91e 	bl	800ba3c <tcp_output>
  return;
 8009800:	e001      	b.n	8009806 <tcp_listen_input+0x1be>
    return;
 8009802:	bf00      	nop
 8009804:	e000      	b.n	8009808 <tcp_listen_input+0x1c0>
  return;
 8009806:	bf00      	nop
}
 8009808:	371c      	adds	r7, #28
 800980a:	46bd      	mov	sp, r7
 800980c:	bd90      	pop	{r4, r7, pc}
 800980e:	bf00      	nop
 8009810:	20008814 	.word	0x20008814
 8009814:	08011df8 	.word	0x08011df8
 8009818:	08011ff0 	.word	0x08011ff0
 800981c:	08011e44 	.word	0x08011e44
 8009820:	2000880c 	.word	0x2000880c
 8009824:	20008812 	.word	0x20008812
 8009828:	20008808 	.word	0x20008808
 800982c:	200087f8 	.word	0x200087f8
 8009830:	20005270 	.word	0x20005270
 8009834:	20005274 	.word	0x20005274
 8009838:	20005260 	.word	0x20005260
 800983c:	200087dc 	.word	0x200087dc
 8009840:	200087e4 	.word	0x200087e4

08009844 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b086      	sub	sp, #24
 8009848:	af04      	add	r7, sp, #16
 800984a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800984c:	4b2f      	ldr	r3, [pc, #188]	@ (800990c <tcp_timewait_input+0xc8>)
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	f003 0304 	and.w	r3, r3, #4
 8009854:	2b00      	cmp	r3, #0
 8009856:	d153      	bne.n	8009900 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d106      	bne.n	800986c <tcp_timewait_input+0x28>
 800985e:	4b2c      	ldr	r3, [pc, #176]	@ (8009910 <tcp_timewait_input+0xcc>)
 8009860:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8009864:	492b      	ldr	r1, [pc, #172]	@ (8009914 <tcp_timewait_input+0xd0>)
 8009866:	482c      	ldr	r0, [pc, #176]	@ (8009918 <tcp_timewait_input+0xd4>)
 8009868:	f006 fa56 	bl	800fd18 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800986c:	4b27      	ldr	r3, [pc, #156]	@ (800990c <tcp_timewait_input+0xc8>)
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	f003 0302 	and.w	r3, r3, #2
 8009874:	2b00      	cmp	r3, #0
 8009876:	d02a      	beq.n	80098ce <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009878:	4b28      	ldr	r3, [pc, #160]	@ (800991c <tcp_timewait_input+0xd8>)
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009880:	1ad3      	subs	r3, r2, r3
 8009882:	2b00      	cmp	r3, #0
 8009884:	db2d      	blt.n	80098e2 <tcp_timewait_input+0x9e>
 8009886:	4b25      	ldr	r3, [pc, #148]	@ (800991c <tcp_timewait_input+0xd8>)
 8009888:	681a      	ldr	r2, [r3, #0]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800988e:	6879      	ldr	r1, [r7, #4]
 8009890:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009892:	440b      	add	r3, r1
 8009894:	1ad3      	subs	r3, r2, r3
 8009896:	2b00      	cmp	r3, #0
 8009898:	dc23      	bgt.n	80098e2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800989a:	4b21      	ldr	r3, [pc, #132]	@ (8009920 <tcp_timewait_input+0xdc>)
 800989c:	6819      	ldr	r1, [r3, #0]
 800989e:	4b21      	ldr	r3, [pc, #132]	@ (8009924 <tcp_timewait_input+0xe0>)
 80098a0:	881b      	ldrh	r3, [r3, #0]
 80098a2:	461a      	mov	r2, r3
 80098a4:	4b1d      	ldr	r3, [pc, #116]	@ (800991c <tcp_timewait_input+0xd8>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80098aa:	4b1f      	ldr	r3, [pc, #124]	@ (8009928 <tcp_timewait_input+0xe4>)
 80098ac:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80098ae:	885b      	ldrh	r3, [r3, #2]
 80098b0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80098b2:	4a1d      	ldr	r2, [pc, #116]	@ (8009928 <tcp_timewait_input+0xe4>)
 80098b4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80098b6:	8812      	ldrh	r2, [r2, #0]
 80098b8:	b292      	uxth	r2, r2
 80098ba:	9202      	str	r2, [sp, #8]
 80098bc:	9301      	str	r3, [sp, #4]
 80098be:	4b1b      	ldr	r3, [pc, #108]	@ (800992c <tcp_timewait_input+0xe8>)
 80098c0:	9300      	str	r3, [sp, #0]
 80098c2:	4b1b      	ldr	r3, [pc, #108]	@ (8009930 <tcp_timewait_input+0xec>)
 80098c4:	4602      	mov	r2, r0
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f002 fe6c 	bl	800c5a4 <tcp_rst>
      return;
 80098cc:	e01b      	b.n	8009906 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80098ce:	4b0f      	ldr	r3, [pc, #60]	@ (800990c <tcp_timewait_input+0xc8>)
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	f003 0301 	and.w	r3, r3, #1
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d003      	beq.n	80098e2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80098da:	4b16      	ldr	r3, [pc, #88]	@ (8009934 <tcp_timewait_input+0xf0>)
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80098e2:	4b10      	ldr	r3, [pc, #64]	@ (8009924 <tcp_timewait_input+0xe0>)
 80098e4:	881b      	ldrh	r3, [r3, #0]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00c      	beq.n	8009904 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	8b5b      	ldrh	r3, [r3, #26]
 80098ee:	f043 0302 	orr.w	r3, r3, #2
 80098f2:	b29a      	uxth	r2, r3
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f002 f89f 	bl	800ba3c <tcp_output>
  }
  return;
 80098fe:	e001      	b.n	8009904 <tcp_timewait_input+0xc0>
    return;
 8009900:	bf00      	nop
 8009902:	e000      	b.n	8009906 <tcp_timewait_input+0xc2>
  return;
 8009904:	bf00      	nop
}
 8009906:	3708      	adds	r7, #8
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}
 800990c:	20008814 	.word	0x20008814
 8009910:	08011df8 	.word	0x08011df8
 8009914:	08012010 	.word	0x08012010
 8009918:	08011e44 	.word	0x08011e44
 800991c:	20008808 	.word	0x20008808
 8009920:	2000880c 	.word	0x2000880c
 8009924:	20008812 	.word	0x20008812
 8009928:	200087f8 	.word	0x200087f8
 800992c:	20005270 	.word	0x20005270
 8009930:	20005274 	.word	0x20005274
 8009934:	200087d0 	.word	0x200087d0

08009938 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009938:	b590      	push	{r4, r7, lr}
 800993a:	b08d      	sub	sp, #52	@ 0x34
 800993c:	af04      	add	r7, sp, #16
 800993e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8009940:	2300      	movs	r3, #0
 8009942:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8009944:	2300      	movs	r3, #0
 8009946:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d106      	bne.n	800995c <tcp_process+0x24>
 800994e:	4b9d      	ldr	r3, [pc, #628]	@ (8009bc4 <tcp_process+0x28c>)
 8009950:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8009954:	499c      	ldr	r1, [pc, #624]	@ (8009bc8 <tcp_process+0x290>)
 8009956:	489d      	ldr	r0, [pc, #628]	@ (8009bcc <tcp_process+0x294>)
 8009958:	f006 f9de 	bl	800fd18 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800995c:	4b9c      	ldr	r3, [pc, #624]	@ (8009bd0 <tcp_process+0x298>)
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	f003 0304 	and.w	r3, r3, #4
 8009964:	2b00      	cmp	r3, #0
 8009966:	d04e      	beq.n	8009a06 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	7d1b      	ldrb	r3, [r3, #20]
 800996c:	2b02      	cmp	r3, #2
 800996e:	d108      	bne.n	8009982 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009974:	4b97      	ldr	r3, [pc, #604]	@ (8009bd4 <tcp_process+0x29c>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	429a      	cmp	r2, r3
 800997a:	d123      	bne.n	80099c4 <tcp_process+0x8c>
        acceptable = 1;
 800997c:	2301      	movs	r3, #1
 800997e:	76fb      	strb	r3, [r7, #27]
 8009980:	e020      	b.n	80099c4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009986:	4b94      	ldr	r3, [pc, #592]	@ (8009bd8 <tcp_process+0x2a0>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	429a      	cmp	r2, r3
 800998c:	d102      	bne.n	8009994 <tcp_process+0x5c>
        acceptable = 1;
 800998e:	2301      	movs	r3, #1
 8009990:	76fb      	strb	r3, [r7, #27]
 8009992:	e017      	b.n	80099c4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009994:	4b90      	ldr	r3, [pc, #576]	@ (8009bd8 <tcp_process+0x2a0>)
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800999c:	1ad3      	subs	r3, r2, r3
 800999e:	2b00      	cmp	r3, #0
 80099a0:	db10      	blt.n	80099c4 <tcp_process+0x8c>
 80099a2:	4b8d      	ldr	r3, [pc, #564]	@ (8009bd8 <tcp_process+0x2a0>)
 80099a4:	681a      	ldr	r2, [r3, #0]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099aa:	6879      	ldr	r1, [r7, #4]
 80099ac:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80099ae:	440b      	add	r3, r1
 80099b0:	1ad3      	subs	r3, r2, r3
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	dc06      	bgt.n	80099c4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	8b5b      	ldrh	r3, [r3, #26]
 80099ba:	f043 0302 	orr.w	r3, r3, #2
 80099be:	b29a      	uxth	r2, r3
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80099c4:	7efb      	ldrb	r3, [r7, #27]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d01b      	beq.n	8009a02 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	7d1b      	ldrb	r3, [r3, #20]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d106      	bne.n	80099e0 <tcp_process+0xa8>
 80099d2:	4b7c      	ldr	r3, [pc, #496]	@ (8009bc4 <tcp_process+0x28c>)
 80099d4:	f44f 724e 	mov.w	r2, #824	@ 0x338
 80099d8:	4980      	ldr	r1, [pc, #512]	@ (8009bdc <tcp_process+0x2a4>)
 80099da:	487c      	ldr	r0, [pc, #496]	@ (8009bcc <tcp_process+0x294>)
 80099dc:	f006 f99c 	bl	800fd18 <iprintf>
      recv_flags |= TF_RESET;
 80099e0:	4b7f      	ldr	r3, [pc, #508]	@ (8009be0 <tcp_process+0x2a8>)
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	f043 0308 	orr.w	r3, r3, #8
 80099e8:	b2da      	uxtb	r2, r3
 80099ea:	4b7d      	ldr	r3, [pc, #500]	@ (8009be0 <tcp_process+0x2a8>)
 80099ec:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	8b5b      	ldrh	r3, [r3, #26]
 80099f2:	f023 0301 	bic.w	r3, r3, #1
 80099f6:	b29a      	uxth	r2, r3
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80099fc:	f06f 030d 	mvn.w	r3, #13
 8009a00:	e37a      	b.n	800a0f8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8009a02:	2300      	movs	r3, #0
 8009a04:	e378      	b.n	800a0f8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009a06:	4b72      	ldr	r3, [pc, #456]	@ (8009bd0 <tcp_process+0x298>)
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	f003 0302 	and.w	r3, r3, #2
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d010      	beq.n	8009a34 <tcp_process+0xfc>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	7d1b      	ldrb	r3, [r3, #20]
 8009a16:	2b02      	cmp	r3, #2
 8009a18:	d00c      	beq.n	8009a34 <tcp_process+0xfc>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	7d1b      	ldrb	r3, [r3, #20]
 8009a1e:	2b03      	cmp	r3, #3
 8009a20:	d008      	beq.n	8009a34 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	8b5b      	ldrh	r3, [r3, #26]
 8009a26:	f043 0302 	orr.w	r3, r3, #2
 8009a2a:	b29a      	uxth	r2, r3
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8009a30:	2300      	movs	r3, #0
 8009a32:	e361      	b.n	800a0f8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	8b5b      	ldrh	r3, [r3, #26]
 8009a38:	f003 0310 	and.w	r3, r3, #16
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d103      	bne.n	8009a48 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8009a40:	4b68      	ldr	r3, [pc, #416]	@ (8009be4 <tcp_process+0x2ac>)
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f001 fc2b 	bl	800b2b4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	7d1b      	ldrb	r3, [r3, #20]
 8009a62:	3b02      	subs	r3, #2
 8009a64:	2b07      	cmp	r3, #7
 8009a66:	f200 8337 	bhi.w	800a0d8 <tcp_process+0x7a0>
 8009a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8009a70 <tcp_process+0x138>)
 8009a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a70:	08009a91 	.word	0x08009a91
 8009a74:	08009cc1 	.word	0x08009cc1
 8009a78:	08009e39 	.word	0x08009e39
 8009a7c:	08009e63 	.word	0x08009e63
 8009a80:	08009f87 	.word	0x08009f87
 8009a84:	08009e39 	.word	0x08009e39
 8009a88:	0800a013 	.word	0x0800a013
 8009a8c:	0800a0a3 	.word	0x0800a0a3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009a90:	4b4f      	ldr	r3, [pc, #316]	@ (8009bd0 <tcp_process+0x298>)
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	f003 0310 	and.w	r3, r3, #16
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	f000 80e4 	beq.w	8009c66 <tcp_process+0x32e>
 8009a9e:	4b4c      	ldr	r3, [pc, #304]	@ (8009bd0 <tcp_process+0x298>)
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	f003 0302 	and.w	r3, r3, #2
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	f000 80dd 	beq.w	8009c66 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ab0:	1c5a      	adds	r2, r3, #1
 8009ab2:	4b48      	ldr	r3, [pc, #288]	@ (8009bd4 <tcp_process+0x29c>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	f040 80d5 	bne.w	8009c66 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8009abc:	4b46      	ldr	r3, [pc, #280]	@ (8009bd8 <tcp_process+0x2a0>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	1c5a      	adds	r2, r3, #1
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8009ace:	4b41      	ldr	r3, [pc, #260]	@ (8009bd4 <tcp_process+0x29c>)
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8009ad6:	4b44      	ldr	r3, [pc, #272]	@ (8009be8 <tcp_process+0x2b0>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	89db      	ldrh	r3, [r3, #14]
 8009adc:	b29a      	uxth	r2, r3
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009af0:	4b39      	ldr	r3, [pc, #228]	@ (8009bd8 <tcp_process+0x2a0>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	1e5a      	subs	r2, r3, #1
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2204      	movs	r2, #4
 8009afe:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	3304      	adds	r3, #4
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f004 fd99 	bl	800e640 <ip4_route>
 8009b0e:	4601      	mov	r1, r0
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	3304      	adds	r3, #4
 8009b14:	461a      	mov	r2, r3
 8009b16:	4620      	mov	r0, r4
 8009b18:	f7ff f88c 	bl	8008c34 <tcp_eff_send_mss_netif>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	461a      	mov	r2, r3
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009b28:	009a      	lsls	r2, r3, #2
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009b2e:	005b      	lsls	r3, r3, #1
 8009b30:	f241 111c 	movw	r1, #4380	@ 0x111c
 8009b34:	428b      	cmp	r3, r1
 8009b36:	bf38      	it	cc
 8009b38:	460b      	movcc	r3, r1
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d204      	bcs.n	8009b48 <tcp_process+0x210>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	e00d      	b.n	8009b64 <tcp_process+0x22c>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009b4c:	005b      	lsls	r3, r3, #1
 8009b4e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d904      	bls.n	8009b60 <tcp_process+0x228>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009b5a:	005b      	lsls	r3, r3, #1
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	e001      	b.n	8009b64 <tcp_process+0x22c>
 8009b60:	f241 131c 	movw	r3, #4380	@ 0x111c
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d106      	bne.n	8009b82 <tcp_process+0x24a>
 8009b74:	4b13      	ldr	r3, [pc, #76]	@ (8009bc4 <tcp_process+0x28c>)
 8009b76:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8009b7a:	491c      	ldr	r1, [pc, #112]	@ (8009bec <tcp_process+0x2b4>)
 8009b7c:	4813      	ldr	r0, [pc, #76]	@ (8009bcc <tcp_process+0x294>)
 8009b7e:	f006 f8cb 	bl	800fd18 <iprintf>
        --pcb->snd_queuelen;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009b88:	3b01      	subs	r3, #1
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b96:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d12a      	bne.n	8009bf4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ba2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009ba4:	69fb      	ldr	r3, [r7, #28]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d106      	bne.n	8009bb8 <tcp_process+0x280>
 8009baa:	4b06      	ldr	r3, [pc, #24]	@ (8009bc4 <tcp_process+0x28c>)
 8009bac:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8009bb0:	490f      	ldr	r1, [pc, #60]	@ (8009bf0 <tcp_process+0x2b8>)
 8009bb2:	4806      	ldr	r0, [pc, #24]	@ (8009bcc <tcp_process+0x294>)
 8009bb4:	f006 f8b0 	bl	800fd18 <iprintf>
          pcb->unsent = rseg->next;
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009bc0:	e01c      	b.n	8009bfc <tcp_process+0x2c4>
 8009bc2:	bf00      	nop
 8009bc4:	08011df8 	.word	0x08011df8
 8009bc8:	08012030 	.word	0x08012030
 8009bcc:	08011e44 	.word	0x08011e44
 8009bd0:	20008814 	.word	0x20008814
 8009bd4:	2000880c 	.word	0x2000880c
 8009bd8:	20008808 	.word	0x20008808
 8009bdc:	0801204c 	.word	0x0801204c
 8009be0:	20008815 	.word	0x20008815
 8009be4:	200087d0 	.word	0x200087d0
 8009be8:	200087f8 	.word	0x200087f8
 8009bec:	0801206c 	.word	0x0801206c
 8009bf0:	08012084 	.word	0x08012084
        } else {
          pcb->unacked = rseg->next;
 8009bf4:	69fb      	ldr	r3, [r7, #28]
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8009bfc:	69f8      	ldr	r0, [r7, #28]
 8009bfe:	f7fe fd22 	bl	8008646 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d104      	bne.n	8009c14 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009c10:	861a      	strh	r2, [r3, #48]	@ 0x30
 8009c12:	e006      	b.n	8009c22 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2200      	movs	r2, #0
 8009c18:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d00a      	beq.n	8009c42 <tcp_process+0x30a>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	6910      	ldr	r0, [r2, #16]
 8009c36:	2200      	movs	r2, #0
 8009c38:	6879      	ldr	r1, [r7, #4]
 8009c3a:	4798      	blx	r3
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	76bb      	strb	r3, [r7, #26]
 8009c40:	e001      	b.n	8009c46 <tcp_process+0x30e>
 8009c42:	2300      	movs	r3, #0
 8009c44:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8009c46:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009c4a:	f113 0f0d 	cmn.w	r3, #13
 8009c4e:	d102      	bne.n	8009c56 <tcp_process+0x31e>
          return ERR_ABRT;
 8009c50:	f06f 030c 	mvn.w	r3, #12
 8009c54:	e250      	b.n	800a0f8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	8b5b      	ldrh	r3, [r3, #26]
 8009c5a:	f043 0302 	orr.w	r3, r3, #2
 8009c5e:	b29a      	uxth	r2, r3
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009c64:	e23a      	b.n	800a0dc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8009c66:	4b98      	ldr	r3, [pc, #608]	@ (8009ec8 <tcp_process+0x590>)
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	f003 0310 	and.w	r3, r3, #16
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	f000 8234 	beq.w	800a0dc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009c74:	4b95      	ldr	r3, [pc, #596]	@ (8009ecc <tcp_process+0x594>)
 8009c76:	6819      	ldr	r1, [r3, #0]
 8009c78:	4b95      	ldr	r3, [pc, #596]	@ (8009ed0 <tcp_process+0x598>)
 8009c7a:	881b      	ldrh	r3, [r3, #0]
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	4b95      	ldr	r3, [pc, #596]	@ (8009ed4 <tcp_process+0x59c>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009c84:	4b94      	ldr	r3, [pc, #592]	@ (8009ed8 <tcp_process+0x5a0>)
 8009c86:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009c88:	885b      	ldrh	r3, [r3, #2]
 8009c8a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009c8c:	4a92      	ldr	r2, [pc, #584]	@ (8009ed8 <tcp_process+0x5a0>)
 8009c8e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009c90:	8812      	ldrh	r2, [r2, #0]
 8009c92:	b292      	uxth	r2, r2
 8009c94:	9202      	str	r2, [sp, #8]
 8009c96:	9301      	str	r3, [sp, #4]
 8009c98:	4b90      	ldr	r3, [pc, #576]	@ (8009edc <tcp_process+0x5a4>)
 8009c9a:	9300      	str	r3, [sp, #0]
 8009c9c:	4b90      	ldr	r3, [pc, #576]	@ (8009ee0 <tcp_process+0x5a8>)
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f002 fc7f 	bl	800c5a4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009cac:	2b05      	cmp	r3, #5
 8009cae:	f200 8215 	bhi.w	800a0dc <tcp_process+0x7a4>
          pcb->rtime = 0;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f002 fa4b 	bl	800c154 <tcp_rexmit_rto>
      break;
 8009cbe:	e20d      	b.n	800a0dc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8009cc0:	4b81      	ldr	r3, [pc, #516]	@ (8009ec8 <tcp_process+0x590>)
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	f003 0310 	and.w	r3, r3, #16
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	f000 80a1 	beq.w	8009e10 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009cce:	4b7f      	ldr	r3, [pc, #508]	@ (8009ecc <tcp_process+0x594>)
 8009cd0:	681a      	ldr	r2, [r3, #0]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cd6:	1ad3      	subs	r3, r2, r3
 8009cd8:	3b01      	subs	r3, #1
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	db7e      	blt.n	8009ddc <tcp_process+0x4a4>
 8009cde:	4b7b      	ldr	r3, [pc, #492]	@ (8009ecc <tcp_process+0x594>)
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ce6:	1ad3      	subs	r3, r2, r3
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	dc77      	bgt.n	8009ddc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2204      	movs	r2, #4
 8009cf0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d102      	bne.n	8009d00 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8009cfa:	23fa      	movs	r3, #250	@ 0xfa
 8009cfc:	76bb      	strb	r3, [r7, #26]
 8009cfe:	e01d      	b.n	8009d3c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009d04:	699b      	ldr	r3, [r3, #24]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d106      	bne.n	8009d18 <tcp_process+0x3e0>
 8009d0a:	4b76      	ldr	r3, [pc, #472]	@ (8009ee4 <tcp_process+0x5ac>)
 8009d0c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8009d10:	4975      	ldr	r1, [pc, #468]	@ (8009ee8 <tcp_process+0x5b0>)
 8009d12:	4876      	ldr	r0, [pc, #472]	@ (8009eec <tcp_process+0x5b4>)
 8009d14:	f006 f800 	bl	800fd18 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009d1c:	699b      	ldr	r3, [r3, #24]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00a      	beq.n	8009d38 <tcp_process+0x400>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009d26:	699b      	ldr	r3, [r3, #24]
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	6910      	ldr	r0, [r2, #16]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	6879      	ldr	r1, [r7, #4]
 8009d30:	4798      	blx	r3
 8009d32:	4603      	mov	r3, r0
 8009d34:	76bb      	strb	r3, [r7, #26]
 8009d36:	e001      	b.n	8009d3c <tcp_process+0x404>
 8009d38:	23f0      	movs	r3, #240	@ 0xf0
 8009d3a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8009d3c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d00a      	beq.n	8009d5a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009d44:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009d48:	f113 0f0d 	cmn.w	r3, #13
 8009d4c:	d002      	beq.n	8009d54 <tcp_process+0x41c>
              tcp_abort(pcb);
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f7fd ff8c 	bl	8007c6c <tcp_abort>
            }
            return ERR_ABRT;
 8009d54:	f06f 030c 	mvn.w	r3, #12
 8009d58:	e1ce      	b.n	800a0f8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 fae0 	bl	800a320 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8009d60:	4b63      	ldr	r3, [pc, #396]	@ (8009ef0 <tcp_process+0x5b8>)
 8009d62:	881b      	ldrh	r3, [r3, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d005      	beq.n	8009d74 <tcp_process+0x43c>
            recv_acked--;
 8009d68:	4b61      	ldr	r3, [pc, #388]	@ (8009ef0 <tcp_process+0x5b8>)
 8009d6a:	881b      	ldrh	r3, [r3, #0]
 8009d6c:	3b01      	subs	r3, #1
 8009d6e:	b29a      	uxth	r2, r3
 8009d70:	4b5f      	ldr	r3, [pc, #380]	@ (8009ef0 <tcp_process+0x5b8>)
 8009d72:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009d78:	009a      	lsls	r2, r3, #2
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009d7e:	005b      	lsls	r3, r3, #1
 8009d80:	f241 111c 	movw	r1, #4380	@ 0x111c
 8009d84:	428b      	cmp	r3, r1
 8009d86:	bf38      	it	cc
 8009d88:	460b      	movcc	r3, r1
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d204      	bcs.n	8009d98 <tcp_process+0x460>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	e00d      	b.n	8009db4 <tcp_process+0x47c>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009d9c:	005b      	lsls	r3, r3, #1
 8009d9e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d904      	bls.n	8009db0 <tcp_process+0x478>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009daa:	005b      	lsls	r3, r3, #1
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	e001      	b.n	8009db4 <tcp_process+0x47c>
 8009db0:	f241 131c 	movw	r3, #4380	@ 0x111c
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8009dba:	4b4e      	ldr	r3, [pc, #312]	@ (8009ef4 <tcp_process+0x5bc>)
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	f003 0320 	and.w	r3, r3, #32
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d037      	beq.n	8009e36 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	8b5b      	ldrh	r3, [r3, #26]
 8009dca:	f043 0302 	orr.w	r3, r3, #2
 8009dce:	b29a      	uxth	r2, r3
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2207      	movs	r2, #7
 8009dd8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8009dda:	e02c      	b.n	8009e36 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009ddc:	4b3b      	ldr	r3, [pc, #236]	@ (8009ecc <tcp_process+0x594>)
 8009dde:	6819      	ldr	r1, [r3, #0]
 8009de0:	4b3b      	ldr	r3, [pc, #236]	@ (8009ed0 <tcp_process+0x598>)
 8009de2:	881b      	ldrh	r3, [r3, #0]
 8009de4:	461a      	mov	r2, r3
 8009de6:	4b3b      	ldr	r3, [pc, #236]	@ (8009ed4 <tcp_process+0x59c>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009dec:	4b3a      	ldr	r3, [pc, #232]	@ (8009ed8 <tcp_process+0x5a0>)
 8009dee:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009df0:	885b      	ldrh	r3, [r3, #2]
 8009df2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009df4:	4a38      	ldr	r2, [pc, #224]	@ (8009ed8 <tcp_process+0x5a0>)
 8009df6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009df8:	8812      	ldrh	r2, [r2, #0]
 8009dfa:	b292      	uxth	r2, r2
 8009dfc:	9202      	str	r2, [sp, #8]
 8009dfe:	9301      	str	r3, [sp, #4]
 8009e00:	4b36      	ldr	r3, [pc, #216]	@ (8009edc <tcp_process+0x5a4>)
 8009e02:	9300      	str	r3, [sp, #0]
 8009e04:	4b36      	ldr	r3, [pc, #216]	@ (8009ee0 <tcp_process+0x5a8>)
 8009e06:	4602      	mov	r2, r0
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f002 fbcb 	bl	800c5a4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8009e0e:	e167      	b.n	800a0e0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009e10:	4b2d      	ldr	r3, [pc, #180]	@ (8009ec8 <tcp_process+0x590>)
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	f003 0302 	and.w	r3, r3, #2
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	f000 8161 	beq.w	800a0e0 <tcp_process+0x7a8>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e22:	1e5a      	subs	r2, r3, #1
 8009e24:	4b2b      	ldr	r3, [pc, #172]	@ (8009ed4 <tcp_process+0x59c>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	f040 8159 	bne.w	800a0e0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f002 f9b2 	bl	800c198 <tcp_rexmit>
      break;
 8009e34:	e154      	b.n	800a0e0 <tcp_process+0x7a8>
 8009e36:	e153      	b.n	800a0e0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 fa71 	bl	800a320 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009e3e:	4b2d      	ldr	r3, [pc, #180]	@ (8009ef4 <tcp_process+0x5bc>)
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	f003 0320 	and.w	r3, r3, #32
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	f000 814c 	beq.w	800a0e4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	8b5b      	ldrh	r3, [r3, #26]
 8009e50:	f043 0302 	orr.w	r3, r3, #2
 8009e54:	b29a      	uxth	r2, r3
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2207      	movs	r2, #7
 8009e5e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009e60:	e140      	b.n	800a0e4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 fa5c 	bl	800a320 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009e68:	4b22      	ldr	r3, [pc, #136]	@ (8009ef4 <tcp_process+0x5bc>)
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	f003 0320 	and.w	r3, r3, #32
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d071      	beq.n	8009f58 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009e74:	4b14      	ldr	r3, [pc, #80]	@ (8009ec8 <tcp_process+0x590>)
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	f003 0310 	and.w	r3, r3, #16
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d060      	beq.n	8009f42 <tcp_process+0x60a>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009e84:	4b11      	ldr	r3, [pc, #68]	@ (8009ecc <tcp_process+0x594>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d15a      	bne.n	8009f42 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d156      	bne.n	8009f42 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	8b5b      	ldrh	r3, [r3, #26]
 8009e98:	f043 0302 	orr.w	r3, r3, #2
 8009e9c:	b29a      	uxth	r2, r3
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f7fe fdbc 	bl	8008a20 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009ea8:	4b13      	ldr	r3, [pc, #76]	@ (8009ef8 <tcp_process+0x5c0>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	d105      	bne.n	8009ebe <tcp_process+0x586>
 8009eb2:	4b11      	ldr	r3, [pc, #68]	@ (8009ef8 <tcp_process+0x5c0>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	4a0f      	ldr	r2, [pc, #60]	@ (8009ef8 <tcp_process+0x5c0>)
 8009eba:	6013      	str	r3, [r2, #0]
 8009ebc:	e02e      	b.n	8009f1c <tcp_process+0x5e4>
 8009ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8009ef8 <tcp_process+0x5c0>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	617b      	str	r3, [r7, #20]
 8009ec4:	e027      	b.n	8009f16 <tcp_process+0x5de>
 8009ec6:	bf00      	nop
 8009ec8:	20008814 	.word	0x20008814
 8009ecc:	2000880c 	.word	0x2000880c
 8009ed0:	20008812 	.word	0x20008812
 8009ed4:	20008808 	.word	0x20008808
 8009ed8:	200087f8 	.word	0x200087f8
 8009edc:	20005270 	.word	0x20005270
 8009ee0:	20005274 	.word	0x20005274
 8009ee4:	08011df8 	.word	0x08011df8
 8009ee8:	08012098 	.word	0x08012098
 8009eec:	08011e44 	.word	0x08011e44
 8009ef0:	20008810 	.word	0x20008810
 8009ef4:	20008815 	.word	0x20008815
 8009ef8:	200087dc 	.word	0x200087dc
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d104      	bne.n	8009f10 <tcp_process+0x5d8>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	68da      	ldr	r2, [r3, #12]
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	60da      	str	r2, [r3, #12]
 8009f0e:	e005      	b.n	8009f1c <tcp_process+0x5e4>
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	617b      	str	r3, [r7, #20]
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d1ef      	bne.n	8009efc <tcp_process+0x5c4>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	60da      	str	r2, [r3, #12]
 8009f22:	4b77      	ldr	r3, [pc, #476]	@ (800a100 <tcp_process+0x7c8>)
 8009f24:	2201      	movs	r2, #1
 8009f26:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	220a      	movs	r2, #10
 8009f2c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009f2e:	4b75      	ldr	r3, [pc, #468]	@ (800a104 <tcp_process+0x7cc>)
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	60da      	str	r2, [r3, #12]
 8009f36:	4a73      	ldr	r2, [pc, #460]	@ (800a104 <tcp_process+0x7cc>)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6013      	str	r3, [r2, #0]
 8009f3c:	f002 fcf4 	bl	800c928 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009f40:	e0d2      	b.n	800a0e8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	8b5b      	ldrh	r3, [r3, #26]
 8009f46:	f043 0302 	orr.w	r3, r3, #2
 8009f4a:	b29a      	uxth	r2, r3
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2208      	movs	r2, #8
 8009f54:	751a      	strb	r2, [r3, #20]
      break;
 8009f56:	e0c7      	b.n	800a0e8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009f58:	4b6b      	ldr	r3, [pc, #428]	@ (800a108 <tcp_process+0x7d0>)
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	f003 0310 	and.w	r3, r3, #16
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f000 80c1 	beq.w	800a0e8 <tcp_process+0x7b0>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009f6a:	4b68      	ldr	r3, [pc, #416]	@ (800a10c <tcp_process+0x7d4>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	f040 80ba 	bne.w	800a0e8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	f040 80b5 	bne.w	800a0e8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2206      	movs	r2, #6
 8009f82:	751a      	strb	r2, [r3, #20]
      break;
 8009f84:	e0b0      	b.n	800a0e8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 f9ca 	bl	800a320 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009f8c:	4b60      	ldr	r3, [pc, #384]	@ (800a110 <tcp_process+0x7d8>)
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	f003 0320 	and.w	r3, r3, #32
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f000 80a9 	beq.w	800a0ec <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	8b5b      	ldrh	r3, [r3, #26]
 8009f9e:	f043 0302 	orr.w	r3, r3, #2
 8009fa2:	b29a      	uxth	r2, r3
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f7fe fd39 	bl	8008a20 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009fae:	4b59      	ldr	r3, [pc, #356]	@ (800a114 <tcp_process+0x7dc>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d105      	bne.n	8009fc4 <tcp_process+0x68c>
 8009fb8:	4b56      	ldr	r3, [pc, #344]	@ (800a114 <tcp_process+0x7dc>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	68db      	ldr	r3, [r3, #12]
 8009fbe:	4a55      	ldr	r2, [pc, #340]	@ (800a114 <tcp_process+0x7dc>)
 8009fc0:	6013      	str	r3, [r2, #0]
 8009fc2:	e013      	b.n	8009fec <tcp_process+0x6b4>
 8009fc4:	4b53      	ldr	r3, [pc, #332]	@ (800a114 <tcp_process+0x7dc>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	613b      	str	r3, [r7, #16]
 8009fca:	e00c      	b.n	8009fe6 <tcp_process+0x6ae>
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	68db      	ldr	r3, [r3, #12]
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d104      	bne.n	8009fe0 <tcp_process+0x6a8>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	68da      	ldr	r2, [r3, #12]
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	60da      	str	r2, [r3, #12]
 8009fde:	e005      	b.n	8009fec <tcp_process+0x6b4>
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	613b      	str	r3, [r7, #16]
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d1ef      	bne.n	8009fcc <tcp_process+0x694>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	60da      	str	r2, [r3, #12]
 8009ff2:	4b43      	ldr	r3, [pc, #268]	@ (800a100 <tcp_process+0x7c8>)
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	220a      	movs	r2, #10
 8009ffc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009ffe:	4b41      	ldr	r3, [pc, #260]	@ (800a104 <tcp_process+0x7cc>)
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	60da      	str	r2, [r3, #12]
 800a006:	4a3f      	ldr	r2, [pc, #252]	@ (800a104 <tcp_process+0x7cc>)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6013      	str	r3, [r2, #0]
 800a00c:	f002 fc8c 	bl	800c928 <tcp_timer_needed>
      }
      break;
 800a010:	e06c      	b.n	800a0ec <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 f984 	bl	800a320 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a018:	4b3b      	ldr	r3, [pc, #236]	@ (800a108 <tcp_process+0x7d0>)
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	f003 0310 	and.w	r3, r3, #16
 800a020:	2b00      	cmp	r3, #0
 800a022:	d065      	beq.n	800a0f0 <tcp_process+0x7b8>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a028:	4b38      	ldr	r3, [pc, #224]	@ (800a10c <tcp_process+0x7d4>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d15f      	bne.n	800a0f0 <tcp_process+0x7b8>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a034:	2b00      	cmp	r3, #0
 800a036:	d15b      	bne.n	800a0f0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f7fe fcf1 	bl	8008a20 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a03e:	4b35      	ldr	r3, [pc, #212]	@ (800a114 <tcp_process+0x7dc>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	429a      	cmp	r2, r3
 800a046:	d105      	bne.n	800a054 <tcp_process+0x71c>
 800a048:	4b32      	ldr	r3, [pc, #200]	@ (800a114 <tcp_process+0x7dc>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	68db      	ldr	r3, [r3, #12]
 800a04e:	4a31      	ldr	r2, [pc, #196]	@ (800a114 <tcp_process+0x7dc>)
 800a050:	6013      	str	r3, [r2, #0]
 800a052:	e013      	b.n	800a07c <tcp_process+0x744>
 800a054:	4b2f      	ldr	r3, [pc, #188]	@ (800a114 <tcp_process+0x7dc>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	60fb      	str	r3, [r7, #12]
 800a05a:	e00c      	b.n	800a076 <tcp_process+0x73e>
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	429a      	cmp	r2, r3
 800a064:	d104      	bne.n	800a070 <tcp_process+0x738>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	68da      	ldr	r2, [r3, #12]
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	60da      	str	r2, [r3, #12]
 800a06e:	e005      	b.n	800a07c <tcp_process+0x744>
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	68db      	ldr	r3, [r3, #12]
 800a074:	60fb      	str	r3, [r7, #12]
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d1ef      	bne.n	800a05c <tcp_process+0x724>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	60da      	str	r2, [r3, #12]
 800a082:	4b1f      	ldr	r3, [pc, #124]	@ (800a100 <tcp_process+0x7c8>)
 800a084:	2201      	movs	r2, #1
 800a086:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	220a      	movs	r2, #10
 800a08c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a08e:	4b1d      	ldr	r3, [pc, #116]	@ (800a104 <tcp_process+0x7cc>)
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	60da      	str	r2, [r3, #12]
 800a096:	4a1b      	ldr	r2, [pc, #108]	@ (800a104 <tcp_process+0x7cc>)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6013      	str	r3, [r2, #0]
 800a09c:	f002 fc44 	bl	800c928 <tcp_timer_needed>
      }
      break;
 800a0a0:	e026      	b.n	800a0f0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 f93c 	bl	800a320 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a0a8:	4b17      	ldr	r3, [pc, #92]	@ (800a108 <tcp_process+0x7d0>)
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	f003 0310 	and.w	r3, r3, #16
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d01f      	beq.n	800a0f4 <tcp_process+0x7bc>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a0b8:	4b14      	ldr	r3, [pc, #80]	@ (800a10c <tcp_process+0x7d4>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d119      	bne.n	800a0f4 <tcp_process+0x7bc>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d115      	bne.n	800a0f4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800a0c8:	4b11      	ldr	r3, [pc, #68]	@ (800a110 <tcp_process+0x7d8>)
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	f043 0310 	orr.w	r3, r3, #16
 800a0d0:	b2da      	uxtb	r2, r3
 800a0d2:	4b0f      	ldr	r3, [pc, #60]	@ (800a110 <tcp_process+0x7d8>)
 800a0d4:	701a      	strb	r2, [r3, #0]
      }
      break;
 800a0d6:	e00d      	b.n	800a0f4 <tcp_process+0x7bc>
    default:
      break;
 800a0d8:	bf00      	nop
 800a0da:	e00c      	b.n	800a0f6 <tcp_process+0x7be>
      break;
 800a0dc:	bf00      	nop
 800a0de:	e00a      	b.n	800a0f6 <tcp_process+0x7be>
      break;
 800a0e0:	bf00      	nop
 800a0e2:	e008      	b.n	800a0f6 <tcp_process+0x7be>
      break;
 800a0e4:	bf00      	nop
 800a0e6:	e006      	b.n	800a0f6 <tcp_process+0x7be>
      break;
 800a0e8:	bf00      	nop
 800a0ea:	e004      	b.n	800a0f6 <tcp_process+0x7be>
      break;
 800a0ec:	bf00      	nop
 800a0ee:	e002      	b.n	800a0f6 <tcp_process+0x7be>
      break;
 800a0f0:	bf00      	nop
 800a0f2:	e000      	b.n	800a0f6 <tcp_process+0x7be>
      break;
 800a0f4:	bf00      	nop
  }
  return ERR_OK;
 800a0f6:	2300      	movs	r3, #0
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3724      	adds	r7, #36	@ 0x24
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd90      	pop	{r4, r7, pc}
 800a100:	200087e4 	.word	0x200087e4
 800a104:	200087e0 	.word	0x200087e0
 800a108:	20008814 	.word	0x20008814
 800a10c:	2000880c 	.word	0x2000880c
 800a110:	20008815 	.word	0x20008815
 800a114:	200087dc 	.word	0x200087dc

0800a118 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800a118:	b590      	push	{r4, r7, lr}
 800a11a:	b085      	sub	sp, #20
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d106      	bne.n	800a136 <tcp_oos_insert_segment+0x1e>
 800a128:	4b3b      	ldr	r3, [pc, #236]	@ (800a218 <tcp_oos_insert_segment+0x100>)
 800a12a:	f240 421f 	movw	r2, #1055	@ 0x41f
 800a12e:	493b      	ldr	r1, [pc, #236]	@ (800a21c <tcp_oos_insert_segment+0x104>)
 800a130:	483b      	ldr	r0, [pc, #236]	@ (800a220 <tcp_oos_insert_segment+0x108>)
 800a132:	f005 fdf1 	bl	800fd18 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	899b      	ldrh	r3, [r3, #12]
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	4618      	mov	r0, r3
 800a140:	f7fb fc0c 	bl	800595c <lwip_htons>
 800a144:	4603      	mov	r3, r0
 800a146:	b2db      	uxtb	r3, r3
 800a148:	f003 0301 	and.w	r3, r3, #1
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d028      	beq.n	800a1a2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800a150:	6838      	ldr	r0, [r7, #0]
 800a152:	f7fe fa63 	bl	800861c <tcp_segs_free>
    next = NULL;
 800a156:	2300      	movs	r3, #0
 800a158:	603b      	str	r3, [r7, #0]
 800a15a:	e056      	b.n	800a20a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	899b      	ldrh	r3, [r3, #12]
 800a162:	b29b      	uxth	r3, r3
 800a164:	4618      	mov	r0, r3
 800a166:	f7fb fbf9 	bl	800595c <lwip_htons>
 800a16a:	4603      	mov	r3, r0
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	f003 0301 	and.w	r3, r3, #1
 800a172:	2b00      	cmp	r3, #0
 800a174:	d00d      	beq.n	800a192 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	899b      	ldrh	r3, [r3, #12]
 800a17c:	b29c      	uxth	r4, r3
 800a17e:	2001      	movs	r0, #1
 800a180:	f7fb fbec 	bl	800595c <lwip_htons>
 800a184:	4603      	mov	r3, r0
 800a186:	461a      	mov	r2, r3
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	4322      	orrs	r2, r4
 800a18e:	b292      	uxth	r2, r2
 800a190:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f7fe fa52 	bl	8008646 <tcp_seg_free>
    while (next &&
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d00e      	beq.n	800a1c6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	891b      	ldrh	r3, [r3, #8]
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	4b1d      	ldr	r3, [pc, #116]	@ (800a224 <tcp_oos_insert_segment+0x10c>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	441a      	add	r2, r3
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	68db      	ldr	r3, [r3, #12]
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	6839      	ldr	r1, [r7, #0]
 800a1bc:	8909      	ldrh	r1, [r1, #8]
 800a1be:	440b      	add	r3, r1
 800a1c0:	1ad3      	subs	r3, r2, r3
    while (next &&
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	daca      	bge.n	800a15c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d01e      	beq.n	800a20a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	891b      	ldrh	r3, [r3, #8]
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	4b14      	ldr	r3, [pc, #80]	@ (800a224 <tcp_oos_insert_segment+0x10c>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	441a      	add	r2, r3
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	1ad3      	subs	r3, r2, r3
    if (next &&
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	dd12      	ble.n	800a20a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	b29a      	uxth	r2, r3
 800a1ec:	4b0d      	ldr	r3, [pc, #52]	@ (800a224 <tcp_oos_insert_segment+0x10c>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	1ad3      	subs	r3, r2, r3
 800a1f4:	b29a      	uxth	r2, r3
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	685a      	ldr	r2, [r3, #4]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	891b      	ldrh	r3, [r3, #8]
 800a202:	4619      	mov	r1, r3
 800a204:	4610      	mov	r0, r2
 800a206:	f7fc fd81 	bl	8006d0c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	683a      	ldr	r2, [r7, #0]
 800a20e:	601a      	str	r2, [r3, #0]
}
 800a210:	bf00      	nop
 800a212:	3714      	adds	r7, #20
 800a214:	46bd      	mov	sp, r7
 800a216:	bd90      	pop	{r4, r7, pc}
 800a218:	08011df8 	.word	0x08011df8
 800a21c:	080120b8 	.word	0x080120b8
 800a220:	08011e44 	.word	0x08011e44
 800a224:	20008808 	.word	0x20008808

0800a228 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800a228:	b5b0      	push	{r4, r5, r7, lr}
 800a22a:	b086      	sub	sp, #24
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	60b9      	str	r1, [r7, #8]
 800a232:	607a      	str	r2, [r7, #4]
 800a234:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800a236:	e03e      	b.n	800a2b6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	4618      	mov	r0, r3
 800a248:	f7fc ff6e 	bl	8007128 <pbuf_clen>
 800a24c:	4603      	mov	r3, r0
 800a24e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a256:	8a7a      	ldrh	r2, [r7, #18]
 800a258:	429a      	cmp	r2, r3
 800a25a:	d906      	bls.n	800a26a <tcp_free_acked_segments+0x42>
 800a25c:	4b2a      	ldr	r3, [pc, #168]	@ (800a308 <tcp_free_acked_segments+0xe0>)
 800a25e:	f240 4257 	movw	r2, #1111	@ 0x457
 800a262:	492a      	ldr	r1, [pc, #168]	@ (800a30c <tcp_free_acked_segments+0xe4>)
 800a264:	482a      	ldr	r0, [pc, #168]	@ (800a310 <tcp_free_acked_segments+0xe8>)
 800a266:	f005 fd57 	bl	800fd18 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800a270:	8a7b      	ldrh	r3, [r7, #18]
 800a272:	1ad3      	subs	r3, r2, r3
 800a274:	b29a      	uxth	r2, r3
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	891a      	ldrh	r2, [r3, #8]
 800a280:	4b24      	ldr	r3, [pc, #144]	@ (800a314 <tcp_free_acked_segments+0xec>)
 800a282:	881b      	ldrh	r3, [r3, #0]
 800a284:	4413      	add	r3, r2
 800a286:	b29a      	uxth	r2, r3
 800a288:	4b22      	ldr	r3, [pc, #136]	@ (800a314 <tcp_free_acked_segments+0xec>)
 800a28a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800a28c:	6978      	ldr	r0, [r7, #20]
 800a28e:	f7fe f9da 	bl	8008646 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d00c      	beq.n	800a2b6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d109      	bne.n	800a2b6 <tcp_free_acked_segments+0x8e>
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d106      	bne.n	800a2b6 <tcp_free_acked_segments+0x8e>
 800a2a8:	4b17      	ldr	r3, [pc, #92]	@ (800a308 <tcp_free_acked_segments+0xe0>)
 800a2aa:	f240 4261 	movw	r2, #1121	@ 0x461
 800a2ae:	491a      	ldr	r1, [pc, #104]	@ (800a318 <tcp_free_acked_segments+0xf0>)
 800a2b0:	4817      	ldr	r0, [pc, #92]	@ (800a310 <tcp_free_acked_segments+0xe8>)
 800a2b2:	f005 fd31 	bl	800fd18 <iprintf>
  while (seg_list != NULL &&
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d020      	beq.n	800a2fe <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	68db      	ldr	r3, [r3, #12]
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7fb fb5f 	bl	8005986 <lwip_htonl>
 800a2c8:	4604      	mov	r4, r0
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	891b      	ldrh	r3, [r3, #8]
 800a2ce:	461d      	mov	r5, r3
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	68db      	ldr	r3, [r3, #12]
 800a2d4:	899b      	ldrh	r3, [r3, #12]
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7fb fb3f 	bl	800595c <lwip_htons>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	f003 0303 	and.w	r3, r3, #3
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d001      	beq.n	800a2ee <tcp_free_acked_segments+0xc6>
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e000      	b.n	800a2f0 <tcp_free_acked_segments+0xc8>
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	442b      	add	r3, r5
 800a2f2:	18e2      	adds	r2, r4, r3
 800a2f4:	4b09      	ldr	r3, [pc, #36]	@ (800a31c <tcp_free_acked_segments+0xf4>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	dd9c      	ble.n	800a238 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800a2fe:	68bb      	ldr	r3, [r7, #8]
}
 800a300:	4618      	mov	r0, r3
 800a302:	3718      	adds	r7, #24
 800a304:	46bd      	mov	sp, r7
 800a306:	bdb0      	pop	{r4, r5, r7, pc}
 800a308:	08011df8 	.word	0x08011df8
 800a30c:	080120e0 	.word	0x080120e0
 800a310:	08011e44 	.word	0x08011e44
 800a314:	20008810 	.word	0x20008810
 800a318:	08012108 	.word	0x08012108
 800a31c:	2000880c 	.word	0x2000880c

0800a320 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800a320:	b5b0      	push	{r4, r5, r7, lr}
 800a322:	b094      	sub	sp, #80	@ 0x50
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800a328:	2300      	movs	r3, #0
 800a32a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d106      	bne.n	800a340 <tcp_receive+0x20>
 800a332:	4b91      	ldr	r3, [pc, #580]	@ (800a578 <tcp_receive+0x258>)
 800a334:	f240 427b 	movw	r2, #1147	@ 0x47b
 800a338:	4990      	ldr	r1, [pc, #576]	@ (800a57c <tcp_receive+0x25c>)
 800a33a:	4891      	ldr	r0, [pc, #580]	@ (800a580 <tcp_receive+0x260>)
 800a33c:	f005 fcec 	bl	800fd18 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	7d1b      	ldrb	r3, [r3, #20]
 800a344:	2b03      	cmp	r3, #3
 800a346:	d806      	bhi.n	800a356 <tcp_receive+0x36>
 800a348:	4b8b      	ldr	r3, [pc, #556]	@ (800a578 <tcp_receive+0x258>)
 800a34a:	f240 427c 	movw	r2, #1148	@ 0x47c
 800a34e:	498d      	ldr	r1, [pc, #564]	@ (800a584 <tcp_receive+0x264>)
 800a350:	488b      	ldr	r0, [pc, #556]	@ (800a580 <tcp_receive+0x260>)
 800a352:	f005 fce1 	bl	800fd18 <iprintf>

  if (flags & TCP_ACK) {
 800a356:	4b8c      	ldr	r3, [pc, #560]	@ (800a588 <tcp_receive+0x268>)
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	f003 0310 	and.w	r3, r3, #16
 800a35e:	2b00      	cmp	r3, #0
 800a360:	f000 8264 	beq.w	800a82c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a36a:	461a      	mov	r2, r3
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a370:	4413      	add	r3, r2
 800a372:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a378:	4b84      	ldr	r3, [pc, #528]	@ (800a58c <tcp_receive+0x26c>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	1ad3      	subs	r3, r2, r3
 800a37e:	2b00      	cmp	r3, #0
 800a380:	db1b      	blt.n	800a3ba <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a386:	4b81      	ldr	r3, [pc, #516]	@ (800a58c <tcp_receive+0x26c>)
 800a388:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d106      	bne.n	800a39c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a392:	4b7f      	ldr	r3, [pc, #508]	@ (800a590 <tcp_receive+0x270>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	1ad3      	subs	r3, r2, r3
 800a398:	2b00      	cmp	r3, #0
 800a39a:	db0e      	blt.n	800a3ba <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a3a0:	4b7b      	ldr	r3, [pc, #492]	@ (800a590 <tcp_receive+0x270>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d125      	bne.n	800a3f4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a3a8:	4b7a      	ldr	r3, [pc, #488]	@ (800a594 <tcp_receive+0x274>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	89db      	ldrh	r3, [r3, #14]
 800a3ae:	b29a      	uxth	r2, r3
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d91c      	bls.n	800a3f4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a3ba:	4b76      	ldr	r3, [pc, #472]	@ (800a594 <tcp_receive+0x274>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	89db      	ldrh	r3, [r3, #14]
 800a3c0:	b29a      	uxth	r2, r3
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d205      	bcs.n	800a3e4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800a3e4:	4b69      	ldr	r3, [pc, #420]	@ (800a58c <tcp_receive+0x26c>)
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800a3ec:	4b68      	ldr	r3, [pc, #416]	@ (800a590 <tcp_receive+0x270>)
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a3f4:	4b66      	ldr	r3, [pc, #408]	@ (800a590 <tcp_receive+0x270>)
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3fc:	1ad3      	subs	r3, r2, r3
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	dc58      	bgt.n	800a4b4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800a402:	4b65      	ldr	r3, [pc, #404]	@ (800a598 <tcp_receive+0x278>)
 800a404:	881b      	ldrh	r3, [r3, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d14b      	bne.n	800a4a2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800a414:	4413      	add	r3, r2
 800a416:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a418:	429a      	cmp	r2, r3
 800a41a:	d142      	bne.n	800a4a2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800a422:	2b00      	cmp	r3, #0
 800a424:	db3d      	blt.n	800a4a2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a42a:	4b59      	ldr	r3, [pc, #356]	@ (800a590 <tcp_receive+0x270>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	429a      	cmp	r2, r3
 800a430:	d137      	bne.n	800a4a2 <tcp_receive+0x182>
              found_dupack = 1;
 800a432:	2301      	movs	r3, #1
 800a434:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a43c:	2bff      	cmp	r3, #255	@ 0xff
 800a43e:	d007      	beq.n	800a450 <tcp_receive+0x130>
                ++pcb->dupacks;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a446:	3301      	adds	r3, #1
 800a448:	b2da      	uxtb	r2, r3
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a456:	2b03      	cmp	r3, #3
 800a458:	d91b      	bls.n	800a492 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a464:	4413      	add	r3, r2
 800a466:	b29a      	uxth	r2, r3
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a46e:	429a      	cmp	r2, r3
 800a470:	d30a      	bcc.n	800a488 <tcp_receive+0x168>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a47c:	4413      	add	r3, r2
 800a47e:	b29a      	uxth	r2, r3
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800a486:	e004      	b.n	800a492 <tcp_receive+0x172>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a48e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a498:	2b02      	cmp	r3, #2
 800a49a:	d902      	bls.n	800a4a2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f001 fee7 	bl	800c270 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800a4a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	f040 8161 	bne.w	800a76c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a4b2:	e15b      	b.n	800a76c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a4b4:	4b36      	ldr	r3, [pc, #216]	@ (800a590 <tcp_receive+0x270>)
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4bc:	1ad3      	subs	r3, r2, r3
 800a4be:	3b01      	subs	r3, #1
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	f2c0 814e 	blt.w	800a762 <tcp_receive+0x442>
 800a4c6:	4b32      	ldr	r3, [pc, #200]	@ (800a590 <tcp_receive+0x270>)
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4ce:	1ad3      	subs	r3, r2, r3
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	f300 8146 	bgt.w	800a762 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	8b5b      	ldrh	r3, [r3, #26]
 800a4da:	f003 0304 	and.w	r3, r3, #4
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d010      	beq.n	800a504 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	8b5b      	ldrh	r3, [r3, #26]
 800a4e6:	f023 0304 	bic.w	r3, r3, #4
 800a4ea:	b29a      	uxth	r2, r3
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2200      	movs	r2, #0
 800a500:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2200      	movs	r2, #0
 800a508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800a512:	10db      	asrs	r3, r3, #3
 800a514:	b21b      	sxth	r3, r3
 800a516:	b29a      	uxth	r2, r3
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800a51e:	b29b      	uxth	r3, r3
 800a520:	4413      	add	r3, r2
 800a522:	b29b      	uxth	r3, r3
 800a524:	b21a      	sxth	r2, r3
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a52c:	4b18      	ldr	r3, [pc, #96]	@ (800a590 <tcp_receive+0x270>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	b29a      	uxth	r2, r3
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a536:	b29b      	uxth	r3, r3
 800a538:	1ad3      	subs	r3, r2, r3
 800a53a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2200      	movs	r2, #0
 800a540:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800a544:	4b12      	ldr	r3, [pc, #72]	@ (800a590 <tcp_receive+0x270>)
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	7d1b      	ldrb	r3, [r3, #20]
 800a550:	2b03      	cmp	r3, #3
 800a552:	f240 8097 	bls.w	800a684 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800a562:	429a      	cmp	r2, r3
 800a564:	d245      	bcs.n	800a5f2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	8b5b      	ldrh	r3, [r3, #26]
 800a56a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d014      	beq.n	800a59c <tcp_receive+0x27c>
 800a572:	2301      	movs	r3, #1
 800a574:	e013      	b.n	800a59e <tcp_receive+0x27e>
 800a576:	bf00      	nop
 800a578:	08011df8 	.word	0x08011df8
 800a57c:	08012128 	.word	0x08012128
 800a580:	08011e44 	.word	0x08011e44
 800a584:	08012144 	.word	0x08012144
 800a588:	20008814 	.word	0x20008814
 800a58c:	20008808 	.word	0x20008808
 800a590:	2000880c 	.word	0x2000880c
 800a594:	200087f8 	.word	0x200087f8
 800a598:	20008812 	.word	0x20008812
 800a59c:	2302      	movs	r3, #2
 800a59e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a5a2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800a5a6:	b29a      	uxth	r2, r3
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a5ac:	fb12 f303 	smulbb	r3, r2, r3
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	bf28      	it	cs
 800a5b8:	4613      	movcs	r3, r2
 800a5ba:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a5c2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a5c4:	4413      	add	r3, r2
 800a5c6:	b29a      	uxth	r2, r3
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d309      	bcc.n	800a5e6 <tcp_receive+0x2c6>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a5d8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a5da:	4413      	add	r3, r2
 800a5dc:	b29a      	uxth	r2, r3
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800a5e4:	e04e      	b.n	800a684 <tcp_receive+0x364>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a5ec:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800a5f0:	e048      	b.n	800a684 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800a5f8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a5fa:	4413      	add	r3, r2
 800a5fc:	b29a      	uxth	r2, r3
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a604:	429a      	cmp	r2, r3
 800a606:	d309      	bcc.n	800a61c <tcp_receive+0x2fc>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800a60e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a610:	4413      	add	r3, r2
 800a612:	b29a      	uxth	r2, r3
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a61a:	e004      	b.n	800a626 <tcp_receive+0x306>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a622:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a632:	429a      	cmp	r2, r3
 800a634:	d326      	bcc.n	800a684 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a642:	1ad3      	subs	r3, r2, r3
 800a644:	b29a      	uxth	r2, r3
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a656:	4413      	add	r3, r2
 800a658:	b29a      	uxth	r2, r3
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a660:	429a      	cmp	r2, r3
 800a662:	d30a      	bcc.n	800a67a <tcp_receive+0x35a>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a66e:	4413      	add	r3, r2
 800a670:	b29a      	uxth	r2, r3
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800a678:	e004      	b.n	800a684 <tcp_receive+0x364>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a680:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a68c:	4a98      	ldr	r2, [pc, #608]	@ (800a8f0 <tcp_receive+0x5d0>)
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f7ff fdca 	bl	800a228 <tcp_free_acked_segments>
 800a694:	4602      	mov	r2, r0
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6a2:	4a94      	ldr	r2, [pc, #592]	@ (800a8f4 <tcp_receive+0x5d4>)
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f7ff fdbf 	bl	800a228 <tcp_free_acked_segments>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d104      	bne.n	800a6c2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a6be:	861a      	strh	r2, [r3, #48]	@ 0x30
 800a6c0:	e002      	b.n	800a6c8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d103      	bne.n	800a6de <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800a6e4:	4b84      	ldr	r3, [pc, #528]	@ (800a8f8 <tcp_receive+0x5d8>)
 800a6e6:	881b      	ldrh	r3, [r3, #0]
 800a6e8:	4413      	add	r3, r2
 800a6ea:	b29a      	uxth	r2, r3
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	8b5b      	ldrh	r3, [r3, #26]
 800a6f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d035      	beq.n	800a76a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a702:	2b00      	cmp	r3, #0
 800a704:	d118      	bne.n	800a738 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d00c      	beq.n	800a728 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a716:	68db      	ldr	r3, [r3, #12]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	4618      	mov	r0, r3
 800a71c:	f7fb f933 	bl	8005986 <lwip_htonl>
 800a720:	4603      	mov	r3, r0
 800a722:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800a724:	2b00      	cmp	r3, #0
 800a726:	dc20      	bgt.n	800a76a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	8b5b      	ldrh	r3, [r3, #26]
 800a72c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a730:	b29a      	uxth	r2, r3
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a736:	e018      	b.n	800a76a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a740:	68db      	ldr	r3, [r3, #12]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	4618      	mov	r0, r3
 800a746:	f7fb f91e 	bl	8005986 <lwip_htonl>
 800a74a:	4603      	mov	r3, r0
 800a74c:	1ae3      	subs	r3, r4, r3
 800a74e:	2b00      	cmp	r3, #0
 800a750:	dc0b      	bgt.n	800a76a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	8b5b      	ldrh	r3, [r3, #26]
 800a756:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a75a:	b29a      	uxth	r2, r3
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a760:	e003      	b.n	800a76a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f001 ff70 	bl	800c648 <tcp_send_empty_ack>
 800a768:	e000      	b.n	800a76c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a76a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a770:	2b00      	cmp	r3, #0
 800a772:	d05b      	beq.n	800a82c <tcp_receive+0x50c>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a778:	4b60      	ldr	r3, [pc, #384]	@ (800a8fc <tcp_receive+0x5dc>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	1ad3      	subs	r3, r2, r3
 800a77e:	2b00      	cmp	r3, #0
 800a780:	da54      	bge.n	800a82c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a782:	4b5f      	ldr	r3, [pc, #380]	@ (800a900 <tcp_receive+0x5e0>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	b29a      	uxth	r2, r3
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	1ad3      	subs	r3, r2, r3
 800a790:	b29b      	uxth	r3, r3
 800a792:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800a796:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800a7a0:	10db      	asrs	r3, r3, #3
 800a7a2:	b21b      	sxth	r3, r3
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	1ad3      	subs	r3, r2, r3
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800a7b4:	b29a      	uxth	r2, r3
 800a7b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a7ba:	4413      	add	r3, r2
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	b21a      	sxth	r2, r3
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800a7c4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	da05      	bge.n	800a7d8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800a7cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a7d0:	425b      	negs	r3, r3
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800a7d8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800a7e2:	109b      	asrs	r3, r3, #2
 800a7e4:	b21b      	sxth	r3, r3
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	1ad3      	subs	r3, r2, r3
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800a7f6:	b29a      	uxth	r2, r3
 800a7f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a7fc:	4413      	add	r3, r2
 800a7fe:	b29b      	uxth	r3, r3
 800a800:	b21a      	sxth	r2, r3
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800a80c:	10db      	asrs	r3, r3, #3
 800a80e:	b21b      	sxth	r3, r3
 800a810:	b29a      	uxth	r2, r3
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800a818:	b29b      	uxth	r3, r3
 800a81a:	4413      	add	r3, r2
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	b21a      	sxth	r2, r3
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a82c:	4b35      	ldr	r3, [pc, #212]	@ (800a904 <tcp_receive+0x5e4>)
 800a82e:	881b      	ldrh	r3, [r3, #0]
 800a830:	2b00      	cmp	r3, #0
 800a832:	f000 84df 	beq.w	800b1f4 <tcp_receive+0xed4>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	7d1b      	ldrb	r3, [r3, #20]
 800a83a:	2b06      	cmp	r3, #6
 800a83c:	f200 84da 	bhi.w	800b1f4 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a844:	4b30      	ldr	r3, [pc, #192]	@ (800a908 <tcp_receive+0x5e8>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	1ad3      	subs	r3, r2, r3
 800a84a:	3b01      	subs	r3, #1
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	f2c0 808f 	blt.w	800a970 <tcp_receive+0x650>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a856:	4b2b      	ldr	r3, [pc, #172]	@ (800a904 <tcp_receive+0x5e4>)
 800a858:	881b      	ldrh	r3, [r3, #0]
 800a85a:	4619      	mov	r1, r3
 800a85c:	4b2a      	ldr	r3, [pc, #168]	@ (800a908 <tcp_receive+0x5e8>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	440b      	add	r3, r1
 800a862:	1ad3      	subs	r3, r2, r3
 800a864:	3301      	adds	r3, #1
 800a866:	2b00      	cmp	r3, #0
 800a868:	f300 8082 	bgt.w	800a970 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a86c:	4b27      	ldr	r3, [pc, #156]	@ (800a90c <tcp_receive+0x5ec>)
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a876:	4b24      	ldr	r3, [pc, #144]	@ (800a908 <tcp_receive+0x5e8>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	1ad3      	subs	r3, r2, r3
 800a87c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a87e:	4b23      	ldr	r3, [pc, #140]	@ (800a90c <tcp_receive+0x5ec>)
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d106      	bne.n	800a894 <tcp_receive+0x574>
 800a886:	4b22      	ldr	r3, [pc, #136]	@ (800a910 <tcp_receive+0x5f0>)
 800a888:	f240 5294 	movw	r2, #1428	@ 0x594
 800a88c:	4921      	ldr	r1, [pc, #132]	@ (800a914 <tcp_receive+0x5f4>)
 800a88e:	4822      	ldr	r0, [pc, #136]	@ (800a918 <tcp_receive+0x5f8>)
 800a890:	f005 fa42 	bl	800fd18 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a896:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d906      	bls.n	800a8ac <tcp_receive+0x58c>
 800a89e:	4b1c      	ldr	r3, [pc, #112]	@ (800a910 <tcp_receive+0x5f0>)
 800a8a0:	f240 5295 	movw	r2, #1429	@ 0x595
 800a8a4:	491d      	ldr	r1, [pc, #116]	@ (800a91c <tcp_receive+0x5fc>)
 800a8a6:	481c      	ldr	r0, [pc, #112]	@ (800a918 <tcp_receive+0x5f8>)
 800a8a8:	f005 fa36 	bl	800fd18 <iprintf>
      off = (u16_t)off32;
 800a8ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ae:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a8b2:	4b16      	ldr	r3, [pc, #88]	@ (800a90c <tcp_receive+0x5ec>)
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	891b      	ldrh	r3, [r3, #8]
 800a8b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d906      	bls.n	800a8ce <tcp_receive+0x5ae>
 800a8c0:	4b13      	ldr	r3, [pc, #76]	@ (800a910 <tcp_receive+0x5f0>)
 800a8c2:	f240 5297 	movw	r2, #1431	@ 0x597
 800a8c6:	4916      	ldr	r1, [pc, #88]	@ (800a920 <tcp_receive+0x600>)
 800a8c8:	4813      	ldr	r0, [pc, #76]	@ (800a918 <tcp_receive+0x5f8>)
 800a8ca:	f005 fa25 	bl	800fd18 <iprintf>
      inseg.len -= off;
 800a8ce:	4b0f      	ldr	r3, [pc, #60]	@ (800a90c <tcp_receive+0x5ec>)
 800a8d0:	891a      	ldrh	r2, [r3, #8]
 800a8d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a8d6:	1ad3      	subs	r3, r2, r3
 800a8d8:	b29a      	uxth	r2, r3
 800a8da:	4b0c      	ldr	r3, [pc, #48]	@ (800a90c <tcp_receive+0x5ec>)
 800a8dc:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a8de:	4b0b      	ldr	r3, [pc, #44]	@ (800a90c <tcp_receive+0x5ec>)
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	891a      	ldrh	r2, [r3, #8]
 800a8e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a8e8:	1ad3      	subs	r3, r2, r3
 800a8ea:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800a8ec:	e02a      	b.n	800a944 <tcp_receive+0x624>
 800a8ee:	bf00      	nop
 800a8f0:	08012160 	.word	0x08012160
 800a8f4:	08012168 	.word	0x08012168
 800a8f8:	20008810 	.word	0x20008810
 800a8fc:	2000880c 	.word	0x2000880c
 800a900:	200087d0 	.word	0x200087d0
 800a904:	20008812 	.word	0x20008812
 800a908:	20008808 	.word	0x20008808
 800a90c:	200087e8 	.word	0x200087e8
 800a910:	08011df8 	.word	0x08011df8
 800a914:	08012170 	.word	0x08012170
 800a918:	08011e44 	.word	0x08011e44
 800a91c:	08012180 	.word	0x08012180
 800a920:	08012190 	.word	0x08012190
        off -= p->len;
 800a924:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a926:	895b      	ldrh	r3, [r3, #10]
 800a928:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a92c:	1ad3      	subs	r3, r2, r3
 800a92e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a932:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a934:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800a936:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a938:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a93a:	2200      	movs	r2, #0
 800a93c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a93e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800a944:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a946:	895b      	ldrh	r3, [r3, #10]
 800a948:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d8e9      	bhi.n	800a924 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a950:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a954:	4619      	mov	r1, r3
 800a956:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800a958:	f7fc fad8 	bl	8006f0c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a960:	4a90      	ldr	r2, [pc, #576]	@ (800aba4 <tcp_receive+0x884>)
 800a962:	6013      	str	r3, [r2, #0]
 800a964:	4b90      	ldr	r3, [pc, #576]	@ (800aba8 <tcp_receive+0x888>)
 800a966:	68db      	ldr	r3, [r3, #12]
 800a968:	4a8e      	ldr	r2, [pc, #568]	@ (800aba4 <tcp_receive+0x884>)
 800a96a:	6812      	ldr	r2, [r2, #0]
 800a96c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a96e:	e00d      	b.n	800a98c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a970:	4b8c      	ldr	r3, [pc, #560]	@ (800aba4 <tcp_receive+0x884>)
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a978:	1ad3      	subs	r3, r2, r3
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	da06      	bge.n	800a98c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	8b5b      	ldrh	r3, [r3, #26]
 800a982:	f043 0302 	orr.w	r3, r3, #2
 800a986:	b29a      	uxth	r2, r3
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a98c:	4b85      	ldr	r3, [pc, #532]	@ (800aba4 <tcp_receive+0x884>)
 800a98e:	681a      	ldr	r2, [r3, #0]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a994:	1ad3      	subs	r3, r2, r3
 800a996:	2b00      	cmp	r3, #0
 800a998:	f2c0 8427 	blt.w	800b1ea <tcp_receive+0xeca>
 800a99c:	4b81      	ldr	r3, [pc, #516]	@ (800aba4 <tcp_receive+0x884>)
 800a99e:	681a      	ldr	r2, [r3, #0]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9a4:	6879      	ldr	r1, [r7, #4]
 800a9a6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a9a8:	440b      	add	r3, r1
 800a9aa:	1ad3      	subs	r3, r2, r3
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	f300 841b 	bgt.w	800b1ea <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a9b8:	4b7a      	ldr	r3, [pc, #488]	@ (800aba4 <tcp_receive+0x884>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	f040 8298 	bne.w	800aef2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a9c2:	4b79      	ldr	r3, [pc, #484]	@ (800aba8 <tcp_receive+0x888>)
 800a9c4:	891c      	ldrh	r4, [r3, #8]
 800a9c6:	4b78      	ldr	r3, [pc, #480]	@ (800aba8 <tcp_receive+0x888>)
 800a9c8:	68db      	ldr	r3, [r3, #12]
 800a9ca:	899b      	ldrh	r3, [r3, #12]
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f7fa ffc4 	bl	800595c <lwip_htons>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	f003 0303 	and.w	r3, r3, #3
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d001      	beq.n	800a9e4 <tcp_receive+0x6c4>
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e000      	b.n	800a9e6 <tcp_receive+0x6c6>
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	4423      	add	r3, r4
 800a9e8:	b29a      	uxth	r2, r3
 800a9ea:	4b70      	ldr	r3, [pc, #448]	@ (800abac <tcp_receive+0x88c>)
 800a9ec:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a9f2:	4b6e      	ldr	r3, [pc, #440]	@ (800abac <tcp_receive+0x88c>)
 800a9f4:	881b      	ldrh	r3, [r3, #0]
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d274      	bcs.n	800aae4 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a9fa:	4b6b      	ldr	r3, [pc, #428]	@ (800aba8 <tcp_receive+0x888>)
 800a9fc:	68db      	ldr	r3, [r3, #12]
 800a9fe:	899b      	ldrh	r3, [r3, #12]
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7fa ffaa 	bl	800595c <lwip_htons>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	f003 0301 	and.w	r3, r3, #1
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d01e      	beq.n	800aa52 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800aa14:	4b64      	ldr	r3, [pc, #400]	@ (800aba8 <tcp_receive+0x888>)
 800aa16:	68db      	ldr	r3, [r3, #12]
 800aa18:	899b      	ldrh	r3, [r3, #12]
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	b21b      	sxth	r3, r3
 800aa1e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800aa22:	b21c      	sxth	r4, r3
 800aa24:	4b60      	ldr	r3, [pc, #384]	@ (800aba8 <tcp_receive+0x888>)
 800aa26:	68db      	ldr	r3, [r3, #12]
 800aa28:	899b      	ldrh	r3, [r3, #12]
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7fa ff95 	bl	800595c <lwip_htons>
 800aa32:	4603      	mov	r3, r0
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f7fa ff8d 	bl	800595c <lwip_htons>
 800aa42:	4603      	mov	r3, r0
 800aa44:	b21b      	sxth	r3, r3
 800aa46:	4323      	orrs	r3, r4
 800aa48:	b21a      	sxth	r2, r3
 800aa4a:	4b57      	ldr	r3, [pc, #348]	@ (800aba8 <tcp_receive+0x888>)
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	b292      	uxth	r2, r2
 800aa50:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800aa56:	4b54      	ldr	r3, [pc, #336]	@ (800aba8 <tcp_receive+0x888>)
 800aa58:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800aa5a:	4b53      	ldr	r3, [pc, #332]	@ (800aba8 <tcp_receive+0x888>)
 800aa5c:	68db      	ldr	r3, [r3, #12]
 800aa5e:	899b      	ldrh	r3, [r3, #12]
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	4618      	mov	r0, r3
 800aa64:	f7fa ff7a 	bl	800595c <lwip_htons>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	f003 0302 	and.w	r3, r3, #2
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d005      	beq.n	800aa80 <tcp_receive+0x760>
            inseg.len -= 1;
 800aa74:	4b4c      	ldr	r3, [pc, #304]	@ (800aba8 <tcp_receive+0x888>)
 800aa76:	891b      	ldrh	r3, [r3, #8]
 800aa78:	3b01      	subs	r3, #1
 800aa7a:	b29a      	uxth	r2, r3
 800aa7c:	4b4a      	ldr	r3, [pc, #296]	@ (800aba8 <tcp_receive+0x888>)
 800aa7e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800aa80:	4b49      	ldr	r3, [pc, #292]	@ (800aba8 <tcp_receive+0x888>)
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	4a48      	ldr	r2, [pc, #288]	@ (800aba8 <tcp_receive+0x888>)
 800aa86:	8912      	ldrh	r2, [r2, #8]
 800aa88:	4611      	mov	r1, r2
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7fc f93e 	bl	8006d0c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800aa90:	4b45      	ldr	r3, [pc, #276]	@ (800aba8 <tcp_receive+0x888>)
 800aa92:	891c      	ldrh	r4, [r3, #8]
 800aa94:	4b44      	ldr	r3, [pc, #272]	@ (800aba8 <tcp_receive+0x888>)
 800aa96:	68db      	ldr	r3, [r3, #12]
 800aa98:	899b      	ldrh	r3, [r3, #12]
 800aa9a:	b29b      	uxth	r3, r3
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f7fa ff5d 	bl	800595c <lwip_htons>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	b2db      	uxtb	r3, r3
 800aaa6:	f003 0303 	and.w	r3, r3, #3
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d001      	beq.n	800aab2 <tcp_receive+0x792>
 800aaae:	2301      	movs	r3, #1
 800aab0:	e000      	b.n	800aab4 <tcp_receive+0x794>
 800aab2:	2300      	movs	r3, #0
 800aab4:	4423      	add	r3, r4
 800aab6:	b29a      	uxth	r2, r3
 800aab8:	4b3c      	ldr	r3, [pc, #240]	@ (800abac <tcp_receive+0x88c>)
 800aaba:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800aabc:	4b3b      	ldr	r3, [pc, #236]	@ (800abac <tcp_receive+0x88c>)
 800aabe:	881b      	ldrh	r3, [r3, #0]
 800aac0:	461a      	mov	r2, r3
 800aac2:	4b38      	ldr	r3, [pc, #224]	@ (800aba4 <tcp_receive+0x884>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	441a      	add	r2, r3
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aacc:	6879      	ldr	r1, [r7, #4]
 800aace:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800aad0:	440b      	add	r3, r1
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d006      	beq.n	800aae4 <tcp_receive+0x7c4>
 800aad6:	4b36      	ldr	r3, [pc, #216]	@ (800abb0 <tcp_receive+0x890>)
 800aad8:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800aadc:	4935      	ldr	r1, [pc, #212]	@ (800abb4 <tcp_receive+0x894>)
 800aade:	4836      	ldr	r0, [pc, #216]	@ (800abb8 <tcp_receive+0x898>)
 800aae0:	f005 f91a 	bl	800fd18 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	f000 80e6 	beq.w	800acba <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800aaee:	4b2e      	ldr	r3, [pc, #184]	@ (800aba8 <tcp_receive+0x888>)
 800aaf0:	68db      	ldr	r3, [r3, #12]
 800aaf2:	899b      	ldrh	r3, [r3, #12]
 800aaf4:	b29b      	uxth	r3, r3
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f7fa ff30 	bl	800595c <lwip_htons>
 800aafc:	4603      	mov	r3, r0
 800aafe:	b2db      	uxtb	r3, r3
 800ab00:	f003 0301 	and.w	r3, r3, #1
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d010      	beq.n	800ab2a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ab08:	e00a      	b.n	800ab20 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab0e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800ab1a:	68f8      	ldr	r0, [r7, #12]
 800ab1c:	f7fd fd93 	bl	8008646 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d1f0      	bne.n	800ab0a <tcp_receive+0x7ea>
 800ab28:	e0c7      	b.n	800acba <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800ab30:	e051      	b.n	800abd6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ab32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab34:	68db      	ldr	r3, [r3, #12]
 800ab36:	899b      	ldrh	r3, [r3, #12]
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f7fa ff0e 	bl	800595c <lwip_htons>
 800ab40:	4603      	mov	r3, r0
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	f003 0301 	and.w	r3, r3, #1
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d03c      	beq.n	800abc6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800ab4c:	4b16      	ldr	r3, [pc, #88]	@ (800aba8 <tcp_receive+0x888>)
 800ab4e:	68db      	ldr	r3, [r3, #12]
 800ab50:	899b      	ldrh	r3, [r3, #12]
 800ab52:	b29b      	uxth	r3, r3
 800ab54:	4618      	mov	r0, r3
 800ab56:	f7fa ff01 	bl	800595c <lwip_htons>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d12f      	bne.n	800abc6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800ab66:	4b10      	ldr	r3, [pc, #64]	@ (800aba8 <tcp_receive+0x888>)
 800ab68:	68db      	ldr	r3, [r3, #12]
 800ab6a:	899b      	ldrh	r3, [r3, #12]
 800ab6c:	b29c      	uxth	r4, r3
 800ab6e:	2001      	movs	r0, #1
 800ab70:	f7fa fef4 	bl	800595c <lwip_htons>
 800ab74:	4603      	mov	r3, r0
 800ab76:	461a      	mov	r2, r3
 800ab78:	4b0b      	ldr	r3, [pc, #44]	@ (800aba8 <tcp_receive+0x888>)
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	4322      	orrs	r2, r4
 800ab7e:	b292      	uxth	r2, r2
 800ab80:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800ab82:	4b09      	ldr	r3, [pc, #36]	@ (800aba8 <tcp_receive+0x888>)
 800ab84:	891c      	ldrh	r4, [r3, #8]
 800ab86:	4b08      	ldr	r3, [pc, #32]	@ (800aba8 <tcp_receive+0x888>)
 800ab88:	68db      	ldr	r3, [r3, #12]
 800ab8a:	899b      	ldrh	r3, [r3, #12]
 800ab8c:	b29b      	uxth	r3, r3
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f7fa fee4 	bl	800595c <lwip_htons>
 800ab94:	4603      	mov	r3, r0
 800ab96:	b2db      	uxtb	r3, r3
 800ab98:	f003 0303 	and.w	r3, r3, #3
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d00d      	beq.n	800abbc <tcp_receive+0x89c>
 800aba0:	2301      	movs	r3, #1
 800aba2:	e00c      	b.n	800abbe <tcp_receive+0x89e>
 800aba4:	20008808 	.word	0x20008808
 800aba8:	200087e8 	.word	0x200087e8
 800abac:	20008812 	.word	0x20008812
 800abb0:	08011df8 	.word	0x08011df8
 800abb4:	080121a0 	.word	0x080121a0
 800abb8:	08011e44 	.word	0x08011e44
 800abbc:	2300      	movs	r3, #0
 800abbe:	4423      	add	r3, r4
 800abc0:	b29a      	uxth	r2, r3
 800abc2:	4b98      	ldr	r3, [pc, #608]	@ (800ae24 <tcp_receive+0xb04>)
 800abc4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800abc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abc8:	613b      	str	r3, [r7, #16]
              next = next->next;
 800abca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800abd0:	6938      	ldr	r0, [r7, #16]
 800abd2:	f7fd fd38 	bl	8008646 <tcp_seg_free>
            while (next &&
 800abd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d00e      	beq.n	800abfa <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800abdc:	4b91      	ldr	r3, [pc, #580]	@ (800ae24 <tcp_receive+0xb04>)
 800abde:	881b      	ldrh	r3, [r3, #0]
 800abe0:	461a      	mov	r2, r3
 800abe2:	4b91      	ldr	r3, [pc, #580]	@ (800ae28 <tcp_receive+0xb08>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	441a      	add	r2, r3
 800abe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abea:	68db      	ldr	r3, [r3, #12]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800abf0:	8909      	ldrh	r1, [r1, #8]
 800abf2:	440b      	add	r3, r1
 800abf4:	1ad3      	subs	r3, r2, r3
            while (next &&
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	da9b      	bge.n	800ab32 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800abfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d059      	beq.n	800acb4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800ac00:	4b88      	ldr	r3, [pc, #544]	@ (800ae24 <tcp_receive+0xb04>)
 800ac02:	881b      	ldrh	r3, [r3, #0]
 800ac04:	461a      	mov	r2, r3
 800ac06:	4b88      	ldr	r3, [pc, #544]	@ (800ae28 <tcp_receive+0xb08>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	441a      	add	r2, r3
 800ac0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac0e:	68db      	ldr	r3, [r3, #12]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	dd4d      	ble.n	800acb4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ac18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac1a:	68db      	ldr	r3, [r3, #12]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	b29a      	uxth	r2, r3
 800ac20:	4b81      	ldr	r3, [pc, #516]	@ (800ae28 <tcp_receive+0xb08>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	1ad3      	subs	r3, r2, r3
 800ac28:	b29a      	uxth	r2, r3
 800ac2a:	4b80      	ldr	r3, [pc, #512]	@ (800ae2c <tcp_receive+0xb0c>)
 800ac2c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ac2e:	4b7f      	ldr	r3, [pc, #508]	@ (800ae2c <tcp_receive+0xb0c>)
 800ac30:	68db      	ldr	r3, [r3, #12]
 800ac32:	899b      	ldrh	r3, [r3, #12]
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7fa fe90 	bl	800595c <lwip_htons>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	f003 0302 	and.w	r3, r3, #2
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d005      	beq.n	800ac54 <tcp_receive+0x934>
                inseg.len -= 1;
 800ac48:	4b78      	ldr	r3, [pc, #480]	@ (800ae2c <tcp_receive+0xb0c>)
 800ac4a:	891b      	ldrh	r3, [r3, #8]
 800ac4c:	3b01      	subs	r3, #1
 800ac4e:	b29a      	uxth	r2, r3
 800ac50:	4b76      	ldr	r3, [pc, #472]	@ (800ae2c <tcp_receive+0xb0c>)
 800ac52:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ac54:	4b75      	ldr	r3, [pc, #468]	@ (800ae2c <tcp_receive+0xb0c>)
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	4a74      	ldr	r2, [pc, #464]	@ (800ae2c <tcp_receive+0xb0c>)
 800ac5a:	8912      	ldrh	r2, [r2, #8]
 800ac5c:	4611      	mov	r1, r2
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7fc f854 	bl	8006d0c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ac64:	4b71      	ldr	r3, [pc, #452]	@ (800ae2c <tcp_receive+0xb0c>)
 800ac66:	891c      	ldrh	r4, [r3, #8]
 800ac68:	4b70      	ldr	r3, [pc, #448]	@ (800ae2c <tcp_receive+0xb0c>)
 800ac6a:	68db      	ldr	r3, [r3, #12]
 800ac6c:	899b      	ldrh	r3, [r3, #12]
 800ac6e:	b29b      	uxth	r3, r3
 800ac70:	4618      	mov	r0, r3
 800ac72:	f7fa fe73 	bl	800595c <lwip_htons>
 800ac76:	4603      	mov	r3, r0
 800ac78:	b2db      	uxtb	r3, r3
 800ac7a:	f003 0303 	and.w	r3, r3, #3
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d001      	beq.n	800ac86 <tcp_receive+0x966>
 800ac82:	2301      	movs	r3, #1
 800ac84:	e000      	b.n	800ac88 <tcp_receive+0x968>
 800ac86:	2300      	movs	r3, #0
 800ac88:	4423      	add	r3, r4
 800ac8a:	b29a      	uxth	r2, r3
 800ac8c:	4b65      	ldr	r3, [pc, #404]	@ (800ae24 <tcp_receive+0xb04>)
 800ac8e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ac90:	4b64      	ldr	r3, [pc, #400]	@ (800ae24 <tcp_receive+0xb04>)
 800ac92:	881b      	ldrh	r3, [r3, #0]
 800ac94:	461a      	mov	r2, r3
 800ac96:	4b64      	ldr	r3, [pc, #400]	@ (800ae28 <tcp_receive+0xb08>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	441a      	add	r2, r3
 800ac9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac9e:	68db      	ldr	r3, [r3, #12]
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d006      	beq.n	800acb4 <tcp_receive+0x994>
 800aca6:	4b62      	ldr	r3, [pc, #392]	@ (800ae30 <tcp_receive+0xb10>)
 800aca8:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800acac:	4961      	ldr	r1, [pc, #388]	@ (800ae34 <tcp_receive+0xb14>)
 800acae:	4862      	ldr	r0, [pc, #392]	@ (800ae38 <tcp_receive+0xb18>)
 800acb0:	f005 f832 	bl	800fd18 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800acb8:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800acba:	4b5a      	ldr	r3, [pc, #360]	@ (800ae24 <tcp_receive+0xb04>)
 800acbc:	881b      	ldrh	r3, [r3, #0]
 800acbe:	461a      	mov	r2, r3
 800acc0:	4b59      	ldr	r3, [pc, #356]	@ (800ae28 <tcp_receive+0xb08>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	441a      	add	r2, r3
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800acce:	4b55      	ldr	r3, [pc, #340]	@ (800ae24 <tcp_receive+0xb04>)
 800acd0:	881b      	ldrh	r3, [r3, #0]
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d206      	bcs.n	800ace4 <tcp_receive+0x9c4>
 800acd6:	4b56      	ldr	r3, [pc, #344]	@ (800ae30 <tcp_receive+0xb10>)
 800acd8:	f240 6207 	movw	r2, #1543	@ 0x607
 800acdc:	4957      	ldr	r1, [pc, #348]	@ (800ae3c <tcp_receive+0xb1c>)
 800acde:	4856      	ldr	r0, [pc, #344]	@ (800ae38 <tcp_receive+0xb18>)
 800ace0:	f005 f81a 	bl	800fd18 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ace8:	4b4e      	ldr	r3, [pc, #312]	@ (800ae24 <tcp_receive+0xb04>)
 800acea:	881b      	ldrh	r3, [r3, #0]
 800acec:	1ad3      	subs	r3, r2, r3
 800acee:	b29a      	uxth	r2, r3
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f7fc ffc5 	bl	8007c84 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800acfa:	4b4c      	ldr	r3, [pc, #304]	@ (800ae2c <tcp_receive+0xb0c>)
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	891b      	ldrh	r3, [r3, #8]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d006      	beq.n	800ad12 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800ad04:	4b49      	ldr	r3, [pc, #292]	@ (800ae2c <tcp_receive+0xb0c>)
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	4a4d      	ldr	r2, [pc, #308]	@ (800ae40 <tcp_receive+0xb20>)
 800ad0a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800ad0c:	4b47      	ldr	r3, [pc, #284]	@ (800ae2c <tcp_receive+0xb0c>)
 800ad0e:	2200      	movs	r2, #0
 800ad10:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ad12:	4b46      	ldr	r3, [pc, #280]	@ (800ae2c <tcp_receive+0xb0c>)
 800ad14:	68db      	ldr	r3, [r3, #12]
 800ad16:	899b      	ldrh	r3, [r3, #12]
 800ad18:	b29b      	uxth	r3, r3
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f7fa fe1e 	bl	800595c <lwip_htons>
 800ad20:	4603      	mov	r3, r0
 800ad22:	b2db      	uxtb	r3, r3
 800ad24:	f003 0301 	and.w	r3, r3, #1
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	f000 80b8 	beq.w	800ae9e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800ad2e:	4b45      	ldr	r3, [pc, #276]	@ (800ae44 <tcp_receive+0xb24>)
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	f043 0320 	orr.w	r3, r3, #32
 800ad36:	b2da      	uxtb	r2, r3
 800ad38:	4b42      	ldr	r3, [pc, #264]	@ (800ae44 <tcp_receive+0xb24>)
 800ad3a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800ad3c:	e0af      	b.n	800ae9e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad42:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad48:	68db      	ldr	r3, [r3, #12]
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	4a36      	ldr	r2, [pc, #216]	@ (800ae28 <tcp_receive+0xb08>)
 800ad4e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	891b      	ldrh	r3, [r3, #8]
 800ad54:	461c      	mov	r4, r3
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	68db      	ldr	r3, [r3, #12]
 800ad5a:	899b      	ldrh	r3, [r3, #12]
 800ad5c:	b29b      	uxth	r3, r3
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7fa fdfc 	bl	800595c <lwip_htons>
 800ad64:	4603      	mov	r3, r0
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	f003 0303 	and.w	r3, r3, #3
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d001      	beq.n	800ad74 <tcp_receive+0xa54>
 800ad70:	2301      	movs	r3, #1
 800ad72:	e000      	b.n	800ad76 <tcp_receive+0xa56>
 800ad74:	2300      	movs	r3, #0
 800ad76:	191a      	adds	r2, r3, r4
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad7c:	441a      	add	r2, r3
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad86:	461c      	mov	r4, r3
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	891b      	ldrh	r3, [r3, #8]
 800ad8c:	461d      	mov	r5, r3
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	68db      	ldr	r3, [r3, #12]
 800ad92:	899b      	ldrh	r3, [r3, #12]
 800ad94:	b29b      	uxth	r3, r3
 800ad96:	4618      	mov	r0, r3
 800ad98:	f7fa fde0 	bl	800595c <lwip_htons>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	b2db      	uxtb	r3, r3
 800ada0:	f003 0303 	and.w	r3, r3, #3
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d001      	beq.n	800adac <tcp_receive+0xa8c>
 800ada8:	2301      	movs	r3, #1
 800adaa:	e000      	b.n	800adae <tcp_receive+0xa8e>
 800adac:	2300      	movs	r3, #0
 800adae:	442b      	add	r3, r5
 800adb0:	429c      	cmp	r4, r3
 800adb2:	d206      	bcs.n	800adc2 <tcp_receive+0xaa2>
 800adb4:	4b1e      	ldr	r3, [pc, #120]	@ (800ae30 <tcp_receive+0xb10>)
 800adb6:	f240 622b 	movw	r2, #1579	@ 0x62b
 800adba:	4923      	ldr	r1, [pc, #140]	@ (800ae48 <tcp_receive+0xb28>)
 800adbc:	481e      	ldr	r0, [pc, #120]	@ (800ae38 <tcp_receive+0xb18>)
 800adbe:	f004 ffab 	bl	800fd18 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	891b      	ldrh	r3, [r3, #8]
 800adc6:	461c      	mov	r4, r3
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	68db      	ldr	r3, [r3, #12]
 800adcc:	899b      	ldrh	r3, [r3, #12]
 800adce:	b29b      	uxth	r3, r3
 800add0:	4618      	mov	r0, r3
 800add2:	f7fa fdc3 	bl	800595c <lwip_htons>
 800add6:	4603      	mov	r3, r0
 800add8:	b2db      	uxtb	r3, r3
 800adda:	f003 0303 	and.w	r3, r3, #3
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d001      	beq.n	800ade6 <tcp_receive+0xac6>
 800ade2:	2301      	movs	r3, #1
 800ade4:	e000      	b.n	800ade8 <tcp_receive+0xac8>
 800ade6:	2300      	movs	r3, #0
 800ade8:	1919      	adds	r1, r3, r4
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800adee:	b28b      	uxth	r3, r1
 800adf0:	1ad3      	subs	r3, r2, r3
 800adf2:	b29a      	uxth	r2, r3
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f7fc ff43 	bl	8007c84 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	891b      	ldrh	r3, [r3, #8]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d028      	beq.n	800ae5a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800ae08:	4b0d      	ldr	r3, [pc, #52]	@ (800ae40 <tcp_receive+0xb20>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d01d      	beq.n	800ae4c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800ae10:	4b0b      	ldr	r3, [pc, #44]	@ (800ae40 <tcp_receive+0xb20>)
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	4619      	mov	r1, r3
 800ae1a:	4610      	mov	r0, r2
 800ae1c:	f7fc f9be 	bl	800719c <pbuf_cat>
 800ae20:	e018      	b.n	800ae54 <tcp_receive+0xb34>
 800ae22:	bf00      	nop
 800ae24:	20008812 	.word	0x20008812
 800ae28:	20008808 	.word	0x20008808
 800ae2c:	200087e8 	.word	0x200087e8
 800ae30:	08011df8 	.word	0x08011df8
 800ae34:	080121d8 	.word	0x080121d8
 800ae38:	08011e44 	.word	0x08011e44
 800ae3c:	08012214 	.word	0x08012214
 800ae40:	20008818 	.word	0x20008818
 800ae44:	20008815 	.word	0x20008815
 800ae48:	08012234 	.word	0x08012234
            } else {
              recv_data = cseg->p;
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	4a70      	ldr	r2, [pc, #448]	@ (800b014 <tcp_receive+0xcf4>)
 800ae52:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	2200      	movs	r2, #0
 800ae58:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	68db      	ldr	r3, [r3, #12]
 800ae5e:	899b      	ldrh	r3, [r3, #12]
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7fa fd7a 	bl	800595c <lwip_htons>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	b2db      	uxtb	r3, r3
 800ae6c:	f003 0301 	and.w	r3, r3, #1
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d00d      	beq.n	800ae90 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ae74:	4b68      	ldr	r3, [pc, #416]	@ (800b018 <tcp_receive+0xcf8>)
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	f043 0320 	orr.w	r3, r3, #32
 800ae7c:	b2da      	uxtb	r2, r3
 800ae7e:	4b66      	ldr	r3, [pc, #408]	@ (800b018 <tcp_receive+0xcf8>)
 800ae80:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	7d1b      	ldrb	r3, [r3, #20]
 800ae86:	2b04      	cmp	r3, #4
 800ae88:	d102      	bne.n	800ae90 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2207      	movs	r2, #7
 800ae8e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	681a      	ldr	r2, [r3, #0]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800ae98:	68b8      	ldr	r0, [r7, #8]
 800ae9a:	f7fd fbd4 	bl	8008646 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d008      	beq.n	800aeb8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aeaa:	68db      	ldr	r3, [r3, #12]
 800aeac:	685a      	ldr	r2, [r3, #4]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	f43f af43 	beq.w	800ad3e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	8b5b      	ldrh	r3, [r3, #26]
 800aebc:	f003 0301 	and.w	r3, r3, #1
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d00e      	beq.n	800aee2 <tcp_receive+0xbc2>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	8b5b      	ldrh	r3, [r3, #26]
 800aec8:	f023 0301 	bic.w	r3, r3, #1
 800aecc:	b29a      	uxth	r2, r3
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	835a      	strh	r2, [r3, #26]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	8b5b      	ldrh	r3, [r3, #26]
 800aed6:	f043 0302 	orr.w	r3, r3, #2
 800aeda:	b29a      	uxth	r2, r3
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800aee0:	e187      	b.n	800b1f2 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	8b5b      	ldrh	r3, [r3, #26]
 800aee6:	f043 0301 	orr.w	r3, r3, #1
 800aeea:	b29a      	uxth	r2, r3
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800aef0:	e17f      	b.n	800b1f2 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d106      	bne.n	800af08 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800aefa:	4848      	ldr	r0, [pc, #288]	@ (800b01c <tcp_receive+0xcfc>)
 800aefc:	f7fd fbbc 	bl	8008678 <tcp_seg_copy>
 800af00:	4602      	mov	r2, r0
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	675a      	str	r2, [r3, #116]	@ 0x74
 800af06:	e16c      	b.n	800b1e2 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800af08:	2300      	movs	r3, #0
 800af0a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af10:	63bb      	str	r3, [r7, #56]	@ 0x38
 800af12:	e156      	b.n	800b1c2 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800af14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af16:	68db      	ldr	r3, [r3, #12]
 800af18:	685a      	ldr	r2, [r3, #4]
 800af1a:	4b41      	ldr	r3, [pc, #260]	@ (800b020 <tcp_receive+0xd00>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	429a      	cmp	r2, r3
 800af20:	d11d      	bne.n	800af5e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800af22:	4b3e      	ldr	r3, [pc, #248]	@ (800b01c <tcp_receive+0xcfc>)
 800af24:	891a      	ldrh	r2, [r3, #8]
 800af26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af28:	891b      	ldrh	r3, [r3, #8]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	f240 814e 	bls.w	800b1cc <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800af30:	483a      	ldr	r0, [pc, #232]	@ (800b01c <tcp_receive+0xcfc>)
 800af32:	f7fd fba1 	bl	8008678 <tcp_seg_copy>
 800af36:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	f000 8148 	beq.w	800b1d0 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800af40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af42:	2b00      	cmp	r3, #0
 800af44:	d003      	beq.n	800af4e <tcp_receive+0xc2e>
                    prev->next = cseg;
 800af46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af48:	697a      	ldr	r2, [r7, #20]
 800af4a:	601a      	str	r2, [r3, #0]
 800af4c:	e002      	b.n	800af54 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	697a      	ldr	r2, [r7, #20]
 800af52:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800af54:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800af56:	6978      	ldr	r0, [r7, #20]
 800af58:	f7ff f8de 	bl	800a118 <tcp_oos_insert_segment>
                }
                break;
 800af5c:	e138      	b.n	800b1d0 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800af5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af60:	2b00      	cmp	r3, #0
 800af62:	d117      	bne.n	800af94 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800af64:	4b2e      	ldr	r3, [pc, #184]	@ (800b020 <tcp_receive+0xd00>)
 800af66:	681a      	ldr	r2, [r3, #0]
 800af68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af6a:	68db      	ldr	r3, [r3, #12]
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	1ad3      	subs	r3, r2, r3
 800af70:	2b00      	cmp	r3, #0
 800af72:	da57      	bge.n	800b024 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800af74:	4829      	ldr	r0, [pc, #164]	@ (800b01c <tcp_receive+0xcfc>)
 800af76:	f7fd fb7f 	bl	8008678 <tcp_seg_copy>
 800af7a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800af7c:	69bb      	ldr	r3, [r7, #24]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	f000 8128 	beq.w	800b1d4 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	69ba      	ldr	r2, [r7, #24]
 800af88:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800af8a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800af8c:	69b8      	ldr	r0, [r7, #24]
 800af8e:	f7ff f8c3 	bl	800a118 <tcp_oos_insert_segment>
                  }
                  break;
 800af92:	e11f      	b.n	800b1d4 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800af94:	4b22      	ldr	r3, [pc, #136]	@ (800b020 <tcp_receive+0xd00>)
 800af96:	681a      	ldr	r2, [r3, #0]
 800af98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af9a:	68db      	ldr	r3, [r3, #12]
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	1ad3      	subs	r3, r2, r3
 800afa0:	3b01      	subs	r3, #1
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	db3e      	blt.n	800b024 <tcp_receive+0xd04>
 800afa6:	4b1e      	ldr	r3, [pc, #120]	@ (800b020 <tcp_receive+0xd00>)
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afac:	68db      	ldr	r3, [r3, #12]
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	1ad3      	subs	r3, r2, r3
 800afb2:	3301      	adds	r3, #1
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	dc35      	bgt.n	800b024 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800afb8:	4818      	ldr	r0, [pc, #96]	@ (800b01c <tcp_receive+0xcfc>)
 800afba:	f7fd fb5d 	bl	8008678 <tcp_seg_copy>
 800afbe:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800afc0:	69fb      	ldr	r3, [r7, #28]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	f000 8108 	beq.w	800b1d8 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800afc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afca:	68db      	ldr	r3, [r3, #12]
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800afd0:	8912      	ldrh	r2, [r2, #8]
 800afd2:	441a      	add	r2, r3
 800afd4:	4b12      	ldr	r3, [pc, #72]	@ (800b020 <tcp_receive+0xd00>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	1ad3      	subs	r3, r2, r3
 800afda:	2b00      	cmp	r3, #0
 800afdc:	dd12      	ble.n	800b004 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800afde:	4b10      	ldr	r3, [pc, #64]	@ (800b020 <tcp_receive+0xd00>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	b29a      	uxth	r2, r3
 800afe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afe6:	68db      	ldr	r3, [r3, #12]
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	b29b      	uxth	r3, r3
 800afec:	1ad3      	subs	r3, r2, r3
 800afee:	b29a      	uxth	r2, r3
 800aff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aff2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800aff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aff6:	685a      	ldr	r2, [r3, #4]
 800aff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800affa:	891b      	ldrh	r3, [r3, #8]
 800affc:	4619      	mov	r1, r3
 800affe:	4610      	mov	r0, r2
 800b000:	f7fb fe84 	bl	8006d0c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800b004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b006:	69fa      	ldr	r2, [r7, #28]
 800b008:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800b00a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b00c:	69f8      	ldr	r0, [r7, #28]
 800b00e:	f7ff f883 	bl	800a118 <tcp_oos_insert_segment>
                  }
                  break;
 800b012:	e0e1      	b.n	800b1d8 <tcp_receive+0xeb8>
 800b014:	20008818 	.word	0x20008818
 800b018:	20008815 	.word	0x20008815
 800b01c:	200087e8 	.word	0x200087e8
 800b020:	20008808 	.word	0x20008808
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800b024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b026:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800b028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	f040 80c5 	bne.w	800b1bc <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800b032:	4b7f      	ldr	r3, [pc, #508]	@ (800b230 <tcp_receive+0xf10>)
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b038:	68db      	ldr	r3, [r3, #12]
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800b03e:	2b00      	cmp	r3, #0
 800b040:	f340 80bc 	ble.w	800b1bc <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b046:	68db      	ldr	r3, [r3, #12]
 800b048:	899b      	ldrh	r3, [r3, #12]
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	4618      	mov	r0, r3
 800b04e:	f7fa fc85 	bl	800595c <lwip_htons>
 800b052:	4603      	mov	r3, r0
 800b054:	b2db      	uxtb	r3, r3
 800b056:	f003 0301 	and.w	r3, r3, #1
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	f040 80be 	bne.w	800b1dc <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800b060:	4874      	ldr	r0, [pc, #464]	@ (800b234 <tcp_receive+0xf14>)
 800b062:	f7fd fb09 	bl	8008678 <tcp_seg_copy>
 800b066:	4602      	mov	r2, r0
 800b068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b06a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800b06c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	2b00      	cmp	r3, #0
 800b072:	f000 80b5 	beq.w	800b1e0 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800b076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b078:	68db      	ldr	r3, [r3, #12]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b07e:	8912      	ldrh	r2, [r2, #8]
 800b080:	441a      	add	r2, r3
 800b082:	4b6b      	ldr	r3, [pc, #428]	@ (800b230 <tcp_receive+0xf10>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	1ad3      	subs	r3, r2, r3
 800b088:	2b00      	cmp	r3, #0
 800b08a:	dd12      	ble.n	800b0b2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800b08c:	4b68      	ldr	r3, [pc, #416]	@ (800b230 <tcp_receive+0xf10>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	b29a      	uxth	r2, r3
 800b092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b094:	68db      	ldr	r3, [r3, #12]
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	b29b      	uxth	r3, r3
 800b09a:	1ad3      	subs	r3, r2, r3
 800b09c:	b29a      	uxth	r2, r3
 800b09e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0a0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800b0a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0a4:	685a      	ldr	r2, [r3, #4]
 800b0a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0a8:	891b      	ldrh	r3, [r3, #8]
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	4610      	mov	r0, r2
 800b0ae:	f7fb fe2d 	bl	8006d0c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800b0b2:	4b61      	ldr	r3, [pc, #388]	@ (800b238 <tcp_receive+0xf18>)
 800b0b4:	881b      	ldrh	r3, [r3, #0]
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	4b5d      	ldr	r3, [pc, #372]	@ (800b230 <tcp_receive+0xf10>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	441a      	add	r2, r3
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0c2:	6879      	ldr	r1, [r7, #4]
 800b0c4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b0c6:	440b      	add	r3, r1
 800b0c8:	1ad3      	subs	r3, r2, r3
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	f340 8088 	ble.w	800b1e0 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800b0d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	68db      	ldr	r3, [r3, #12]
 800b0d6:	899b      	ldrh	r3, [r3, #12]
 800b0d8:	b29b      	uxth	r3, r3
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f7fa fc3e 	bl	800595c <lwip_htons>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	b2db      	uxtb	r3, r3
 800b0e4:	f003 0301 	and.w	r3, r3, #1
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d021      	beq.n	800b130 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800b0ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	68db      	ldr	r3, [r3, #12]
 800b0f2:	899b      	ldrh	r3, [r3, #12]
 800b0f4:	b29b      	uxth	r3, r3
 800b0f6:	b21b      	sxth	r3, r3
 800b0f8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b0fc:	b21c      	sxth	r4, r3
 800b0fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	68db      	ldr	r3, [r3, #12]
 800b104:	899b      	ldrh	r3, [r3, #12]
 800b106:	b29b      	uxth	r3, r3
 800b108:	4618      	mov	r0, r3
 800b10a:	f7fa fc27 	bl	800595c <lwip_htons>
 800b10e:	4603      	mov	r3, r0
 800b110:	b2db      	uxtb	r3, r3
 800b112:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800b116:	b29b      	uxth	r3, r3
 800b118:	4618      	mov	r0, r3
 800b11a:	f7fa fc1f 	bl	800595c <lwip_htons>
 800b11e:	4603      	mov	r3, r0
 800b120:	b21b      	sxth	r3, r3
 800b122:	4323      	orrs	r3, r4
 800b124:	b21a      	sxth	r2, r3
 800b126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	b292      	uxth	r2, r2
 800b12e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b134:	b29a      	uxth	r2, r3
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b13a:	4413      	add	r3, r2
 800b13c:	b299      	uxth	r1, r3
 800b13e:	4b3c      	ldr	r3, [pc, #240]	@ (800b230 <tcp_receive+0xf10>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	b29a      	uxth	r2, r3
 800b144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	1a8a      	subs	r2, r1, r2
 800b14a:	b292      	uxth	r2, r2
 800b14c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800b14e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	685a      	ldr	r2, [r3, #4]
 800b154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	891b      	ldrh	r3, [r3, #8]
 800b15a:	4619      	mov	r1, r3
 800b15c:	4610      	mov	r0, r2
 800b15e:	f7fb fdd5 	bl	8006d0c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800b162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	891c      	ldrh	r4, [r3, #8]
 800b168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	68db      	ldr	r3, [r3, #12]
 800b16e:	899b      	ldrh	r3, [r3, #12]
 800b170:	b29b      	uxth	r3, r3
 800b172:	4618      	mov	r0, r3
 800b174:	f7fa fbf2 	bl	800595c <lwip_htons>
 800b178:	4603      	mov	r3, r0
 800b17a:	b2db      	uxtb	r3, r3
 800b17c:	f003 0303 	and.w	r3, r3, #3
 800b180:	2b00      	cmp	r3, #0
 800b182:	d001      	beq.n	800b188 <tcp_receive+0xe68>
 800b184:	2301      	movs	r3, #1
 800b186:	e000      	b.n	800b18a <tcp_receive+0xe6a>
 800b188:	2300      	movs	r3, #0
 800b18a:	4423      	add	r3, r4
 800b18c:	b29a      	uxth	r2, r3
 800b18e:	4b2a      	ldr	r3, [pc, #168]	@ (800b238 <tcp_receive+0xf18>)
 800b190:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b192:	4b29      	ldr	r3, [pc, #164]	@ (800b238 <tcp_receive+0xf18>)
 800b194:	881b      	ldrh	r3, [r3, #0]
 800b196:	461a      	mov	r2, r3
 800b198:	4b25      	ldr	r3, [pc, #148]	@ (800b230 <tcp_receive+0xf10>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	441a      	add	r2, r3
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1a2:	6879      	ldr	r1, [r7, #4]
 800b1a4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b1a6:	440b      	add	r3, r1
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d019      	beq.n	800b1e0 <tcp_receive+0xec0>
 800b1ac:	4b23      	ldr	r3, [pc, #140]	@ (800b23c <tcp_receive+0xf1c>)
 800b1ae:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800b1b2:	4923      	ldr	r1, [pc, #140]	@ (800b240 <tcp_receive+0xf20>)
 800b1b4:	4823      	ldr	r0, [pc, #140]	@ (800b244 <tcp_receive+0xf24>)
 800b1b6:	f004 fdaf 	bl	800fd18 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800b1ba:	e011      	b.n	800b1e0 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b1bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	f47f aea5 	bne.w	800af14 <tcp_receive+0xbf4>
 800b1ca:	e00a      	b.n	800b1e2 <tcp_receive+0xec2>
                break;
 800b1cc:	bf00      	nop
 800b1ce:	e008      	b.n	800b1e2 <tcp_receive+0xec2>
                break;
 800b1d0:	bf00      	nop
 800b1d2:	e006      	b.n	800b1e2 <tcp_receive+0xec2>
                  break;
 800b1d4:	bf00      	nop
 800b1d6:	e004      	b.n	800b1e2 <tcp_receive+0xec2>
                  break;
 800b1d8:	bf00      	nop
 800b1da:	e002      	b.n	800b1e2 <tcp_receive+0xec2>
                  break;
 800b1dc:	bf00      	nop
 800b1de:	e000      	b.n	800b1e2 <tcp_receive+0xec2>
                break;
 800b1e0:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f001 fa30 	bl	800c648 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800b1e8:	e003      	b.n	800b1f2 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f001 fa2c 	bl	800c648 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b1f0:	e01a      	b.n	800b228 <tcp_receive+0xf08>
 800b1f2:	e019      	b.n	800b228 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800b1f4:	4b0e      	ldr	r3, [pc, #56]	@ (800b230 <tcp_receive+0xf10>)
 800b1f6:	681a      	ldr	r2, [r3, #0]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1fc:	1ad3      	subs	r3, r2, r3
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	db0a      	blt.n	800b218 <tcp_receive+0xef8>
 800b202:	4b0b      	ldr	r3, [pc, #44]	@ (800b230 <tcp_receive+0xf10>)
 800b204:	681a      	ldr	r2, [r3, #0]
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b20a:	6879      	ldr	r1, [r7, #4]
 800b20c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b20e:	440b      	add	r3, r1
 800b210:	1ad3      	subs	r3, r2, r3
 800b212:	3301      	adds	r3, #1
 800b214:	2b00      	cmp	r3, #0
 800b216:	dd07      	ble.n	800b228 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	8b5b      	ldrh	r3, [r3, #26]
 800b21c:	f043 0302 	orr.w	r3, r3, #2
 800b220:	b29a      	uxth	r2, r3
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800b226:	e7ff      	b.n	800b228 <tcp_receive+0xf08>
 800b228:	bf00      	nop
 800b22a:	3750      	adds	r7, #80	@ 0x50
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bdb0      	pop	{r4, r5, r7, pc}
 800b230:	20008808 	.word	0x20008808
 800b234:	200087e8 	.word	0x200087e8
 800b238:	20008812 	.word	0x20008812
 800b23c:	08011df8 	.word	0x08011df8
 800b240:	080121a0 	.word	0x080121a0
 800b244:	08011e44 	.word	0x08011e44

0800b248 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800b248:	b480      	push	{r7}
 800b24a:	b083      	sub	sp, #12
 800b24c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800b24e:	4b15      	ldr	r3, [pc, #84]	@ (800b2a4 <tcp_get_next_optbyte+0x5c>)
 800b250:	881b      	ldrh	r3, [r3, #0]
 800b252:	1c5a      	adds	r2, r3, #1
 800b254:	b291      	uxth	r1, r2
 800b256:	4a13      	ldr	r2, [pc, #76]	@ (800b2a4 <tcp_get_next_optbyte+0x5c>)
 800b258:	8011      	strh	r1, [r2, #0]
 800b25a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800b25c:	4b12      	ldr	r3, [pc, #72]	@ (800b2a8 <tcp_get_next_optbyte+0x60>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d004      	beq.n	800b26e <tcp_get_next_optbyte+0x26>
 800b264:	4b11      	ldr	r3, [pc, #68]	@ (800b2ac <tcp_get_next_optbyte+0x64>)
 800b266:	881b      	ldrh	r3, [r3, #0]
 800b268:	88fa      	ldrh	r2, [r7, #6]
 800b26a:	429a      	cmp	r2, r3
 800b26c:	d208      	bcs.n	800b280 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800b26e:	4b10      	ldr	r3, [pc, #64]	@ (800b2b0 <tcp_get_next_optbyte+0x68>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	3314      	adds	r3, #20
 800b274:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800b276:	88fb      	ldrh	r3, [r7, #6]
 800b278:	683a      	ldr	r2, [r7, #0]
 800b27a:	4413      	add	r3, r2
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	e00b      	b.n	800b298 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800b280:	88fb      	ldrh	r3, [r7, #6]
 800b282:	b2da      	uxtb	r2, r3
 800b284:	4b09      	ldr	r3, [pc, #36]	@ (800b2ac <tcp_get_next_optbyte+0x64>)
 800b286:	881b      	ldrh	r3, [r3, #0]
 800b288:	b2db      	uxtb	r3, r3
 800b28a:	1ad3      	subs	r3, r2, r3
 800b28c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800b28e:	4b06      	ldr	r3, [pc, #24]	@ (800b2a8 <tcp_get_next_optbyte+0x60>)
 800b290:	681a      	ldr	r2, [r3, #0]
 800b292:	797b      	ldrb	r3, [r7, #5]
 800b294:	4413      	add	r3, r2
 800b296:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b298:	4618      	mov	r0, r3
 800b29a:	370c      	adds	r7, #12
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr
 800b2a4:	20008804 	.word	0x20008804
 800b2a8:	20008800 	.word	0x20008800
 800b2ac:	200087fe 	.word	0x200087fe
 800b2b0:	200087f8 	.word	0x200087f8

0800b2b4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d106      	bne.n	800b2d0 <tcp_parseopt+0x1c>
 800b2c2:	4b32      	ldr	r3, [pc, #200]	@ (800b38c <tcp_parseopt+0xd8>)
 800b2c4:	f240 727d 	movw	r2, #1917	@ 0x77d
 800b2c8:	4931      	ldr	r1, [pc, #196]	@ (800b390 <tcp_parseopt+0xdc>)
 800b2ca:	4832      	ldr	r0, [pc, #200]	@ (800b394 <tcp_parseopt+0xe0>)
 800b2cc:	f004 fd24 	bl	800fd18 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800b2d0:	4b31      	ldr	r3, [pc, #196]	@ (800b398 <tcp_parseopt+0xe4>)
 800b2d2:	881b      	ldrh	r3, [r3, #0]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d056      	beq.n	800b386 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b2d8:	4b30      	ldr	r3, [pc, #192]	@ (800b39c <tcp_parseopt+0xe8>)
 800b2da:	2200      	movs	r2, #0
 800b2dc:	801a      	strh	r2, [r3, #0]
 800b2de:	e046      	b.n	800b36e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800b2e0:	f7ff ffb2 	bl	800b248 <tcp_get_next_optbyte>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800b2e8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ea:	2b02      	cmp	r3, #2
 800b2ec:	d006      	beq.n	800b2fc <tcp_parseopt+0x48>
 800b2ee:	2b02      	cmp	r3, #2
 800b2f0:	dc2a      	bgt.n	800b348 <tcp_parseopt+0x94>
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d042      	beq.n	800b37c <tcp_parseopt+0xc8>
 800b2f6:	2b01      	cmp	r3, #1
 800b2f8:	d038      	beq.n	800b36c <tcp_parseopt+0xb8>
 800b2fa:	e025      	b.n	800b348 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b2fc:	f7ff ffa4 	bl	800b248 <tcp_get_next_optbyte>
 800b300:	4603      	mov	r3, r0
 800b302:	2b04      	cmp	r3, #4
 800b304:	d13c      	bne.n	800b380 <tcp_parseopt+0xcc>
 800b306:	4b25      	ldr	r3, [pc, #148]	@ (800b39c <tcp_parseopt+0xe8>)
 800b308:	881b      	ldrh	r3, [r3, #0]
 800b30a:	3301      	adds	r3, #1
 800b30c:	4a22      	ldr	r2, [pc, #136]	@ (800b398 <tcp_parseopt+0xe4>)
 800b30e:	8812      	ldrh	r2, [r2, #0]
 800b310:	4293      	cmp	r3, r2
 800b312:	da35      	bge.n	800b380 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800b314:	f7ff ff98 	bl	800b248 <tcp_get_next_optbyte>
 800b318:	4603      	mov	r3, r0
 800b31a:	021b      	lsls	r3, r3, #8
 800b31c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800b31e:	f7ff ff93 	bl	800b248 <tcp_get_next_optbyte>
 800b322:	4603      	mov	r3, r0
 800b324:	461a      	mov	r2, r3
 800b326:	89bb      	ldrh	r3, [r7, #12]
 800b328:	4313      	orrs	r3, r2
 800b32a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b32c:	89bb      	ldrh	r3, [r7, #12]
 800b32e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800b332:	d804      	bhi.n	800b33e <tcp_parseopt+0x8a>
 800b334:	89bb      	ldrh	r3, [r7, #12]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d001      	beq.n	800b33e <tcp_parseopt+0x8a>
 800b33a:	89ba      	ldrh	r2, [r7, #12]
 800b33c:	e001      	b.n	800b342 <tcp_parseopt+0x8e>
 800b33e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800b346:	e012      	b.n	800b36e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800b348:	f7ff ff7e 	bl	800b248 <tcp_get_next_optbyte>
 800b34c:	4603      	mov	r3, r0
 800b34e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800b350:	7afb      	ldrb	r3, [r7, #11]
 800b352:	2b01      	cmp	r3, #1
 800b354:	d916      	bls.n	800b384 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800b356:	7afb      	ldrb	r3, [r7, #11]
 800b358:	b29a      	uxth	r2, r3
 800b35a:	4b10      	ldr	r3, [pc, #64]	@ (800b39c <tcp_parseopt+0xe8>)
 800b35c:	881b      	ldrh	r3, [r3, #0]
 800b35e:	4413      	add	r3, r2
 800b360:	b29b      	uxth	r3, r3
 800b362:	3b02      	subs	r3, #2
 800b364:	b29a      	uxth	r2, r3
 800b366:	4b0d      	ldr	r3, [pc, #52]	@ (800b39c <tcp_parseopt+0xe8>)
 800b368:	801a      	strh	r2, [r3, #0]
 800b36a:	e000      	b.n	800b36e <tcp_parseopt+0xba>
          break;
 800b36c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b36e:	4b0b      	ldr	r3, [pc, #44]	@ (800b39c <tcp_parseopt+0xe8>)
 800b370:	881a      	ldrh	r2, [r3, #0]
 800b372:	4b09      	ldr	r3, [pc, #36]	@ (800b398 <tcp_parseopt+0xe4>)
 800b374:	881b      	ldrh	r3, [r3, #0]
 800b376:	429a      	cmp	r2, r3
 800b378:	d3b2      	bcc.n	800b2e0 <tcp_parseopt+0x2c>
 800b37a:	e004      	b.n	800b386 <tcp_parseopt+0xd2>
          return;
 800b37c:	bf00      	nop
 800b37e:	e002      	b.n	800b386 <tcp_parseopt+0xd2>
            return;
 800b380:	bf00      	nop
 800b382:	e000      	b.n	800b386 <tcp_parseopt+0xd2>
            return;
 800b384:	bf00      	nop
      }
    }
  }
}
 800b386:	3710      	adds	r7, #16
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}
 800b38c:	08011df8 	.word	0x08011df8
 800b390:	0801225c 	.word	0x0801225c
 800b394:	08011e44 	.word	0x08011e44
 800b398:	200087fc 	.word	0x200087fc
 800b39c:	20008804 	.word	0x20008804

0800b3a0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800b3a4:	4b05      	ldr	r3, [pc, #20]	@ (800b3bc <tcp_trigger_input_pcb_close+0x1c>)
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	f043 0310 	orr.w	r3, r3, #16
 800b3ac:	b2da      	uxtb	r2, r3
 800b3ae:	4b03      	ldr	r3, [pc, #12]	@ (800b3bc <tcp_trigger_input_pcb_close+0x1c>)
 800b3b0:	701a      	strb	r2, [r3, #0]
}
 800b3b2:	bf00      	nop
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr
 800b3bc:	20008815 	.word	0x20008815

0800b3c0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b084      	sub	sp, #16
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	60f8      	str	r0, [r7, #12]
 800b3c8:	60b9      	str	r1, [r7, #8]
 800b3ca:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d00a      	beq.n	800b3e8 <tcp_route+0x28>
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	7a1b      	ldrb	r3, [r3, #8]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d006      	beq.n	800b3e8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	7a1b      	ldrb	r3, [r3, #8]
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f7fb faba 	bl	8006958 <netif_get_by_index>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	e003      	b.n	800b3f0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f003 f929 	bl	800e640 <ip4_route>
 800b3ee:	4603      	mov	r3, r0
  }
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3710      	adds	r7, #16
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800b3f8:	b590      	push	{r4, r7, lr}
 800b3fa:	b087      	sub	sp, #28
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	603b      	str	r3, [r7, #0]
 800b404:	4613      	mov	r3, r2
 800b406:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d105      	bne.n	800b41a <tcp_create_segment+0x22>
 800b40e:	4b43      	ldr	r3, [pc, #268]	@ (800b51c <tcp_create_segment+0x124>)
 800b410:	22a3      	movs	r2, #163	@ 0xa3
 800b412:	4943      	ldr	r1, [pc, #268]	@ (800b520 <tcp_create_segment+0x128>)
 800b414:	4843      	ldr	r0, [pc, #268]	@ (800b524 <tcp_create_segment+0x12c>)
 800b416:	f004 fc7f 	bl	800fd18 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d105      	bne.n	800b42c <tcp_create_segment+0x34>
 800b420:	4b3e      	ldr	r3, [pc, #248]	@ (800b51c <tcp_create_segment+0x124>)
 800b422:	22a4      	movs	r2, #164	@ 0xa4
 800b424:	4940      	ldr	r1, [pc, #256]	@ (800b528 <tcp_create_segment+0x130>)
 800b426:	483f      	ldr	r0, [pc, #252]	@ (800b524 <tcp_create_segment+0x12c>)
 800b428:	f004 fc76 	bl	800fd18 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b42c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b430:	009b      	lsls	r3, r3, #2
 800b432:	b2db      	uxtb	r3, r3
 800b434:	f003 0304 	and.w	r3, r3, #4
 800b438:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b43a:	2003      	movs	r0, #3
 800b43c:	f7fa ff06 	bl	800624c <memp_malloc>
 800b440:	6138      	str	r0, [r7, #16]
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d104      	bne.n	800b452 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b448:	68b8      	ldr	r0, [r7, #8]
 800b44a:	f7fb fde5 	bl	8007018 <pbuf_free>
    return NULL;
 800b44e:	2300      	movs	r3, #0
 800b450:	e060      	b.n	800b514 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800b458:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	2200      	movs	r2, #0
 800b45e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	68ba      	ldr	r2, [r7, #8]
 800b464:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	891a      	ldrh	r2, [r3, #8]
 800b46a:	7dfb      	ldrb	r3, [r7, #23]
 800b46c:	b29b      	uxth	r3, r3
 800b46e:	429a      	cmp	r2, r3
 800b470:	d205      	bcs.n	800b47e <tcp_create_segment+0x86>
 800b472:	4b2a      	ldr	r3, [pc, #168]	@ (800b51c <tcp_create_segment+0x124>)
 800b474:	22b0      	movs	r2, #176	@ 0xb0
 800b476:	492d      	ldr	r1, [pc, #180]	@ (800b52c <tcp_create_segment+0x134>)
 800b478:	482a      	ldr	r0, [pc, #168]	@ (800b524 <tcp_create_segment+0x12c>)
 800b47a:	f004 fc4d 	bl	800fd18 <iprintf>
  seg->len = p->tot_len - optlen;
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	891a      	ldrh	r2, [r3, #8]
 800b482:	7dfb      	ldrb	r3, [r7, #23]
 800b484:	b29b      	uxth	r3, r3
 800b486:	1ad3      	subs	r3, r2, r3
 800b488:	b29a      	uxth	r2, r3
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b48e:	2114      	movs	r1, #20
 800b490:	68b8      	ldr	r0, [r7, #8]
 800b492:	f7fb fd2b 	bl	8006eec <pbuf_add_header>
 800b496:	4603      	mov	r3, r0
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d004      	beq.n	800b4a6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800b49c:	6938      	ldr	r0, [r7, #16]
 800b49e:	f7fd f8d2 	bl	8008646 <tcp_seg_free>
    return NULL;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	e036      	b.n	800b514 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	685a      	ldr	r2, [r3, #4]
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	8ada      	ldrh	r2, [r3, #22]
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	68dc      	ldr	r4, [r3, #12]
 800b4b8:	4610      	mov	r0, r2
 800b4ba:	f7fa fa4f 	bl	800595c <lwip_htons>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	8b1a      	ldrh	r2, [r3, #24]
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	68dc      	ldr	r4, [r3, #12]
 800b4ca:	4610      	mov	r0, r2
 800b4cc:	f7fa fa46 	bl	800595c <lwip_htons>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	68dc      	ldr	r4, [r3, #12]
 800b4d8:	6838      	ldr	r0, [r7, #0]
 800b4da:	f7fa fa54 	bl	8005986 <lwip_htonl>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b4e2:	7dfb      	ldrb	r3, [r7, #23]
 800b4e4:	089b      	lsrs	r3, r3, #2
 800b4e6:	b2db      	uxtb	r3, r3
 800b4e8:	3305      	adds	r3, #5
 800b4ea:	b29b      	uxth	r3, r3
 800b4ec:	031b      	lsls	r3, r3, #12
 800b4ee:	b29a      	uxth	r2, r3
 800b4f0:	79fb      	ldrb	r3, [r7, #7]
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	b29a      	uxth	r2, r3
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	68dc      	ldr	r4, [r3, #12]
 800b4fc:	4610      	mov	r0, r2
 800b4fe:	f7fa fa2d 	bl	800595c <lwip_htons>
 800b502:	4603      	mov	r3, r0
 800b504:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	68db      	ldr	r3, [r3, #12]
 800b50a:	2200      	movs	r2, #0
 800b50c:	749a      	strb	r2, [r3, #18]
 800b50e:	2200      	movs	r2, #0
 800b510:	74da      	strb	r2, [r3, #19]
  return seg;
 800b512:	693b      	ldr	r3, [r7, #16]
}
 800b514:	4618      	mov	r0, r3
 800b516:	371c      	adds	r7, #28
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd90      	pop	{r4, r7, pc}
 800b51c:	08012278 	.word	0x08012278
 800b520:	080122ac 	.word	0x080122ac
 800b524:	080122cc 	.word	0x080122cc
 800b528:	080122f4 	.word	0x080122f4
 800b52c:	08012318 	.word	0x08012318

0800b530 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800b530:	b590      	push	{r4, r7, lr}
 800b532:	b08b      	sub	sp, #44	@ 0x2c
 800b534:	af02      	add	r7, sp, #8
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	460b      	mov	r3, r1
 800b53a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800b53c:	2300      	movs	r3, #0
 800b53e:	61fb      	str	r3, [r7, #28]
 800b540:	2300      	movs	r3, #0
 800b542:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b544:	2300      	movs	r3, #0
 800b546:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d106      	bne.n	800b55c <tcp_split_unsent_seg+0x2c>
 800b54e:	4b95      	ldr	r3, [pc, #596]	@ (800b7a4 <tcp_split_unsent_seg+0x274>)
 800b550:	f240 324b 	movw	r2, #843	@ 0x34b
 800b554:	4994      	ldr	r1, [pc, #592]	@ (800b7a8 <tcp_split_unsent_seg+0x278>)
 800b556:	4895      	ldr	r0, [pc, #596]	@ (800b7ac <tcp_split_unsent_seg+0x27c>)
 800b558:	f004 fbde 	bl	800fd18 <iprintf>

  useg = pcb->unsent;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b560:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d102      	bne.n	800b56e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800b568:	f04f 33ff 	mov.w	r3, #4294967295
 800b56c:	e116      	b.n	800b79c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800b56e:	887b      	ldrh	r3, [r7, #2]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d109      	bne.n	800b588 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b574:	4b8b      	ldr	r3, [pc, #556]	@ (800b7a4 <tcp_split_unsent_seg+0x274>)
 800b576:	f240 3253 	movw	r2, #851	@ 0x353
 800b57a:	498d      	ldr	r1, [pc, #564]	@ (800b7b0 <tcp_split_unsent_seg+0x280>)
 800b57c:	488b      	ldr	r0, [pc, #556]	@ (800b7ac <tcp_split_unsent_seg+0x27c>)
 800b57e:	f004 fbcb 	bl	800fd18 <iprintf>
    return ERR_VAL;
 800b582:	f06f 0305 	mvn.w	r3, #5
 800b586:	e109      	b.n	800b79c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	891b      	ldrh	r3, [r3, #8]
 800b58c:	887a      	ldrh	r2, [r7, #2]
 800b58e:	429a      	cmp	r2, r3
 800b590:	d301      	bcc.n	800b596 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800b592:	2300      	movs	r3, #0
 800b594:	e102      	b.n	800b79c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b59a:	887a      	ldrh	r2, [r7, #2]
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d906      	bls.n	800b5ae <tcp_split_unsent_seg+0x7e>
 800b5a0:	4b80      	ldr	r3, [pc, #512]	@ (800b7a4 <tcp_split_unsent_seg+0x274>)
 800b5a2:	f240 325b 	movw	r2, #859	@ 0x35b
 800b5a6:	4983      	ldr	r1, [pc, #524]	@ (800b7b4 <tcp_split_unsent_seg+0x284>)
 800b5a8:	4880      	ldr	r0, [pc, #512]	@ (800b7ac <tcp_split_unsent_seg+0x27c>)
 800b5aa:	f004 fbb5 	bl	800fd18 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	891b      	ldrh	r3, [r3, #8]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d106      	bne.n	800b5c4 <tcp_split_unsent_seg+0x94>
 800b5b6:	4b7b      	ldr	r3, [pc, #492]	@ (800b7a4 <tcp_split_unsent_seg+0x274>)
 800b5b8:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800b5bc:	497e      	ldr	r1, [pc, #504]	@ (800b7b8 <tcp_split_unsent_seg+0x288>)
 800b5be:	487b      	ldr	r0, [pc, #492]	@ (800b7ac <tcp_split_unsent_seg+0x27c>)
 800b5c0:	f004 fbaa 	bl	800fd18 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	7a9b      	ldrb	r3, [r3, #10]
 800b5c8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b5ca:	7bfb      	ldrb	r3, [r7, #15]
 800b5cc:	009b      	lsls	r3, r3, #2
 800b5ce:	b2db      	uxtb	r3, r3
 800b5d0:	f003 0304 	and.w	r3, r3, #4
 800b5d4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	891a      	ldrh	r2, [r3, #8]
 800b5da:	887b      	ldrh	r3, [r7, #2]
 800b5dc:	1ad3      	subs	r3, r2, r3
 800b5de:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b5e0:	7bbb      	ldrb	r3, [r7, #14]
 800b5e2:	b29a      	uxth	r2, r3
 800b5e4:	89bb      	ldrh	r3, [r7, #12]
 800b5e6:	4413      	add	r3, r2
 800b5e8:	b29b      	uxth	r3, r3
 800b5ea:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b5ee:	4619      	mov	r1, r3
 800b5f0:	2036      	movs	r0, #54	@ 0x36
 800b5f2:	f7fb fa2d 	bl	8006a50 <pbuf_alloc>
 800b5f6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	f000 80b7 	beq.w	800b76e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	891a      	ldrh	r2, [r3, #8]
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	891b      	ldrh	r3, [r3, #8]
 800b60a:	1ad3      	subs	r3, r2, r3
 800b60c:	b29a      	uxth	r2, r3
 800b60e:	887b      	ldrh	r3, [r7, #2]
 800b610:	4413      	add	r3, r2
 800b612:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	6858      	ldr	r0, [r3, #4]
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	685a      	ldr	r2, [r3, #4]
 800b61c:	7bbb      	ldrb	r3, [r7, #14]
 800b61e:	18d1      	adds	r1, r2, r3
 800b620:	897b      	ldrh	r3, [r7, #10]
 800b622:	89ba      	ldrh	r2, [r7, #12]
 800b624:	f7fb fef2 	bl	800740c <pbuf_copy_partial>
 800b628:	4603      	mov	r3, r0
 800b62a:	461a      	mov	r2, r3
 800b62c:	89bb      	ldrh	r3, [r7, #12]
 800b62e:	4293      	cmp	r3, r2
 800b630:	f040 809f 	bne.w	800b772 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	68db      	ldr	r3, [r3, #12]
 800b638:	899b      	ldrh	r3, [r3, #12]
 800b63a:	b29b      	uxth	r3, r3
 800b63c:	4618      	mov	r0, r3
 800b63e:	f7fa f98d 	bl	800595c <lwip_htons>
 800b642:	4603      	mov	r3, r0
 800b644:	b2db      	uxtb	r3, r3
 800b646:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b64a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800b64c:	2300      	movs	r3, #0
 800b64e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800b650:	7efb      	ldrb	r3, [r7, #27]
 800b652:	f003 0308 	and.w	r3, r3, #8
 800b656:	2b00      	cmp	r3, #0
 800b658:	d007      	beq.n	800b66a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800b65a:	7efb      	ldrb	r3, [r7, #27]
 800b65c:	f023 0308 	bic.w	r3, r3, #8
 800b660:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800b662:	7ebb      	ldrb	r3, [r7, #26]
 800b664:	f043 0308 	orr.w	r3, r3, #8
 800b668:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800b66a:	7efb      	ldrb	r3, [r7, #27]
 800b66c:	f003 0301 	and.w	r3, r3, #1
 800b670:	2b00      	cmp	r3, #0
 800b672:	d007      	beq.n	800b684 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800b674:	7efb      	ldrb	r3, [r7, #27]
 800b676:	f023 0301 	bic.w	r3, r3, #1
 800b67a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800b67c:	7ebb      	ldrb	r3, [r7, #26]
 800b67e:	f043 0301 	orr.w	r3, r3, #1
 800b682:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	68db      	ldr	r3, [r3, #12]
 800b688:	685b      	ldr	r3, [r3, #4]
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7fa f97b 	bl	8005986 <lwip_htonl>
 800b690:	4602      	mov	r2, r0
 800b692:	887b      	ldrh	r3, [r7, #2]
 800b694:	18d1      	adds	r1, r2, r3
 800b696:	7eba      	ldrb	r2, [r7, #26]
 800b698:	7bfb      	ldrb	r3, [r7, #15]
 800b69a:	9300      	str	r3, [sp, #0]
 800b69c:	460b      	mov	r3, r1
 800b69e:	6939      	ldr	r1, [r7, #16]
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f7ff fea9 	bl	800b3f8 <tcp_create_segment>
 800b6a6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800b6a8:	69fb      	ldr	r3, [r7, #28]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d063      	beq.n	800b776 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	685b      	ldr	r3, [r3, #4]
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f7fb fd38 	bl	8007128 <pbuf_clen>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b6c2:	1a9b      	subs	r3, r3, r2
 800b6c4:	b29a      	uxth	r2, r3
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	6858      	ldr	r0, [r3, #4]
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	891a      	ldrh	r2, [r3, #8]
 800b6d6:	89bb      	ldrh	r3, [r7, #12]
 800b6d8:	1ad3      	subs	r3, r2, r3
 800b6da:	b29b      	uxth	r3, r3
 800b6dc:	4619      	mov	r1, r3
 800b6de:	f7fb fb15 	bl	8006d0c <pbuf_realloc>
  useg->len -= remainder;
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	891a      	ldrh	r2, [r3, #8]
 800b6e6:	89bb      	ldrh	r3, [r7, #12]
 800b6e8:	1ad3      	subs	r3, r2, r3
 800b6ea:	b29a      	uxth	r2, r3
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	68db      	ldr	r3, [r3, #12]
 800b6f4:	899b      	ldrh	r3, [r3, #12]
 800b6f6:	b29c      	uxth	r4, r3
 800b6f8:	7efb      	ldrb	r3, [r7, #27]
 800b6fa:	b29b      	uxth	r3, r3
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f7fa f92d 	bl	800595c <lwip_htons>
 800b702:	4603      	mov	r3, r0
 800b704:	461a      	mov	r2, r3
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	4322      	orrs	r2, r4
 800b70c:	b292      	uxth	r2, r2
 800b70e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	685b      	ldr	r3, [r3, #4]
 800b714:	4618      	mov	r0, r3
 800b716:	f7fb fd07 	bl	8007128 <pbuf_clen>
 800b71a:	4603      	mov	r3, r0
 800b71c:	461a      	mov	r2, r3
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b724:	4413      	add	r3, r2
 800b726:	b29a      	uxth	r2, r3
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b72e:	69fb      	ldr	r3, [r7, #28]
 800b730:	685b      	ldr	r3, [r3, #4]
 800b732:	4618      	mov	r0, r3
 800b734:	f7fb fcf8 	bl	8007128 <pbuf_clen>
 800b738:	4603      	mov	r3, r0
 800b73a:	461a      	mov	r2, r3
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b742:	4413      	add	r3, r2
 800b744:	b29a      	uxth	r2, r3
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	69fb      	ldr	r3, [r7, #28]
 800b752:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	69fa      	ldr	r2, [r7, #28]
 800b758:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800b75a:	69fb      	ldr	r3, [r7, #28]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d103      	bne.n	800b76a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2200      	movs	r2, #0
 800b766:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800b76a:	2300      	movs	r3, #0
 800b76c:	e016      	b.n	800b79c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800b76e:	bf00      	nop
 800b770:	e002      	b.n	800b778 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b772:	bf00      	nop
 800b774:	e000      	b.n	800b778 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b776:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800b778:	69fb      	ldr	r3, [r7, #28]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d006      	beq.n	800b78c <tcp_split_unsent_seg+0x25c>
 800b77e:	4b09      	ldr	r3, [pc, #36]	@ (800b7a4 <tcp_split_unsent_seg+0x274>)
 800b780:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800b784:	490d      	ldr	r1, [pc, #52]	@ (800b7bc <tcp_split_unsent_seg+0x28c>)
 800b786:	4809      	ldr	r0, [pc, #36]	@ (800b7ac <tcp_split_unsent_seg+0x27c>)
 800b788:	f004 fac6 	bl	800fd18 <iprintf>
  if (p != NULL) {
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d002      	beq.n	800b798 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800b792:	6938      	ldr	r0, [r7, #16]
 800b794:	f7fb fc40 	bl	8007018 <pbuf_free>
  }

  return ERR_MEM;
 800b798:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3724      	adds	r7, #36	@ 0x24
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd90      	pop	{r4, r7, pc}
 800b7a4:	08012278 	.word	0x08012278
 800b7a8:	0801260c 	.word	0x0801260c
 800b7ac:	080122cc 	.word	0x080122cc
 800b7b0:	08012630 	.word	0x08012630
 800b7b4:	08012654 	.word	0x08012654
 800b7b8:	08012664 	.word	0x08012664
 800b7bc:	08012674 	.word	0x08012674

0800b7c0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b7c0:	b590      	push	{r4, r7, lr}
 800b7c2:	b085      	sub	sp, #20
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d106      	bne.n	800b7dc <tcp_send_fin+0x1c>
 800b7ce:	4b21      	ldr	r3, [pc, #132]	@ (800b854 <tcp_send_fin+0x94>)
 800b7d0:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800b7d4:	4920      	ldr	r1, [pc, #128]	@ (800b858 <tcp_send_fin+0x98>)
 800b7d6:	4821      	ldr	r0, [pc, #132]	@ (800b85c <tcp_send_fin+0x9c>)
 800b7d8:	f004 fa9e 	bl	800fd18 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d02e      	beq.n	800b842 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7e8:	60fb      	str	r3, [r7, #12]
 800b7ea:	e002      	b.n	800b7f2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d1f8      	bne.n	800b7ec <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	68db      	ldr	r3, [r3, #12]
 800b7fe:	899b      	ldrh	r3, [r3, #12]
 800b800:	b29b      	uxth	r3, r3
 800b802:	4618      	mov	r0, r3
 800b804:	f7fa f8aa 	bl	800595c <lwip_htons>
 800b808:	4603      	mov	r3, r0
 800b80a:	b2db      	uxtb	r3, r3
 800b80c:	f003 0307 	and.w	r3, r3, #7
 800b810:	2b00      	cmp	r3, #0
 800b812:	d116      	bne.n	800b842 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	68db      	ldr	r3, [r3, #12]
 800b818:	899b      	ldrh	r3, [r3, #12]
 800b81a:	b29c      	uxth	r4, r3
 800b81c:	2001      	movs	r0, #1
 800b81e:	f7fa f89d 	bl	800595c <lwip_htons>
 800b822:	4603      	mov	r3, r0
 800b824:	461a      	mov	r2, r3
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	68db      	ldr	r3, [r3, #12]
 800b82a:	4322      	orrs	r2, r4
 800b82c:	b292      	uxth	r2, r2
 800b82e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	8b5b      	ldrh	r3, [r3, #26]
 800b834:	f043 0320 	orr.w	r3, r3, #32
 800b838:	b29a      	uxth	r2, r3
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800b83e:	2300      	movs	r3, #0
 800b840:	e004      	b.n	800b84c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b842:	2101      	movs	r1, #1
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f000 f80b 	bl	800b860 <tcp_enqueue_flags>
 800b84a:	4603      	mov	r3, r0
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3714      	adds	r7, #20
 800b850:	46bd      	mov	sp, r7
 800b852:	bd90      	pop	{r4, r7, pc}
 800b854:	08012278 	.word	0x08012278
 800b858:	08012680 	.word	0x08012680
 800b85c:	080122cc 	.word	0x080122cc

0800b860 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b08a      	sub	sp, #40	@ 0x28
 800b864:	af02      	add	r7, sp, #8
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	460b      	mov	r3, r1
 800b86a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b86c:	2300      	movs	r3, #0
 800b86e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800b870:	2300      	movs	r3, #0
 800b872:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b874:	78fb      	ldrb	r3, [r7, #3]
 800b876:	f003 0303 	and.w	r3, r3, #3
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d106      	bne.n	800b88c <tcp_enqueue_flags+0x2c>
 800b87e:	4b67      	ldr	r3, [pc, #412]	@ (800ba1c <tcp_enqueue_flags+0x1bc>)
 800b880:	f240 4211 	movw	r2, #1041	@ 0x411
 800b884:	4966      	ldr	r1, [pc, #408]	@ (800ba20 <tcp_enqueue_flags+0x1c0>)
 800b886:	4867      	ldr	r0, [pc, #412]	@ (800ba24 <tcp_enqueue_flags+0x1c4>)
 800b888:	f004 fa46 	bl	800fd18 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d106      	bne.n	800b8a0 <tcp_enqueue_flags+0x40>
 800b892:	4b62      	ldr	r3, [pc, #392]	@ (800ba1c <tcp_enqueue_flags+0x1bc>)
 800b894:	f240 4213 	movw	r2, #1043	@ 0x413
 800b898:	4963      	ldr	r1, [pc, #396]	@ (800ba28 <tcp_enqueue_flags+0x1c8>)
 800b89a:	4862      	ldr	r0, [pc, #392]	@ (800ba24 <tcp_enqueue_flags+0x1c4>)
 800b89c:	f004 fa3c 	bl	800fd18 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800b8a0:	78fb      	ldrb	r3, [r7, #3]
 800b8a2:	f003 0302 	and.w	r3, r3, #2
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d001      	beq.n	800b8ae <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b8ae:	7ffb      	ldrb	r3, [r7, #31]
 800b8b0:	009b      	lsls	r3, r3, #2
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	f003 0304 	and.w	r3, r3, #4
 800b8b8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b8ba:	7dfb      	ldrb	r3, [r7, #23]
 800b8bc:	b29b      	uxth	r3, r3
 800b8be:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	2036      	movs	r0, #54	@ 0x36
 800b8c6:	f7fb f8c3 	bl	8006a50 <pbuf_alloc>
 800b8ca:	6138      	str	r0, [r7, #16]
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d109      	bne.n	800b8e6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	8b5b      	ldrh	r3, [r3, #26]
 800b8d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8da:	b29a      	uxth	r2, r3
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b8e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b8e4:	e095      	b.n	800ba12 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	895a      	ldrh	r2, [r3, #10]
 800b8ea:	7dfb      	ldrb	r3, [r7, #23]
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d206      	bcs.n	800b900 <tcp_enqueue_flags+0xa0>
 800b8f2:	4b4a      	ldr	r3, [pc, #296]	@ (800ba1c <tcp_enqueue_flags+0x1bc>)
 800b8f4:	f240 4239 	movw	r2, #1081	@ 0x439
 800b8f8:	494c      	ldr	r1, [pc, #304]	@ (800ba2c <tcp_enqueue_flags+0x1cc>)
 800b8fa:	484a      	ldr	r0, [pc, #296]	@ (800ba24 <tcp_enqueue_flags+0x1c4>)
 800b8fc:	f004 fa0c 	bl	800fd18 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800b904:	78fa      	ldrb	r2, [r7, #3]
 800b906:	7ffb      	ldrb	r3, [r7, #31]
 800b908:	9300      	str	r3, [sp, #0]
 800b90a:	460b      	mov	r3, r1
 800b90c:	6939      	ldr	r1, [r7, #16]
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f7ff fd72 	bl	800b3f8 <tcp_create_segment>
 800b914:	60f8      	str	r0, [r7, #12]
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d109      	bne.n	800b930 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	8b5b      	ldrh	r3, [r3, #26]
 800b920:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b924:	b29a      	uxth	r2, r3
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b92a:	f04f 33ff 	mov.w	r3, #4294967295
 800b92e:	e070      	b.n	800ba12 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	68db      	ldr	r3, [r3, #12]
 800b934:	f003 0303 	and.w	r3, r3, #3
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d006      	beq.n	800b94a <tcp_enqueue_flags+0xea>
 800b93c:	4b37      	ldr	r3, [pc, #220]	@ (800ba1c <tcp_enqueue_flags+0x1bc>)
 800b93e:	f240 4242 	movw	r2, #1090	@ 0x442
 800b942:	493b      	ldr	r1, [pc, #236]	@ (800ba30 <tcp_enqueue_flags+0x1d0>)
 800b944:	4837      	ldr	r0, [pc, #220]	@ (800ba24 <tcp_enqueue_flags+0x1c4>)
 800b946:	f004 f9e7 	bl	800fd18 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	891b      	ldrh	r3, [r3, #8]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d006      	beq.n	800b960 <tcp_enqueue_flags+0x100>
 800b952:	4b32      	ldr	r3, [pc, #200]	@ (800ba1c <tcp_enqueue_flags+0x1bc>)
 800b954:	f240 4243 	movw	r2, #1091	@ 0x443
 800b958:	4936      	ldr	r1, [pc, #216]	@ (800ba34 <tcp_enqueue_flags+0x1d4>)
 800b95a:	4832      	ldr	r0, [pc, #200]	@ (800ba24 <tcp_enqueue_flags+0x1c4>)
 800b95c:	f004 f9dc 	bl	800fd18 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b964:	2b00      	cmp	r3, #0
 800b966:	d103      	bne.n	800b970 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	68fa      	ldr	r2, [r7, #12]
 800b96c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b96e:	e00d      	b.n	800b98c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b974:	61bb      	str	r3, [r7, #24]
 800b976:	e002      	b.n	800b97e <tcp_enqueue_flags+0x11e>
 800b978:	69bb      	ldr	r3, [r7, #24]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	61bb      	str	r3, [r7, #24]
 800b97e:	69bb      	ldr	r3, [r7, #24]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d1f8      	bne.n	800b978 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800b986:	69bb      	ldr	r3, [r7, #24]
 800b988:	68fa      	ldr	r2, [r7, #12]
 800b98a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2200      	movs	r2, #0
 800b990:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b994:	78fb      	ldrb	r3, [r7, #3]
 800b996:	f003 0302 	and.w	r3, r3, #2
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d104      	bne.n	800b9a8 <tcp_enqueue_flags+0x148>
 800b99e:	78fb      	ldrb	r3, [r7, #3]
 800b9a0:	f003 0301 	and.w	r3, r3, #1
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d004      	beq.n	800b9b2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9ac:	1c5a      	adds	r2, r3, #1
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b9b2:	78fb      	ldrb	r3, [r7, #3]
 800b9b4:	f003 0301 	and.w	r3, r3, #1
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d006      	beq.n	800b9ca <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	8b5b      	ldrh	r3, [r3, #26]
 800b9c0:	f043 0320 	orr.w	r3, r3, #32
 800b9c4:	b29a      	uxth	r2, r3
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7fb fbaa 	bl	8007128 <pbuf_clen>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b9de:	4413      	add	r3, r2
 800b9e0:	b29a      	uxth	r2, r3
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d00e      	beq.n	800ba10 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d10a      	bne.n	800ba10 <tcp_enqueue_flags+0x1b0>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d106      	bne.n	800ba10 <tcp_enqueue_flags+0x1b0>
 800ba02:	4b06      	ldr	r3, [pc, #24]	@ (800ba1c <tcp_enqueue_flags+0x1bc>)
 800ba04:	f240 4265 	movw	r2, #1125	@ 0x465
 800ba08:	490b      	ldr	r1, [pc, #44]	@ (800ba38 <tcp_enqueue_flags+0x1d8>)
 800ba0a:	4806      	ldr	r0, [pc, #24]	@ (800ba24 <tcp_enqueue_flags+0x1c4>)
 800ba0c:	f004 f984 	bl	800fd18 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ba10:	2300      	movs	r3, #0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3720      	adds	r7, #32
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	08012278 	.word	0x08012278
 800ba20:	0801269c 	.word	0x0801269c
 800ba24:	080122cc 	.word	0x080122cc
 800ba28:	080126f4 	.word	0x080126f4
 800ba2c:	08012714 	.word	0x08012714
 800ba30:	08012750 	.word	0x08012750
 800ba34:	08012768 	.word	0x08012768
 800ba38:	08012794 	.word	0x08012794

0800ba3c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800ba3c:	b5b0      	push	{r4, r5, r7, lr}
 800ba3e:	b08a      	sub	sp, #40	@ 0x28
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d106      	bne.n	800ba58 <tcp_output+0x1c>
 800ba4a:	4b8a      	ldr	r3, [pc, #552]	@ (800bc74 <tcp_output+0x238>)
 800ba4c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800ba50:	4989      	ldr	r1, [pc, #548]	@ (800bc78 <tcp_output+0x23c>)
 800ba52:	488a      	ldr	r0, [pc, #552]	@ (800bc7c <tcp_output+0x240>)
 800ba54:	f004 f960 	bl	800fd18 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	7d1b      	ldrb	r3, [r3, #20]
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d106      	bne.n	800ba6e <tcp_output+0x32>
 800ba60:	4b84      	ldr	r3, [pc, #528]	@ (800bc74 <tcp_output+0x238>)
 800ba62:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800ba66:	4986      	ldr	r1, [pc, #536]	@ (800bc80 <tcp_output+0x244>)
 800ba68:	4884      	ldr	r0, [pc, #528]	@ (800bc7c <tcp_output+0x240>)
 800ba6a:	f004 f955 	bl	800fd18 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800ba6e:	4b85      	ldr	r3, [pc, #532]	@ (800bc84 <tcp_output+0x248>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	687a      	ldr	r2, [r7, #4]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d101      	bne.n	800ba7c <tcp_output+0x40>
    return ERR_OK;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	e1ce      	b.n	800be1a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	bf28      	it	cs
 800ba8c:	4613      	movcs	r3, r2
 800ba8e:	b29b      	uxth	r3, r3
 800ba90:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba96:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800ba98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d10b      	bne.n	800bab6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	8b5b      	ldrh	r3, [r3, #26]
 800baa2:	f003 0302 	and.w	r3, r3, #2
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	f000 81aa 	beq.w	800be00 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f000 fdcb 	bl	800c648 <tcp_send_empty_ack>
 800bab2:	4603      	mov	r3, r0
 800bab4:	e1b1      	b.n	800be1a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800bab6:	6879      	ldr	r1, [r7, #4]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	3304      	adds	r3, #4
 800babc:	461a      	mov	r2, r3
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f7ff fc7e 	bl	800b3c0 <tcp_route>
 800bac4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d102      	bne.n	800bad2 <tcp_output+0x96>
    return ERR_RTE;
 800bacc:	f06f 0303 	mvn.w	r3, #3
 800bad0:	e1a3      	b.n	800be1a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d003      	beq.n	800bae0 <tcp_output+0xa4>
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d111      	bne.n	800bb04 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800bae0:	697b      	ldr	r3, [r7, #20]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d002      	beq.n	800baec <tcp_output+0xb0>
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	3304      	adds	r3, #4
 800baea:	e000      	b.n	800baee <tcp_output+0xb2>
 800baec:	2300      	movs	r3, #0
 800baee:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d102      	bne.n	800bafc <tcp_output+0xc0>
      return ERR_RTE;
 800baf6:	f06f 0303 	mvn.w	r3, #3
 800bafa:	e18e      	b.n	800be1a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	681a      	ldr	r2, [r3, #0]
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800bb04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb06:	68db      	ldr	r3, [r3, #12]
 800bb08:	685b      	ldr	r3, [r3, #4]
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7f9 ff3b 	bl	8005986 <lwip_htonl>
 800bb10:	4602      	mov	r2, r0
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb16:	1ad3      	subs	r3, r2, r3
 800bb18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb1a:	8912      	ldrh	r2, [r2, #8]
 800bb1c:	4413      	add	r3, r2
 800bb1e:	69ba      	ldr	r2, [r7, #24]
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d227      	bcs.n	800bb74 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	69bb      	ldr	r3, [r7, #24]
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d114      	bne.n	800bb5c <tcp_output+0x120>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d110      	bne.n	800bb5c <tcp_output+0x120>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d10b      	bne.n	800bb5c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2200      	movs	r2, #0
 800bb48:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2201      	movs	r2, #1
 800bb50:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2200      	movs	r2, #0
 800bb58:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	8b5b      	ldrh	r3, [r3, #26]
 800bb60:	f003 0302 	and.w	r3, r3, #2
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	f000 814d 	beq.w	800be04 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 fd6c 	bl	800c648 <tcp_send_empty_ack>
 800bb70:	4603      	mov	r3, r0
 800bb72:	e152      	b.n	800be1a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2200      	movs	r2, #0
 800bb78:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb80:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800bb82:	6a3b      	ldr	r3, [r7, #32]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	f000 811c 	beq.w	800bdc2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800bb8a:	e002      	b.n	800bb92 <tcp_output+0x156>
 800bb8c:	6a3b      	ldr	r3, [r7, #32]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	623b      	str	r3, [r7, #32]
 800bb92:	6a3b      	ldr	r3, [r7, #32]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d1f8      	bne.n	800bb8c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800bb9a:	e112      	b.n	800bdc2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800bb9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb9e:	68db      	ldr	r3, [r3, #12]
 800bba0:	899b      	ldrh	r3, [r3, #12]
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	4618      	mov	r0, r3
 800bba6:	f7f9 fed9 	bl	800595c <lwip_htons>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	b2db      	uxtb	r3, r3
 800bbae:	f003 0304 	and.w	r3, r3, #4
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d006      	beq.n	800bbc4 <tcp_output+0x188>
 800bbb6:	4b2f      	ldr	r3, [pc, #188]	@ (800bc74 <tcp_output+0x238>)
 800bbb8:	f240 5236 	movw	r2, #1334	@ 0x536
 800bbbc:	4932      	ldr	r1, [pc, #200]	@ (800bc88 <tcp_output+0x24c>)
 800bbbe:	482f      	ldr	r0, [pc, #188]	@ (800bc7c <tcp_output+0x240>)
 800bbc0:	f004 f8aa 	bl	800fd18 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d01f      	beq.n	800bc0c <tcp_output+0x1d0>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	8b5b      	ldrh	r3, [r3, #26]
 800bbd0:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d119      	bne.n	800bc0c <tcp_output+0x1d0>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d00b      	beq.n	800bbf8 <tcp_output+0x1bc>
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d110      	bne.n	800bc0c <tcp_output+0x1d0>
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bbee:	891a      	ldrh	r2, [r3, #8]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d209      	bcs.n	800bc0c <tcp_output+0x1d0>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d004      	beq.n	800bc0c <tcp_output+0x1d0>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bc08:	2b08      	cmp	r3, #8
 800bc0a:	d901      	bls.n	800bc10 <tcp_output+0x1d4>
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	e000      	b.n	800bc12 <tcp_output+0x1d6>
 800bc10:	2300      	movs	r3, #0
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d106      	bne.n	800bc24 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	8b5b      	ldrh	r3, [r3, #26]
 800bc1a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	f000 80e4 	beq.w	800bdec <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	7d1b      	ldrb	r3, [r3, #20]
 800bc28:	2b02      	cmp	r3, #2
 800bc2a:	d00d      	beq.n	800bc48 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800bc2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc2e:	68db      	ldr	r3, [r3, #12]
 800bc30:	899b      	ldrh	r3, [r3, #12]
 800bc32:	b29c      	uxth	r4, r3
 800bc34:	2010      	movs	r0, #16
 800bc36:	f7f9 fe91 	bl	800595c <lwip_htons>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	461a      	mov	r2, r3
 800bc3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc40:	68db      	ldr	r3, [r3, #12]
 800bc42:	4322      	orrs	r2, r4
 800bc44:	b292      	uxth	r2, r2
 800bc46:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800bc48:	697a      	ldr	r2, [r7, #20]
 800bc4a:	6879      	ldr	r1, [r7, #4]
 800bc4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bc4e:	f000 f909 	bl	800be64 <tcp_output_segment>
 800bc52:	4603      	mov	r3, r0
 800bc54:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800bc56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d016      	beq.n	800bc8c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	8b5b      	ldrh	r3, [r3, #26]
 800bc62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc66:	b29a      	uxth	r2, r3
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	835a      	strh	r2, [r3, #26]
      return err;
 800bc6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc70:	e0d3      	b.n	800be1a <tcp_output+0x3de>
 800bc72:	bf00      	nop
 800bc74:	08012278 	.word	0x08012278
 800bc78:	080127bc 	.word	0x080127bc
 800bc7c:	080122cc 	.word	0x080122cc
 800bc80:	080127d4 	.word	0x080127d4
 800bc84:	2000881c 	.word	0x2000881c
 800bc88:	080127fc 	.word	0x080127fc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800bc8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	7d1b      	ldrb	r3, [r3, #20]
 800bc98:	2b02      	cmp	r3, #2
 800bc9a:	d006      	beq.n	800bcaa <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	8b5b      	ldrh	r3, [r3, #26]
 800bca0:	f023 0303 	bic.w	r3, r3, #3
 800bca4:	b29a      	uxth	r2, r3
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bcaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcac:	68db      	ldr	r3, [r3, #12]
 800bcae:	685b      	ldr	r3, [r3, #4]
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f7f9 fe68 	bl	8005986 <lwip_htonl>
 800bcb6:	4604      	mov	r4, r0
 800bcb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcba:	891b      	ldrh	r3, [r3, #8]
 800bcbc:	461d      	mov	r5, r3
 800bcbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcc0:	68db      	ldr	r3, [r3, #12]
 800bcc2:	899b      	ldrh	r3, [r3, #12]
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f7f9 fe48 	bl	800595c <lwip_htons>
 800bccc:	4603      	mov	r3, r0
 800bcce:	b2db      	uxtb	r3, r3
 800bcd0:	f003 0303 	and.w	r3, r3, #3
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d001      	beq.n	800bcdc <tcp_output+0x2a0>
 800bcd8:	2301      	movs	r3, #1
 800bcda:	e000      	b.n	800bcde <tcp_output+0x2a2>
 800bcdc:	2300      	movs	r3, #0
 800bcde:	442b      	add	r3, r5
 800bce0:	4423      	add	r3, r4
 800bce2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	1ad3      	subs	r3, r2, r3
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	da02      	bge.n	800bcf6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	68ba      	ldr	r2, [r7, #8]
 800bcf4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800bcf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcf8:	891b      	ldrh	r3, [r3, #8]
 800bcfa:	461c      	mov	r4, r3
 800bcfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcfe:	68db      	ldr	r3, [r3, #12]
 800bd00:	899b      	ldrh	r3, [r3, #12]
 800bd02:	b29b      	uxth	r3, r3
 800bd04:	4618      	mov	r0, r3
 800bd06:	f7f9 fe29 	bl	800595c <lwip_htons>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	b2db      	uxtb	r3, r3
 800bd0e:	f003 0303 	and.w	r3, r3, #3
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d001      	beq.n	800bd1a <tcp_output+0x2de>
 800bd16:	2301      	movs	r3, #1
 800bd18:	e000      	b.n	800bd1c <tcp_output+0x2e0>
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	4423      	add	r3, r4
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d049      	beq.n	800bdb6 <tcp_output+0x37a>
      seg->next = NULL;
 800bd22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd24:	2200      	movs	r2, #0
 800bd26:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d105      	bne.n	800bd3c <tcp_output+0x300>
        pcb->unacked = seg;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd34:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800bd36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd38:	623b      	str	r3, [r7, #32]
 800bd3a:	e03f      	b.n	800bdbc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800bd3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd3e:	68db      	ldr	r3, [r3, #12]
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7f9 fe1f 	bl	8005986 <lwip_htonl>
 800bd48:	4604      	mov	r4, r0
 800bd4a:	6a3b      	ldr	r3, [r7, #32]
 800bd4c:	68db      	ldr	r3, [r3, #12]
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	4618      	mov	r0, r3
 800bd52:	f7f9 fe18 	bl	8005986 <lwip_htonl>
 800bd56:	4603      	mov	r3, r0
 800bd58:	1ae3      	subs	r3, r4, r3
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	da24      	bge.n	800bda8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	3370      	adds	r3, #112	@ 0x70
 800bd62:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800bd64:	e002      	b.n	800bd6c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800bd66:	69fb      	ldr	r3, [r7, #28]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800bd6c:	69fb      	ldr	r3, [r7, #28]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d011      	beq.n	800bd98 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bd74:	69fb      	ldr	r3, [r7, #28]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	68db      	ldr	r3, [r3, #12]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f7f9 fe02 	bl	8005986 <lwip_htonl>
 800bd82:	4604      	mov	r4, r0
 800bd84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd86:	68db      	ldr	r3, [r3, #12]
 800bd88:	685b      	ldr	r3, [r3, #4]
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7f9 fdfb 	bl	8005986 <lwip_htonl>
 800bd90:	4603      	mov	r3, r0
 800bd92:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	dbe6      	blt.n	800bd66 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800bd98:	69fb      	ldr	r3, [r7, #28]
 800bd9a:	681a      	ldr	r2, [r3, #0]
 800bd9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd9e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800bda0:	69fb      	ldr	r3, [r7, #28]
 800bda2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bda4:	601a      	str	r2, [r3, #0]
 800bda6:	e009      	b.n	800bdbc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800bda8:	6a3b      	ldr	r3, [r7, #32]
 800bdaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdac:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800bdae:	6a3b      	ldr	r3, [r7, #32]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	623b      	str	r3, [r7, #32]
 800bdb4:	e002      	b.n	800bdbc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800bdb6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bdb8:	f7fc fc45 	bl	8008646 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bdc0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800bdc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d012      	beq.n	800bdee <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800bdc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdca:	68db      	ldr	r3, [r3, #12]
 800bdcc:	685b      	ldr	r3, [r3, #4]
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f7f9 fdd9 	bl	8005986 <lwip_htonl>
 800bdd4:	4602      	mov	r2, r0
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdda:	1ad3      	subs	r3, r2, r3
 800bddc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdde:	8912      	ldrh	r2, [r2, #8]
 800bde0:	4413      	add	r3, r2
  while (seg != NULL &&
 800bde2:	69ba      	ldr	r2, [r7, #24]
 800bde4:	429a      	cmp	r2, r3
 800bde6:	f4bf aed9 	bcs.w	800bb9c <tcp_output+0x160>
 800bdea:	e000      	b.n	800bdee <tcp_output+0x3b2>
      break;
 800bdec:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d108      	bne.n	800be08 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800bdfe:	e004      	b.n	800be0a <tcp_output+0x3ce>
    goto output_done;
 800be00:	bf00      	nop
 800be02:	e002      	b.n	800be0a <tcp_output+0x3ce>
    goto output_done;
 800be04:	bf00      	nop
 800be06:	e000      	b.n	800be0a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800be08:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	8b5b      	ldrh	r3, [r3, #26]
 800be0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800be12:	b29a      	uxth	r2, r3
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800be18:	2300      	movs	r3, #0
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3728      	adds	r7, #40	@ 0x28
 800be1e:	46bd      	mov	sp, r7
 800be20:	bdb0      	pop	{r4, r5, r7, pc}
 800be22:	bf00      	nop

0800be24 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b082      	sub	sp, #8
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d106      	bne.n	800be40 <tcp_output_segment_busy+0x1c>
 800be32:	4b09      	ldr	r3, [pc, #36]	@ (800be58 <tcp_output_segment_busy+0x34>)
 800be34:	f240 529a 	movw	r2, #1434	@ 0x59a
 800be38:	4908      	ldr	r1, [pc, #32]	@ (800be5c <tcp_output_segment_busy+0x38>)
 800be3a:	4809      	ldr	r0, [pc, #36]	@ (800be60 <tcp_output_segment_busy+0x3c>)
 800be3c:	f003 ff6c 	bl	800fd18 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	685b      	ldr	r3, [r3, #4]
 800be44:	7b9b      	ldrb	r3, [r3, #14]
 800be46:	2b01      	cmp	r3, #1
 800be48:	d001      	beq.n	800be4e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800be4a:	2301      	movs	r3, #1
 800be4c:	e000      	b.n	800be50 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800be4e:	2300      	movs	r3, #0
}
 800be50:	4618      	mov	r0, r3
 800be52:	3708      	adds	r7, #8
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}
 800be58:	08012278 	.word	0x08012278
 800be5c:	08012814 	.word	0x08012814
 800be60:	080122cc 	.word	0x080122cc

0800be64 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800be64:	b5b0      	push	{r4, r5, r7, lr}
 800be66:	b08c      	sub	sp, #48	@ 0x30
 800be68:	af04      	add	r7, sp, #16
 800be6a:	60f8      	str	r0, [r7, #12]
 800be6c:	60b9      	str	r1, [r7, #8]
 800be6e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d106      	bne.n	800be84 <tcp_output_segment+0x20>
 800be76:	4b64      	ldr	r3, [pc, #400]	@ (800c008 <tcp_output_segment+0x1a4>)
 800be78:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800be7c:	4963      	ldr	r1, [pc, #396]	@ (800c00c <tcp_output_segment+0x1a8>)
 800be7e:	4864      	ldr	r0, [pc, #400]	@ (800c010 <tcp_output_segment+0x1ac>)
 800be80:	f003 ff4a 	bl	800fd18 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d106      	bne.n	800be98 <tcp_output_segment+0x34>
 800be8a:	4b5f      	ldr	r3, [pc, #380]	@ (800c008 <tcp_output_segment+0x1a4>)
 800be8c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800be90:	4960      	ldr	r1, [pc, #384]	@ (800c014 <tcp_output_segment+0x1b0>)
 800be92:	485f      	ldr	r0, [pc, #380]	@ (800c010 <tcp_output_segment+0x1ac>)
 800be94:	f003 ff40 	bl	800fd18 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d106      	bne.n	800beac <tcp_output_segment+0x48>
 800be9e:	4b5a      	ldr	r3, [pc, #360]	@ (800c008 <tcp_output_segment+0x1a4>)
 800bea0:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800bea4:	495c      	ldr	r1, [pc, #368]	@ (800c018 <tcp_output_segment+0x1b4>)
 800bea6:	485a      	ldr	r0, [pc, #360]	@ (800c010 <tcp_output_segment+0x1ac>)
 800bea8:	f003 ff36 	bl	800fd18 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800beac:	68f8      	ldr	r0, [r7, #12]
 800beae:	f7ff ffb9 	bl	800be24 <tcp_output_segment_busy>
 800beb2:	4603      	mov	r3, r0
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d001      	beq.n	800bebc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800beb8:	2300      	movs	r3, #0
 800beba:	e0a1      	b.n	800c000 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	68dc      	ldr	r4, [r3, #12]
 800bec4:	4610      	mov	r0, r2
 800bec6:	f7f9 fd5e 	bl	8005986 <lwip_htonl>
 800beca:	4603      	mov	r3, r0
 800becc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	68dc      	ldr	r4, [r3, #12]
 800bed6:	4610      	mov	r0, r2
 800bed8:	f7f9 fd40 	bl	800595c <lwip_htons>
 800bedc:	4603      	mov	r3, r0
 800bede:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bee4:	68ba      	ldr	r2, [r7, #8]
 800bee6:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800bee8:	441a      	add	r2, r3
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	68db      	ldr	r3, [r3, #12]
 800bef2:	3314      	adds	r3, #20
 800bef4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	7a9b      	ldrb	r3, [r3, #10]
 800befa:	f003 0301 	and.w	r3, r3, #1
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d015      	beq.n	800bf2e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	3304      	adds	r3, #4
 800bf06:	461a      	mov	r2, r3
 800bf08:	6879      	ldr	r1, [r7, #4]
 800bf0a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800bf0e:	f7fc fe91 	bl	8008c34 <tcp_eff_send_mss_netif>
 800bf12:	4603      	mov	r3, r0
 800bf14:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800bf16:	8b7b      	ldrh	r3, [r7, #26]
 800bf18:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f7f9 fd32 	bl	8005986 <lwip_htonl>
 800bf22:	4602      	mov	r2, r0
 800bf24:	69fb      	ldr	r3, [r7, #28]
 800bf26:	601a      	str	r2, [r3, #0]
    opts += 1;
 800bf28:	69fb      	ldr	r3, [r7, #28]
 800bf2a:	3304      	adds	r3, #4
 800bf2c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	da02      	bge.n	800bf3e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d10c      	bne.n	800bf60 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800bf46:	4b35      	ldr	r3, [pc, #212]	@ (800c01c <tcp_output_segment+0x1b8>)
 800bf48:	681a      	ldr	r2, [r3, #0]
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	68db      	ldr	r3, [r3, #12]
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	4618      	mov	r0, r3
 800bf56:	f7f9 fd16 	bl	8005986 <lwip_htonl>
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	68da      	ldr	r2, [r3, #12]
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	685b      	ldr	r3, [r3, #4]
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	1ad3      	subs	r3, r2, r3
 800bf6c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	685b      	ldr	r3, [r3, #4]
 800bf72:	8959      	ldrh	r1, [r3, #10]
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	685b      	ldr	r3, [r3, #4]
 800bf78:	8b3a      	ldrh	r2, [r7, #24]
 800bf7a:	1a8a      	subs	r2, r1, r2
 800bf7c:	b292      	uxth	r2, r2
 800bf7e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	685b      	ldr	r3, [r3, #4]
 800bf84:	8919      	ldrh	r1, [r3, #8]
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	8b3a      	ldrh	r2, [r7, #24]
 800bf8c:	1a8a      	subs	r2, r1, r2
 800bf8e:	b292      	uxth	r2, r2
 800bf90:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	68fa      	ldr	r2, [r7, #12]
 800bf98:	68d2      	ldr	r2, [r2, #12]
 800bf9a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	68db      	ldr	r3, [r3, #12]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	741a      	strb	r2, [r3, #16]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	68da      	ldr	r2, [r3, #12]
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	7a9b      	ldrb	r3, [r3, #10]
 800bfb0:	f003 0301 	and.w	r3, r3, #1
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d001      	beq.n	800bfbc <tcp_output_segment+0x158>
 800bfb8:	2318      	movs	r3, #24
 800bfba:	e000      	b.n	800bfbe <tcp_output_segment+0x15a>
 800bfbc:	2314      	movs	r3, #20
 800bfbe:	4413      	add	r3, r2
 800bfc0:	69fa      	ldr	r2, [r7, #28]
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d006      	beq.n	800bfd4 <tcp_output_segment+0x170>
 800bfc6:	4b10      	ldr	r3, [pc, #64]	@ (800c008 <tcp_output_segment+0x1a4>)
 800bfc8:	f240 621c 	movw	r2, #1564	@ 0x61c
 800bfcc:	4914      	ldr	r1, [pc, #80]	@ (800c020 <tcp_output_segment+0x1bc>)
 800bfce:	4810      	ldr	r0, [pc, #64]	@ (800c010 <tcp_output_segment+0x1ac>)
 800bfd0:	f003 fea2 	bl	800fd18 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	6858      	ldr	r0, [r3, #4]
 800bfd8:	68b9      	ldr	r1, [r7, #8]
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	1d1c      	adds	r4, r3, #4
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	7add      	ldrb	r5, [r3, #11]
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	7a9b      	ldrb	r3, [r3, #10]
 800bfe6:	687a      	ldr	r2, [r7, #4]
 800bfe8:	9202      	str	r2, [sp, #8]
 800bfea:	2206      	movs	r2, #6
 800bfec:	9201      	str	r2, [sp, #4]
 800bfee:	9300      	str	r3, [sp, #0]
 800bff0:	462b      	mov	r3, r5
 800bff2:	4622      	mov	r2, r4
 800bff4:	f002 fce2 	bl	800e9bc <ip4_output_if>
 800bff8:	4603      	mov	r3, r0
 800bffa:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800bffc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c000:	4618      	mov	r0, r3
 800c002:	3720      	adds	r7, #32
 800c004:	46bd      	mov	sp, r7
 800c006:	bdb0      	pop	{r4, r5, r7, pc}
 800c008:	08012278 	.word	0x08012278
 800c00c:	0801283c 	.word	0x0801283c
 800c010:	080122cc 	.word	0x080122cc
 800c014:	0801285c 	.word	0x0801285c
 800c018:	0801287c 	.word	0x0801287c
 800c01c:	200087d0 	.word	0x200087d0
 800c020:	080128a0 	.word	0x080128a0

0800c024 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800c024:	b5b0      	push	{r4, r5, r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d106      	bne.n	800c040 <tcp_rexmit_rto_prepare+0x1c>
 800c032:	4b31      	ldr	r3, [pc, #196]	@ (800c0f8 <tcp_rexmit_rto_prepare+0xd4>)
 800c034:	f240 6263 	movw	r2, #1635	@ 0x663
 800c038:	4930      	ldr	r1, [pc, #192]	@ (800c0fc <tcp_rexmit_rto_prepare+0xd8>)
 800c03a:	4831      	ldr	r0, [pc, #196]	@ (800c100 <tcp_rexmit_rto_prepare+0xdc>)
 800c03c:	f003 fe6c 	bl	800fd18 <iprintf>

  if (pcb->unacked == NULL) {
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c044:	2b00      	cmp	r3, #0
 800c046:	d102      	bne.n	800c04e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800c048:	f06f 0305 	mvn.w	r3, #5
 800c04c:	e050      	b.n	800c0f0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c052:	60fb      	str	r3, [r7, #12]
 800c054:	e00b      	b.n	800c06e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800c056:	68f8      	ldr	r0, [r7, #12]
 800c058:	f7ff fee4 	bl	800be24 <tcp_output_segment_busy>
 800c05c:	4603      	mov	r3, r0
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d002      	beq.n	800c068 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800c062:	f06f 0305 	mvn.w	r3, #5
 800c066:	e043      	b.n	800c0f0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	60fb      	str	r3, [r7, #12]
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d1ef      	bne.n	800c056 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800c076:	68f8      	ldr	r0, [r7, #12]
 800c078:	f7ff fed4 	bl	800be24 <tcp_output_segment_busy>
 800c07c:	4603      	mov	r3, r0
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d002      	beq.n	800c088 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800c082:	f06f 0305 	mvn.w	r3, #5
 800c086:	e033      	b.n	800c0f0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2200      	movs	r2, #0
 800c09c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	8b5b      	ldrh	r3, [r3, #26]
 800c0a2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800c0a6:	b29a      	uxth	r2, r3
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	68db      	ldr	r3, [r3, #12]
 800c0b0:	685b      	ldr	r3, [r3, #4]
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f7f9 fc67 	bl	8005986 <lwip_htonl>
 800c0b8:	4604      	mov	r4, r0
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	891b      	ldrh	r3, [r3, #8]
 800c0be:	461d      	mov	r5, r3
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	68db      	ldr	r3, [r3, #12]
 800c0c4:	899b      	ldrh	r3, [r3, #12]
 800c0c6:	b29b      	uxth	r3, r3
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f7f9 fc47 	bl	800595c <lwip_htons>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	b2db      	uxtb	r3, r3
 800c0d2:	f003 0303 	and.w	r3, r3, #3
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d001      	beq.n	800c0de <tcp_rexmit_rto_prepare+0xba>
 800c0da:	2301      	movs	r3, #1
 800c0dc:	e000      	b.n	800c0e0 <tcp_rexmit_rto_prepare+0xbc>
 800c0de:	2300      	movs	r3, #0
 800c0e0:	442b      	add	r3, r5
 800c0e2:	18e2      	adds	r2, r4, r3
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800c0ee:	2300      	movs	r3, #0
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3710      	adds	r7, #16
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bdb0      	pop	{r4, r5, r7, pc}
 800c0f8:	08012278 	.word	0x08012278
 800c0fc:	080128b4 	.word	0x080128b4
 800c100:	080122cc 	.word	0x080122cc

0800c104 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b082      	sub	sp, #8
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d106      	bne.n	800c120 <tcp_rexmit_rto_commit+0x1c>
 800c112:	4b0d      	ldr	r3, [pc, #52]	@ (800c148 <tcp_rexmit_rto_commit+0x44>)
 800c114:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800c118:	490c      	ldr	r1, [pc, #48]	@ (800c14c <tcp_rexmit_rto_commit+0x48>)
 800c11a:	480d      	ldr	r0, [pc, #52]	@ (800c150 <tcp_rexmit_rto_commit+0x4c>)
 800c11c:	f003 fdfc 	bl	800fd18 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c126:	2bff      	cmp	r3, #255	@ 0xff
 800c128:	d007      	beq.n	800c13a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c130:	3301      	adds	r3, #1
 800c132:	b2da      	uxtb	r2, r3
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f7ff fc7e 	bl	800ba3c <tcp_output>
}
 800c140:	bf00      	nop
 800c142:	3708      	adds	r7, #8
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}
 800c148:	08012278 	.word	0x08012278
 800c14c:	080128d8 	.word	0x080128d8
 800c150:	080122cc 	.word	0x080122cc

0800c154 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b082      	sub	sp, #8
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d106      	bne.n	800c170 <tcp_rexmit_rto+0x1c>
 800c162:	4b0a      	ldr	r3, [pc, #40]	@ (800c18c <tcp_rexmit_rto+0x38>)
 800c164:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800c168:	4909      	ldr	r1, [pc, #36]	@ (800c190 <tcp_rexmit_rto+0x3c>)
 800c16a:	480a      	ldr	r0, [pc, #40]	@ (800c194 <tcp_rexmit_rto+0x40>)
 800c16c:	f003 fdd4 	bl	800fd18 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f7ff ff57 	bl	800c024 <tcp_rexmit_rto_prepare>
 800c176:	4603      	mov	r3, r0
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d102      	bne.n	800c182 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f7ff ffc1 	bl	800c104 <tcp_rexmit_rto_commit>
  }
}
 800c182:	bf00      	nop
 800c184:	3708      	adds	r7, #8
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}
 800c18a:	bf00      	nop
 800c18c:	08012278 	.word	0x08012278
 800c190:	080128fc 	.word	0x080128fc
 800c194:	080122cc 	.word	0x080122cc

0800c198 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800c198:	b590      	push	{r4, r7, lr}
 800c19a:	b085      	sub	sp, #20
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d106      	bne.n	800c1b4 <tcp_rexmit+0x1c>
 800c1a6:	4b2f      	ldr	r3, [pc, #188]	@ (800c264 <tcp_rexmit+0xcc>)
 800c1a8:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800c1ac:	492e      	ldr	r1, [pc, #184]	@ (800c268 <tcp_rexmit+0xd0>)
 800c1ae:	482f      	ldr	r0, [pc, #188]	@ (800c26c <tcp_rexmit+0xd4>)
 800c1b0:	f003 fdb2 	bl	800fd18 <iprintf>

  if (pcb->unacked == NULL) {
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d102      	bne.n	800c1c2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800c1bc:	f06f 0305 	mvn.w	r3, #5
 800c1c0:	e04c      	b.n	800c25c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1c6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800c1c8:	68b8      	ldr	r0, [r7, #8]
 800c1ca:	f7ff fe2b 	bl	800be24 <tcp_output_segment_busy>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d002      	beq.n	800c1da <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800c1d4:	f06f 0305 	mvn.w	r3, #5
 800c1d8:	e040      	b.n	800c25c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	681a      	ldr	r2, [r3, #0]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	336c      	adds	r3, #108	@ 0x6c
 800c1e6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c1e8:	e002      	b.n	800c1f0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d011      	beq.n	800c21c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	68db      	ldr	r3, [r3, #12]
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	4618      	mov	r0, r3
 800c202:	f7f9 fbc0 	bl	8005986 <lwip_htonl>
 800c206:	4604      	mov	r4, r0
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	68db      	ldr	r3, [r3, #12]
 800c20c:	685b      	ldr	r3, [r3, #4]
 800c20e:	4618      	mov	r0, r3
 800c210:	f7f9 fbb9 	bl	8005986 <lwip_htonl>
 800c214:	4603      	mov	r3, r0
 800c216:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800c218:	2b00      	cmp	r3, #0
 800c21a:	dbe6      	blt.n	800c1ea <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	681a      	ldr	r2, [r3, #0]
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	68ba      	ldr	r2, [r7, #8]
 800c228:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d103      	bne.n	800c23a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2200      	movs	r2, #0
 800c236:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c240:	2bff      	cmp	r3, #255	@ 0xff
 800c242:	d007      	beq.n	800c254 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c24a:	3301      	adds	r3, #1
 800c24c:	b2da      	uxtb	r2, r3
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2200      	movs	r2, #0
 800c258:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800c25a:	2300      	movs	r3, #0
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3714      	adds	r7, #20
 800c260:	46bd      	mov	sp, r7
 800c262:	bd90      	pop	{r4, r7, pc}
 800c264:	08012278 	.word	0x08012278
 800c268:	08012918 	.word	0x08012918
 800c26c:	080122cc 	.word	0x080122cc

0800c270 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d106      	bne.n	800c28c <tcp_rexmit_fast+0x1c>
 800c27e:	4b2a      	ldr	r3, [pc, #168]	@ (800c328 <tcp_rexmit_fast+0xb8>)
 800c280:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800c284:	4929      	ldr	r1, [pc, #164]	@ (800c32c <tcp_rexmit_fast+0xbc>)
 800c286:	482a      	ldr	r0, [pc, #168]	@ (800c330 <tcp_rexmit_fast+0xc0>)
 800c288:	f003 fd46 	bl	800fd18 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c290:	2b00      	cmp	r3, #0
 800c292:	d045      	beq.n	800c320 <tcp_rexmit_fast+0xb0>
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	8b5b      	ldrh	r3, [r3, #26]
 800c298:	f003 0304 	and.w	r3, r3, #4
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d13f      	bne.n	800c320 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f7ff ff79 	bl	800c198 <tcp_rexmit>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d139      	bne.n	800c320 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c2b8:	4293      	cmp	r3, r2
 800c2ba:	bf28      	it	cs
 800c2bc:	4613      	movcs	r3, r2
 800c2be:	b29b      	uxth	r3, r3
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	da00      	bge.n	800c2c6 <tcp_rexmit_fast+0x56>
 800c2c4:	3301      	adds	r3, #1
 800c2c6:	105b      	asrs	r3, r3, #1
 800c2c8:	b29a      	uxth	r2, r3
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c2dc:	005b      	lsls	r3, r3, #1
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d206      	bcs.n	800c2f0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c2e6:	005b      	lsls	r3, r3, #1
 800c2e8:	b29a      	uxth	r2, r3
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c2fa:	4619      	mov	r1, r3
 800c2fc:	0049      	lsls	r1, r1, #1
 800c2fe:	440b      	add	r3, r1
 800c300:	b29b      	uxth	r3, r3
 800c302:	4413      	add	r3, r2
 800c304:	b29a      	uxth	r2, r3
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	8b5b      	ldrh	r3, [r3, #26]
 800c310:	f043 0304 	orr.w	r3, r3, #4
 800c314:	b29a      	uxth	r2, r3
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2200      	movs	r2, #0
 800c31e:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800c320:	bf00      	nop
 800c322:	3708      	adds	r7, #8
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}
 800c328:	08012278 	.word	0x08012278
 800c32c:	08012930 	.word	0x08012930
 800c330:	080122cc 	.word	0x080122cc

0800c334 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b086      	sub	sp, #24
 800c338:	af00      	add	r7, sp, #0
 800c33a:	60f8      	str	r0, [r7, #12]
 800c33c:	607b      	str	r3, [r7, #4]
 800c33e:	460b      	mov	r3, r1
 800c340:	817b      	strh	r3, [r7, #10]
 800c342:	4613      	mov	r3, r2
 800c344:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c346:	897a      	ldrh	r2, [r7, #10]
 800c348:	893b      	ldrh	r3, [r7, #8]
 800c34a:	4413      	add	r3, r2
 800c34c:	b29b      	uxth	r3, r3
 800c34e:	3314      	adds	r3, #20
 800c350:	b29b      	uxth	r3, r3
 800c352:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c356:	4619      	mov	r1, r3
 800c358:	2022      	movs	r0, #34	@ 0x22
 800c35a:	f7fa fb79 	bl	8006a50 <pbuf_alloc>
 800c35e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d04d      	beq.n	800c402 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c366:	897b      	ldrh	r3, [r7, #10]
 800c368:	3313      	adds	r3, #19
 800c36a:	697a      	ldr	r2, [r7, #20]
 800c36c:	8952      	ldrh	r2, [r2, #10]
 800c36e:	4293      	cmp	r3, r2
 800c370:	db06      	blt.n	800c380 <tcp_output_alloc_header_common+0x4c>
 800c372:	4b26      	ldr	r3, [pc, #152]	@ (800c40c <tcp_output_alloc_header_common+0xd8>)
 800c374:	f240 7223 	movw	r2, #1827	@ 0x723
 800c378:	4925      	ldr	r1, [pc, #148]	@ (800c410 <tcp_output_alloc_header_common+0xdc>)
 800c37a:	4826      	ldr	r0, [pc, #152]	@ (800c414 <tcp_output_alloc_header_common+0xe0>)
 800c37c:	f003 fccc 	bl	800fd18 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	685b      	ldr	r3, [r3, #4]
 800c384:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800c386:	8c3b      	ldrh	r3, [r7, #32]
 800c388:	4618      	mov	r0, r3
 800c38a:	f7f9 fae7 	bl	800595c <lwip_htons>
 800c38e:	4603      	mov	r3, r0
 800c390:	461a      	mov	r2, r3
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c396:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c398:	4618      	mov	r0, r3
 800c39a:	f7f9 fadf 	bl	800595c <lwip_htons>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800c3a6:	693b      	ldr	r3, [r7, #16]
 800c3a8:	687a      	ldr	r2, [r7, #4]
 800c3aa:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800c3ac:	68f8      	ldr	r0, [r7, #12]
 800c3ae:	f7f9 faea 	bl	8005986 <lwip_htonl>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c3b8:	897b      	ldrh	r3, [r7, #10]
 800c3ba:	089b      	lsrs	r3, r3, #2
 800c3bc:	b29b      	uxth	r3, r3
 800c3be:	3305      	adds	r3, #5
 800c3c0:	b29b      	uxth	r3, r3
 800c3c2:	031b      	lsls	r3, r3, #12
 800c3c4:	b29a      	uxth	r2, r3
 800c3c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c3ca:	b29b      	uxth	r3, r3
 800c3cc:	4313      	orrs	r3, r2
 800c3ce:	b29b      	uxth	r3, r3
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f7f9 fac3 	bl	800595c <lwip_htons>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	461a      	mov	r2, r3
 800c3da:	693b      	ldr	r3, [r7, #16]
 800c3dc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c3de:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f7f9 fabb 	bl	800595c <lwip_htons>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	461a      	mov	r2, r3
 800c3ea:	693b      	ldr	r3, [r7, #16]
 800c3ec:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	741a      	strb	r2, [r3, #16]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	749a      	strb	r2, [r3, #18]
 800c3fe:	2200      	movs	r2, #0
 800c400:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800c402:	697b      	ldr	r3, [r7, #20]
}
 800c404:	4618      	mov	r0, r3
 800c406:	3718      	adds	r7, #24
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}
 800c40c:	08012278 	.word	0x08012278
 800c410:	08012950 	.word	0x08012950
 800c414:	080122cc 	.word	0x080122cc

0800c418 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800c418:	b5b0      	push	{r4, r5, r7, lr}
 800c41a:	b08a      	sub	sp, #40	@ 0x28
 800c41c:	af04      	add	r7, sp, #16
 800c41e:	60f8      	str	r0, [r7, #12]
 800c420:	607b      	str	r3, [r7, #4]
 800c422:	460b      	mov	r3, r1
 800c424:	817b      	strh	r3, [r7, #10]
 800c426:	4613      	mov	r3, r2
 800c428:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d106      	bne.n	800c43e <tcp_output_alloc_header+0x26>
 800c430:	4b15      	ldr	r3, [pc, #84]	@ (800c488 <tcp_output_alloc_header+0x70>)
 800c432:	f240 7242 	movw	r2, #1858	@ 0x742
 800c436:	4915      	ldr	r1, [pc, #84]	@ (800c48c <tcp_output_alloc_header+0x74>)
 800c438:	4815      	ldr	r0, [pc, #84]	@ (800c490 <tcp_output_alloc_header+0x78>)
 800c43a:	f003 fc6d 	bl	800fd18 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	8adb      	ldrh	r3, [r3, #22]
 800c446:	68fa      	ldr	r2, [r7, #12]
 800c448:	8b12      	ldrh	r2, [r2, #24]
 800c44a:	68f9      	ldr	r1, [r7, #12]
 800c44c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800c44e:	893d      	ldrh	r5, [r7, #8]
 800c450:	897c      	ldrh	r4, [r7, #10]
 800c452:	9103      	str	r1, [sp, #12]
 800c454:	2110      	movs	r1, #16
 800c456:	9102      	str	r1, [sp, #8]
 800c458:	9201      	str	r2, [sp, #4]
 800c45a:	9300      	str	r3, [sp, #0]
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	462a      	mov	r2, r5
 800c460:	4621      	mov	r1, r4
 800c462:	f7ff ff67 	bl	800c334 <tcp_output_alloc_header_common>
 800c466:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d006      	beq.n	800c47c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c472:	68fa      	ldr	r2, [r7, #12]
 800c474:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800c476:	441a      	add	r2, r3
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800c47c:	697b      	ldr	r3, [r7, #20]
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3718      	adds	r7, #24
 800c482:	46bd      	mov	sp, r7
 800c484:	bdb0      	pop	{r4, r5, r7, pc}
 800c486:	bf00      	nop
 800c488:	08012278 	.word	0x08012278
 800c48c:	08012980 	.word	0x08012980
 800c490:	080122cc 	.word	0x080122cc

0800c494 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b088      	sub	sp, #32
 800c498:	af00      	add	r7, sp, #0
 800c49a:	60f8      	str	r0, [r7, #12]
 800c49c:	60b9      	str	r1, [r7, #8]
 800c49e:	4611      	mov	r1, r2
 800c4a0:	461a      	mov	r2, r3
 800c4a2:	460b      	mov	r3, r1
 800c4a4:	71fb      	strb	r3, [r7, #7]
 800c4a6:	4613      	mov	r3, r2
 800c4a8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d106      	bne.n	800c4c2 <tcp_output_fill_options+0x2e>
 800c4b4:	4b12      	ldr	r3, [pc, #72]	@ (800c500 <tcp_output_fill_options+0x6c>)
 800c4b6:	f240 7256 	movw	r2, #1878	@ 0x756
 800c4ba:	4912      	ldr	r1, [pc, #72]	@ (800c504 <tcp_output_fill_options+0x70>)
 800c4bc:	4812      	ldr	r0, [pc, #72]	@ (800c508 <tcp_output_fill_options+0x74>)
 800c4be:	f003 fc2b 	bl	800fd18 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	685b      	ldr	r3, [r3, #4]
 800c4c6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800c4c8:	69bb      	ldr	r3, [r7, #24]
 800c4ca:	3314      	adds	r3, #20
 800c4cc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800c4ce:	8bfb      	ldrh	r3, [r7, #30]
 800c4d0:	009b      	lsls	r3, r3, #2
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	79fb      	ldrb	r3, [r7, #7]
 800c4d6:	009b      	lsls	r3, r3, #2
 800c4d8:	f003 0304 	and.w	r3, r3, #4
 800c4dc:	4413      	add	r3, r2
 800c4de:	3314      	adds	r3, #20
 800c4e0:	69ba      	ldr	r2, [r7, #24]
 800c4e2:	4413      	add	r3, r2
 800c4e4:	697a      	ldr	r2, [r7, #20]
 800c4e6:	429a      	cmp	r2, r3
 800c4e8:	d006      	beq.n	800c4f8 <tcp_output_fill_options+0x64>
 800c4ea:	4b05      	ldr	r3, [pc, #20]	@ (800c500 <tcp_output_fill_options+0x6c>)
 800c4ec:	f240 7275 	movw	r2, #1909	@ 0x775
 800c4f0:	4906      	ldr	r1, [pc, #24]	@ (800c50c <tcp_output_fill_options+0x78>)
 800c4f2:	4805      	ldr	r0, [pc, #20]	@ (800c508 <tcp_output_fill_options+0x74>)
 800c4f4:	f003 fc10 	bl	800fd18 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800c4f8:	bf00      	nop
 800c4fa:	3720      	adds	r7, #32
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}
 800c500:	08012278 	.word	0x08012278
 800c504:	080129a8 	.word	0x080129a8
 800c508:	080122cc 	.word	0x080122cc
 800c50c:	080128a0 	.word	0x080128a0

0800c510 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b08a      	sub	sp, #40	@ 0x28
 800c514:	af04      	add	r7, sp, #16
 800c516:	60f8      	str	r0, [r7, #12]
 800c518:	60b9      	str	r1, [r7, #8]
 800c51a:	607a      	str	r2, [r7, #4]
 800c51c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d106      	bne.n	800c532 <tcp_output_control_segment+0x22>
 800c524:	4b1c      	ldr	r3, [pc, #112]	@ (800c598 <tcp_output_control_segment+0x88>)
 800c526:	f240 7287 	movw	r2, #1927	@ 0x787
 800c52a:	491c      	ldr	r1, [pc, #112]	@ (800c59c <tcp_output_control_segment+0x8c>)
 800c52c:	481c      	ldr	r0, [pc, #112]	@ (800c5a0 <tcp_output_control_segment+0x90>)
 800c52e:	f003 fbf3 	bl	800fd18 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800c532:	683a      	ldr	r2, [r7, #0]
 800c534:	6879      	ldr	r1, [r7, #4]
 800c536:	68f8      	ldr	r0, [r7, #12]
 800c538:	f7fe ff42 	bl	800b3c0 <tcp_route>
 800c53c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d102      	bne.n	800c54a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800c544:	23fc      	movs	r3, #252	@ 0xfc
 800c546:	75fb      	strb	r3, [r7, #23]
 800c548:	e01c      	b.n	800c584 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d006      	beq.n	800c55e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	7adb      	ldrb	r3, [r3, #11]
 800c554:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	7a9b      	ldrb	r3, [r3, #10]
 800c55a:	757b      	strb	r3, [r7, #21]
 800c55c:	e003      	b.n	800c566 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800c55e:	23ff      	movs	r3, #255	@ 0xff
 800c560:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800c562:	2300      	movs	r3, #0
 800c564:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c566:	7dba      	ldrb	r2, [r7, #22]
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	9302      	str	r3, [sp, #8]
 800c56c:	2306      	movs	r3, #6
 800c56e:	9301      	str	r3, [sp, #4]
 800c570:	7d7b      	ldrb	r3, [r7, #21]
 800c572:	9300      	str	r3, [sp, #0]
 800c574:	4613      	mov	r3, r2
 800c576:	683a      	ldr	r2, [r7, #0]
 800c578:	6879      	ldr	r1, [r7, #4]
 800c57a:	68b8      	ldr	r0, [r7, #8]
 800c57c:	f002 fa1e 	bl	800e9bc <ip4_output_if>
 800c580:	4603      	mov	r3, r0
 800c582:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c584:	68b8      	ldr	r0, [r7, #8]
 800c586:	f7fa fd47 	bl	8007018 <pbuf_free>
  return err;
 800c58a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3718      	adds	r7, #24
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
 800c596:	bf00      	nop
 800c598:	08012278 	.word	0x08012278
 800c59c:	080129d0 	.word	0x080129d0
 800c5a0:	080122cc 	.word	0x080122cc

0800c5a4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c5a4:	b590      	push	{r4, r7, lr}
 800c5a6:	b08b      	sub	sp, #44	@ 0x2c
 800c5a8:	af04      	add	r7, sp, #16
 800c5aa:	60f8      	str	r0, [r7, #12]
 800c5ac:	60b9      	str	r1, [r7, #8]
 800c5ae:	607a      	str	r2, [r7, #4]
 800c5b0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d106      	bne.n	800c5c6 <tcp_rst+0x22>
 800c5b8:	4b1f      	ldr	r3, [pc, #124]	@ (800c638 <tcp_rst+0x94>)
 800c5ba:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800c5be:	491f      	ldr	r1, [pc, #124]	@ (800c63c <tcp_rst+0x98>)
 800c5c0:	481f      	ldr	r0, [pc, #124]	@ (800c640 <tcp_rst+0x9c>)
 800c5c2:	f003 fba9 	bl	800fd18 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c5c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d106      	bne.n	800c5da <tcp_rst+0x36>
 800c5cc:	4b1a      	ldr	r3, [pc, #104]	@ (800c638 <tcp_rst+0x94>)
 800c5ce:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800c5d2:	491c      	ldr	r1, [pc, #112]	@ (800c644 <tcp_rst+0xa0>)
 800c5d4:	481a      	ldr	r0, [pc, #104]	@ (800c640 <tcp_rst+0x9c>)
 800c5d6:	f003 fb9f 	bl	800fd18 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c5da:	2300      	movs	r3, #0
 800c5dc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800c5de:	f246 0308 	movw	r3, #24584	@ 0x6008
 800c5e2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c5e4:	7dfb      	ldrb	r3, [r7, #23]
 800c5e6:	b29c      	uxth	r4, r3
 800c5e8:	68b8      	ldr	r0, [r7, #8]
 800c5ea:	f7f9 f9cc 	bl	8005986 <lwip_htonl>
 800c5ee:	4602      	mov	r2, r0
 800c5f0:	8abb      	ldrh	r3, [r7, #20]
 800c5f2:	9303      	str	r3, [sp, #12]
 800c5f4:	2314      	movs	r3, #20
 800c5f6:	9302      	str	r3, [sp, #8]
 800c5f8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800c5fa:	9301      	str	r3, [sp, #4]
 800c5fc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c5fe:	9300      	str	r3, [sp, #0]
 800c600:	4613      	mov	r3, r2
 800c602:	2200      	movs	r2, #0
 800c604:	4621      	mov	r1, r4
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f7ff fe94 	bl	800c334 <tcp_output_alloc_header_common>
 800c60c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d00c      	beq.n	800c62e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c614:	7dfb      	ldrb	r3, [r7, #23]
 800c616:	2200      	movs	r2, #0
 800c618:	6939      	ldr	r1, [r7, #16]
 800c61a:	68f8      	ldr	r0, [r7, #12]
 800c61c:	f7ff ff3a 	bl	800c494 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c622:	683a      	ldr	r2, [r7, #0]
 800c624:	6939      	ldr	r1, [r7, #16]
 800c626:	68f8      	ldr	r0, [r7, #12]
 800c628:	f7ff ff72 	bl	800c510 <tcp_output_control_segment>
 800c62c:	e000      	b.n	800c630 <tcp_rst+0x8c>
    return;
 800c62e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c630:	371c      	adds	r7, #28
 800c632:	46bd      	mov	sp, r7
 800c634:	bd90      	pop	{r4, r7, pc}
 800c636:	bf00      	nop
 800c638:	08012278 	.word	0x08012278
 800c63c:	080129fc 	.word	0x080129fc
 800c640:	080122cc 	.word	0x080122cc
 800c644:	08012a18 	.word	0x08012a18

0800c648 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c648:	b590      	push	{r4, r7, lr}
 800c64a:	b087      	sub	sp, #28
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800c650:	2300      	movs	r3, #0
 800c652:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800c654:	2300      	movs	r3, #0
 800c656:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d106      	bne.n	800c66c <tcp_send_empty_ack+0x24>
 800c65e:	4b28      	ldr	r3, [pc, #160]	@ (800c700 <tcp_send_empty_ack+0xb8>)
 800c660:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800c664:	4927      	ldr	r1, [pc, #156]	@ (800c704 <tcp_send_empty_ack+0xbc>)
 800c666:	4828      	ldr	r0, [pc, #160]	@ (800c708 <tcp_send_empty_ack+0xc0>)
 800c668:	f003 fb56 	bl	800fd18 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c66c:	7dfb      	ldrb	r3, [r7, #23]
 800c66e:	009b      	lsls	r3, r3, #2
 800c670:	b2db      	uxtb	r3, r3
 800c672:	f003 0304 	and.w	r3, r3, #4
 800c676:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c678:	7d7b      	ldrb	r3, [r7, #21]
 800c67a:	b29c      	uxth	r4, r3
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c680:	4618      	mov	r0, r3
 800c682:	f7f9 f980 	bl	8005986 <lwip_htonl>
 800c686:	4603      	mov	r3, r0
 800c688:	2200      	movs	r2, #0
 800c68a:	4621      	mov	r1, r4
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f7ff fec3 	bl	800c418 <tcp_output_alloc_header>
 800c692:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d109      	bne.n	800c6ae <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	8b5b      	ldrh	r3, [r3, #26]
 800c69e:	f043 0303 	orr.w	r3, r3, #3
 800c6a2:	b29a      	uxth	r2, r3
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c6a8:	f06f 0301 	mvn.w	r3, #1
 800c6ac:	e023      	b.n	800c6f6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c6ae:	7dbb      	ldrb	r3, [r7, #22]
 800c6b0:	7dfa      	ldrb	r2, [r7, #23]
 800c6b2:	6939      	ldr	r1, [r7, #16]
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f7ff feed 	bl	800c494 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c6ba:	687a      	ldr	r2, [r7, #4]
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	3304      	adds	r3, #4
 800c6c0:	6939      	ldr	r1, [r7, #16]
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f7ff ff24 	bl	800c510 <tcp_output_control_segment>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c6cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d007      	beq.n	800c6e4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	8b5b      	ldrh	r3, [r3, #26]
 800c6d8:	f043 0303 	orr.w	r3, r3, #3
 800c6dc:	b29a      	uxth	r2, r3
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	835a      	strh	r2, [r3, #26]
 800c6e2:	e006      	b.n	800c6f2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	8b5b      	ldrh	r3, [r3, #26]
 800c6e8:	f023 0303 	bic.w	r3, r3, #3
 800c6ec:	b29a      	uxth	r2, r3
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800c6f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	371c      	adds	r7, #28
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd90      	pop	{r4, r7, pc}
 800c6fe:	bf00      	nop
 800c700:	08012278 	.word	0x08012278
 800c704:	08012a34 	.word	0x08012a34
 800c708:	080122cc 	.word	0x080122cc

0800c70c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c70c:	b590      	push	{r4, r7, lr}
 800c70e:	b087      	sub	sp, #28
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c714:	2300      	movs	r3, #0
 800c716:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d106      	bne.n	800c72c <tcp_keepalive+0x20>
 800c71e:	4b18      	ldr	r3, [pc, #96]	@ (800c780 <tcp_keepalive+0x74>)
 800c720:	f640 0224 	movw	r2, #2084	@ 0x824
 800c724:	4917      	ldr	r1, [pc, #92]	@ (800c784 <tcp_keepalive+0x78>)
 800c726:	4818      	ldr	r0, [pc, #96]	@ (800c788 <tcp_keepalive+0x7c>)
 800c728:	f003 faf6 	bl	800fd18 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c72c:	7dfb      	ldrb	r3, [r7, #23]
 800c72e:	b29c      	uxth	r4, r3
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c734:	3b01      	subs	r3, #1
 800c736:	4618      	mov	r0, r3
 800c738:	f7f9 f925 	bl	8005986 <lwip_htonl>
 800c73c:	4603      	mov	r3, r0
 800c73e:	2200      	movs	r2, #0
 800c740:	4621      	mov	r1, r4
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f7ff fe68 	bl	800c418 <tcp_output_alloc_header>
 800c748:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d102      	bne.n	800c756 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c750:	f04f 33ff 	mov.w	r3, #4294967295
 800c754:	e010      	b.n	800c778 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c756:	7dfb      	ldrb	r3, [r7, #23]
 800c758:	2200      	movs	r2, #0
 800c75a:	6939      	ldr	r1, [r7, #16]
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f7ff fe99 	bl	800c494 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c762:	687a      	ldr	r2, [r7, #4]
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	3304      	adds	r3, #4
 800c768:	6939      	ldr	r1, [r7, #16]
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f7ff fed0 	bl	800c510 <tcp_output_control_segment>
 800c770:	4603      	mov	r3, r0
 800c772:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c774:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c778:	4618      	mov	r0, r3
 800c77a:	371c      	adds	r7, #28
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd90      	pop	{r4, r7, pc}
 800c780:	08012278 	.word	0x08012278
 800c784:	08012a54 	.word	0x08012a54
 800c788:	080122cc 	.word	0x080122cc

0800c78c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c78c:	b590      	push	{r4, r7, lr}
 800c78e:	b08b      	sub	sp, #44	@ 0x2c
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c794:	2300      	movs	r3, #0
 800c796:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d106      	bne.n	800c7ae <tcp_zero_window_probe+0x22>
 800c7a0:	4b4c      	ldr	r3, [pc, #304]	@ (800c8d4 <tcp_zero_window_probe+0x148>)
 800c7a2:	f640 024f 	movw	r2, #2127	@ 0x84f
 800c7a6:	494c      	ldr	r1, [pc, #304]	@ (800c8d8 <tcp_zero_window_probe+0x14c>)
 800c7a8:	484c      	ldr	r0, [pc, #304]	@ (800c8dc <tcp_zero_window_probe+0x150>)
 800c7aa:	f003 fab5 	bl	800fd18 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7b2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800c7b4:	6a3b      	ldr	r3, [r7, #32]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d101      	bne.n	800c7be <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	e086      	b.n	800c8cc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800c7c4:	2bff      	cmp	r3, #255	@ 0xff
 800c7c6:	d007      	beq.n	800c7d8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800c7ce:	3301      	adds	r3, #1
 800c7d0:	b2da      	uxtb	r2, r3
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c7d8:	6a3b      	ldr	r3, [r7, #32]
 800c7da:	68db      	ldr	r3, [r3, #12]
 800c7dc:	899b      	ldrh	r3, [r3, #12]
 800c7de:	b29b      	uxth	r3, r3
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7f9 f8bb 	bl	800595c <lwip_htons>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	b2db      	uxtb	r3, r3
 800c7ea:	f003 0301 	and.w	r3, r3, #1
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d005      	beq.n	800c7fe <tcp_zero_window_probe+0x72>
 800c7f2:	6a3b      	ldr	r3, [r7, #32]
 800c7f4:	891b      	ldrh	r3, [r3, #8]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d101      	bne.n	800c7fe <tcp_zero_window_probe+0x72>
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	e000      	b.n	800c800 <tcp_zero_window_probe+0x74>
 800c7fe:	2300      	movs	r3, #0
 800c800:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c802:	7ffb      	ldrb	r3, [r7, #31]
 800c804:	2b00      	cmp	r3, #0
 800c806:	bf0c      	ite	eq
 800c808:	2301      	moveq	r3, #1
 800c80a:	2300      	movne	r3, #0
 800c80c:	b2db      	uxtb	r3, r3
 800c80e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c810:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c814:	b299      	uxth	r1, r3
 800c816:	6a3b      	ldr	r3, [r7, #32]
 800c818:	68db      	ldr	r3, [r3, #12]
 800c81a:	685b      	ldr	r3, [r3, #4]
 800c81c:	8bba      	ldrh	r2, [r7, #28]
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f7ff fdfa 	bl	800c418 <tcp_output_alloc_header>
 800c824:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c826:	69bb      	ldr	r3, [r7, #24]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d102      	bne.n	800c832 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c82c:	f04f 33ff 	mov.w	r3, #4294967295
 800c830:	e04c      	b.n	800c8cc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c832:	69bb      	ldr	r3, [r7, #24]
 800c834:	685b      	ldr	r3, [r3, #4]
 800c836:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c838:	7ffb      	ldrb	r3, [r7, #31]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d011      	beq.n	800c862 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	899b      	ldrh	r3, [r3, #12]
 800c842:	b29b      	uxth	r3, r3
 800c844:	b21b      	sxth	r3, r3
 800c846:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c84a:	b21c      	sxth	r4, r3
 800c84c:	2011      	movs	r0, #17
 800c84e:	f7f9 f885 	bl	800595c <lwip_htons>
 800c852:	4603      	mov	r3, r0
 800c854:	b21b      	sxth	r3, r3
 800c856:	4323      	orrs	r3, r4
 800c858:	b21b      	sxth	r3, r3
 800c85a:	b29a      	uxth	r2, r3
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	819a      	strh	r2, [r3, #12]
 800c860:	e010      	b.n	800c884 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c862:	69bb      	ldr	r3, [r7, #24]
 800c864:	685b      	ldr	r3, [r3, #4]
 800c866:	3314      	adds	r3, #20
 800c868:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c86a:	6a3b      	ldr	r3, [r7, #32]
 800c86c:	6858      	ldr	r0, [r3, #4]
 800c86e:	6a3b      	ldr	r3, [r7, #32]
 800c870:	685b      	ldr	r3, [r3, #4]
 800c872:	891a      	ldrh	r2, [r3, #8]
 800c874:	6a3b      	ldr	r3, [r7, #32]
 800c876:	891b      	ldrh	r3, [r3, #8]
 800c878:	1ad3      	subs	r3, r2, r3
 800c87a:	b29b      	uxth	r3, r3
 800c87c:	2201      	movs	r2, #1
 800c87e:	6939      	ldr	r1, [r7, #16]
 800c880:	f7fa fdc4 	bl	800740c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c884:	6a3b      	ldr	r3, [r7, #32]
 800c886:	68db      	ldr	r3, [r3, #12]
 800c888:	685b      	ldr	r3, [r3, #4]
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7f9 f87b 	bl	8005986 <lwip_htonl>
 800c890:	4603      	mov	r3, r0
 800c892:	3301      	adds	r3, #1
 800c894:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	1ad3      	subs	r3, r2, r3
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	da02      	bge.n	800c8a8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	68fa      	ldr	r2, [r7, #12]
 800c8a6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c8a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	69b9      	ldr	r1, [r7, #24]
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f7ff fdef 	bl	800c494 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c8b6:	687a      	ldr	r2, [r7, #4]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	3304      	adds	r3, #4
 800c8bc:	69b9      	ldr	r1, [r7, #24]
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f7ff fe26 	bl	800c510 <tcp_output_control_segment>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c8c8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	372c      	adds	r7, #44	@ 0x2c
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd90      	pop	{r4, r7, pc}
 800c8d4:	08012278 	.word	0x08012278
 800c8d8:	08012a70 	.word	0x08012a70
 800c8dc:	080122cc 	.word	0x080122cc

0800c8e0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b082      	sub	sp, #8
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c8e8:	f7fa ff10 	bl	800770c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c8ec:	4b0a      	ldr	r3, [pc, #40]	@ (800c918 <tcpip_tcp_timer+0x38>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d103      	bne.n	800c8fc <tcpip_tcp_timer+0x1c>
 800c8f4:	4b09      	ldr	r3, [pc, #36]	@ (800c91c <tcpip_tcp_timer+0x3c>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d005      	beq.n	800c908 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	4908      	ldr	r1, [pc, #32]	@ (800c920 <tcpip_tcp_timer+0x40>)
 800c900:	20fa      	movs	r0, #250	@ 0xfa
 800c902:	f000 f8f3 	bl	800caec <sys_timeout>
 800c906:	e003      	b.n	800c910 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c908:	4b06      	ldr	r3, [pc, #24]	@ (800c924 <tcpip_tcp_timer+0x44>)
 800c90a:	2200      	movs	r2, #0
 800c90c:	601a      	str	r2, [r3, #0]
  }
}
 800c90e:	bf00      	nop
 800c910:	bf00      	nop
 800c912:	3708      	adds	r7, #8
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}
 800c918:	200087dc 	.word	0x200087dc
 800c91c:	200087e0 	.word	0x200087e0
 800c920:	0800c8e1 	.word	0x0800c8e1
 800c924:	20008828 	.word	0x20008828

0800c928 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c92c:	4b0a      	ldr	r3, [pc, #40]	@ (800c958 <tcp_timer_needed+0x30>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d10f      	bne.n	800c954 <tcp_timer_needed+0x2c>
 800c934:	4b09      	ldr	r3, [pc, #36]	@ (800c95c <tcp_timer_needed+0x34>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d103      	bne.n	800c944 <tcp_timer_needed+0x1c>
 800c93c:	4b08      	ldr	r3, [pc, #32]	@ (800c960 <tcp_timer_needed+0x38>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d007      	beq.n	800c954 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c944:	4b04      	ldr	r3, [pc, #16]	@ (800c958 <tcp_timer_needed+0x30>)
 800c946:	2201      	movs	r2, #1
 800c948:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c94a:	2200      	movs	r2, #0
 800c94c:	4905      	ldr	r1, [pc, #20]	@ (800c964 <tcp_timer_needed+0x3c>)
 800c94e:	20fa      	movs	r0, #250	@ 0xfa
 800c950:	f000 f8cc 	bl	800caec <sys_timeout>
  }
}
 800c954:	bf00      	nop
 800c956:	bd80      	pop	{r7, pc}
 800c958:	20008828 	.word	0x20008828
 800c95c:	200087dc 	.word	0x200087dc
 800c960:	200087e0 	.word	0x200087e0
 800c964:	0800c8e1 	.word	0x0800c8e1

0800c968 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b086      	sub	sp, #24
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	60f8      	str	r0, [r7, #12]
 800c970:	60b9      	str	r1, [r7, #8]
 800c972:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c974:	2006      	movs	r0, #6
 800c976:	f7f9 fc69 	bl	800624c <memp_malloc>
 800c97a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d109      	bne.n	800c996 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c982:	693b      	ldr	r3, [r7, #16]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d151      	bne.n	800ca2c <sys_timeout_abs+0xc4>
 800c988:	4b2a      	ldr	r3, [pc, #168]	@ (800ca34 <sys_timeout_abs+0xcc>)
 800c98a:	22be      	movs	r2, #190	@ 0xbe
 800c98c:	492a      	ldr	r1, [pc, #168]	@ (800ca38 <sys_timeout_abs+0xd0>)
 800c98e:	482b      	ldr	r0, [pc, #172]	@ (800ca3c <sys_timeout_abs+0xd4>)
 800c990:	f003 f9c2 	bl	800fd18 <iprintf>
    return;
 800c994:	e04a      	b.n	800ca2c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	2200      	movs	r2, #0
 800c99a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	68ba      	ldr	r2, [r7, #8]
 800c9a0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	687a      	ldr	r2, [r7, #4]
 800c9a6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	68fa      	ldr	r2, [r7, #12]
 800c9ac:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c9ae:	4b24      	ldr	r3, [pc, #144]	@ (800ca40 <sys_timeout_abs+0xd8>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d103      	bne.n	800c9be <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c9b6:	4a22      	ldr	r2, [pc, #136]	@ (800ca40 <sys_timeout_abs+0xd8>)
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	6013      	str	r3, [r2, #0]
    return;
 800c9bc:	e037      	b.n	800ca2e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	685a      	ldr	r2, [r3, #4]
 800c9c2:	4b1f      	ldr	r3, [pc, #124]	@ (800ca40 <sys_timeout_abs+0xd8>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	685b      	ldr	r3, [r3, #4]
 800c9c8:	1ad3      	subs	r3, r2, r3
 800c9ca:	0fdb      	lsrs	r3, r3, #31
 800c9cc:	f003 0301 	and.w	r3, r3, #1
 800c9d0:	b2db      	uxtb	r3, r3
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d007      	beq.n	800c9e6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c9d6:	4b1a      	ldr	r3, [pc, #104]	@ (800ca40 <sys_timeout_abs+0xd8>)
 800c9d8:	681a      	ldr	r2, [r3, #0]
 800c9da:	693b      	ldr	r3, [r7, #16]
 800c9dc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c9de:	4a18      	ldr	r2, [pc, #96]	@ (800ca40 <sys_timeout_abs+0xd8>)
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	6013      	str	r3, [r2, #0]
 800c9e4:	e023      	b.n	800ca2e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c9e6:	4b16      	ldr	r3, [pc, #88]	@ (800ca40 <sys_timeout_abs+0xd8>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	617b      	str	r3, [r7, #20]
 800c9ec:	e01a      	b.n	800ca24 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d00b      	beq.n	800ca0e <sys_timeout_abs+0xa6>
 800c9f6:	693b      	ldr	r3, [r7, #16]
 800c9f8:	685a      	ldr	r2, [r3, #4]
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	685b      	ldr	r3, [r3, #4]
 800ca00:	1ad3      	subs	r3, r2, r3
 800ca02:	0fdb      	lsrs	r3, r3, #31
 800ca04:	f003 0301 	and.w	r3, r3, #1
 800ca08:	b2db      	uxtb	r3, r3
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d007      	beq.n	800ca1e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	681a      	ldr	r2, [r3, #0]
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	693a      	ldr	r2, [r7, #16]
 800ca1a:	601a      	str	r2, [r3, #0]
        break;
 800ca1c:	e007      	b.n	800ca2e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	617b      	str	r3, [r7, #20]
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d1e1      	bne.n	800c9ee <sys_timeout_abs+0x86>
 800ca2a:	e000      	b.n	800ca2e <sys_timeout_abs+0xc6>
    return;
 800ca2c:	bf00      	nop
      }
    }
  }
}
 800ca2e:	3718      	adds	r7, #24
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}
 800ca34:	08012a94 	.word	0x08012a94
 800ca38:	08012ac8 	.word	0x08012ac8
 800ca3c:	08012b08 	.word	0x08012b08
 800ca40:	20008820 	.word	0x20008820

0800ca44 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b086      	sub	sp, #24
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	685b      	ldr	r3, [r3, #4]
 800ca54:	4798      	blx	r3

  now = sys_now();
 800ca56:	f7f8 fd75 	bl	8005544 <sys_now>
 800ca5a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	681a      	ldr	r2, [r3, #0]
 800ca60:	4b0f      	ldr	r3, [pc, #60]	@ (800caa0 <lwip_cyclic_timer+0x5c>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4413      	add	r3, r2
 800ca66:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ca68:	68fa      	ldr	r2, [r7, #12]
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	1ad3      	subs	r3, r2, r3
 800ca6e:	0fdb      	lsrs	r3, r3, #31
 800ca70:	f003 0301 	and.w	r3, r3, #1
 800ca74:	b2db      	uxtb	r3, r3
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d009      	beq.n	800ca8e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	681a      	ldr	r2, [r3, #0]
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	4413      	add	r3, r2
 800ca82:	687a      	ldr	r2, [r7, #4]
 800ca84:	4907      	ldr	r1, [pc, #28]	@ (800caa4 <lwip_cyclic_timer+0x60>)
 800ca86:	4618      	mov	r0, r3
 800ca88:	f7ff ff6e 	bl	800c968 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800ca8c:	e004      	b.n	800ca98 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ca8e:	687a      	ldr	r2, [r7, #4]
 800ca90:	4904      	ldr	r1, [pc, #16]	@ (800caa4 <lwip_cyclic_timer+0x60>)
 800ca92:	68f8      	ldr	r0, [r7, #12]
 800ca94:	f7ff ff68 	bl	800c968 <sys_timeout_abs>
}
 800ca98:	bf00      	nop
 800ca9a:	3718      	adds	r7, #24
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}
 800caa0:	20008824 	.word	0x20008824
 800caa4:	0800ca45 	.word	0x0800ca45

0800caa8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800caae:	2301      	movs	r3, #1
 800cab0:	607b      	str	r3, [r7, #4]
 800cab2:	e00e      	b.n	800cad2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800cab4:	4a0b      	ldr	r2, [pc, #44]	@ (800cae4 <sys_timeouts_init+0x3c>)
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	00db      	lsls	r3, r3, #3
 800cac0:	4a08      	ldr	r2, [pc, #32]	@ (800cae4 <sys_timeouts_init+0x3c>)
 800cac2:	4413      	add	r3, r2
 800cac4:	461a      	mov	r2, r3
 800cac6:	4908      	ldr	r1, [pc, #32]	@ (800cae8 <sys_timeouts_init+0x40>)
 800cac8:	f000 f810 	bl	800caec <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	3301      	adds	r3, #1
 800cad0:	607b      	str	r3, [r7, #4]
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2b02      	cmp	r3, #2
 800cad6:	d9ed      	bls.n	800cab4 <sys_timeouts_init+0xc>
  }
}
 800cad8:	bf00      	nop
 800cada:	bf00      	nop
 800cadc:	3708      	adds	r7, #8
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}
 800cae2:	bf00      	nop
 800cae4:	08013680 	.word	0x08013680
 800cae8:	0800ca45 	.word	0x0800ca45

0800caec <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b086      	sub	sp, #24
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	60f8      	str	r0, [r7, #12]
 800caf4:	60b9      	str	r1, [r7, #8]
 800caf6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cafe:	d306      	bcc.n	800cb0e <sys_timeout+0x22>
 800cb00:	4b0a      	ldr	r3, [pc, #40]	@ (800cb2c <sys_timeout+0x40>)
 800cb02:	f240 1229 	movw	r2, #297	@ 0x129
 800cb06:	490a      	ldr	r1, [pc, #40]	@ (800cb30 <sys_timeout+0x44>)
 800cb08:	480a      	ldr	r0, [pc, #40]	@ (800cb34 <sys_timeout+0x48>)
 800cb0a:	f003 f905 	bl	800fd18 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800cb0e:	f7f8 fd19 	bl	8005544 <sys_now>
 800cb12:	4602      	mov	r2, r0
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	4413      	add	r3, r2
 800cb18:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800cb1a:	687a      	ldr	r2, [r7, #4]
 800cb1c:	68b9      	ldr	r1, [r7, #8]
 800cb1e:	6978      	ldr	r0, [r7, #20]
 800cb20:	f7ff ff22 	bl	800c968 <sys_timeout_abs>
#endif
}
 800cb24:	bf00      	nop
 800cb26:	3718      	adds	r7, #24
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}
 800cb2c:	08012a94 	.word	0x08012a94
 800cb30:	08012b30 	.word	0x08012b30
 800cb34:	08012b08 	.word	0x08012b08

0800cb38 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800cb3e:	f7f8 fd01 	bl	8005544 <sys_now>
 800cb42:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800cb44:	4b1a      	ldr	r3, [pc, #104]	@ (800cbb0 <sys_check_timeouts+0x78>)
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	b2db      	uxtb	r3, r3
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d001      	beq.n	800cb52 <sys_check_timeouts+0x1a>
 800cb4e:	f7f9 ff29 	bl	80069a4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800cb52:	4b18      	ldr	r3, [pc, #96]	@ (800cbb4 <sys_check_timeouts+0x7c>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d022      	beq.n	800cba4 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	685b      	ldr	r3, [r3, #4]
 800cb62:	68fa      	ldr	r2, [r7, #12]
 800cb64:	1ad3      	subs	r3, r2, r3
 800cb66:	0fdb      	lsrs	r3, r3, #31
 800cb68:	f003 0301 	and.w	r3, r3, #1
 800cb6c:	b2db      	uxtb	r3, r3
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d11a      	bne.n	800cba8 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	4a0f      	ldr	r2, [pc, #60]	@ (800cbb4 <sys_check_timeouts+0x7c>)
 800cb78:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	689b      	ldr	r3, [r3, #8]
 800cb7e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	68db      	ldr	r3, [r3, #12]
 800cb84:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	685b      	ldr	r3, [r3, #4]
 800cb8a:	4a0b      	ldr	r2, [pc, #44]	@ (800cbb8 <sys_check_timeouts+0x80>)
 800cb8c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800cb8e:	68b9      	ldr	r1, [r7, #8]
 800cb90:	2006      	movs	r0, #6
 800cb92:	f7f9 fbcb 	bl	800632c <memp_free>
    if (handler != NULL) {
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d0d3      	beq.n	800cb44 <sys_check_timeouts+0xc>
      handler(arg);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6838      	ldr	r0, [r7, #0]
 800cba0:	4798      	blx	r3
  do {
 800cba2:	e7cf      	b.n	800cb44 <sys_check_timeouts+0xc>
      return;
 800cba4:	bf00      	nop
 800cba6:	e000      	b.n	800cbaa <sys_check_timeouts+0x72>
      return;
 800cba8:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800cbaa:	3710      	adds	r7, #16
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}
 800cbb0:	200087cd 	.word	0x200087cd
 800cbb4:	20008820 	.word	0x20008820
 800cbb8:	20008824 	.word	0x20008824

0800cbbc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800cbc0:	f002 ffaa 	bl	800fb18 <rand>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	b29b      	uxth	r3, r3
 800cbc8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800cbcc:	b29b      	uxth	r3, r3
 800cbce:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800cbd2:	b29a      	uxth	r2, r3
 800cbd4:	4b01      	ldr	r3, [pc, #4]	@ (800cbdc <udp_init+0x20>)
 800cbd6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800cbd8:	bf00      	nop
 800cbda:	bd80      	pop	{r7, pc}
 800cbdc:	20000028 	.word	0x20000028

0800cbe0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b083      	sub	sp, #12
 800cbe4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800cbea:	4b17      	ldr	r3, [pc, #92]	@ (800cc48 <udp_new_port+0x68>)
 800cbec:	881b      	ldrh	r3, [r3, #0]
 800cbee:	1c5a      	adds	r2, r3, #1
 800cbf0:	b291      	uxth	r1, r2
 800cbf2:	4a15      	ldr	r2, [pc, #84]	@ (800cc48 <udp_new_port+0x68>)
 800cbf4:	8011      	strh	r1, [r2, #0]
 800cbf6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d103      	bne.n	800cc06 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800cbfe:	4b12      	ldr	r3, [pc, #72]	@ (800cc48 <udp_new_port+0x68>)
 800cc00:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800cc04:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc06:	4b11      	ldr	r3, [pc, #68]	@ (800cc4c <udp_new_port+0x6c>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	603b      	str	r3, [r7, #0]
 800cc0c:	e011      	b.n	800cc32 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	8a5a      	ldrh	r2, [r3, #18]
 800cc12:	4b0d      	ldr	r3, [pc, #52]	@ (800cc48 <udp_new_port+0x68>)
 800cc14:	881b      	ldrh	r3, [r3, #0]
 800cc16:	429a      	cmp	r2, r3
 800cc18:	d108      	bne.n	800cc2c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800cc1a:	88fb      	ldrh	r3, [r7, #6]
 800cc1c:	3301      	adds	r3, #1
 800cc1e:	80fb      	strh	r3, [r7, #6]
 800cc20:	88fb      	ldrh	r3, [r7, #6]
 800cc22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cc26:	d3e0      	bcc.n	800cbea <udp_new_port+0xa>
        return 0;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	e007      	b.n	800cc3c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	68db      	ldr	r3, [r3, #12]
 800cc30:	603b      	str	r3, [r7, #0]
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d1ea      	bne.n	800cc0e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800cc38:	4b03      	ldr	r3, [pc, #12]	@ (800cc48 <udp_new_port+0x68>)
 800cc3a:	881b      	ldrh	r3, [r3, #0]
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	370c      	adds	r7, #12
 800cc40:	46bd      	mov	sp, r7
 800cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc46:	4770      	bx	lr
 800cc48:	20000028 	.word	0x20000028
 800cc4c:	2000882c 	.word	0x2000882c

0800cc50 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b084      	sub	sp, #16
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	60f8      	str	r0, [r7, #12]
 800cc58:	60b9      	str	r1, [r7, #8]
 800cc5a:	4613      	mov	r3, r2
 800cc5c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d105      	bne.n	800cc70 <udp_input_local_match+0x20>
 800cc64:	4b27      	ldr	r3, [pc, #156]	@ (800cd04 <udp_input_local_match+0xb4>)
 800cc66:	2287      	movs	r2, #135	@ 0x87
 800cc68:	4927      	ldr	r1, [pc, #156]	@ (800cd08 <udp_input_local_match+0xb8>)
 800cc6a:	4828      	ldr	r0, [pc, #160]	@ (800cd0c <udp_input_local_match+0xbc>)
 800cc6c:	f003 f854 	bl	800fd18 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d105      	bne.n	800cc82 <udp_input_local_match+0x32>
 800cc76:	4b23      	ldr	r3, [pc, #140]	@ (800cd04 <udp_input_local_match+0xb4>)
 800cc78:	2288      	movs	r2, #136	@ 0x88
 800cc7a:	4925      	ldr	r1, [pc, #148]	@ (800cd10 <udp_input_local_match+0xc0>)
 800cc7c:	4823      	ldr	r0, [pc, #140]	@ (800cd0c <udp_input_local_match+0xbc>)
 800cc7e:	f003 f84b 	bl	800fd18 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	7a1b      	ldrb	r3, [r3, #8]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d00b      	beq.n	800cca2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	7a1a      	ldrb	r2, [r3, #8]
 800cc8e:	4b21      	ldr	r3, [pc, #132]	@ (800cd14 <udp_input_local_match+0xc4>)
 800cc90:	685b      	ldr	r3, [r3, #4]
 800cc92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cc96:	3301      	adds	r3, #1
 800cc98:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	d001      	beq.n	800cca2 <udp_input_local_match+0x52>
    return 0;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	e02b      	b.n	800ccfa <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800cca2:	79fb      	ldrb	r3, [r7, #7]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d018      	beq.n	800ccda <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d013      	beq.n	800ccd6 <udp_input_local_match+0x86>
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d00f      	beq.n	800ccd6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ccb6:	4b17      	ldr	r3, [pc, #92]	@ (800cd14 <udp_input_local_match+0xc4>)
 800ccb8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ccba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccbe:	d00a      	beq.n	800ccd6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	681a      	ldr	r2, [r3, #0]
 800ccc4:	4b13      	ldr	r3, [pc, #76]	@ (800cd14 <udp_input_local_match+0xc4>)
 800ccc6:	695b      	ldr	r3, [r3, #20]
 800ccc8:	405a      	eors	r2, r3
 800ccca:	68bb      	ldr	r3, [r7, #8]
 800cccc:	3308      	adds	r3, #8
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d110      	bne.n	800ccf8 <udp_input_local_match+0xa8>
          return 1;
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	e00f      	b.n	800ccfa <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d009      	beq.n	800ccf4 <udp_input_local_match+0xa4>
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d005      	beq.n	800ccf4 <udp_input_local_match+0xa4>
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681a      	ldr	r2, [r3, #0]
 800ccec:	4b09      	ldr	r3, [pc, #36]	@ (800cd14 <udp_input_local_match+0xc4>)
 800ccee:	695b      	ldr	r3, [r3, #20]
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	d101      	bne.n	800ccf8 <udp_input_local_match+0xa8>
        return 1;
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	e000      	b.n	800ccfa <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800ccf8:	2300      	movs	r3, #0
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	3710      	adds	r7, #16
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}
 800cd02:	bf00      	nop
 800cd04:	08012b7c 	.word	0x08012b7c
 800cd08:	08012bac 	.word	0x08012bac
 800cd0c:	08012bd0 	.word	0x08012bd0
 800cd10:	08012bf8 	.word	0x08012bf8
 800cd14:	20005260 	.word	0x20005260

0800cd18 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800cd18:	b590      	push	{r4, r7, lr}
 800cd1a:	b08d      	sub	sp, #52	@ 0x34
 800cd1c:	af02      	add	r7, sp, #8
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800cd22:	2300      	movs	r3, #0
 800cd24:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d105      	bne.n	800cd38 <udp_input+0x20>
 800cd2c:	4b7c      	ldr	r3, [pc, #496]	@ (800cf20 <udp_input+0x208>)
 800cd2e:	22cf      	movs	r2, #207	@ 0xcf
 800cd30:	497c      	ldr	r1, [pc, #496]	@ (800cf24 <udp_input+0x20c>)
 800cd32:	487d      	ldr	r0, [pc, #500]	@ (800cf28 <udp_input+0x210>)
 800cd34:	f002 fff0 	bl	800fd18 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d105      	bne.n	800cd4a <udp_input+0x32>
 800cd3e:	4b78      	ldr	r3, [pc, #480]	@ (800cf20 <udp_input+0x208>)
 800cd40:	22d0      	movs	r2, #208	@ 0xd0
 800cd42:	497a      	ldr	r1, [pc, #488]	@ (800cf2c <udp_input+0x214>)
 800cd44:	4878      	ldr	r0, [pc, #480]	@ (800cf28 <udp_input+0x210>)
 800cd46:	f002 ffe7 	bl	800fd18 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	895b      	ldrh	r3, [r3, #10]
 800cd4e:	2b07      	cmp	r3, #7
 800cd50:	d803      	bhi.n	800cd5a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	f7fa f960 	bl	8007018 <pbuf_free>
    goto end;
 800cd58:	e0de      	b.n	800cf18 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	685b      	ldr	r3, [r3, #4]
 800cd5e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800cd60:	4b73      	ldr	r3, [pc, #460]	@ (800cf30 <udp_input+0x218>)
 800cd62:	695b      	ldr	r3, [r3, #20]
 800cd64:	4a72      	ldr	r2, [pc, #456]	@ (800cf30 <udp_input+0x218>)
 800cd66:	6812      	ldr	r2, [r2, #0]
 800cd68:	4611      	mov	r1, r2
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f001 fefe 	bl	800eb6c <ip4_addr_isbroadcast_u32>
 800cd70:	4603      	mov	r3, r0
 800cd72:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	881b      	ldrh	r3, [r3, #0]
 800cd78:	b29b      	uxth	r3, r3
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f7f8 fdee 	bl	800595c <lwip_htons>
 800cd80:	4603      	mov	r3, r0
 800cd82:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	885b      	ldrh	r3, [r3, #2]
 800cd88:	b29b      	uxth	r3, r3
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f7f8 fde6 	bl	800595c <lwip_htons>
 800cd90:	4603      	mov	r3, r0
 800cd92:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800cd94:	2300      	movs	r3, #0
 800cd96:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cda0:	4b64      	ldr	r3, [pc, #400]	@ (800cf34 <udp_input+0x21c>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	627b      	str	r3, [r7, #36]	@ 0x24
 800cda6:	e054      	b.n	800ce52 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800cda8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdaa:	8a5b      	ldrh	r3, [r3, #18]
 800cdac:	89fa      	ldrh	r2, [r7, #14]
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d14a      	bne.n	800ce48 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800cdb2:	7cfb      	ldrb	r3, [r7, #19]
 800cdb4:	461a      	mov	r2, r3
 800cdb6:	6839      	ldr	r1, [r7, #0]
 800cdb8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cdba:	f7ff ff49 	bl	800cc50 <udp_input_local_match>
 800cdbe:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d041      	beq.n	800ce48 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800cdc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdc6:	7c1b      	ldrb	r3, [r3, #16]
 800cdc8:	f003 0304 	and.w	r3, r3, #4
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d11d      	bne.n	800ce0c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800cdd0:	69fb      	ldr	r3, [r7, #28]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d102      	bne.n	800cddc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800cdd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdd8:	61fb      	str	r3, [r7, #28]
 800cdda:	e017      	b.n	800ce0c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800cddc:	7cfb      	ldrb	r3, [r7, #19]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d014      	beq.n	800ce0c <udp_input+0xf4>
 800cde2:	4b53      	ldr	r3, [pc, #332]	@ (800cf30 <udp_input+0x218>)
 800cde4:	695b      	ldr	r3, [r3, #20]
 800cde6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdea:	d10f      	bne.n	800ce0c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800cdec:	69fb      	ldr	r3, [r7, #28]
 800cdee:	681a      	ldr	r2, [r3, #0]
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	3304      	adds	r3, #4
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	429a      	cmp	r2, r3
 800cdf8:	d008      	beq.n	800ce0c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800cdfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdfc:	681a      	ldr	r2, [r3, #0]
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	3304      	adds	r3, #4
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d101      	bne.n	800ce0c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800ce08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce0a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800ce0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce0e:	8a9b      	ldrh	r3, [r3, #20]
 800ce10:	8a3a      	ldrh	r2, [r7, #16]
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d118      	bne.n	800ce48 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ce16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce18:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d005      	beq.n	800ce2a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800ce1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce20:	685a      	ldr	r2, [r3, #4]
 800ce22:	4b43      	ldr	r3, [pc, #268]	@ (800cf30 <udp_input+0x218>)
 800ce24:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ce26:	429a      	cmp	r2, r3
 800ce28:	d10e      	bne.n	800ce48 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800ce2a:	6a3b      	ldr	r3, [r7, #32]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d014      	beq.n	800ce5a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800ce30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce32:	68da      	ldr	r2, [r3, #12]
 800ce34:	6a3b      	ldr	r3, [r7, #32]
 800ce36:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800ce38:	4b3e      	ldr	r3, [pc, #248]	@ (800cf34 <udp_input+0x21c>)
 800ce3a:	681a      	ldr	r2, [r3, #0]
 800ce3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce3e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800ce40:	4a3c      	ldr	r2, [pc, #240]	@ (800cf34 <udp_input+0x21c>)
 800ce42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce44:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800ce46:	e008      	b.n	800ce5a <udp_input+0x142>
      }
    }

    prev = pcb;
 800ce48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce4a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ce4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce4e:	68db      	ldr	r3, [r3, #12]
 800ce50:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d1a7      	bne.n	800cda8 <udp_input+0x90>
 800ce58:	e000      	b.n	800ce5c <udp_input+0x144>
        break;
 800ce5a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800ce5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d101      	bne.n	800ce66 <udp_input+0x14e>
    pcb = uncon_pcb;
 800ce62:	69fb      	ldr	r3, [r7, #28]
 800ce64:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800ce66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d002      	beq.n	800ce72 <udp_input+0x15a>
    for_us = 1;
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	76fb      	strb	r3, [r7, #27]
 800ce70:	e00a      	b.n	800ce88 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	3304      	adds	r3, #4
 800ce76:	681a      	ldr	r2, [r3, #0]
 800ce78:	4b2d      	ldr	r3, [pc, #180]	@ (800cf30 <udp_input+0x218>)
 800ce7a:	695b      	ldr	r3, [r3, #20]
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	bf0c      	ite	eq
 800ce80:	2301      	moveq	r3, #1
 800ce82:	2300      	movne	r3, #0
 800ce84:	b2db      	uxtb	r3, r3
 800ce86:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800ce88:	7efb      	ldrb	r3, [r7, #27]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d041      	beq.n	800cf12 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ce8e:	2108      	movs	r1, #8
 800ce90:	6878      	ldr	r0, [r7, #4]
 800ce92:	f7fa f83b 	bl	8006f0c <pbuf_remove_header>
 800ce96:	4603      	mov	r3, r0
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d00a      	beq.n	800ceb2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800ce9c:	4b20      	ldr	r3, [pc, #128]	@ (800cf20 <udp_input+0x208>)
 800ce9e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800cea2:	4925      	ldr	r1, [pc, #148]	@ (800cf38 <udp_input+0x220>)
 800cea4:	4820      	ldr	r0, [pc, #128]	@ (800cf28 <udp_input+0x210>)
 800cea6:	f002 ff37 	bl	800fd18 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f7fa f8b4 	bl	8007018 <pbuf_free>
      goto end;
 800ceb0:	e032      	b.n	800cf18 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800ceb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d012      	beq.n	800cede <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800ceb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceba:	699b      	ldr	r3, [r3, #24]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d00a      	beq.n	800ced6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800cec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cec2:	699c      	ldr	r4, [r3, #24]
 800cec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cec6:	69d8      	ldr	r0, [r3, #28]
 800cec8:	8a3b      	ldrh	r3, [r7, #16]
 800ceca:	9300      	str	r3, [sp, #0]
 800cecc:	4b1b      	ldr	r3, [pc, #108]	@ (800cf3c <udp_input+0x224>)
 800cece:	687a      	ldr	r2, [r7, #4]
 800ced0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ced2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800ced4:	e021      	b.n	800cf1a <udp_input+0x202>
        pbuf_free(p);
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f7fa f89e 	bl	8007018 <pbuf_free>
        goto end;
 800cedc:	e01c      	b.n	800cf18 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800cede:	7cfb      	ldrb	r3, [r7, #19]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d112      	bne.n	800cf0a <udp_input+0x1f2>
 800cee4:	4b12      	ldr	r3, [pc, #72]	@ (800cf30 <udp_input+0x218>)
 800cee6:	695b      	ldr	r3, [r3, #20]
 800cee8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ceec:	2be0      	cmp	r3, #224	@ 0xe0
 800ceee:	d00c      	beq.n	800cf0a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800cef0:	4b0f      	ldr	r3, [pc, #60]	@ (800cf30 <udp_input+0x218>)
 800cef2:	899b      	ldrh	r3, [r3, #12]
 800cef4:	3308      	adds	r3, #8
 800cef6:	b29b      	uxth	r3, r3
 800cef8:	b21b      	sxth	r3, r3
 800cefa:	4619      	mov	r1, r3
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f7fa f878 	bl	8006ff2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800cf02:	2103      	movs	r1, #3
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f001 fb11 	bl	800e52c <icmp_dest_unreach>
      pbuf_free(p);
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f7fa f884 	bl	8007018 <pbuf_free>
  return;
 800cf10:	e003      	b.n	800cf1a <udp_input+0x202>
    pbuf_free(p);
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f7fa f880 	bl	8007018 <pbuf_free>
  return;
 800cf18:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800cf1a:	372c      	adds	r7, #44	@ 0x2c
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd90      	pop	{r4, r7, pc}
 800cf20:	08012b7c 	.word	0x08012b7c
 800cf24:	08012c20 	.word	0x08012c20
 800cf28:	08012bd0 	.word	0x08012bd0
 800cf2c:	08012c38 	.word	0x08012c38
 800cf30:	20005260 	.word	0x20005260
 800cf34:	2000882c 	.word	0x2000882c
 800cf38:	08012c54 	.word	0x08012c54
 800cf3c:	20005270 	.word	0x20005270

0800cf40 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b088      	sub	sp, #32
 800cf44:	af02      	add	r7, sp, #8
 800cf46:	60f8      	str	r0, [r7, #12]
 800cf48:	60b9      	str	r1, [r7, #8]
 800cf4a:	607a      	str	r2, [r7, #4]
 800cf4c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d109      	bne.n	800cf68 <udp_sendto+0x28>
 800cf54:	4b23      	ldr	r3, [pc, #140]	@ (800cfe4 <udp_sendto+0xa4>)
 800cf56:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800cf5a:	4923      	ldr	r1, [pc, #140]	@ (800cfe8 <udp_sendto+0xa8>)
 800cf5c:	4823      	ldr	r0, [pc, #140]	@ (800cfec <udp_sendto+0xac>)
 800cf5e:	f002 fedb 	bl	800fd18 <iprintf>
 800cf62:	f06f 030f 	mvn.w	r3, #15
 800cf66:	e038      	b.n	800cfda <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d109      	bne.n	800cf82 <udp_sendto+0x42>
 800cf6e:	4b1d      	ldr	r3, [pc, #116]	@ (800cfe4 <udp_sendto+0xa4>)
 800cf70:	f240 2219 	movw	r2, #537	@ 0x219
 800cf74:	491e      	ldr	r1, [pc, #120]	@ (800cff0 <udp_sendto+0xb0>)
 800cf76:	481d      	ldr	r0, [pc, #116]	@ (800cfec <udp_sendto+0xac>)
 800cf78:	f002 fece 	bl	800fd18 <iprintf>
 800cf7c:	f06f 030f 	mvn.w	r3, #15
 800cf80:	e02b      	b.n	800cfda <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d109      	bne.n	800cf9c <udp_sendto+0x5c>
 800cf88:	4b16      	ldr	r3, [pc, #88]	@ (800cfe4 <udp_sendto+0xa4>)
 800cf8a:	f240 221a 	movw	r2, #538	@ 0x21a
 800cf8e:	4919      	ldr	r1, [pc, #100]	@ (800cff4 <udp_sendto+0xb4>)
 800cf90:	4816      	ldr	r0, [pc, #88]	@ (800cfec <udp_sendto+0xac>)
 800cf92:	f002 fec1 	bl	800fd18 <iprintf>
 800cf96:	f06f 030f 	mvn.w	r3, #15
 800cf9a:	e01e      	b.n	800cfda <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	7a1b      	ldrb	r3, [r3, #8]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d006      	beq.n	800cfb2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	7a1b      	ldrb	r3, [r3, #8]
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f7f9 fcd5 	bl	8006958 <netif_get_by_index>
 800cfae:	6178      	str	r0, [r7, #20]
 800cfb0:	e003      	b.n	800cfba <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f001 fb44 	bl	800e640 <ip4_route>
 800cfb8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d102      	bne.n	800cfc6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800cfc0:	f06f 0303 	mvn.w	r3, #3
 800cfc4:	e009      	b.n	800cfda <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800cfc6:	887a      	ldrh	r2, [r7, #2]
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	9300      	str	r3, [sp, #0]
 800cfcc:	4613      	mov	r3, r2
 800cfce:	687a      	ldr	r2, [r7, #4]
 800cfd0:	68b9      	ldr	r1, [r7, #8]
 800cfd2:	68f8      	ldr	r0, [r7, #12]
 800cfd4:	f000 f810 	bl	800cff8 <udp_sendto_if>
 800cfd8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	3718      	adds	r7, #24
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}
 800cfe2:	bf00      	nop
 800cfe4:	08012b7c 	.word	0x08012b7c
 800cfe8:	08012ca0 	.word	0x08012ca0
 800cfec:	08012bd0 	.word	0x08012bd0
 800cff0:	08012cb8 	.word	0x08012cb8
 800cff4:	08012cd4 	.word	0x08012cd4

0800cff8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b088      	sub	sp, #32
 800cffc:	af02      	add	r7, sp, #8
 800cffe:	60f8      	str	r0, [r7, #12]
 800d000:	60b9      	str	r1, [r7, #8]
 800d002:	607a      	str	r2, [r7, #4]
 800d004:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d109      	bne.n	800d020 <udp_sendto_if+0x28>
 800d00c:	4b2e      	ldr	r3, [pc, #184]	@ (800d0c8 <udp_sendto_if+0xd0>)
 800d00e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d012:	492e      	ldr	r1, [pc, #184]	@ (800d0cc <udp_sendto_if+0xd4>)
 800d014:	482e      	ldr	r0, [pc, #184]	@ (800d0d0 <udp_sendto_if+0xd8>)
 800d016:	f002 fe7f 	bl	800fd18 <iprintf>
 800d01a:	f06f 030f 	mvn.w	r3, #15
 800d01e:	e04f      	b.n	800d0c0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d109      	bne.n	800d03a <udp_sendto_if+0x42>
 800d026:	4b28      	ldr	r3, [pc, #160]	@ (800d0c8 <udp_sendto_if+0xd0>)
 800d028:	f240 2281 	movw	r2, #641	@ 0x281
 800d02c:	4929      	ldr	r1, [pc, #164]	@ (800d0d4 <udp_sendto_if+0xdc>)
 800d02e:	4828      	ldr	r0, [pc, #160]	@ (800d0d0 <udp_sendto_if+0xd8>)
 800d030:	f002 fe72 	bl	800fd18 <iprintf>
 800d034:	f06f 030f 	mvn.w	r3, #15
 800d038:	e042      	b.n	800d0c0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d109      	bne.n	800d054 <udp_sendto_if+0x5c>
 800d040:	4b21      	ldr	r3, [pc, #132]	@ (800d0c8 <udp_sendto_if+0xd0>)
 800d042:	f240 2282 	movw	r2, #642	@ 0x282
 800d046:	4924      	ldr	r1, [pc, #144]	@ (800d0d8 <udp_sendto_if+0xe0>)
 800d048:	4821      	ldr	r0, [pc, #132]	@ (800d0d0 <udp_sendto_if+0xd8>)
 800d04a:	f002 fe65 	bl	800fd18 <iprintf>
 800d04e:	f06f 030f 	mvn.w	r3, #15
 800d052:	e035      	b.n	800d0c0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800d054:	6a3b      	ldr	r3, [r7, #32]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d109      	bne.n	800d06e <udp_sendto_if+0x76>
 800d05a:	4b1b      	ldr	r3, [pc, #108]	@ (800d0c8 <udp_sendto_if+0xd0>)
 800d05c:	f240 2283 	movw	r2, #643	@ 0x283
 800d060:	491e      	ldr	r1, [pc, #120]	@ (800d0dc <udp_sendto_if+0xe4>)
 800d062:	481b      	ldr	r0, [pc, #108]	@ (800d0d0 <udp_sendto_if+0xd8>)
 800d064:	f002 fe58 	bl	800fd18 <iprintf>
 800d068:	f06f 030f 	mvn.w	r3, #15
 800d06c:	e028      	b.n	800d0c0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d009      	beq.n	800d088 <udp_sendto_if+0x90>
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d005      	beq.n	800d088 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d084:	2be0      	cmp	r3, #224	@ 0xe0
 800d086:	d103      	bne.n	800d090 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800d088:	6a3b      	ldr	r3, [r7, #32]
 800d08a:	3304      	adds	r3, #4
 800d08c:	617b      	str	r3, [r7, #20]
 800d08e:	e00b      	b.n	800d0a8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	681a      	ldr	r2, [r3, #0]
 800d094:	6a3b      	ldr	r3, [r7, #32]
 800d096:	3304      	adds	r3, #4
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	429a      	cmp	r2, r3
 800d09c:	d002      	beq.n	800d0a4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800d09e:	f06f 0303 	mvn.w	r3, #3
 800d0a2:	e00d      	b.n	800d0c0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800d0a8:	887a      	ldrh	r2, [r7, #2]
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	9301      	str	r3, [sp, #4]
 800d0ae:	6a3b      	ldr	r3, [r7, #32]
 800d0b0:	9300      	str	r3, [sp, #0]
 800d0b2:	4613      	mov	r3, r2
 800d0b4:	687a      	ldr	r2, [r7, #4]
 800d0b6:	68b9      	ldr	r1, [r7, #8]
 800d0b8:	68f8      	ldr	r0, [r7, #12]
 800d0ba:	f000 f811 	bl	800d0e0 <udp_sendto_if_src>
 800d0be:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3718      	adds	r7, #24
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}
 800d0c8:	08012b7c 	.word	0x08012b7c
 800d0cc:	08012cf0 	.word	0x08012cf0
 800d0d0:	08012bd0 	.word	0x08012bd0
 800d0d4:	08012d0c 	.word	0x08012d0c
 800d0d8:	08012d28 	.word	0x08012d28
 800d0dc:	08012d48 	.word	0x08012d48

0800d0e0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b08c      	sub	sp, #48	@ 0x30
 800d0e4:	af04      	add	r7, sp, #16
 800d0e6:	60f8      	str	r0, [r7, #12]
 800d0e8:	60b9      	str	r1, [r7, #8]
 800d0ea:	607a      	str	r2, [r7, #4]
 800d0ec:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d109      	bne.n	800d108 <udp_sendto_if_src+0x28>
 800d0f4:	4b65      	ldr	r3, [pc, #404]	@ (800d28c <udp_sendto_if_src+0x1ac>)
 800d0f6:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800d0fa:	4965      	ldr	r1, [pc, #404]	@ (800d290 <udp_sendto_if_src+0x1b0>)
 800d0fc:	4865      	ldr	r0, [pc, #404]	@ (800d294 <udp_sendto_if_src+0x1b4>)
 800d0fe:	f002 fe0b 	bl	800fd18 <iprintf>
 800d102:	f06f 030f 	mvn.w	r3, #15
 800d106:	e0bc      	b.n	800d282 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d109      	bne.n	800d122 <udp_sendto_if_src+0x42>
 800d10e:	4b5f      	ldr	r3, [pc, #380]	@ (800d28c <udp_sendto_if_src+0x1ac>)
 800d110:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800d114:	4960      	ldr	r1, [pc, #384]	@ (800d298 <udp_sendto_if_src+0x1b8>)
 800d116:	485f      	ldr	r0, [pc, #380]	@ (800d294 <udp_sendto_if_src+0x1b4>)
 800d118:	f002 fdfe 	bl	800fd18 <iprintf>
 800d11c:	f06f 030f 	mvn.w	r3, #15
 800d120:	e0af      	b.n	800d282 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d109      	bne.n	800d13c <udp_sendto_if_src+0x5c>
 800d128:	4b58      	ldr	r3, [pc, #352]	@ (800d28c <udp_sendto_if_src+0x1ac>)
 800d12a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800d12e:	495b      	ldr	r1, [pc, #364]	@ (800d29c <udp_sendto_if_src+0x1bc>)
 800d130:	4858      	ldr	r0, [pc, #352]	@ (800d294 <udp_sendto_if_src+0x1b4>)
 800d132:	f002 fdf1 	bl	800fd18 <iprintf>
 800d136:	f06f 030f 	mvn.w	r3, #15
 800d13a:	e0a2      	b.n	800d282 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800d13c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d109      	bne.n	800d156 <udp_sendto_if_src+0x76>
 800d142:	4b52      	ldr	r3, [pc, #328]	@ (800d28c <udp_sendto_if_src+0x1ac>)
 800d144:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800d148:	4955      	ldr	r1, [pc, #340]	@ (800d2a0 <udp_sendto_if_src+0x1c0>)
 800d14a:	4852      	ldr	r0, [pc, #328]	@ (800d294 <udp_sendto_if_src+0x1b4>)
 800d14c:	f002 fde4 	bl	800fd18 <iprintf>
 800d150:	f06f 030f 	mvn.w	r3, #15
 800d154:	e095      	b.n	800d282 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800d156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d109      	bne.n	800d170 <udp_sendto_if_src+0x90>
 800d15c:	4b4b      	ldr	r3, [pc, #300]	@ (800d28c <udp_sendto_if_src+0x1ac>)
 800d15e:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800d162:	4950      	ldr	r1, [pc, #320]	@ (800d2a4 <udp_sendto_if_src+0x1c4>)
 800d164:	484b      	ldr	r0, [pc, #300]	@ (800d294 <udp_sendto_if_src+0x1b4>)
 800d166:	f002 fdd7 	bl	800fd18 <iprintf>
 800d16a:	f06f 030f 	mvn.w	r3, #15
 800d16e:	e088      	b.n	800d282 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	8a5b      	ldrh	r3, [r3, #18]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d10f      	bne.n	800d198 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d178:	68f9      	ldr	r1, [r7, #12]
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	8a5b      	ldrh	r3, [r3, #18]
 800d17e:	461a      	mov	r2, r3
 800d180:	68f8      	ldr	r0, [r7, #12]
 800d182:	f000 f893 	bl	800d2ac <udp_bind>
 800d186:	4603      	mov	r3, r0
 800d188:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800d18a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d002      	beq.n	800d198 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800d192:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d196:	e074      	b.n	800d282 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	891b      	ldrh	r3, [r3, #8]
 800d19c:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	d902      	bls.n	800d1aa <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800d1a4:	f04f 33ff 	mov.w	r3, #4294967295
 800d1a8:	e06b      	b.n	800d282 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800d1aa:	2108      	movs	r1, #8
 800d1ac:	68b8      	ldr	r0, [r7, #8]
 800d1ae:	f7f9 fe9d 	bl	8006eec <pbuf_add_header>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d015      	beq.n	800d1e4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800d1b8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d1bc:	2108      	movs	r1, #8
 800d1be:	2022      	movs	r0, #34	@ 0x22
 800d1c0:	f7f9 fc46 	bl	8006a50 <pbuf_alloc>
 800d1c4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800d1c6:	69fb      	ldr	r3, [r7, #28]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d102      	bne.n	800d1d2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800d1cc:	f04f 33ff 	mov.w	r3, #4294967295
 800d1d0:	e057      	b.n	800d282 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	891b      	ldrh	r3, [r3, #8]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d006      	beq.n	800d1e8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800d1da:	68b9      	ldr	r1, [r7, #8]
 800d1dc:	69f8      	ldr	r0, [r7, #28]
 800d1de:	f7fa f833 	bl	8007248 <pbuf_chain>
 800d1e2:	e001      	b.n	800d1e8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800d1e8:	69fb      	ldr	r3, [r7, #28]
 800d1ea:	895b      	ldrh	r3, [r3, #10]
 800d1ec:	2b07      	cmp	r3, #7
 800d1ee:	d806      	bhi.n	800d1fe <udp_sendto_if_src+0x11e>
 800d1f0:	4b26      	ldr	r3, [pc, #152]	@ (800d28c <udp_sendto_if_src+0x1ac>)
 800d1f2:	f240 320d 	movw	r2, #781	@ 0x30d
 800d1f6:	492c      	ldr	r1, [pc, #176]	@ (800d2a8 <udp_sendto_if_src+0x1c8>)
 800d1f8:	4826      	ldr	r0, [pc, #152]	@ (800d294 <udp_sendto_if_src+0x1b4>)
 800d1fa:	f002 fd8d 	bl	800fd18 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800d1fe:	69fb      	ldr	r3, [r7, #28]
 800d200:	685b      	ldr	r3, [r3, #4]
 800d202:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	8a5b      	ldrh	r3, [r3, #18]
 800d208:	4618      	mov	r0, r3
 800d20a:	f7f8 fba7 	bl	800595c <lwip_htons>
 800d20e:	4603      	mov	r3, r0
 800d210:	461a      	mov	r2, r3
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800d216:	887b      	ldrh	r3, [r7, #2]
 800d218:	4618      	mov	r0, r3
 800d21a:	f7f8 fb9f 	bl	800595c <lwip_htons>
 800d21e:	4603      	mov	r3, r0
 800d220:	461a      	mov	r2, r3
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	2200      	movs	r2, #0
 800d22a:	719a      	strb	r2, [r3, #6]
 800d22c:	2200      	movs	r2, #0
 800d22e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800d230:	69fb      	ldr	r3, [r7, #28]
 800d232:	891b      	ldrh	r3, [r3, #8]
 800d234:	4618      	mov	r0, r3
 800d236:	f7f8 fb91 	bl	800595c <lwip_htons>
 800d23a:	4603      	mov	r3, r0
 800d23c:	461a      	mov	r2, r3
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800d242:	2311      	movs	r3, #17
 800d244:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	7adb      	ldrb	r3, [r3, #11]
 800d24a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	7a9b      	ldrb	r3, [r3, #10]
 800d250:	7cb9      	ldrb	r1, [r7, #18]
 800d252:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d254:	9202      	str	r2, [sp, #8]
 800d256:	7cfa      	ldrb	r2, [r7, #19]
 800d258:	9201      	str	r2, [sp, #4]
 800d25a:	9300      	str	r3, [sp, #0]
 800d25c:	460b      	mov	r3, r1
 800d25e:	687a      	ldr	r2, [r7, #4]
 800d260:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d262:	69f8      	ldr	r0, [r7, #28]
 800d264:	f001 fbd4 	bl	800ea10 <ip4_output_if_src>
 800d268:	4603      	mov	r3, r0
 800d26a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800d26c:	69fa      	ldr	r2, [r7, #28]
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	429a      	cmp	r2, r3
 800d272:	d004      	beq.n	800d27e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800d274:	69f8      	ldr	r0, [r7, #28]
 800d276:	f7f9 fecf 	bl	8007018 <pbuf_free>
    q = NULL;
 800d27a:	2300      	movs	r3, #0
 800d27c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800d27e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800d282:	4618      	mov	r0, r3
 800d284:	3720      	adds	r7, #32
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}
 800d28a:	bf00      	nop
 800d28c:	08012b7c 	.word	0x08012b7c
 800d290:	08012d68 	.word	0x08012d68
 800d294:	08012bd0 	.word	0x08012bd0
 800d298:	08012d88 	.word	0x08012d88
 800d29c:	08012da8 	.word	0x08012da8
 800d2a0:	08012dcc 	.word	0x08012dcc
 800d2a4:	08012df0 	.word	0x08012df0
 800d2a8:	08012e14 	.word	0x08012e14

0800d2ac <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b086      	sub	sp, #24
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	60f8      	str	r0, [r7, #12]
 800d2b4:	60b9      	str	r1, [r7, #8]
 800d2b6:	4613      	mov	r3, r2
 800d2b8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d101      	bne.n	800d2c4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800d2c0:	4b39      	ldr	r3, [pc, #228]	@ (800d3a8 <udp_bind+0xfc>)
 800d2c2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d109      	bne.n	800d2de <udp_bind+0x32>
 800d2ca:	4b38      	ldr	r3, [pc, #224]	@ (800d3ac <udp_bind+0x100>)
 800d2cc:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800d2d0:	4937      	ldr	r1, [pc, #220]	@ (800d3b0 <udp_bind+0x104>)
 800d2d2:	4838      	ldr	r0, [pc, #224]	@ (800d3b4 <udp_bind+0x108>)
 800d2d4:	f002 fd20 	bl	800fd18 <iprintf>
 800d2d8:	f06f 030f 	mvn.w	r3, #15
 800d2dc:	e060      	b.n	800d3a0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d2e2:	4b35      	ldr	r3, [pc, #212]	@ (800d3b8 <udp_bind+0x10c>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	617b      	str	r3, [r7, #20]
 800d2e8:	e009      	b.n	800d2fe <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800d2ea:	68fa      	ldr	r2, [r7, #12]
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d102      	bne.n	800d2f8 <udp_bind+0x4c>
      rebind = 1;
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	74fb      	strb	r3, [r7, #19]
      break;
 800d2f6:	e005      	b.n	800d304 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	68db      	ldr	r3, [r3, #12]
 800d2fc:	617b      	str	r3, [r7, #20]
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d1f2      	bne.n	800d2ea <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800d304:	88fb      	ldrh	r3, [r7, #6]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d109      	bne.n	800d31e <udp_bind+0x72>
    port = udp_new_port();
 800d30a:	f7ff fc69 	bl	800cbe0 <udp_new_port>
 800d30e:	4603      	mov	r3, r0
 800d310:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d312:	88fb      	ldrh	r3, [r7, #6]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d12c      	bne.n	800d372 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800d318:	f06f 0307 	mvn.w	r3, #7
 800d31c:	e040      	b.n	800d3a0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d31e:	4b26      	ldr	r3, [pc, #152]	@ (800d3b8 <udp_bind+0x10c>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	617b      	str	r3, [r7, #20]
 800d324:	e022      	b.n	800d36c <udp_bind+0xc0>
      if (pcb != ipcb) {
 800d326:	68fa      	ldr	r2, [r7, #12]
 800d328:	697b      	ldr	r3, [r7, #20]
 800d32a:	429a      	cmp	r2, r3
 800d32c:	d01b      	beq.n	800d366 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	8a5b      	ldrh	r3, [r3, #18]
 800d332:	88fa      	ldrh	r2, [r7, #6]
 800d334:	429a      	cmp	r2, r3
 800d336:	d116      	bne.n	800d366 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d338:	697b      	ldr	r3, [r7, #20]
 800d33a:	681a      	ldr	r2, [r3, #0]
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800d340:	429a      	cmp	r2, r3
 800d342:	d00d      	beq.n	800d360 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d00a      	beq.n	800d360 <udp_bind+0xb4>
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d006      	beq.n	800d360 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800d352:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d354:	2b00      	cmp	r3, #0
 800d356:	d003      	beq.n	800d360 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d102      	bne.n	800d366 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800d360:	f06f 0307 	mvn.w	r3, #7
 800d364:	e01c      	b.n	800d3a0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	68db      	ldr	r3, [r3, #12]
 800d36a:	617b      	str	r3, [r7, #20]
 800d36c:	697b      	ldr	r3, [r7, #20]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d1d9      	bne.n	800d326 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d372:	68bb      	ldr	r3, [r7, #8]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d002      	beq.n	800d37e <udp_bind+0xd2>
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	e000      	b.n	800d380 <udp_bind+0xd4>
 800d37e:	2300      	movs	r3, #0
 800d380:	68fa      	ldr	r2, [r7, #12]
 800d382:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	88fa      	ldrh	r2, [r7, #6]
 800d388:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800d38a:	7cfb      	ldrb	r3, [r7, #19]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d106      	bne.n	800d39e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800d390:	4b09      	ldr	r3, [pc, #36]	@ (800d3b8 <udp_bind+0x10c>)
 800d392:	681a      	ldr	r2, [r3, #0]
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800d398:	4a07      	ldr	r2, [pc, #28]	@ (800d3b8 <udp_bind+0x10c>)
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800d39e:	2300      	movs	r3, #0
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3718      	adds	r7, #24
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}
 800d3a8:	08013698 	.word	0x08013698
 800d3ac:	08012b7c 	.word	0x08012b7c
 800d3b0:	08012e44 	.word	0x08012e44
 800d3b4:	08012bd0 	.word	0x08012bd0
 800d3b8:	2000882c 	.word	0x2000882c

0800d3bc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b084      	sub	sp, #16
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	60f8      	str	r0, [r7, #12]
 800d3c4:	60b9      	str	r1, [r7, #8]
 800d3c6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d107      	bne.n	800d3de <udp_recv+0x22>
 800d3ce:	4b08      	ldr	r3, [pc, #32]	@ (800d3f0 <udp_recv+0x34>)
 800d3d0:	f240 428a 	movw	r2, #1162	@ 0x48a
 800d3d4:	4907      	ldr	r1, [pc, #28]	@ (800d3f4 <udp_recv+0x38>)
 800d3d6:	4808      	ldr	r0, [pc, #32]	@ (800d3f8 <udp_recv+0x3c>)
 800d3d8:	f002 fc9e 	bl	800fd18 <iprintf>
 800d3dc:	e005      	b.n	800d3ea <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	68ba      	ldr	r2, [r7, #8]
 800d3e2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	687a      	ldr	r2, [r7, #4]
 800d3e8:	61da      	str	r2, [r3, #28]
}
 800d3ea:	3710      	adds	r7, #16
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd80      	pop	{r7, pc}
 800d3f0:	08012b7c 	.word	0x08012b7c
 800d3f4:	08012eb0 	.word	0x08012eb0
 800d3f8:	08012bd0 	.word	0x08012bd0

0800d3fc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b082      	sub	sp, #8
 800d400:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800d402:	2000      	movs	r0, #0
 800d404:	f7f8 ff22 	bl	800624c <memp_malloc>
 800d408:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d007      	beq.n	800d420 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800d410:	2220      	movs	r2, #32
 800d412:	2100      	movs	r1, #0
 800d414:	6878      	ldr	r0, [r7, #4]
 800d416:	f002 fce4 	bl	800fde2 <memset>
    pcb->ttl = UDP_TTL;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	22ff      	movs	r2, #255	@ 0xff
 800d41e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800d420:	687b      	ldr	r3, [r7, #4]
}
 800d422:	4618      	mov	r0, r3
 800d424:	3708      	adds	r7, #8
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}
	...

0800d42c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d42c:	b480      	push	{r7}
 800d42e:	b085      	sub	sp, #20
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d01e      	beq.n	800d47a <udp_netif_ip_addr_changed+0x4e>
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d01a      	beq.n	800d47a <udp_netif_ip_addr_changed+0x4e>
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d017      	beq.n	800d47a <udp_netif_ip_addr_changed+0x4e>
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d013      	beq.n	800d47a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d452:	4b0d      	ldr	r3, [pc, #52]	@ (800d488 <udp_netif_ip_addr_changed+0x5c>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	60fb      	str	r3, [r7, #12]
 800d458:	e00c      	b.n	800d474 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	681a      	ldr	r2, [r3, #0]
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	429a      	cmp	r2, r3
 800d464:	d103      	bne.n	800d46e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	681a      	ldr	r2, [r3, #0]
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	68db      	ldr	r3, [r3, #12]
 800d472:	60fb      	str	r3, [r7, #12]
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d1ef      	bne.n	800d45a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800d47a:	bf00      	nop
 800d47c:	3714      	adds	r7, #20
 800d47e:	46bd      	mov	sp, r7
 800d480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d484:	4770      	bx	lr
 800d486:	bf00      	nop
 800d488:	2000882c 	.word	0x2000882c

0800d48c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b082      	sub	sp, #8
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d494:	4915      	ldr	r1, [pc, #84]	@ (800d4ec <etharp_free_entry+0x60>)
 800d496:	687a      	ldr	r2, [r7, #4]
 800d498:	4613      	mov	r3, r2
 800d49a:	005b      	lsls	r3, r3, #1
 800d49c:	4413      	add	r3, r2
 800d49e:	00db      	lsls	r3, r3, #3
 800d4a0:	440b      	add	r3, r1
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d013      	beq.n	800d4d0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d4a8:	4910      	ldr	r1, [pc, #64]	@ (800d4ec <etharp_free_entry+0x60>)
 800d4aa:	687a      	ldr	r2, [r7, #4]
 800d4ac:	4613      	mov	r3, r2
 800d4ae:	005b      	lsls	r3, r3, #1
 800d4b0:	4413      	add	r3, r2
 800d4b2:	00db      	lsls	r3, r3, #3
 800d4b4:	440b      	add	r3, r1
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f7f9 fdad 	bl	8007018 <pbuf_free>
    arp_table[i].q = NULL;
 800d4be:	490b      	ldr	r1, [pc, #44]	@ (800d4ec <etharp_free_entry+0x60>)
 800d4c0:	687a      	ldr	r2, [r7, #4]
 800d4c2:	4613      	mov	r3, r2
 800d4c4:	005b      	lsls	r3, r3, #1
 800d4c6:	4413      	add	r3, r2
 800d4c8:	00db      	lsls	r3, r3, #3
 800d4ca:	440b      	add	r3, r1
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d4d0:	4906      	ldr	r1, [pc, #24]	@ (800d4ec <etharp_free_entry+0x60>)
 800d4d2:	687a      	ldr	r2, [r7, #4]
 800d4d4:	4613      	mov	r3, r2
 800d4d6:	005b      	lsls	r3, r3, #1
 800d4d8:	4413      	add	r3, r2
 800d4da:	00db      	lsls	r3, r3, #3
 800d4dc:	440b      	add	r3, r1
 800d4de:	3314      	adds	r3, #20
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800d4e4:	bf00      	nop
 800d4e6:	3708      	adds	r7, #8
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}
 800d4ec:	20008830 	.word	0x20008830

0800d4f0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b082      	sub	sp, #8
 800d4f4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	607b      	str	r3, [r7, #4]
 800d4fa:	e096      	b.n	800d62a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800d4fc:	494f      	ldr	r1, [pc, #316]	@ (800d63c <etharp_tmr+0x14c>)
 800d4fe:	687a      	ldr	r2, [r7, #4]
 800d500:	4613      	mov	r3, r2
 800d502:	005b      	lsls	r3, r3, #1
 800d504:	4413      	add	r3, r2
 800d506:	00db      	lsls	r3, r3, #3
 800d508:	440b      	add	r3, r1
 800d50a:	3314      	adds	r3, #20
 800d50c:	781b      	ldrb	r3, [r3, #0]
 800d50e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800d510:	78fb      	ldrb	r3, [r7, #3]
 800d512:	2b00      	cmp	r3, #0
 800d514:	f000 8086 	beq.w	800d624 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800d518:	4948      	ldr	r1, [pc, #288]	@ (800d63c <etharp_tmr+0x14c>)
 800d51a:	687a      	ldr	r2, [r7, #4]
 800d51c:	4613      	mov	r3, r2
 800d51e:	005b      	lsls	r3, r3, #1
 800d520:	4413      	add	r3, r2
 800d522:	00db      	lsls	r3, r3, #3
 800d524:	440b      	add	r3, r1
 800d526:	3312      	adds	r3, #18
 800d528:	881b      	ldrh	r3, [r3, #0]
 800d52a:	3301      	adds	r3, #1
 800d52c:	b298      	uxth	r0, r3
 800d52e:	4943      	ldr	r1, [pc, #268]	@ (800d63c <etharp_tmr+0x14c>)
 800d530:	687a      	ldr	r2, [r7, #4]
 800d532:	4613      	mov	r3, r2
 800d534:	005b      	lsls	r3, r3, #1
 800d536:	4413      	add	r3, r2
 800d538:	00db      	lsls	r3, r3, #3
 800d53a:	440b      	add	r3, r1
 800d53c:	3312      	adds	r3, #18
 800d53e:	4602      	mov	r2, r0
 800d540:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d542:	493e      	ldr	r1, [pc, #248]	@ (800d63c <etharp_tmr+0x14c>)
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	4613      	mov	r3, r2
 800d548:	005b      	lsls	r3, r3, #1
 800d54a:	4413      	add	r3, r2
 800d54c:	00db      	lsls	r3, r3, #3
 800d54e:	440b      	add	r3, r1
 800d550:	3312      	adds	r3, #18
 800d552:	881b      	ldrh	r3, [r3, #0]
 800d554:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800d558:	d215      	bcs.n	800d586 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d55a:	4938      	ldr	r1, [pc, #224]	@ (800d63c <etharp_tmr+0x14c>)
 800d55c:	687a      	ldr	r2, [r7, #4]
 800d55e:	4613      	mov	r3, r2
 800d560:	005b      	lsls	r3, r3, #1
 800d562:	4413      	add	r3, r2
 800d564:	00db      	lsls	r3, r3, #3
 800d566:	440b      	add	r3, r1
 800d568:	3314      	adds	r3, #20
 800d56a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d56c:	2b01      	cmp	r3, #1
 800d56e:	d10e      	bne.n	800d58e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800d570:	4932      	ldr	r1, [pc, #200]	@ (800d63c <etharp_tmr+0x14c>)
 800d572:	687a      	ldr	r2, [r7, #4]
 800d574:	4613      	mov	r3, r2
 800d576:	005b      	lsls	r3, r3, #1
 800d578:	4413      	add	r3, r2
 800d57a:	00db      	lsls	r3, r3, #3
 800d57c:	440b      	add	r3, r1
 800d57e:	3312      	adds	r3, #18
 800d580:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d582:	2b04      	cmp	r3, #4
 800d584:	d903      	bls.n	800d58e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f7ff ff80 	bl	800d48c <etharp_free_entry>
 800d58c:	e04a      	b.n	800d624 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d58e:	492b      	ldr	r1, [pc, #172]	@ (800d63c <etharp_tmr+0x14c>)
 800d590:	687a      	ldr	r2, [r7, #4]
 800d592:	4613      	mov	r3, r2
 800d594:	005b      	lsls	r3, r3, #1
 800d596:	4413      	add	r3, r2
 800d598:	00db      	lsls	r3, r3, #3
 800d59a:	440b      	add	r3, r1
 800d59c:	3314      	adds	r3, #20
 800d59e:	781b      	ldrb	r3, [r3, #0]
 800d5a0:	2b03      	cmp	r3, #3
 800d5a2:	d10a      	bne.n	800d5ba <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d5a4:	4925      	ldr	r1, [pc, #148]	@ (800d63c <etharp_tmr+0x14c>)
 800d5a6:	687a      	ldr	r2, [r7, #4]
 800d5a8:	4613      	mov	r3, r2
 800d5aa:	005b      	lsls	r3, r3, #1
 800d5ac:	4413      	add	r3, r2
 800d5ae:	00db      	lsls	r3, r3, #3
 800d5b0:	440b      	add	r3, r1
 800d5b2:	3314      	adds	r3, #20
 800d5b4:	2204      	movs	r2, #4
 800d5b6:	701a      	strb	r2, [r3, #0]
 800d5b8:	e034      	b.n	800d624 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d5ba:	4920      	ldr	r1, [pc, #128]	@ (800d63c <etharp_tmr+0x14c>)
 800d5bc:	687a      	ldr	r2, [r7, #4]
 800d5be:	4613      	mov	r3, r2
 800d5c0:	005b      	lsls	r3, r3, #1
 800d5c2:	4413      	add	r3, r2
 800d5c4:	00db      	lsls	r3, r3, #3
 800d5c6:	440b      	add	r3, r1
 800d5c8:	3314      	adds	r3, #20
 800d5ca:	781b      	ldrb	r3, [r3, #0]
 800d5cc:	2b04      	cmp	r3, #4
 800d5ce:	d10a      	bne.n	800d5e6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d5d0:	491a      	ldr	r1, [pc, #104]	@ (800d63c <etharp_tmr+0x14c>)
 800d5d2:	687a      	ldr	r2, [r7, #4]
 800d5d4:	4613      	mov	r3, r2
 800d5d6:	005b      	lsls	r3, r3, #1
 800d5d8:	4413      	add	r3, r2
 800d5da:	00db      	lsls	r3, r3, #3
 800d5dc:	440b      	add	r3, r1
 800d5de:	3314      	adds	r3, #20
 800d5e0:	2202      	movs	r2, #2
 800d5e2:	701a      	strb	r2, [r3, #0]
 800d5e4:	e01e      	b.n	800d624 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d5e6:	4915      	ldr	r1, [pc, #84]	@ (800d63c <etharp_tmr+0x14c>)
 800d5e8:	687a      	ldr	r2, [r7, #4]
 800d5ea:	4613      	mov	r3, r2
 800d5ec:	005b      	lsls	r3, r3, #1
 800d5ee:	4413      	add	r3, r2
 800d5f0:	00db      	lsls	r3, r3, #3
 800d5f2:	440b      	add	r3, r1
 800d5f4:	3314      	adds	r3, #20
 800d5f6:	781b      	ldrb	r3, [r3, #0]
 800d5f8:	2b01      	cmp	r3, #1
 800d5fa:	d113      	bne.n	800d624 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d5fc:	490f      	ldr	r1, [pc, #60]	@ (800d63c <etharp_tmr+0x14c>)
 800d5fe:	687a      	ldr	r2, [r7, #4]
 800d600:	4613      	mov	r3, r2
 800d602:	005b      	lsls	r3, r3, #1
 800d604:	4413      	add	r3, r2
 800d606:	00db      	lsls	r3, r3, #3
 800d608:	440b      	add	r3, r1
 800d60a:	3308      	adds	r3, #8
 800d60c:	6818      	ldr	r0, [r3, #0]
 800d60e:	687a      	ldr	r2, [r7, #4]
 800d610:	4613      	mov	r3, r2
 800d612:	005b      	lsls	r3, r3, #1
 800d614:	4413      	add	r3, r2
 800d616:	00db      	lsls	r3, r3, #3
 800d618:	4a08      	ldr	r2, [pc, #32]	@ (800d63c <etharp_tmr+0x14c>)
 800d61a:	4413      	add	r3, r2
 800d61c:	3304      	adds	r3, #4
 800d61e:	4619      	mov	r1, r3
 800d620:	f000 fe6e 	bl	800e300 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	3301      	adds	r3, #1
 800d628:	607b      	str	r3, [r7, #4]
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2b09      	cmp	r3, #9
 800d62e:	f77f af65 	ble.w	800d4fc <etharp_tmr+0xc>
      }
    }
  }
}
 800d632:	bf00      	nop
 800d634:	bf00      	nop
 800d636:	3708      	adds	r7, #8
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}
 800d63c:	20008830 	.word	0x20008830

0800d640 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b08a      	sub	sp, #40	@ 0x28
 800d644:	af00      	add	r7, sp, #0
 800d646:	60f8      	str	r0, [r7, #12]
 800d648:	460b      	mov	r3, r1
 800d64a:	607a      	str	r2, [r7, #4]
 800d64c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d64e:	230a      	movs	r3, #10
 800d650:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d652:	230a      	movs	r3, #10
 800d654:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800d656:	230a      	movs	r3, #10
 800d658:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800d65a:	2300      	movs	r3, #0
 800d65c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800d65e:	230a      	movs	r3, #10
 800d660:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d662:	2300      	movs	r3, #0
 800d664:	83bb      	strh	r3, [r7, #28]
 800d666:	2300      	movs	r3, #0
 800d668:	837b      	strh	r3, [r7, #26]
 800d66a:	2300      	movs	r3, #0
 800d66c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d66e:	2300      	movs	r3, #0
 800d670:	843b      	strh	r3, [r7, #32]
 800d672:	e0ae      	b.n	800d7d2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800d674:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d678:	49a6      	ldr	r1, [pc, #664]	@ (800d914 <etharp_find_entry+0x2d4>)
 800d67a:	4613      	mov	r3, r2
 800d67c:	005b      	lsls	r3, r3, #1
 800d67e:	4413      	add	r3, r2
 800d680:	00db      	lsls	r3, r3, #3
 800d682:	440b      	add	r3, r1
 800d684:	3314      	adds	r3, #20
 800d686:	781b      	ldrb	r3, [r3, #0]
 800d688:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d68a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800d68e:	2b0a      	cmp	r3, #10
 800d690:	d105      	bne.n	800d69e <etharp_find_entry+0x5e>
 800d692:	7dfb      	ldrb	r3, [r7, #23]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d102      	bne.n	800d69e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800d698:	8c3b      	ldrh	r3, [r7, #32]
 800d69a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800d69c:	e095      	b.n	800d7ca <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800d69e:	7dfb      	ldrb	r3, [r7, #23]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	f000 8092 	beq.w	800d7ca <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800d6a6:	7dfb      	ldrb	r3, [r7, #23]
 800d6a8:	2b01      	cmp	r3, #1
 800d6aa:	d009      	beq.n	800d6c0 <etharp_find_entry+0x80>
 800d6ac:	7dfb      	ldrb	r3, [r7, #23]
 800d6ae:	2b01      	cmp	r3, #1
 800d6b0:	d806      	bhi.n	800d6c0 <etharp_find_entry+0x80>
 800d6b2:	4b99      	ldr	r3, [pc, #612]	@ (800d918 <etharp_find_entry+0x2d8>)
 800d6b4:	f240 1223 	movw	r2, #291	@ 0x123
 800d6b8:	4998      	ldr	r1, [pc, #608]	@ (800d91c <etharp_find_entry+0x2dc>)
 800d6ba:	4899      	ldr	r0, [pc, #612]	@ (800d920 <etharp_find_entry+0x2e0>)
 800d6bc:	f002 fb2c 	bl	800fd18 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d020      	beq.n	800d708 <etharp_find_entry+0xc8>
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	6819      	ldr	r1, [r3, #0]
 800d6ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d6ce:	4891      	ldr	r0, [pc, #580]	@ (800d914 <etharp_find_entry+0x2d4>)
 800d6d0:	4613      	mov	r3, r2
 800d6d2:	005b      	lsls	r3, r3, #1
 800d6d4:	4413      	add	r3, r2
 800d6d6:	00db      	lsls	r3, r3, #3
 800d6d8:	4403      	add	r3, r0
 800d6da:	3304      	adds	r3, #4
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	4299      	cmp	r1, r3
 800d6e0:	d112      	bne.n	800d708 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d00c      	beq.n	800d702 <etharp_find_entry+0xc2>
 800d6e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d6ec:	4989      	ldr	r1, [pc, #548]	@ (800d914 <etharp_find_entry+0x2d4>)
 800d6ee:	4613      	mov	r3, r2
 800d6f0:	005b      	lsls	r3, r3, #1
 800d6f2:	4413      	add	r3, r2
 800d6f4:	00db      	lsls	r3, r3, #3
 800d6f6:	440b      	add	r3, r1
 800d6f8:	3308      	adds	r3, #8
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	687a      	ldr	r2, [r7, #4]
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d102      	bne.n	800d708 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800d702:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d706:	e100      	b.n	800d90a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d708:	7dfb      	ldrb	r3, [r7, #23]
 800d70a:	2b01      	cmp	r3, #1
 800d70c:	d140      	bne.n	800d790 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800d70e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d712:	4980      	ldr	r1, [pc, #512]	@ (800d914 <etharp_find_entry+0x2d4>)
 800d714:	4613      	mov	r3, r2
 800d716:	005b      	lsls	r3, r3, #1
 800d718:	4413      	add	r3, r2
 800d71a:	00db      	lsls	r3, r3, #3
 800d71c:	440b      	add	r3, r1
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d01a      	beq.n	800d75a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800d724:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d728:	497a      	ldr	r1, [pc, #488]	@ (800d914 <etharp_find_entry+0x2d4>)
 800d72a:	4613      	mov	r3, r2
 800d72c:	005b      	lsls	r3, r3, #1
 800d72e:	4413      	add	r3, r2
 800d730:	00db      	lsls	r3, r3, #3
 800d732:	440b      	add	r3, r1
 800d734:	3312      	adds	r3, #18
 800d736:	881b      	ldrh	r3, [r3, #0]
 800d738:	8bba      	ldrh	r2, [r7, #28]
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d845      	bhi.n	800d7ca <etharp_find_entry+0x18a>
            old_queue = i;
 800d73e:	8c3b      	ldrh	r3, [r7, #32]
 800d740:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800d742:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d746:	4973      	ldr	r1, [pc, #460]	@ (800d914 <etharp_find_entry+0x2d4>)
 800d748:	4613      	mov	r3, r2
 800d74a:	005b      	lsls	r3, r3, #1
 800d74c:	4413      	add	r3, r2
 800d74e:	00db      	lsls	r3, r3, #3
 800d750:	440b      	add	r3, r1
 800d752:	3312      	adds	r3, #18
 800d754:	881b      	ldrh	r3, [r3, #0]
 800d756:	83bb      	strh	r3, [r7, #28]
 800d758:	e037      	b.n	800d7ca <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800d75a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d75e:	496d      	ldr	r1, [pc, #436]	@ (800d914 <etharp_find_entry+0x2d4>)
 800d760:	4613      	mov	r3, r2
 800d762:	005b      	lsls	r3, r3, #1
 800d764:	4413      	add	r3, r2
 800d766:	00db      	lsls	r3, r3, #3
 800d768:	440b      	add	r3, r1
 800d76a:	3312      	adds	r3, #18
 800d76c:	881b      	ldrh	r3, [r3, #0]
 800d76e:	8b7a      	ldrh	r2, [r7, #26]
 800d770:	429a      	cmp	r2, r3
 800d772:	d82a      	bhi.n	800d7ca <etharp_find_entry+0x18a>
            old_pending = i;
 800d774:	8c3b      	ldrh	r3, [r7, #32]
 800d776:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800d778:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d77c:	4965      	ldr	r1, [pc, #404]	@ (800d914 <etharp_find_entry+0x2d4>)
 800d77e:	4613      	mov	r3, r2
 800d780:	005b      	lsls	r3, r3, #1
 800d782:	4413      	add	r3, r2
 800d784:	00db      	lsls	r3, r3, #3
 800d786:	440b      	add	r3, r1
 800d788:	3312      	adds	r3, #18
 800d78a:	881b      	ldrh	r3, [r3, #0]
 800d78c:	837b      	strh	r3, [r7, #26]
 800d78e:	e01c      	b.n	800d7ca <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800d790:	7dfb      	ldrb	r3, [r7, #23]
 800d792:	2b01      	cmp	r3, #1
 800d794:	d919      	bls.n	800d7ca <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d796:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d79a:	495e      	ldr	r1, [pc, #376]	@ (800d914 <etharp_find_entry+0x2d4>)
 800d79c:	4613      	mov	r3, r2
 800d79e:	005b      	lsls	r3, r3, #1
 800d7a0:	4413      	add	r3, r2
 800d7a2:	00db      	lsls	r3, r3, #3
 800d7a4:	440b      	add	r3, r1
 800d7a6:	3312      	adds	r3, #18
 800d7a8:	881b      	ldrh	r3, [r3, #0]
 800d7aa:	8b3a      	ldrh	r2, [r7, #24]
 800d7ac:	429a      	cmp	r2, r3
 800d7ae:	d80c      	bhi.n	800d7ca <etharp_find_entry+0x18a>
            old_stable = i;
 800d7b0:	8c3b      	ldrh	r3, [r7, #32]
 800d7b2:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800d7b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d7b8:	4956      	ldr	r1, [pc, #344]	@ (800d914 <etharp_find_entry+0x2d4>)
 800d7ba:	4613      	mov	r3, r2
 800d7bc:	005b      	lsls	r3, r3, #1
 800d7be:	4413      	add	r3, r2
 800d7c0:	00db      	lsls	r3, r3, #3
 800d7c2:	440b      	add	r3, r1
 800d7c4:	3312      	adds	r3, #18
 800d7c6:	881b      	ldrh	r3, [r3, #0]
 800d7c8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d7ca:	8c3b      	ldrh	r3, [r7, #32]
 800d7cc:	3301      	adds	r3, #1
 800d7ce:	b29b      	uxth	r3, r3
 800d7d0:	843b      	strh	r3, [r7, #32]
 800d7d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d7d6:	2b09      	cmp	r3, #9
 800d7d8:	f77f af4c 	ble.w	800d674 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d7dc:	7afb      	ldrb	r3, [r7, #11]
 800d7de:	f003 0302 	and.w	r3, r3, #2
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d108      	bne.n	800d7f8 <etharp_find_entry+0x1b8>
 800d7e6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800d7ea:	2b0a      	cmp	r3, #10
 800d7ec:	d107      	bne.n	800d7fe <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d7ee:	7afb      	ldrb	r3, [r7, #11]
 800d7f0:	f003 0301 	and.w	r3, r3, #1
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d102      	bne.n	800d7fe <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800d7f8:	f04f 33ff 	mov.w	r3, #4294967295
 800d7fc:	e085      	b.n	800d90a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d7fe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800d802:	2b09      	cmp	r3, #9
 800d804:	dc02      	bgt.n	800d80c <etharp_find_entry+0x1cc>
    i = empty;
 800d806:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d808:	843b      	strh	r3, [r7, #32]
 800d80a:	e039      	b.n	800d880 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d80c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800d810:	2b09      	cmp	r3, #9
 800d812:	dc14      	bgt.n	800d83e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800d814:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d816:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d818:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d81c:	493d      	ldr	r1, [pc, #244]	@ (800d914 <etharp_find_entry+0x2d4>)
 800d81e:	4613      	mov	r3, r2
 800d820:	005b      	lsls	r3, r3, #1
 800d822:	4413      	add	r3, r2
 800d824:	00db      	lsls	r3, r3, #3
 800d826:	440b      	add	r3, r1
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d018      	beq.n	800d860 <etharp_find_entry+0x220>
 800d82e:	4b3a      	ldr	r3, [pc, #232]	@ (800d918 <etharp_find_entry+0x2d8>)
 800d830:	f240 126d 	movw	r2, #365	@ 0x16d
 800d834:	493b      	ldr	r1, [pc, #236]	@ (800d924 <etharp_find_entry+0x2e4>)
 800d836:	483a      	ldr	r0, [pc, #232]	@ (800d920 <etharp_find_entry+0x2e0>)
 800d838:	f002 fa6e 	bl	800fd18 <iprintf>
 800d83c:	e010      	b.n	800d860 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d83e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800d842:	2b09      	cmp	r3, #9
 800d844:	dc02      	bgt.n	800d84c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800d846:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d848:	843b      	strh	r3, [r7, #32]
 800d84a:	e009      	b.n	800d860 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d84c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d850:	2b09      	cmp	r3, #9
 800d852:	dc02      	bgt.n	800d85a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d854:	8bfb      	ldrh	r3, [r7, #30]
 800d856:	843b      	strh	r3, [r7, #32]
 800d858:	e002      	b.n	800d860 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800d85a:	f04f 33ff 	mov.w	r3, #4294967295
 800d85e:	e054      	b.n	800d90a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d860:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d864:	2b09      	cmp	r3, #9
 800d866:	dd06      	ble.n	800d876 <etharp_find_entry+0x236>
 800d868:	4b2b      	ldr	r3, [pc, #172]	@ (800d918 <etharp_find_entry+0x2d8>)
 800d86a:	f240 127f 	movw	r2, #383	@ 0x17f
 800d86e:	492e      	ldr	r1, [pc, #184]	@ (800d928 <etharp_find_entry+0x2e8>)
 800d870:	482b      	ldr	r0, [pc, #172]	@ (800d920 <etharp_find_entry+0x2e0>)
 800d872:	f002 fa51 	bl	800fd18 <iprintf>
    etharp_free_entry(i);
 800d876:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d87a:	4618      	mov	r0, r3
 800d87c:	f7ff fe06 	bl	800d48c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d880:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d884:	2b09      	cmp	r3, #9
 800d886:	dd06      	ble.n	800d896 <etharp_find_entry+0x256>
 800d888:	4b23      	ldr	r3, [pc, #140]	@ (800d918 <etharp_find_entry+0x2d8>)
 800d88a:	f240 1283 	movw	r2, #387	@ 0x183
 800d88e:	4926      	ldr	r1, [pc, #152]	@ (800d928 <etharp_find_entry+0x2e8>)
 800d890:	4823      	ldr	r0, [pc, #140]	@ (800d920 <etharp_find_entry+0x2e0>)
 800d892:	f002 fa41 	bl	800fd18 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d896:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d89a:	491e      	ldr	r1, [pc, #120]	@ (800d914 <etharp_find_entry+0x2d4>)
 800d89c:	4613      	mov	r3, r2
 800d89e:	005b      	lsls	r3, r3, #1
 800d8a0:	4413      	add	r3, r2
 800d8a2:	00db      	lsls	r3, r3, #3
 800d8a4:	440b      	add	r3, r1
 800d8a6:	3314      	adds	r3, #20
 800d8a8:	781b      	ldrb	r3, [r3, #0]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d006      	beq.n	800d8bc <etharp_find_entry+0x27c>
 800d8ae:	4b1a      	ldr	r3, [pc, #104]	@ (800d918 <etharp_find_entry+0x2d8>)
 800d8b0:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800d8b4:	491d      	ldr	r1, [pc, #116]	@ (800d92c <etharp_find_entry+0x2ec>)
 800d8b6:	481a      	ldr	r0, [pc, #104]	@ (800d920 <etharp_find_entry+0x2e0>)
 800d8b8:	f002 fa2e 	bl	800fd18 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d00b      	beq.n	800d8da <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d8c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	6819      	ldr	r1, [r3, #0]
 800d8ca:	4812      	ldr	r0, [pc, #72]	@ (800d914 <etharp_find_entry+0x2d4>)
 800d8cc:	4613      	mov	r3, r2
 800d8ce:	005b      	lsls	r3, r3, #1
 800d8d0:	4413      	add	r3, r2
 800d8d2:	00db      	lsls	r3, r3, #3
 800d8d4:	4403      	add	r3, r0
 800d8d6:	3304      	adds	r3, #4
 800d8d8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d8da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d8de:	490d      	ldr	r1, [pc, #52]	@ (800d914 <etharp_find_entry+0x2d4>)
 800d8e0:	4613      	mov	r3, r2
 800d8e2:	005b      	lsls	r3, r3, #1
 800d8e4:	4413      	add	r3, r2
 800d8e6:	00db      	lsls	r3, r3, #3
 800d8e8:	440b      	add	r3, r1
 800d8ea:	3312      	adds	r3, #18
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d8f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d8f4:	4907      	ldr	r1, [pc, #28]	@ (800d914 <etharp_find_entry+0x2d4>)
 800d8f6:	4613      	mov	r3, r2
 800d8f8:	005b      	lsls	r3, r3, #1
 800d8fa:	4413      	add	r3, r2
 800d8fc:	00db      	lsls	r3, r3, #3
 800d8fe:	440b      	add	r3, r1
 800d900:	3308      	adds	r3, #8
 800d902:	687a      	ldr	r2, [r7, #4]
 800d904:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800d906:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3728      	adds	r7, #40	@ 0x28
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}
 800d912:	bf00      	nop
 800d914:	20008830 	.word	0x20008830
 800d918:	08012ee0 	.word	0x08012ee0
 800d91c:	08012f18 	.word	0x08012f18
 800d920:	08012f58 	.word	0x08012f58
 800d924:	08012f80 	.word	0x08012f80
 800d928:	08012f98 	.word	0x08012f98
 800d92c:	08012fac 	.word	0x08012fac

0800d930 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b088      	sub	sp, #32
 800d934:	af02      	add	r7, sp, #8
 800d936:	60f8      	str	r0, [r7, #12]
 800d938:	60b9      	str	r1, [r7, #8]
 800d93a:	607a      	str	r2, [r7, #4]
 800d93c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d944:	2b06      	cmp	r3, #6
 800d946:	d006      	beq.n	800d956 <etharp_update_arp_entry+0x26>
 800d948:	4b48      	ldr	r3, [pc, #288]	@ (800da6c <etharp_update_arp_entry+0x13c>)
 800d94a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800d94e:	4948      	ldr	r1, [pc, #288]	@ (800da70 <etharp_update_arp_entry+0x140>)
 800d950:	4848      	ldr	r0, [pc, #288]	@ (800da74 <etharp_update_arp_entry+0x144>)
 800d952:	f002 f9e1 	bl	800fd18 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d012      	beq.n	800d982 <etharp_update_arp_entry+0x52>
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d00e      	beq.n	800d982 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	68f9      	ldr	r1, [r7, #12]
 800d96a:	4618      	mov	r0, r3
 800d96c:	f001 f8fe 	bl	800eb6c <ip4_addr_isbroadcast_u32>
 800d970:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d972:	2b00      	cmp	r3, #0
 800d974:	d105      	bne.n	800d982 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d97e:	2be0      	cmp	r3, #224	@ 0xe0
 800d980:	d102      	bne.n	800d988 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d982:	f06f 030f 	mvn.w	r3, #15
 800d986:	e06c      	b.n	800da62 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d988:	78fb      	ldrb	r3, [r7, #3]
 800d98a:	68fa      	ldr	r2, [r7, #12]
 800d98c:	4619      	mov	r1, r3
 800d98e:	68b8      	ldr	r0, [r7, #8]
 800d990:	f7ff fe56 	bl	800d640 <etharp_find_entry>
 800d994:	4603      	mov	r3, r0
 800d996:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d998:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	da02      	bge.n	800d9a6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d9a0:	8afb      	ldrh	r3, [r7, #22]
 800d9a2:	b25b      	sxtb	r3, r3
 800d9a4:	e05d      	b.n	800da62 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d9a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d9aa:	4933      	ldr	r1, [pc, #204]	@ (800da78 <etharp_update_arp_entry+0x148>)
 800d9ac:	4613      	mov	r3, r2
 800d9ae:	005b      	lsls	r3, r3, #1
 800d9b0:	4413      	add	r3, r2
 800d9b2:	00db      	lsls	r3, r3, #3
 800d9b4:	440b      	add	r3, r1
 800d9b6:	3314      	adds	r3, #20
 800d9b8:	2202      	movs	r2, #2
 800d9ba:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d9bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d9c0:	492d      	ldr	r1, [pc, #180]	@ (800da78 <etharp_update_arp_entry+0x148>)
 800d9c2:	4613      	mov	r3, r2
 800d9c4:	005b      	lsls	r3, r3, #1
 800d9c6:	4413      	add	r3, r2
 800d9c8:	00db      	lsls	r3, r3, #3
 800d9ca:	440b      	add	r3, r1
 800d9cc:	3308      	adds	r3, #8
 800d9ce:	68fa      	ldr	r2, [r7, #12]
 800d9d0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d9d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d9d6:	4613      	mov	r3, r2
 800d9d8:	005b      	lsls	r3, r3, #1
 800d9da:	4413      	add	r3, r2
 800d9dc:	00db      	lsls	r3, r3, #3
 800d9de:	3308      	adds	r3, #8
 800d9e0:	4a25      	ldr	r2, [pc, #148]	@ (800da78 <etharp_update_arp_entry+0x148>)
 800d9e2:	4413      	add	r3, r2
 800d9e4:	3304      	adds	r3, #4
 800d9e6:	2206      	movs	r2, #6
 800d9e8:	6879      	ldr	r1, [r7, #4]
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f002 fa99 	bl	800ff22 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d9f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d9f4:	4920      	ldr	r1, [pc, #128]	@ (800da78 <etharp_update_arp_entry+0x148>)
 800d9f6:	4613      	mov	r3, r2
 800d9f8:	005b      	lsls	r3, r3, #1
 800d9fa:	4413      	add	r3, r2
 800d9fc:	00db      	lsls	r3, r3, #3
 800d9fe:	440b      	add	r3, r1
 800da00:	3312      	adds	r3, #18
 800da02:	2200      	movs	r2, #0
 800da04:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800da06:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800da0a:	491b      	ldr	r1, [pc, #108]	@ (800da78 <etharp_update_arp_entry+0x148>)
 800da0c:	4613      	mov	r3, r2
 800da0e:	005b      	lsls	r3, r3, #1
 800da10:	4413      	add	r3, r2
 800da12:	00db      	lsls	r3, r3, #3
 800da14:	440b      	add	r3, r1
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d021      	beq.n	800da60 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800da1c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800da20:	4915      	ldr	r1, [pc, #84]	@ (800da78 <etharp_update_arp_entry+0x148>)
 800da22:	4613      	mov	r3, r2
 800da24:	005b      	lsls	r3, r3, #1
 800da26:	4413      	add	r3, r2
 800da28:	00db      	lsls	r3, r3, #3
 800da2a:	440b      	add	r3, r1
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800da30:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800da34:	4910      	ldr	r1, [pc, #64]	@ (800da78 <etharp_update_arp_entry+0x148>)
 800da36:	4613      	mov	r3, r2
 800da38:	005b      	lsls	r3, r3, #1
 800da3a:	4413      	add	r3, r2
 800da3c:	00db      	lsls	r3, r3, #3
 800da3e:	440b      	add	r3, r1
 800da40:	2200      	movs	r2, #0
 800da42:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800da4a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800da4e:	9300      	str	r3, [sp, #0]
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	6939      	ldr	r1, [r7, #16]
 800da54:	68f8      	ldr	r0, [r7, #12]
 800da56:	f002 f817 	bl	800fa88 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800da5a:	6938      	ldr	r0, [r7, #16]
 800da5c:	f7f9 fadc 	bl	8007018 <pbuf_free>
  }
  return ERR_OK;
 800da60:	2300      	movs	r3, #0
}
 800da62:	4618      	mov	r0, r3
 800da64:	3718      	adds	r7, #24
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}
 800da6a:	bf00      	nop
 800da6c:	08012ee0 	.word	0x08012ee0
 800da70:	08012fd8 	.word	0x08012fd8
 800da74:	08012f58 	.word	0x08012f58
 800da78:	20008830 	.word	0x20008830

0800da7c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b084      	sub	sp, #16
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800da84:	2300      	movs	r3, #0
 800da86:	60fb      	str	r3, [r7, #12]
 800da88:	e01e      	b.n	800dac8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800da8a:	4913      	ldr	r1, [pc, #76]	@ (800dad8 <etharp_cleanup_netif+0x5c>)
 800da8c:	68fa      	ldr	r2, [r7, #12]
 800da8e:	4613      	mov	r3, r2
 800da90:	005b      	lsls	r3, r3, #1
 800da92:	4413      	add	r3, r2
 800da94:	00db      	lsls	r3, r3, #3
 800da96:	440b      	add	r3, r1
 800da98:	3314      	adds	r3, #20
 800da9a:	781b      	ldrb	r3, [r3, #0]
 800da9c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800da9e:	7afb      	ldrb	r3, [r7, #11]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d00e      	beq.n	800dac2 <etharp_cleanup_netif+0x46>
 800daa4:	490c      	ldr	r1, [pc, #48]	@ (800dad8 <etharp_cleanup_netif+0x5c>)
 800daa6:	68fa      	ldr	r2, [r7, #12]
 800daa8:	4613      	mov	r3, r2
 800daaa:	005b      	lsls	r3, r3, #1
 800daac:	4413      	add	r3, r2
 800daae:	00db      	lsls	r3, r3, #3
 800dab0:	440b      	add	r3, r1
 800dab2:	3308      	adds	r3, #8
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	687a      	ldr	r2, [r7, #4]
 800dab8:	429a      	cmp	r2, r3
 800daba:	d102      	bne.n	800dac2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800dabc:	68f8      	ldr	r0, [r7, #12]
 800dabe:	f7ff fce5 	bl	800d48c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	3301      	adds	r3, #1
 800dac6:	60fb      	str	r3, [r7, #12]
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	2b09      	cmp	r3, #9
 800dacc:	dddd      	ble.n	800da8a <etharp_cleanup_netif+0xe>
    }
  }
}
 800dace:	bf00      	nop
 800dad0:	bf00      	nop
 800dad2:	3710      	adds	r7, #16
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}
 800dad8:	20008830 	.word	0x20008830

0800dadc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800dadc:	b5b0      	push	{r4, r5, r7, lr}
 800dade:	b08a      	sub	sp, #40	@ 0x28
 800dae0:	af04      	add	r7, sp, #16
 800dae2:	6078      	str	r0, [r7, #4]
 800dae4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d107      	bne.n	800dafc <etharp_input+0x20>
 800daec:	4b3d      	ldr	r3, [pc, #244]	@ (800dbe4 <etharp_input+0x108>)
 800daee:	f240 228a 	movw	r2, #650	@ 0x28a
 800daf2:	493d      	ldr	r1, [pc, #244]	@ (800dbe8 <etharp_input+0x10c>)
 800daf4:	483d      	ldr	r0, [pc, #244]	@ (800dbec <etharp_input+0x110>)
 800daf6:	f002 f90f 	bl	800fd18 <iprintf>
 800dafa:	e06f      	b.n	800dbdc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	685b      	ldr	r3, [r3, #4]
 800db00:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800db02:	693b      	ldr	r3, [r7, #16]
 800db04:	881b      	ldrh	r3, [r3, #0]
 800db06:	b29b      	uxth	r3, r3
 800db08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800db0c:	d10c      	bne.n	800db28 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800db0e:	693b      	ldr	r3, [r7, #16]
 800db10:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800db12:	2b06      	cmp	r3, #6
 800db14:	d108      	bne.n	800db28 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800db1a:	2b04      	cmp	r3, #4
 800db1c:	d104      	bne.n	800db28 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800db1e:	693b      	ldr	r3, [r7, #16]
 800db20:	885b      	ldrh	r3, [r3, #2]
 800db22:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800db24:	2b08      	cmp	r3, #8
 800db26:	d003      	beq.n	800db30 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f7f9 fa75 	bl	8007018 <pbuf_free>
    return;
 800db2e:	e055      	b.n	800dbdc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800db30:	693b      	ldr	r3, [r7, #16]
 800db32:	330e      	adds	r3, #14
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800db38:	693b      	ldr	r3, [r7, #16]
 800db3a:	3318      	adds	r3, #24
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	3304      	adds	r3, #4
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d102      	bne.n	800db50 <etharp_input+0x74>
    for_us = 0;
 800db4a:	2300      	movs	r3, #0
 800db4c:	75fb      	strb	r3, [r7, #23]
 800db4e:	e009      	b.n	800db64 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800db50:	68ba      	ldr	r2, [r7, #8]
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	3304      	adds	r3, #4
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	429a      	cmp	r2, r3
 800db5a:	bf0c      	ite	eq
 800db5c:	2301      	moveq	r3, #1
 800db5e:	2300      	movne	r3, #0
 800db60:	b2db      	uxtb	r3, r3
 800db62:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	f103 0208 	add.w	r2, r3, #8
 800db6a:	7dfb      	ldrb	r3, [r7, #23]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d001      	beq.n	800db74 <etharp_input+0x98>
 800db70:	2301      	movs	r3, #1
 800db72:	e000      	b.n	800db76 <etharp_input+0x9a>
 800db74:	2302      	movs	r3, #2
 800db76:	f107 010c 	add.w	r1, r7, #12
 800db7a:	6838      	ldr	r0, [r7, #0]
 800db7c:	f7ff fed8 	bl	800d930 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800db80:	693b      	ldr	r3, [r7, #16]
 800db82:	88db      	ldrh	r3, [r3, #6]
 800db84:	b29b      	uxth	r3, r3
 800db86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800db8a:	d003      	beq.n	800db94 <etharp_input+0xb8>
 800db8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800db90:	d01e      	beq.n	800dbd0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800db92:	e020      	b.n	800dbd6 <etharp_input+0xfa>
      if (for_us) {
 800db94:	7dfb      	ldrb	r3, [r7, #23]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d01c      	beq.n	800dbd4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800dbb0:	693a      	ldr	r2, [r7, #16]
 800dbb2:	3208      	adds	r2, #8
        etharp_raw(netif,
 800dbb4:	2102      	movs	r1, #2
 800dbb6:	9103      	str	r1, [sp, #12]
 800dbb8:	f107 010c 	add.w	r1, r7, #12
 800dbbc:	9102      	str	r1, [sp, #8]
 800dbbe:	9201      	str	r2, [sp, #4]
 800dbc0:	9300      	str	r3, [sp, #0]
 800dbc2:	462b      	mov	r3, r5
 800dbc4:	4622      	mov	r2, r4
 800dbc6:	4601      	mov	r1, r0
 800dbc8:	6838      	ldr	r0, [r7, #0]
 800dbca:	f000 faeb 	bl	800e1a4 <etharp_raw>
      break;
 800dbce:	e001      	b.n	800dbd4 <etharp_input+0xf8>
      break;
 800dbd0:	bf00      	nop
 800dbd2:	e000      	b.n	800dbd6 <etharp_input+0xfa>
      break;
 800dbd4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f7f9 fa1e 	bl	8007018 <pbuf_free>
}
 800dbdc:	3718      	adds	r7, #24
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bdb0      	pop	{r4, r5, r7, pc}
 800dbe2:	bf00      	nop
 800dbe4:	08012ee0 	.word	0x08012ee0
 800dbe8:	08013030 	.word	0x08013030
 800dbec:	08012f58 	.word	0x08012f58

0800dbf0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b086      	sub	sp, #24
 800dbf4:	af02      	add	r7, sp, #8
 800dbf6:	60f8      	str	r0, [r7, #12]
 800dbf8:	60b9      	str	r1, [r7, #8]
 800dbfa:	4613      	mov	r3, r2
 800dbfc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800dbfe:	79fa      	ldrb	r2, [r7, #7]
 800dc00:	4944      	ldr	r1, [pc, #272]	@ (800dd14 <etharp_output_to_arp_index+0x124>)
 800dc02:	4613      	mov	r3, r2
 800dc04:	005b      	lsls	r3, r3, #1
 800dc06:	4413      	add	r3, r2
 800dc08:	00db      	lsls	r3, r3, #3
 800dc0a:	440b      	add	r3, r1
 800dc0c:	3314      	adds	r3, #20
 800dc0e:	781b      	ldrb	r3, [r3, #0]
 800dc10:	2b01      	cmp	r3, #1
 800dc12:	d806      	bhi.n	800dc22 <etharp_output_to_arp_index+0x32>
 800dc14:	4b40      	ldr	r3, [pc, #256]	@ (800dd18 <etharp_output_to_arp_index+0x128>)
 800dc16:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800dc1a:	4940      	ldr	r1, [pc, #256]	@ (800dd1c <etharp_output_to_arp_index+0x12c>)
 800dc1c:	4840      	ldr	r0, [pc, #256]	@ (800dd20 <etharp_output_to_arp_index+0x130>)
 800dc1e:	f002 f87b 	bl	800fd18 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800dc22:	79fa      	ldrb	r2, [r7, #7]
 800dc24:	493b      	ldr	r1, [pc, #236]	@ (800dd14 <etharp_output_to_arp_index+0x124>)
 800dc26:	4613      	mov	r3, r2
 800dc28:	005b      	lsls	r3, r3, #1
 800dc2a:	4413      	add	r3, r2
 800dc2c:	00db      	lsls	r3, r3, #3
 800dc2e:	440b      	add	r3, r1
 800dc30:	3314      	adds	r3, #20
 800dc32:	781b      	ldrb	r3, [r3, #0]
 800dc34:	2b02      	cmp	r3, #2
 800dc36:	d153      	bne.n	800dce0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800dc38:	79fa      	ldrb	r2, [r7, #7]
 800dc3a:	4936      	ldr	r1, [pc, #216]	@ (800dd14 <etharp_output_to_arp_index+0x124>)
 800dc3c:	4613      	mov	r3, r2
 800dc3e:	005b      	lsls	r3, r3, #1
 800dc40:	4413      	add	r3, r2
 800dc42:	00db      	lsls	r3, r3, #3
 800dc44:	440b      	add	r3, r1
 800dc46:	3312      	adds	r3, #18
 800dc48:	881b      	ldrh	r3, [r3, #0]
 800dc4a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800dc4e:	d919      	bls.n	800dc84 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800dc50:	79fa      	ldrb	r2, [r7, #7]
 800dc52:	4613      	mov	r3, r2
 800dc54:	005b      	lsls	r3, r3, #1
 800dc56:	4413      	add	r3, r2
 800dc58:	00db      	lsls	r3, r3, #3
 800dc5a:	4a2e      	ldr	r2, [pc, #184]	@ (800dd14 <etharp_output_to_arp_index+0x124>)
 800dc5c:	4413      	add	r3, r2
 800dc5e:	3304      	adds	r3, #4
 800dc60:	4619      	mov	r1, r3
 800dc62:	68f8      	ldr	r0, [r7, #12]
 800dc64:	f000 fb4c 	bl	800e300 <etharp_request>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d138      	bne.n	800dce0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800dc6e:	79fa      	ldrb	r2, [r7, #7]
 800dc70:	4928      	ldr	r1, [pc, #160]	@ (800dd14 <etharp_output_to_arp_index+0x124>)
 800dc72:	4613      	mov	r3, r2
 800dc74:	005b      	lsls	r3, r3, #1
 800dc76:	4413      	add	r3, r2
 800dc78:	00db      	lsls	r3, r3, #3
 800dc7a:	440b      	add	r3, r1
 800dc7c:	3314      	adds	r3, #20
 800dc7e:	2203      	movs	r2, #3
 800dc80:	701a      	strb	r2, [r3, #0]
 800dc82:	e02d      	b.n	800dce0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800dc84:	79fa      	ldrb	r2, [r7, #7]
 800dc86:	4923      	ldr	r1, [pc, #140]	@ (800dd14 <etharp_output_to_arp_index+0x124>)
 800dc88:	4613      	mov	r3, r2
 800dc8a:	005b      	lsls	r3, r3, #1
 800dc8c:	4413      	add	r3, r2
 800dc8e:	00db      	lsls	r3, r3, #3
 800dc90:	440b      	add	r3, r1
 800dc92:	3312      	adds	r3, #18
 800dc94:	881b      	ldrh	r3, [r3, #0]
 800dc96:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800dc9a:	d321      	bcc.n	800dce0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800dc9c:	79fa      	ldrb	r2, [r7, #7]
 800dc9e:	4613      	mov	r3, r2
 800dca0:	005b      	lsls	r3, r3, #1
 800dca2:	4413      	add	r3, r2
 800dca4:	00db      	lsls	r3, r3, #3
 800dca6:	4a1b      	ldr	r2, [pc, #108]	@ (800dd14 <etharp_output_to_arp_index+0x124>)
 800dca8:	4413      	add	r3, r2
 800dcaa:	1d19      	adds	r1, r3, #4
 800dcac:	79fa      	ldrb	r2, [r7, #7]
 800dcae:	4613      	mov	r3, r2
 800dcb0:	005b      	lsls	r3, r3, #1
 800dcb2:	4413      	add	r3, r2
 800dcb4:	00db      	lsls	r3, r3, #3
 800dcb6:	3308      	adds	r3, #8
 800dcb8:	4a16      	ldr	r2, [pc, #88]	@ (800dd14 <etharp_output_to_arp_index+0x124>)
 800dcba:	4413      	add	r3, r2
 800dcbc:	3304      	adds	r3, #4
 800dcbe:	461a      	mov	r2, r3
 800dcc0:	68f8      	ldr	r0, [r7, #12]
 800dcc2:	f000 fafb 	bl	800e2bc <etharp_request_dst>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d109      	bne.n	800dce0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800dccc:	79fa      	ldrb	r2, [r7, #7]
 800dcce:	4911      	ldr	r1, [pc, #68]	@ (800dd14 <etharp_output_to_arp_index+0x124>)
 800dcd0:	4613      	mov	r3, r2
 800dcd2:	005b      	lsls	r3, r3, #1
 800dcd4:	4413      	add	r3, r2
 800dcd6:	00db      	lsls	r3, r3, #3
 800dcd8:	440b      	add	r3, r1
 800dcda:	3314      	adds	r3, #20
 800dcdc:	2203      	movs	r2, #3
 800dcde:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800dce6:	79fa      	ldrb	r2, [r7, #7]
 800dce8:	4613      	mov	r3, r2
 800dcea:	005b      	lsls	r3, r3, #1
 800dcec:	4413      	add	r3, r2
 800dcee:	00db      	lsls	r3, r3, #3
 800dcf0:	3308      	adds	r3, #8
 800dcf2:	4a08      	ldr	r2, [pc, #32]	@ (800dd14 <etharp_output_to_arp_index+0x124>)
 800dcf4:	4413      	add	r3, r2
 800dcf6:	3304      	adds	r3, #4
 800dcf8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dcfc:	9200      	str	r2, [sp, #0]
 800dcfe:	460a      	mov	r2, r1
 800dd00:	68b9      	ldr	r1, [r7, #8]
 800dd02:	68f8      	ldr	r0, [r7, #12]
 800dd04:	f001 fec0 	bl	800fa88 <ethernet_output>
 800dd08:	4603      	mov	r3, r0
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3710      	adds	r7, #16
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
 800dd12:	bf00      	nop
 800dd14:	20008830 	.word	0x20008830
 800dd18:	08012ee0 	.word	0x08012ee0
 800dd1c:	08013050 	.word	0x08013050
 800dd20:	08012f58 	.word	0x08012f58

0800dd24 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b08a      	sub	sp, #40	@ 0x28
 800dd28:	af02      	add	r7, sp, #8
 800dd2a:	60f8      	str	r0, [r7, #12]
 800dd2c:	60b9      	str	r1, [r7, #8]
 800dd2e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d106      	bne.n	800dd48 <etharp_output+0x24>
 800dd3a:	4b73      	ldr	r3, [pc, #460]	@ (800df08 <etharp_output+0x1e4>)
 800dd3c:	f240 321e 	movw	r2, #798	@ 0x31e
 800dd40:	4972      	ldr	r1, [pc, #456]	@ (800df0c <etharp_output+0x1e8>)
 800dd42:	4873      	ldr	r0, [pc, #460]	@ (800df10 <etharp_output+0x1ec>)
 800dd44:	f001 ffe8 	bl	800fd18 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d106      	bne.n	800dd5c <etharp_output+0x38>
 800dd4e:	4b6e      	ldr	r3, [pc, #440]	@ (800df08 <etharp_output+0x1e4>)
 800dd50:	f240 321f 	movw	r2, #799	@ 0x31f
 800dd54:	496f      	ldr	r1, [pc, #444]	@ (800df14 <etharp_output+0x1f0>)
 800dd56:	486e      	ldr	r0, [pc, #440]	@ (800df10 <etharp_output+0x1ec>)
 800dd58:	f001 ffde 	bl	800fd18 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d106      	bne.n	800dd70 <etharp_output+0x4c>
 800dd62:	4b69      	ldr	r3, [pc, #420]	@ (800df08 <etharp_output+0x1e4>)
 800dd64:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800dd68:	496b      	ldr	r1, [pc, #428]	@ (800df18 <etharp_output+0x1f4>)
 800dd6a:	4869      	ldr	r0, [pc, #420]	@ (800df10 <etharp_output+0x1ec>)
 800dd6c:	f001 ffd4 	bl	800fd18 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	68f9      	ldr	r1, [r7, #12]
 800dd76:	4618      	mov	r0, r3
 800dd78:	f000 fef8 	bl	800eb6c <ip4_addr_isbroadcast_u32>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d002      	beq.n	800dd88 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800dd82:	4b66      	ldr	r3, [pc, #408]	@ (800df1c <etharp_output+0x1f8>)
 800dd84:	61fb      	str	r3, [r7, #28]
 800dd86:	e0af      	b.n	800dee8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dd90:	2be0      	cmp	r3, #224	@ 0xe0
 800dd92:	d118      	bne.n	800ddc6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800dd94:	2301      	movs	r3, #1
 800dd96:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800dd98:	2300      	movs	r3, #0
 800dd9a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800dd9c:	235e      	movs	r3, #94	@ 0x5e
 800dd9e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	3301      	adds	r3, #1
 800dda4:	781b      	ldrb	r3, [r3, #0]
 800dda6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ddaa:	b2db      	uxtb	r3, r3
 800ddac:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	3302      	adds	r3, #2
 800ddb2:	781b      	ldrb	r3, [r3, #0]
 800ddb4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	3303      	adds	r3, #3
 800ddba:	781b      	ldrb	r3, [r3, #0]
 800ddbc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800ddbe:	f107 0310 	add.w	r3, r7, #16
 800ddc2:	61fb      	str	r3, [r7, #28]
 800ddc4:	e090      	b.n	800dee8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681a      	ldr	r2, [r3, #0]
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	3304      	adds	r3, #4
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	405a      	eors	r2, r3
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	3308      	adds	r3, #8
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	4013      	ands	r3, r2
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d012      	beq.n	800de04 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800dde4:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800dde8:	4293      	cmp	r3, r2
 800ddea:	d00b      	beq.n	800de04 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	330c      	adds	r3, #12
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d003      	beq.n	800ddfe <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	330c      	adds	r3, #12
 800ddfa:	61bb      	str	r3, [r7, #24]
 800ddfc:	e002      	b.n	800de04 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800ddfe:	f06f 0303 	mvn.w	r3, #3
 800de02:	e07d      	b.n	800df00 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800de04:	4b46      	ldr	r3, [pc, #280]	@ (800df20 <etharp_output+0x1fc>)
 800de06:	781b      	ldrb	r3, [r3, #0]
 800de08:	4619      	mov	r1, r3
 800de0a:	4a46      	ldr	r2, [pc, #280]	@ (800df24 <etharp_output+0x200>)
 800de0c:	460b      	mov	r3, r1
 800de0e:	005b      	lsls	r3, r3, #1
 800de10:	440b      	add	r3, r1
 800de12:	00db      	lsls	r3, r3, #3
 800de14:	4413      	add	r3, r2
 800de16:	3314      	adds	r3, #20
 800de18:	781b      	ldrb	r3, [r3, #0]
 800de1a:	2b01      	cmp	r3, #1
 800de1c:	d925      	bls.n	800de6a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800de1e:	4b40      	ldr	r3, [pc, #256]	@ (800df20 <etharp_output+0x1fc>)
 800de20:	781b      	ldrb	r3, [r3, #0]
 800de22:	4619      	mov	r1, r3
 800de24:	4a3f      	ldr	r2, [pc, #252]	@ (800df24 <etharp_output+0x200>)
 800de26:	460b      	mov	r3, r1
 800de28:	005b      	lsls	r3, r3, #1
 800de2a:	440b      	add	r3, r1
 800de2c:	00db      	lsls	r3, r3, #3
 800de2e:	4413      	add	r3, r2
 800de30:	3308      	adds	r3, #8
 800de32:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800de34:	68fa      	ldr	r2, [r7, #12]
 800de36:	429a      	cmp	r2, r3
 800de38:	d117      	bne.n	800de6a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800de3a:	69bb      	ldr	r3, [r7, #24]
 800de3c:	681a      	ldr	r2, [r3, #0]
 800de3e:	4b38      	ldr	r3, [pc, #224]	@ (800df20 <etharp_output+0x1fc>)
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	4618      	mov	r0, r3
 800de44:	4937      	ldr	r1, [pc, #220]	@ (800df24 <etharp_output+0x200>)
 800de46:	4603      	mov	r3, r0
 800de48:	005b      	lsls	r3, r3, #1
 800de4a:	4403      	add	r3, r0
 800de4c:	00db      	lsls	r3, r3, #3
 800de4e:	440b      	add	r3, r1
 800de50:	3304      	adds	r3, #4
 800de52:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800de54:	429a      	cmp	r2, r3
 800de56:	d108      	bne.n	800de6a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800de58:	4b31      	ldr	r3, [pc, #196]	@ (800df20 <etharp_output+0x1fc>)
 800de5a:	781b      	ldrb	r3, [r3, #0]
 800de5c:	461a      	mov	r2, r3
 800de5e:	68b9      	ldr	r1, [r7, #8]
 800de60:	68f8      	ldr	r0, [r7, #12]
 800de62:	f7ff fec5 	bl	800dbf0 <etharp_output_to_arp_index>
 800de66:	4603      	mov	r3, r0
 800de68:	e04a      	b.n	800df00 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800de6a:	2300      	movs	r3, #0
 800de6c:	75fb      	strb	r3, [r7, #23]
 800de6e:	e031      	b.n	800ded4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800de70:	7dfa      	ldrb	r2, [r7, #23]
 800de72:	492c      	ldr	r1, [pc, #176]	@ (800df24 <etharp_output+0x200>)
 800de74:	4613      	mov	r3, r2
 800de76:	005b      	lsls	r3, r3, #1
 800de78:	4413      	add	r3, r2
 800de7a:	00db      	lsls	r3, r3, #3
 800de7c:	440b      	add	r3, r1
 800de7e:	3314      	adds	r3, #20
 800de80:	781b      	ldrb	r3, [r3, #0]
 800de82:	2b01      	cmp	r3, #1
 800de84:	d923      	bls.n	800dece <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800de86:	7dfa      	ldrb	r2, [r7, #23]
 800de88:	4926      	ldr	r1, [pc, #152]	@ (800df24 <etharp_output+0x200>)
 800de8a:	4613      	mov	r3, r2
 800de8c:	005b      	lsls	r3, r3, #1
 800de8e:	4413      	add	r3, r2
 800de90:	00db      	lsls	r3, r3, #3
 800de92:	440b      	add	r3, r1
 800de94:	3308      	adds	r3, #8
 800de96:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800de98:	68fa      	ldr	r2, [r7, #12]
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d117      	bne.n	800dece <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800de9e:	69bb      	ldr	r3, [r7, #24]
 800dea0:	6819      	ldr	r1, [r3, #0]
 800dea2:	7dfa      	ldrb	r2, [r7, #23]
 800dea4:	481f      	ldr	r0, [pc, #124]	@ (800df24 <etharp_output+0x200>)
 800dea6:	4613      	mov	r3, r2
 800dea8:	005b      	lsls	r3, r3, #1
 800deaa:	4413      	add	r3, r2
 800deac:	00db      	lsls	r3, r3, #3
 800deae:	4403      	add	r3, r0
 800deb0:	3304      	adds	r3, #4
 800deb2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800deb4:	4299      	cmp	r1, r3
 800deb6:	d10a      	bne.n	800dece <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800deb8:	4a19      	ldr	r2, [pc, #100]	@ (800df20 <etharp_output+0x1fc>)
 800deba:	7dfb      	ldrb	r3, [r7, #23]
 800debc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800debe:	7dfb      	ldrb	r3, [r7, #23]
 800dec0:	461a      	mov	r2, r3
 800dec2:	68b9      	ldr	r1, [r7, #8]
 800dec4:	68f8      	ldr	r0, [r7, #12]
 800dec6:	f7ff fe93 	bl	800dbf0 <etharp_output_to_arp_index>
 800deca:	4603      	mov	r3, r0
 800decc:	e018      	b.n	800df00 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800dece:	7dfb      	ldrb	r3, [r7, #23]
 800ded0:	3301      	adds	r3, #1
 800ded2:	75fb      	strb	r3, [r7, #23]
 800ded4:	7dfb      	ldrb	r3, [r7, #23]
 800ded6:	2b09      	cmp	r3, #9
 800ded8:	d9ca      	bls.n	800de70 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800deda:	68ba      	ldr	r2, [r7, #8]
 800dedc:	69b9      	ldr	r1, [r7, #24]
 800dede:	68f8      	ldr	r0, [r7, #12]
 800dee0:	f000 f822 	bl	800df28 <etharp_query>
 800dee4:	4603      	mov	r3, r0
 800dee6:	e00b      	b.n	800df00 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800deee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800def2:	9300      	str	r3, [sp, #0]
 800def4:	69fb      	ldr	r3, [r7, #28]
 800def6:	68b9      	ldr	r1, [r7, #8]
 800def8:	68f8      	ldr	r0, [r7, #12]
 800defa:	f001 fdc5 	bl	800fa88 <ethernet_output>
 800defe:	4603      	mov	r3, r0
}
 800df00:	4618      	mov	r0, r3
 800df02:	3720      	adds	r7, #32
 800df04:	46bd      	mov	sp, r7
 800df06:	bd80      	pop	{r7, pc}
 800df08:	08012ee0 	.word	0x08012ee0
 800df0c:	08013030 	.word	0x08013030
 800df10:	08012f58 	.word	0x08012f58
 800df14:	08013080 	.word	0x08013080
 800df18:	08013020 	.word	0x08013020
 800df1c:	0801369c 	.word	0x0801369c
 800df20:	20008920 	.word	0x20008920
 800df24:	20008830 	.word	0x20008830

0800df28 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b08c      	sub	sp, #48	@ 0x30
 800df2c:	af02      	add	r7, sp, #8
 800df2e:	60f8      	str	r0, [r7, #12]
 800df30:	60b9      	str	r1, [r7, #8]
 800df32:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	3326      	adds	r3, #38	@ 0x26
 800df38:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800df3a:	23ff      	movs	r3, #255	@ 0xff
 800df3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800df40:	2300      	movs	r3, #0
 800df42:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	68f9      	ldr	r1, [r7, #12]
 800df4a:	4618      	mov	r0, r3
 800df4c:	f000 fe0e 	bl	800eb6c <ip4_addr_isbroadcast_u32>
 800df50:	4603      	mov	r3, r0
 800df52:	2b00      	cmp	r3, #0
 800df54:	d10c      	bne.n	800df70 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800df56:	68bb      	ldr	r3, [r7, #8]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800df5e:	2be0      	cmp	r3, #224	@ 0xe0
 800df60:	d006      	beq.n	800df70 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d003      	beq.n	800df70 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d102      	bne.n	800df76 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800df70:	f06f 030f 	mvn.w	r3, #15
 800df74:	e101      	b.n	800e17a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800df76:	68fa      	ldr	r2, [r7, #12]
 800df78:	2101      	movs	r1, #1
 800df7a:	68b8      	ldr	r0, [r7, #8]
 800df7c:	f7ff fb60 	bl	800d640 <etharp_find_entry>
 800df80:	4603      	mov	r3, r0
 800df82:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800df84:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	da02      	bge.n	800df92 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800df8c:	8a7b      	ldrh	r3, [r7, #18]
 800df8e:	b25b      	sxtb	r3, r3
 800df90:	e0f3      	b.n	800e17a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800df92:	8a7b      	ldrh	r3, [r7, #18]
 800df94:	2b7e      	cmp	r3, #126	@ 0x7e
 800df96:	d906      	bls.n	800dfa6 <etharp_query+0x7e>
 800df98:	4b7a      	ldr	r3, [pc, #488]	@ (800e184 <etharp_query+0x25c>)
 800df9a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800df9e:	497a      	ldr	r1, [pc, #488]	@ (800e188 <etharp_query+0x260>)
 800dfa0:	487a      	ldr	r0, [pc, #488]	@ (800e18c <etharp_query+0x264>)
 800dfa2:	f001 feb9 	bl	800fd18 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800dfa6:	8a7b      	ldrh	r3, [r7, #18]
 800dfa8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800dfaa:	7c7a      	ldrb	r2, [r7, #17]
 800dfac:	4978      	ldr	r1, [pc, #480]	@ (800e190 <etharp_query+0x268>)
 800dfae:	4613      	mov	r3, r2
 800dfb0:	005b      	lsls	r3, r3, #1
 800dfb2:	4413      	add	r3, r2
 800dfb4:	00db      	lsls	r3, r3, #3
 800dfb6:	440b      	add	r3, r1
 800dfb8:	3314      	adds	r3, #20
 800dfba:	781b      	ldrb	r3, [r3, #0]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d115      	bne.n	800dfec <etharp_query+0xc4>
    is_new_entry = 1;
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800dfc4:	7c7a      	ldrb	r2, [r7, #17]
 800dfc6:	4972      	ldr	r1, [pc, #456]	@ (800e190 <etharp_query+0x268>)
 800dfc8:	4613      	mov	r3, r2
 800dfca:	005b      	lsls	r3, r3, #1
 800dfcc:	4413      	add	r3, r2
 800dfce:	00db      	lsls	r3, r3, #3
 800dfd0:	440b      	add	r3, r1
 800dfd2:	3314      	adds	r3, #20
 800dfd4:	2201      	movs	r2, #1
 800dfd6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800dfd8:	7c7a      	ldrb	r2, [r7, #17]
 800dfda:	496d      	ldr	r1, [pc, #436]	@ (800e190 <etharp_query+0x268>)
 800dfdc:	4613      	mov	r3, r2
 800dfde:	005b      	lsls	r3, r3, #1
 800dfe0:	4413      	add	r3, r2
 800dfe2:	00db      	lsls	r3, r3, #3
 800dfe4:	440b      	add	r3, r1
 800dfe6:	3308      	adds	r3, #8
 800dfe8:	68fa      	ldr	r2, [r7, #12]
 800dfea:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800dfec:	7c7a      	ldrb	r2, [r7, #17]
 800dfee:	4968      	ldr	r1, [pc, #416]	@ (800e190 <etharp_query+0x268>)
 800dff0:	4613      	mov	r3, r2
 800dff2:	005b      	lsls	r3, r3, #1
 800dff4:	4413      	add	r3, r2
 800dff6:	00db      	lsls	r3, r3, #3
 800dff8:	440b      	add	r3, r1
 800dffa:	3314      	adds	r3, #20
 800dffc:	781b      	ldrb	r3, [r3, #0]
 800dffe:	2b01      	cmp	r3, #1
 800e000:	d011      	beq.n	800e026 <etharp_query+0xfe>
 800e002:	7c7a      	ldrb	r2, [r7, #17]
 800e004:	4962      	ldr	r1, [pc, #392]	@ (800e190 <etharp_query+0x268>)
 800e006:	4613      	mov	r3, r2
 800e008:	005b      	lsls	r3, r3, #1
 800e00a:	4413      	add	r3, r2
 800e00c:	00db      	lsls	r3, r3, #3
 800e00e:	440b      	add	r3, r1
 800e010:	3314      	adds	r3, #20
 800e012:	781b      	ldrb	r3, [r3, #0]
 800e014:	2b01      	cmp	r3, #1
 800e016:	d806      	bhi.n	800e026 <etharp_query+0xfe>
 800e018:	4b5a      	ldr	r3, [pc, #360]	@ (800e184 <etharp_query+0x25c>)
 800e01a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800e01e:	495d      	ldr	r1, [pc, #372]	@ (800e194 <etharp_query+0x26c>)
 800e020:	485a      	ldr	r0, [pc, #360]	@ (800e18c <etharp_query+0x264>)
 800e022:	f001 fe79 	bl	800fd18 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800e026:	6a3b      	ldr	r3, [r7, #32]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d102      	bne.n	800e032 <etharp_query+0x10a>
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d10c      	bne.n	800e04c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800e032:	68b9      	ldr	r1, [r7, #8]
 800e034:	68f8      	ldr	r0, [r7, #12]
 800e036:	f000 f963 	bl	800e300 <etharp_request>
 800e03a:	4603      	mov	r3, r0
 800e03c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d102      	bne.n	800e04c <etharp_query+0x124>
      return result;
 800e046:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e04a:	e096      	b.n	800e17a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d106      	bne.n	800e060 <etharp_query+0x138>
 800e052:	4b4c      	ldr	r3, [pc, #304]	@ (800e184 <etharp_query+0x25c>)
 800e054:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800e058:	494f      	ldr	r1, [pc, #316]	@ (800e198 <etharp_query+0x270>)
 800e05a:	484c      	ldr	r0, [pc, #304]	@ (800e18c <etharp_query+0x264>)
 800e05c:	f001 fe5c 	bl	800fd18 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e060:	7c7a      	ldrb	r2, [r7, #17]
 800e062:	494b      	ldr	r1, [pc, #300]	@ (800e190 <etharp_query+0x268>)
 800e064:	4613      	mov	r3, r2
 800e066:	005b      	lsls	r3, r3, #1
 800e068:	4413      	add	r3, r2
 800e06a:	00db      	lsls	r3, r3, #3
 800e06c:	440b      	add	r3, r1
 800e06e:	3314      	adds	r3, #20
 800e070:	781b      	ldrb	r3, [r3, #0]
 800e072:	2b01      	cmp	r3, #1
 800e074:	d917      	bls.n	800e0a6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800e076:	4a49      	ldr	r2, [pc, #292]	@ (800e19c <etharp_query+0x274>)
 800e078:	7c7b      	ldrb	r3, [r7, #17]
 800e07a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e07c:	7c7a      	ldrb	r2, [r7, #17]
 800e07e:	4613      	mov	r3, r2
 800e080:	005b      	lsls	r3, r3, #1
 800e082:	4413      	add	r3, r2
 800e084:	00db      	lsls	r3, r3, #3
 800e086:	3308      	adds	r3, #8
 800e088:	4a41      	ldr	r2, [pc, #260]	@ (800e190 <etharp_query+0x268>)
 800e08a:	4413      	add	r3, r2
 800e08c:	3304      	adds	r3, #4
 800e08e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e092:	9200      	str	r2, [sp, #0]
 800e094:	697a      	ldr	r2, [r7, #20]
 800e096:	6879      	ldr	r1, [r7, #4]
 800e098:	68f8      	ldr	r0, [r7, #12]
 800e09a:	f001 fcf5 	bl	800fa88 <ethernet_output>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e0a4:	e067      	b.n	800e176 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e0a6:	7c7a      	ldrb	r2, [r7, #17]
 800e0a8:	4939      	ldr	r1, [pc, #228]	@ (800e190 <etharp_query+0x268>)
 800e0aa:	4613      	mov	r3, r2
 800e0ac:	005b      	lsls	r3, r3, #1
 800e0ae:	4413      	add	r3, r2
 800e0b0:	00db      	lsls	r3, r3, #3
 800e0b2:	440b      	add	r3, r1
 800e0b4:	3314      	adds	r3, #20
 800e0b6:	781b      	ldrb	r3, [r3, #0]
 800e0b8:	2b01      	cmp	r3, #1
 800e0ba:	d15c      	bne.n	800e176 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e0c4:	e01c      	b.n	800e100 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e0c6:	69fb      	ldr	r3, [r7, #28]
 800e0c8:	895a      	ldrh	r2, [r3, #10]
 800e0ca:	69fb      	ldr	r3, [r7, #28]
 800e0cc:	891b      	ldrh	r3, [r3, #8]
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	d10a      	bne.n	800e0e8 <etharp_query+0x1c0>
 800e0d2:	69fb      	ldr	r3, [r7, #28]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d006      	beq.n	800e0e8 <etharp_query+0x1c0>
 800e0da:	4b2a      	ldr	r3, [pc, #168]	@ (800e184 <etharp_query+0x25c>)
 800e0dc:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800e0e0:	492f      	ldr	r1, [pc, #188]	@ (800e1a0 <etharp_query+0x278>)
 800e0e2:	482a      	ldr	r0, [pc, #168]	@ (800e18c <etharp_query+0x264>)
 800e0e4:	f001 fe18 	bl	800fd18 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800e0e8:	69fb      	ldr	r3, [r7, #28]
 800e0ea:	7b1b      	ldrb	r3, [r3, #12]
 800e0ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d002      	beq.n	800e0fa <etharp_query+0x1d2>
        copy_needed = 1;
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	61bb      	str	r3, [r7, #24]
        break;
 800e0f8:	e005      	b.n	800e106 <etharp_query+0x1de>
      }
      p = p->next;
 800e0fa:	69fb      	ldr	r3, [r7, #28]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e100:	69fb      	ldr	r3, [r7, #28]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d1df      	bne.n	800e0c6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800e106:	69bb      	ldr	r3, [r7, #24]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d007      	beq.n	800e11c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800e10c:	687a      	ldr	r2, [r7, #4]
 800e10e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800e112:	200e      	movs	r0, #14
 800e114:	f7f9 fa7e 	bl	8007614 <pbuf_clone>
 800e118:	61f8      	str	r0, [r7, #28]
 800e11a:	e004      	b.n	800e126 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e120:	69f8      	ldr	r0, [r7, #28]
 800e122:	f7f9 f819 	bl	8007158 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e126:	69fb      	ldr	r3, [r7, #28]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d021      	beq.n	800e170 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e12c:	7c7a      	ldrb	r2, [r7, #17]
 800e12e:	4918      	ldr	r1, [pc, #96]	@ (800e190 <etharp_query+0x268>)
 800e130:	4613      	mov	r3, r2
 800e132:	005b      	lsls	r3, r3, #1
 800e134:	4413      	add	r3, r2
 800e136:	00db      	lsls	r3, r3, #3
 800e138:	440b      	add	r3, r1
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d00a      	beq.n	800e156 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800e140:	7c7a      	ldrb	r2, [r7, #17]
 800e142:	4913      	ldr	r1, [pc, #76]	@ (800e190 <etharp_query+0x268>)
 800e144:	4613      	mov	r3, r2
 800e146:	005b      	lsls	r3, r3, #1
 800e148:	4413      	add	r3, r2
 800e14a:	00db      	lsls	r3, r3, #3
 800e14c:	440b      	add	r3, r1
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	4618      	mov	r0, r3
 800e152:	f7f8 ff61 	bl	8007018 <pbuf_free>
      }
      arp_table[i].q = p;
 800e156:	7c7a      	ldrb	r2, [r7, #17]
 800e158:	490d      	ldr	r1, [pc, #52]	@ (800e190 <etharp_query+0x268>)
 800e15a:	4613      	mov	r3, r2
 800e15c:	005b      	lsls	r3, r3, #1
 800e15e:	4413      	add	r3, r2
 800e160:	00db      	lsls	r3, r3, #3
 800e162:	440b      	add	r3, r1
 800e164:	69fa      	ldr	r2, [r7, #28]
 800e166:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e168:	2300      	movs	r3, #0
 800e16a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e16e:	e002      	b.n	800e176 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800e170:	23ff      	movs	r3, #255	@ 0xff
 800e172:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800e176:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800e17a:	4618      	mov	r0, r3
 800e17c:	3728      	adds	r7, #40	@ 0x28
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}
 800e182:	bf00      	nop
 800e184:	08012ee0 	.word	0x08012ee0
 800e188:	0801308c 	.word	0x0801308c
 800e18c:	08012f58 	.word	0x08012f58
 800e190:	20008830 	.word	0x20008830
 800e194:	0801309c 	.word	0x0801309c
 800e198:	08013080 	.word	0x08013080
 800e19c:	20008920 	.word	0x20008920
 800e1a0:	080130c4 	.word	0x080130c4

0800e1a4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b08a      	sub	sp, #40	@ 0x28
 800e1a8:	af02      	add	r7, sp, #8
 800e1aa:	60f8      	str	r0, [r7, #12]
 800e1ac:	60b9      	str	r1, [r7, #8]
 800e1ae:	607a      	str	r2, [r7, #4]
 800e1b0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d106      	bne.n	800e1ca <etharp_raw+0x26>
 800e1bc:	4b3a      	ldr	r3, [pc, #232]	@ (800e2a8 <etharp_raw+0x104>)
 800e1be:	f240 4257 	movw	r2, #1111	@ 0x457
 800e1c2:	493a      	ldr	r1, [pc, #232]	@ (800e2ac <etharp_raw+0x108>)
 800e1c4:	483a      	ldr	r0, [pc, #232]	@ (800e2b0 <etharp_raw+0x10c>)
 800e1c6:	f001 fda7 	bl	800fd18 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e1ca:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e1ce:	211c      	movs	r1, #28
 800e1d0:	200e      	movs	r0, #14
 800e1d2:	f7f8 fc3d 	bl	8006a50 <pbuf_alloc>
 800e1d6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e1d8:	69bb      	ldr	r3, [r7, #24]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d102      	bne.n	800e1e4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800e1de:	f04f 33ff 	mov.w	r3, #4294967295
 800e1e2:	e05d      	b.n	800e2a0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e1e4:	69bb      	ldr	r3, [r7, #24]
 800e1e6:	895b      	ldrh	r3, [r3, #10]
 800e1e8:	2b1b      	cmp	r3, #27
 800e1ea:	d806      	bhi.n	800e1fa <etharp_raw+0x56>
 800e1ec:	4b2e      	ldr	r3, [pc, #184]	@ (800e2a8 <etharp_raw+0x104>)
 800e1ee:	f240 4262 	movw	r2, #1122	@ 0x462
 800e1f2:	4930      	ldr	r1, [pc, #192]	@ (800e2b4 <etharp_raw+0x110>)
 800e1f4:	482e      	ldr	r0, [pc, #184]	@ (800e2b0 <etharp_raw+0x10c>)
 800e1f6:	f001 fd8f 	bl	800fd18 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e1fa:	69bb      	ldr	r3, [r7, #24]
 800e1fc:	685b      	ldr	r3, [r3, #4]
 800e1fe:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e200:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800e202:	4618      	mov	r0, r3
 800e204:	f7f7 fbaa 	bl	800595c <lwip_htons>
 800e208:	4603      	mov	r3, r0
 800e20a:	461a      	mov	r2, r3
 800e20c:	697b      	ldr	r3, [r7, #20]
 800e20e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e216:	2b06      	cmp	r3, #6
 800e218:	d006      	beq.n	800e228 <etharp_raw+0x84>
 800e21a:	4b23      	ldr	r3, [pc, #140]	@ (800e2a8 <etharp_raw+0x104>)
 800e21c:	f240 4269 	movw	r2, #1129	@ 0x469
 800e220:	4925      	ldr	r1, [pc, #148]	@ (800e2b8 <etharp_raw+0x114>)
 800e222:	4823      	ldr	r0, [pc, #140]	@ (800e2b0 <etharp_raw+0x10c>)
 800e224:	f001 fd78 	bl	800fd18 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	3308      	adds	r3, #8
 800e22c:	2206      	movs	r2, #6
 800e22e:	6839      	ldr	r1, [r7, #0]
 800e230:	4618      	mov	r0, r3
 800e232:	f001 fe76 	bl	800ff22 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	3312      	adds	r3, #18
 800e23a:	2206      	movs	r2, #6
 800e23c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e23e:	4618      	mov	r0, r3
 800e240:	f001 fe6f 	bl	800ff22 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800e244:	697b      	ldr	r3, [r7, #20]
 800e246:	330e      	adds	r3, #14
 800e248:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e24a:	6812      	ldr	r2, [r2, #0]
 800e24c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	3318      	adds	r3, #24
 800e252:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e254:	6812      	ldr	r2, [r2, #0]
 800e256:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	2200      	movs	r2, #0
 800e25c:	701a      	strb	r2, [r3, #0]
 800e25e:	2200      	movs	r2, #0
 800e260:	f042 0201 	orr.w	r2, r2, #1
 800e264:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e266:	697b      	ldr	r3, [r7, #20]
 800e268:	2200      	movs	r2, #0
 800e26a:	f042 0208 	orr.w	r2, r2, #8
 800e26e:	709a      	strb	r2, [r3, #2]
 800e270:	2200      	movs	r2, #0
 800e272:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e274:	697b      	ldr	r3, [r7, #20]
 800e276:	2206      	movs	r2, #6
 800e278:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	2204      	movs	r2, #4
 800e27e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e280:	f640 0306 	movw	r3, #2054	@ 0x806
 800e284:	9300      	str	r3, [sp, #0]
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	68ba      	ldr	r2, [r7, #8]
 800e28a:	69b9      	ldr	r1, [r7, #24]
 800e28c:	68f8      	ldr	r0, [r7, #12]
 800e28e:	f001 fbfb 	bl	800fa88 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e292:	69b8      	ldr	r0, [r7, #24]
 800e294:	f7f8 fec0 	bl	8007018 <pbuf_free>
  p = NULL;
 800e298:	2300      	movs	r3, #0
 800e29a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e29c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	3720      	adds	r7, #32
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}
 800e2a8:	08012ee0 	.word	0x08012ee0
 800e2ac:	08013030 	.word	0x08013030
 800e2b0:	08012f58 	.word	0x08012f58
 800e2b4:	080130e0 	.word	0x080130e0
 800e2b8:	08013114 	.word	0x08013114

0800e2bc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b088      	sub	sp, #32
 800e2c0:	af04      	add	r7, sp, #16
 800e2c2:	60f8      	str	r0, [r7, #12]
 800e2c4:	60b9      	str	r1, [r7, #8]
 800e2c6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e2d8:	2201      	movs	r2, #1
 800e2da:	9203      	str	r2, [sp, #12]
 800e2dc:	68ba      	ldr	r2, [r7, #8]
 800e2de:	9202      	str	r2, [sp, #8]
 800e2e0:	4a06      	ldr	r2, [pc, #24]	@ (800e2fc <etharp_request_dst+0x40>)
 800e2e2:	9201      	str	r2, [sp, #4]
 800e2e4:	9300      	str	r3, [sp, #0]
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	687a      	ldr	r2, [r7, #4]
 800e2ea:	68f8      	ldr	r0, [r7, #12]
 800e2ec:	f7ff ff5a 	bl	800e1a4 <etharp_raw>
 800e2f0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	3710      	adds	r7, #16
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd80      	pop	{r7, pc}
 800e2fa:	bf00      	nop
 800e2fc:	080136a4 	.word	0x080136a4

0800e300 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b082      	sub	sp, #8
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
 800e308:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e30a:	4a05      	ldr	r2, [pc, #20]	@ (800e320 <etharp_request+0x20>)
 800e30c:	6839      	ldr	r1, [r7, #0]
 800e30e:	6878      	ldr	r0, [r7, #4]
 800e310:	f7ff ffd4 	bl	800e2bc <etharp_request_dst>
 800e314:	4603      	mov	r3, r0
}
 800e316:	4618      	mov	r0, r3
 800e318:	3708      	adds	r7, #8
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}
 800e31e:	bf00      	nop
 800e320:	0801369c 	.word	0x0801369c

0800e324 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b08e      	sub	sp, #56	@ 0x38
 800e328:	af04      	add	r7, sp, #16
 800e32a:	6078      	str	r0, [r7, #4]
 800e32c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e32e:	4b79      	ldr	r3, [pc, #484]	@ (800e514 <icmp_input+0x1f0>)
 800e330:	689b      	ldr	r3, [r3, #8]
 800e332:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800e334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e336:	781b      	ldrb	r3, [r3, #0]
 800e338:	f003 030f 	and.w	r3, r3, #15
 800e33c:	b2db      	uxtb	r3, r3
 800e33e:	009b      	lsls	r3, r3, #2
 800e340:	b2db      	uxtb	r3, r3
 800e342:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800e344:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e346:	2b13      	cmp	r3, #19
 800e348:	f240 80cd 	bls.w	800e4e6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	895b      	ldrh	r3, [r3, #10]
 800e350:	2b03      	cmp	r3, #3
 800e352:	f240 80ca 	bls.w	800e4ea <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	685b      	ldr	r3, [r3, #4]
 800e35a:	781b      	ldrb	r3, [r3, #0]
 800e35c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e360:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800e364:	2b00      	cmp	r3, #0
 800e366:	f000 80b7 	beq.w	800e4d8 <icmp_input+0x1b4>
 800e36a:	2b08      	cmp	r3, #8
 800e36c:	f040 80b7 	bne.w	800e4de <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800e370:	4b69      	ldr	r3, [pc, #420]	@ (800e518 <icmp_input+0x1f4>)
 800e372:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e374:	4b67      	ldr	r3, [pc, #412]	@ (800e514 <icmp_input+0x1f0>)
 800e376:	695b      	ldr	r3, [r3, #20]
 800e378:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e37c:	2be0      	cmp	r3, #224	@ 0xe0
 800e37e:	f000 80bb 	beq.w	800e4f8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e382:	4b64      	ldr	r3, [pc, #400]	@ (800e514 <icmp_input+0x1f0>)
 800e384:	695b      	ldr	r3, [r3, #20]
 800e386:	4a63      	ldr	r2, [pc, #396]	@ (800e514 <icmp_input+0x1f0>)
 800e388:	6812      	ldr	r2, [r2, #0]
 800e38a:	4611      	mov	r1, r2
 800e38c:	4618      	mov	r0, r3
 800e38e:	f000 fbed 	bl	800eb6c <ip4_addr_isbroadcast_u32>
 800e392:	4603      	mov	r3, r0
 800e394:	2b00      	cmp	r3, #0
 800e396:	f040 80b1 	bne.w	800e4fc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	891b      	ldrh	r3, [r3, #8]
 800e39e:	2b07      	cmp	r3, #7
 800e3a0:	f240 80a5 	bls.w	800e4ee <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e3a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e3a6:	330e      	adds	r3, #14
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f7f8 fd9e 	bl	8006eec <pbuf_add_header>
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d04b      	beq.n	800e44e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	891a      	ldrh	r2, [r3, #8]
 800e3ba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e3bc:	4413      	add	r3, r2
 800e3be:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	891b      	ldrh	r3, [r3, #8]
 800e3c4:	8b7a      	ldrh	r2, [r7, #26]
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	f0c0 809a 	bcc.w	800e500 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800e3cc:	8b7b      	ldrh	r3, [r7, #26]
 800e3ce:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e3d2:	4619      	mov	r1, r3
 800e3d4:	200e      	movs	r0, #14
 800e3d6:	f7f8 fb3b 	bl	8006a50 <pbuf_alloc>
 800e3da:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800e3dc:	697b      	ldr	r3, [r7, #20]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	f000 8090 	beq.w	800e504 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	895b      	ldrh	r3, [r3, #10]
 800e3e8:	461a      	mov	r2, r3
 800e3ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e3ec:	3308      	adds	r3, #8
 800e3ee:	429a      	cmp	r2, r3
 800e3f0:	d203      	bcs.n	800e3fa <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800e3f2:	6978      	ldr	r0, [r7, #20]
 800e3f4:	f7f8 fe10 	bl	8007018 <pbuf_free>
          goto icmperr;
 800e3f8:	e085      	b.n	800e506 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800e3fa:	697b      	ldr	r3, [r7, #20]
 800e3fc:	685b      	ldr	r3, [r3, #4]
 800e3fe:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e400:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e402:	4618      	mov	r0, r3
 800e404:	f001 fd8d 	bl	800ff22 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800e408:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e40a:	4619      	mov	r1, r3
 800e40c:	6978      	ldr	r0, [r7, #20]
 800e40e:	f7f8 fd7d 	bl	8006f0c <pbuf_remove_header>
 800e412:	4603      	mov	r3, r0
 800e414:	2b00      	cmp	r3, #0
 800e416:	d009      	beq.n	800e42c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e418:	4b40      	ldr	r3, [pc, #256]	@ (800e51c <icmp_input+0x1f8>)
 800e41a:	22b6      	movs	r2, #182	@ 0xb6
 800e41c:	4940      	ldr	r1, [pc, #256]	@ (800e520 <icmp_input+0x1fc>)
 800e41e:	4841      	ldr	r0, [pc, #260]	@ (800e524 <icmp_input+0x200>)
 800e420:	f001 fc7a 	bl	800fd18 <iprintf>
          pbuf_free(r);
 800e424:	6978      	ldr	r0, [r7, #20]
 800e426:	f7f8 fdf7 	bl	8007018 <pbuf_free>
          goto icmperr;
 800e42a:	e06c      	b.n	800e506 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800e42c:	6879      	ldr	r1, [r7, #4]
 800e42e:	6978      	ldr	r0, [r7, #20]
 800e430:	f7f8 ff1a 	bl	8007268 <pbuf_copy>
 800e434:	4603      	mov	r3, r0
 800e436:	2b00      	cmp	r3, #0
 800e438:	d003      	beq.n	800e442 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800e43a:	6978      	ldr	r0, [r7, #20]
 800e43c:	f7f8 fdec 	bl	8007018 <pbuf_free>
          goto icmperr;
 800e440:	e061      	b.n	800e506 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800e442:	6878      	ldr	r0, [r7, #4]
 800e444:	f7f8 fde8 	bl	8007018 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800e448:	697b      	ldr	r3, [r7, #20]
 800e44a:	607b      	str	r3, [r7, #4]
 800e44c:	e00f      	b.n	800e46e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e44e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e450:	330e      	adds	r3, #14
 800e452:	4619      	mov	r1, r3
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f7f8 fd59 	bl	8006f0c <pbuf_remove_header>
 800e45a:	4603      	mov	r3, r0
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d006      	beq.n	800e46e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e460:	4b2e      	ldr	r3, [pc, #184]	@ (800e51c <icmp_input+0x1f8>)
 800e462:	22c7      	movs	r2, #199	@ 0xc7
 800e464:	4930      	ldr	r1, [pc, #192]	@ (800e528 <icmp_input+0x204>)
 800e466:	482f      	ldr	r0, [pc, #188]	@ (800e524 <icmp_input+0x200>)
 800e468:	f001 fc56 	bl	800fd18 <iprintf>
          goto icmperr;
 800e46c:	e04b      	b.n	800e506 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	685b      	ldr	r3, [r3, #4]
 800e472:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800e474:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e476:	4619      	mov	r1, r3
 800e478:	6878      	ldr	r0, [r7, #4]
 800e47a:	f7f8 fd37 	bl	8006eec <pbuf_add_header>
 800e47e:	4603      	mov	r3, r0
 800e480:	2b00      	cmp	r3, #0
 800e482:	d12b      	bne.n	800e4dc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	685b      	ldr	r3, [r3, #4]
 800e488:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800e48a:	69fb      	ldr	r3, [r7, #28]
 800e48c:	681a      	ldr	r2, [r3, #0]
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e492:	4b20      	ldr	r3, [pc, #128]	@ (800e514 <icmp_input+0x1f0>)
 800e494:	691a      	ldr	r2, [r3, #16]
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e49a:	693b      	ldr	r3, [r7, #16]
 800e49c:	2200      	movs	r2, #0
 800e49e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800e4a0:	693b      	ldr	r3, [r7, #16]
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	709a      	strb	r2, [r3, #2]
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	22ff      	movs	r2, #255	@ 0xff
 800e4ae:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	729a      	strb	r2, [r3, #10]
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	9302      	str	r3, [sp, #8]
 800e4be:	2301      	movs	r3, #1
 800e4c0:	9301      	str	r3, [sp, #4]
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	9300      	str	r3, [sp, #0]
 800e4c6:	23ff      	movs	r3, #255	@ 0xff
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	69f9      	ldr	r1, [r7, #28]
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f000 fa75 	bl	800e9bc <ip4_output_if>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800e4d6:	e001      	b.n	800e4dc <icmp_input+0x1b8>
      break;
 800e4d8:	bf00      	nop
 800e4da:	e000      	b.n	800e4de <icmp_input+0x1ba>
      break;
 800e4dc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f7f8 fd9a 	bl	8007018 <pbuf_free>
  return;
 800e4e4:	e013      	b.n	800e50e <icmp_input+0x1ea>
    goto lenerr;
 800e4e6:	bf00      	nop
 800e4e8:	e002      	b.n	800e4f0 <icmp_input+0x1cc>
    goto lenerr;
 800e4ea:	bf00      	nop
 800e4ec:	e000      	b.n	800e4f0 <icmp_input+0x1cc>
        goto lenerr;
 800e4ee:	bf00      	nop
lenerr:
  pbuf_free(p);
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f7f8 fd91 	bl	8007018 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e4f6:	e00a      	b.n	800e50e <icmp_input+0x1ea>
        goto icmperr;
 800e4f8:	bf00      	nop
 800e4fa:	e004      	b.n	800e506 <icmp_input+0x1e2>
        goto icmperr;
 800e4fc:	bf00      	nop
 800e4fe:	e002      	b.n	800e506 <icmp_input+0x1e2>
          goto icmperr;
 800e500:	bf00      	nop
 800e502:	e000      	b.n	800e506 <icmp_input+0x1e2>
          goto icmperr;
 800e504:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800e506:	6878      	ldr	r0, [r7, #4]
 800e508:	f7f8 fd86 	bl	8007018 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e50c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800e50e:	3728      	adds	r7, #40	@ 0x28
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}
 800e514:	20005260 	.word	0x20005260
 800e518:	20005274 	.word	0x20005274
 800e51c:	08013158 	.word	0x08013158
 800e520:	08013190 	.word	0x08013190
 800e524:	080131c8 	.word	0x080131c8
 800e528:	080131f0 	.word	0x080131f0

0800e52c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b082      	sub	sp, #8
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	460b      	mov	r3, r1
 800e536:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800e538:	78fb      	ldrb	r3, [r7, #3]
 800e53a:	461a      	mov	r2, r3
 800e53c:	2103      	movs	r1, #3
 800e53e:	6878      	ldr	r0, [r7, #4]
 800e540:	f000 f814 	bl	800e56c <icmp_send_response>
}
 800e544:	bf00      	nop
 800e546:	3708      	adds	r7, #8
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}

0800e54c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b082      	sub	sp, #8
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
 800e554:	460b      	mov	r3, r1
 800e556:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800e558:	78fb      	ldrb	r3, [r7, #3]
 800e55a:	461a      	mov	r2, r3
 800e55c:	210b      	movs	r1, #11
 800e55e:	6878      	ldr	r0, [r7, #4]
 800e560:	f000 f804 	bl	800e56c <icmp_send_response>
}
 800e564:	bf00      	nop
 800e566:	3708      	adds	r7, #8
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}

0800e56c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b08c      	sub	sp, #48	@ 0x30
 800e570:	af04      	add	r7, sp, #16
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	460b      	mov	r3, r1
 800e576:	70fb      	strb	r3, [r7, #3]
 800e578:	4613      	mov	r3, r2
 800e57a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e57c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e580:	2124      	movs	r1, #36	@ 0x24
 800e582:	2022      	movs	r0, #34	@ 0x22
 800e584:	f7f8 fa64 	bl	8006a50 <pbuf_alloc>
 800e588:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800e58a:	69fb      	ldr	r3, [r7, #28]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d04c      	beq.n	800e62a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e590:	69fb      	ldr	r3, [r7, #28]
 800e592:	895b      	ldrh	r3, [r3, #10]
 800e594:	2b23      	cmp	r3, #35	@ 0x23
 800e596:	d806      	bhi.n	800e5a6 <icmp_send_response+0x3a>
 800e598:	4b26      	ldr	r3, [pc, #152]	@ (800e634 <icmp_send_response+0xc8>)
 800e59a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800e59e:	4926      	ldr	r1, [pc, #152]	@ (800e638 <icmp_send_response+0xcc>)
 800e5a0:	4826      	ldr	r0, [pc, #152]	@ (800e63c <icmp_send_response+0xd0>)
 800e5a2:	f001 fbb9 	bl	800fd18 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	685b      	ldr	r3, [r3, #4]
 800e5aa:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e5ac:	69fb      	ldr	r3, [r7, #28]
 800e5ae:	685b      	ldr	r3, [r3, #4]
 800e5b0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	78fa      	ldrb	r2, [r7, #3]
 800e5b6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800e5b8:	697b      	ldr	r3, [r7, #20]
 800e5ba:	78ba      	ldrb	r2, [r7, #2]
 800e5bc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	711a      	strb	r2, [r3, #4]
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	719a      	strb	r2, [r3, #6]
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e5d2:	69fb      	ldr	r3, [r7, #28]
 800e5d4:	685b      	ldr	r3, [r3, #4]
 800e5d6:	f103 0008 	add.w	r0, r3, #8
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	685b      	ldr	r3, [r3, #4]
 800e5de:	221c      	movs	r2, #28
 800e5e0:	4619      	mov	r1, r3
 800e5e2:	f001 fc9e 	bl	800ff22 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e5e6:	69bb      	ldr	r3, [r7, #24]
 800e5e8:	68db      	ldr	r3, [r3, #12]
 800e5ea:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e5ec:	f107 030c 	add.w	r3, r7, #12
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	f000 f825 	bl	800e640 <ip4_route>
 800e5f6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800e5f8:	693b      	ldr	r3, [r7, #16]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d011      	beq.n	800e622 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800e5fe:	697b      	ldr	r3, [r7, #20]
 800e600:	2200      	movs	r2, #0
 800e602:	709a      	strb	r2, [r3, #2]
 800e604:	2200      	movs	r2, #0
 800e606:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e608:	f107 020c 	add.w	r2, r7, #12
 800e60c:	693b      	ldr	r3, [r7, #16]
 800e60e:	9302      	str	r3, [sp, #8]
 800e610:	2301      	movs	r3, #1
 800e612:	9301      	str	r3, [sp, #4]
 800e614:	2300      	movs	r3, #0
 800e616:	9300      	str	r3, [sp, #0]
 800e618:	23ff      	movs	r3, #255	@ 0xff
 800e61a:	2100      	movs	r1, #0
 800e61c:	69f8      	ldr	r0, [r7, #28]
 800e61e:	f000 f9cd 	bl	800e9bc <ip4_output_if>
  }
  pbuf_free(q);
 800e622:	69f8      	ldr	r0, [r7, #28]
 800e624:	f7f8 fcf8 	bl	8007018 <pbuf_free>
 800e628:	e000      	b.n	800e62c <icmp_send_response+0xc0>
    return;
 800e62a:	bf00      	nop
}
 800e62c:	3720      	adds	r7, #32
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}
 800e632:	bf00      	nop
 800e634:	08013158 	.word	0x08013158
 800e638:	08013224 	.word	0x08013224
 800e63c:	080131c8 	.word	0x080131c8

0800e640 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800e640:	b480      	push	{r7}
 800e642:	b085      	sub	sp, #20
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800e648:	4b33      	ldr	r3, [pc, #204]	@ (800e718 <ip4_route+0xd8>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	60fb      	str	r3, [r7, #12]
 800e64e:	e036      	b.n	800e6be <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e656:	f003 0301 	and.w	r3, r3, #1
 800e65a:	b2db      	uxtb	r3, r3
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d02b      	beq.n	800e6b8 <ip4_route+0x78>
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e666:	089b      	lsrs	r3, r3, #2
 800e668:	f003 0301 	and.w	r3, r3, #1
 800e66c:	b2db      	uxtb	r3, r3
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d022      	beq.n	800e6b8 <ip4_route+0x78>
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	3304      	adds	r3, #4
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d01d      	beq.n	800e6b8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681a      	ldr	r2, [r3, #0]
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	3304      	adds	r3, #4
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	405a      	eors	r2, r3
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	3308      	adds	r3, #8
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	4013      	ands	r3, r2
 800e690:	2b00      	cmp	r3, #0
 800e692:	d101      	bne.n	800e698 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	e038      	b.n	800e70a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e69e:	f003 0302 	and.w	r3, r3, #2
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d108      	bne.n	800e6b8 <ip4_route+0x78>
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681a      	ldr	r2, [r3, #0]
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	330c      	adds	r3, #12
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	429a      	cmp	r2, r3
 800e6b2:	d101      	bne.n	800e6b8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	e028      	b.n	800e70a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	60fb      	str	r3, [r7, #12]
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d1c5      	bne.n	800e650 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e6c4:	4b15      	ldr	r3, [pc, #84]	@ (800e71c <ip4_route+0xdc>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d01a      	beq.n	800e702 <ip4_route+0xc2>
 800e6cc:	4b13      	ldr	r3, [pc, #76]	@ (800e71c <ip4_route+0xdc>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e6d4:	f003 0301 	and.w	r3, r3, #1
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d012      	beq.n	800e702 <ip4_route+0xc2>
 800e6dc:	4b0f      	ldr	r3, [pc, #60]	@ (800e71c <ip4_route+0xdc>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e6e4:	f003 0304 	and.w	r3, r3, #4
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d00a      	beq.n	800e702 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e6ec:	4b0b      	ldr	r3, [pc, #44]	@ (800e71c <ip4_route+0xdc>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	3304      	adds	r3, #4
 800e6f2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d004      	beq.n	800e702 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	b2db      	uxtb	r3, r3
 800e6fe:	2b7f      	cmp	r3, #127	@ 0x7f
 800e700:	d101      	bne.n	800e706 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800e702:	2300      	movs	r3, #0
 800e704:	e001      	b.n	800e70a <ip4_route+0xca>
  }

  return netif_default;
 800e706:	4b05      	ldr	r3, [pc, #20]	@ (800e71c <ip4_route+0xdc>)
 800e708:	681b      	ldr	r3, [r3, #0]
}
 800e70a:	4618      	mov	r0, r3
 800e70c:	3714      	adds	r7, #20
 800e70e:	46bd      	mov	sp, r7
 800e710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e714:	4770      	bx	lr
 800e716:	bf00      	nop
 800e718:	200087c4 	.word	0x200087c4
 800e71c:	200087c8 	.word	0x200087c8

0800e720 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b082      	sub	sp, #8
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e72e:	f003 0301 	and.w	r3, r3, #1
 800e732:	b2db      	uxtb	r3, r3
 800e734:	2b00      	cmp	r3, #0
 800e736:	d016      	beq.n	800e766 <ip4_input_accept+0x46>
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	3304      	adds	r3, #4
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d011      	beq.n	800e766 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e742:	4b0b      	ldr	r3, [pc, #44]	@ (800e770 <ip4_input_accept+0x50>)
 800e744:	695a      	ldr	r2, [r3, #20]
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	3304      	adds	r3, #4
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	429a      	cmp	r2, r3
 800e74e:	d008      	beq.n	800e762 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800e750:	4b07      	ldr	r3, [pc, #28]	@ (800e770 <ip4_input_accept+0x50>)
 800e752:	695b      	ldr	r3, [r3, #20]
 800e754:	6879      	ldr	r1, [r7, #4]
 800e756:	4618      	mov	r0, r3
 800e758:	f000 fa08 	bl	800eb6c <ip4_addr_isbroadcast_u32>
 800e75c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d001      	beq.n	800e766 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800e762:	2301      	movs	r3, #1
 800e764:	e000      	b.n	800e768 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800e766:	2300      	movs	r3, #0
}
 800e768:	4618      	mov	r0, r3
 800e76a:	3708      	adds	r7, #8
 800e76c:	46bd      	mov	sp, r7
 800e76e:	bd80      	pop	{r7, pc}
 800e770:	20005260 	.word	0x20005260

0800e774 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b086      	sub	sp, #24
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
 800e77c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	685b      	ldr	r3, [r3, #4]
 800e782:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800e784:	697b      	ldr	r3, [r7, #20]
 800e786:	781b      	ldrb	r3, [r3, #0]
 800e788:	091b      	lsrs	r3, r3, #4
 800e78a:	b2db      	uxtb	r3, r3
 800e78c:	2b04      	cmp	r3, #4
 800e78e:	d004      	beq.n	800e79a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800e790:	6878      	ldr	r0, [r7, #4]
 800e792:	f7f8 fc41 	bl	8007018 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800e796:	2300      	movs	r3, #0
 800e798:	e107      	b.n	800e9aa <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800e79a:	697b      	ldr	r3, [r7, #20]
 800e79c:	781b      	ldrb	r3, [r3, #0]
 800e79e:	f003 030f 	and.w	r3, r3, #15
 800e7a2:	b2db      	uxtb	r3, r3
 800e7a4:	009b      	lsls	r3, r3, #2
 800e7a6:	b2db      	uxtb	r3, r3
 800e7a8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e7aa:	697b      	ldr	r3, [r7, #20]
 800e7ac:	885b      	ldrh	r3, [r3, #2]
 800e7ae:	b29b      	uxth	r3, r3
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f7f7 f8d3 	bl	800595c <lwip_htons>
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	891b      	ldrh	r3, [r3, #8]
 800e7be:	89ba      	ldrh	r2, [r7, #12]
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	d204      	bcs.n	800e7ce <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800e7c4:	89bb      	ldrh	r3, [r7, #12]
 800e7c6:	4619      	mov	r1, r3
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f7f8 fa9f 	bl	8006d0c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	895b      	ldrh	r3, [r3, #10]
 800e7d2:	89fa      	ldrh	r2, [r7, #14]
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	d807      	bhi.n	800e7e8 <ip4_input+0x74>
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	891b      	ldrh	r3, [r3, #8]
 800e7dc:	89ba      	ldrh	r2, [r7, #12]
 800e7de:	429a      	cmp	r2, r3
 800e7e0:	d802      	bhi.n	800e7e8 <ip4_input+0x74>
 800e7e2:	89fb      	ldrh	r3, [r7, #14]
 800e7e4:	2b13      	cmp	r3, #19
 800e7e6:	d804      	bhi.n	800e7f2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800e7e8:	6878      	ldr	r0, [r7, #4]
 800e7ea:	f7f8 fc15 	bl	8007018 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	e0db      	b.n	800e9aa <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	691b      	ldr	r3, [r3, #16]
 800e7f6:	4a6f      	ldr	r2, [pc, #444]	@ (800e9b4 <ip4_input+0x240>)
 800e7f8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e7fa:	697b      	ldr	r3, [r7, #20]
 800e7fc:	68db      	ldr	r3, [r3, #12]
 800e7fe:	4a6d      	ldr	r2, [pc, #436]	@ (800e9b4 <ip4_input+0x240>)
 800e800:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e802:	4b6c      	ldr	r3, [pc, #432]	@ (800e9b4 <ip4_input+0x240>)
 800e804:	695b      	ldr	r3, [r3, #20]
 800e806:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e80a:	2be0      	cmp	r3, #224	@ 0xe0
 800e80c:	d112      	bne.n	800e834 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e814:	f003 0301 	and.w	r3, r3, #1
 800e818:	b2db      	uxtb	r3, r3
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d007      	beq.n	800e82e <ip4_input+0xba>
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	3304      	adds	r3, #4
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d002      	beq.n	800e82e <ip4_input+0xba>
      netif = inp;
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	613b      	str	r3, [r7, #16]
 800e82c:	e02a      	b.n	800e884 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e82e:	2300      	movs	r3, #0
 800e830:	613b      	str	r3, [r7, #16]
 800e832:	e027      	b.n	800e884 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800e834:	6838      	ldr	r0, [r7, #0]
 800e836:	f7ff ff73 	bl	800e720 <ip4_input_accept>
 800e83a:	4603      	mov	r3, r0
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d002      	beq.n	800e846 <ip4_input+0xd2>
      netif = inp;
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	613b      	str	r3, [r7, #16]
 800e844:	e01e      	b.n	800e884 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e846:	2300      	movs	r3, #0
 800e848:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800e84a:	4b5a      	ldr	r3, [pc, #360]	@ (800e9b4 <ip4_input+0x240>)
 800e84c:	695b      	ldr	r3, [r3, #20]
 800e84e:	b2db      	uxtb	r3, r3
 800e850:	2b7f      	cmp	r3, #127	@ 0x7f
 800e852:	d017      	beq.n	800e884 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800e854:	4b58      	ldr	r3, [pc, #352]	@ (800e9b8 <ip4_input+0x244>)
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	613b      	str	r3, [r7, #16]
 800e85a:	e00e      	b.n	800e87a <ip4_input+0x106>
          if (netif == inp) {
 800e85c:	693a      	ldr	r2, [r7, #16]
 800e85e:	683b      	ldr	r3, [r7, #0]
 800e860:	429a      	cmp	r2, r3
 800e862:	d006      	beq.n	800e872 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800e864:	6938      	ldr	r0, [r7, #16]
 800e866:	f7ff ff5b 	bl	800e720 <ip4_input_accept>
 800e86a:	4603      	mov	r3, r0
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d108      	bne.n	800e882 <ip4_input+0x10e>
 800e870:	e000      	b.n	800e874 <ip4_input+0x100>
            continue;
 800e872:	bf00      	nop
        NETIF_FOREACH(netif) {
 800e874:	693b      	ldr	r3, [r7, #16]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	613b      	str	r3, [r7, #16]
 800e87a:	693b      	ldr	r3, [r7, #16]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d1ed      	bne.n	800e85c <ip4_input+0xe8>
 800e880:	e000      	b.n	800e884 <ip4_input+0x110>
            break;
 800e882:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e884:	4b4b      	ldr	r3, [pc, #300]	@ (800e9b4 <ip4_input+0x240>)
 800e886:	691b      	ldr	r3, [r3, #16]
 800e888:	6839      	ldr	r1, [r7, #0]
 800e88a:	4618      	mov	r0, r3
 800e88c:	f000 f96e 	bl	800eb6c <ip4_addr_isbroadcast_u32>
 800e890:	4603      	mov	r3, r0
 800e892:	2b00      	cmp	r3, #0
 800e894:	d105      	bne.n	800e8a2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e896:	4b47      	ldr	r3, [pc, #284]	@ (800e9b4 <ip4_input+0x240>)
 800e898:	691b      	ldr	r3, [r3, #16]
 800e89a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e89e:	2be0      	cmp	r3, #224	@ 0xe0
 800e8a0:	d104      	bne.n	800e8ac <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f7f8 fbb8 	bl	8007018 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	e07e      	b.n	800e9aa <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e8ac:	693b      	ldr	r3, [r7, #16]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d104      	bne.n	800e8bc <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f7f8 fbb0 	bl	8007018 <pbuf_free>
    return ERR_OK;
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	e076      	b.n	800e9aa <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e8bc:	697b      	ldr	r3, [r7, #20]
 800e8be:	88db      	ldrh	r3, [r3, #6]
 800e8c0:	b29b      	uxth	r3, r3
 800e8c2:	461a      	mov	r2, r3
 800e8c4:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800e8c8:	4013      	ands	r3, r2
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d00b      	beq.n	800e8e6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e8ce:	6878      	ldr	r0, [r7, #4]
 800e8d0:	f000 fd12 	bl	800f2f8 <ip4_reass>
 800e8d4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d101      	bne.n	800e8e0 <ip4_input+0x16c>
      return ERR_OK;
 800e8dc:	2300      	movs	r3, #0
 800e8de:	e064      	b.n	800e9aa <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	685b      	ldr	r3, [r3, #4]
 800e8e4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e8e6:	4a33      	ldr	r2, [pc, #204]	@ (800e9b4 <ip4_input+0x240>)
 800e8e8:	693b      	ldr	r3, [r7, #16]
 800e8ea:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e8ec:	4a31      	ldr	r2, [pc, #196]	@ (800e9b4 <ip4_input+0x240>)
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e8f2:	4a30      	ldr	r2, [pc, #192]	@ (800e9b4 <ip4_input+0x240>)
 800e8f4:	697b      	ldr	r3, [r7, #20]
 800e8f6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800e8f8:	697b      	ldr	r3, [r7, #20]
 800e8fa:	781b      	ldrb	r3, [r3, #0]
 800e8fc:	f003 030f 	and.w	r3, r3, #15
 800e900:	b2db      	uxtb	r3, r3
 800e902:	009b      	lsls	r3, r3, #2
 800e904:	b2db      	uxtb	r3, r3
 800e906:	461a      	mov	r2, r3
 800e908:	4b2a      	ldr	r3, [pc, #168]	@ (800e9b4 <ip4_input+0x240>)
 800e90a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800e90c:	89fb      	ldrh	r3, [r7, #14]
 800e90e:	4619      	mov	r1, r3
 800e910:	6878      	ldr	r0, [r7, #4]
 800e912:	f7f8 fafb 	bl	8006f0c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	7a5b      	ldrb	r3, [r3, #9]
 800e91a:	2b11      	cmp	r3, #17
 800e91c:	d006      	beq.n	800e92c <ip4_input+0x1b8>
 800e91e:	2b11      	cmp	r3, #17
 800e920:	dc13      	bgt.n	800e94a <ip4_input+0x1d6>
 800e922:	2b01      	cmp	r3, #1
 800e924:	d00c      	beq.n	800e940 <ip4_input+0x1cc>
 800e926:	2b06      	cmp	r3, #6
 800e928:	d005      	beq.n	800e936 <ip4_input+0x1c2>
 800e92a:	e00e      	b.n	800e94a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800e92c:	6839      	ldr	r1, [r7, #0]
 800e92e:	6878      	ldr	r0, [r7, #4]
 800e930:	f7fe f9f2 	bl	800cd18 <udp_input>
        break;
 800e934:	e026      	b.n	800e984 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800e936:	6839      	ldr	r1, [r7, #0]
 800e938:	6878      	ldr	r0, [r7, #4]
 800e93a:	f7fa fa39 	bl	8008db0 <tcp_input>
        break;
 800e93e:	e021      	b.n	800e984 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800e940:	6839      	ldr	r1, [r7, #0]
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f7ff fcee 	bl	800e324 <icmp_input>
        break;
 800e948:	e01c      	b.n	800e984 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e94a:	4b1a      	ldr	r3, [pc, #104]	@ (800e9b4 <ip4_input+0x240>)
 800e94c:	695b      	ldr	r3, [r3, #20]
 800e94e:	6939      	ldr	r1, [r7, #16]
 800e950:	4618      	mov	r0, r3
 800e952:	f000 f90b 	bl	800eb6c <ip4_addr_isbroadcast_u32>
 800e956:	4603      	mov	r3, r0
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d10f      	bne.n	800e97c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e95c:	4b15      	ldr	r3, [pc, #84]	@ (800e9b4 <ip4_input+0x240>)
 800e95e:	695b      	ldr	r3, [r3, #20]
 800e960:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e964:	2be0      	cmp	r3, #224	@ 0xe0
 800e966:	d009      	beq.n	800e97c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e968:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e96c:	4619      	mov	r1, r3
 800e96e:	6878      	ldr	r0, [r7, #4]
 800e970:	f7f8 fb3f 	bl	8006ff2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e974:	2102      	movs	r1, #2
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	f7ff fdd8 	bl	800e52c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f7f8 fb4b 	bl	8007018 <pbuf_free>
        break;
 800e982:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e984:	4b0b      	ldr	r3, [pc, #44]	@ (800e9b4 <ip4_input+0x240>)
 800e986:	2200      	movs	r2, #0
 800e988:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e98a:	4b0a      	ldr	r3, [pc, #40]	@ (800e9b4 <ip4_input+0x240>)
 800e98c:	2200      	movs	r2, #0
 800e98e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e990:	4b08      	ldr	r3, [pc, #32]	@ (800e9b4 <ip4_input+0x240>)
 800e992:	2200      	movs	r2, #0
 800e994:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e996:	4b07      	ldr	r3, [pc, #28]	@ (800e9b4 <ip4_input+0x240>)
 800e998:	2200      	movs	r2, #0
 800e99a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e99c:	4b05      	ldr	r3, [pc, #20]	@ (800e9b4 <ip4_input+0x240>)
 800e99e:	2200      	movs	r2, #0
 800e9a0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e9a2:	4b04      	ldr	r3, [pc, #16]	@ (800e9b4 <ip4_input+0x240>)
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e9a8:	2300      	movs	r3, #0
}
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	3718      	adds	r7, #24
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}
 800e9b2:	bf00      	nop
 800e9b4:	20005260 	.word	0x20005260
 800e9b8:	200087c4 	.word	0x200087c4

0800e9bc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b08a      	sub	sp, #40	@ 0x28
 800e9c0:	af04      	add	r7, sp, #16
 800e9c2:	60f8      	str	r0, [r7, #12]
 800e9c4:	60b9      	str	r1, [r7, #8]
 800e9c6:	607a      	str	r2, [r7, #4]
 800e9c8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d009      	beq.n	800e9e8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d003      	beq.n	800e9e2 <ip4_output_if+0x26>
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d102      	bne.n	800e9e8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e9e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9e4:	3304      	adds	r3, #4
 800e9e6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e9e8:	78fa      	ldrb	r2, [r7, #3]
 800e9ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9ec:	9302      	str	r3, [sp, #8]
 800e9ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e9f2:	9301      	str	r3, [sp, #4]
 800e9f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e9f8:	9300      	str	r3, [sp, #0]
 800e9fa:	4613      	mov	r3, r2
 800e9fc:	687a      	ldr	r2, [r7, #4]
 800e9fe:	6979      	ldr	r1, [r7, #20]
 800ea00:	68f8      	ldr	r0, [r7, #12]
 800ea02:	f000 f805 	bl	800ea10 <ip4_output_if_src>
 800ea06:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800ea08:	4618      	mov	r0, r3
 800ea0a:	3718      	adds	r7, #24
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	bd80      	pop	{r7, pc}

0800ea10 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b088      	sub	sp, #32
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	60f8      	str	r0, [r7, #12]
 800ea18:	60b9      	str	r1, [r7, #8]
 800ea1a:	607a      	str	r2, [r7, #4]
 800ea1c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	7b9b      	ldrb	r3, [r3, #14]
 800ea22:	2b01      	cmp	r3, #1
 800ea24:	d006      	beq.n	800ea34 <ip4_output_if_src+0x24>
 800ea26:	4b4b      	ldr	r3, [pc, #300]	@ (800eb54 <ip4_output_if_src+0x144>)
 800ea28:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800ea2c:	494a      	ldr	r1, [pc, #296]	@ (800eb58 <ip4_output_if_src+0x148>)
 800ea2e:	484b      	ldr	r0, [pc, #300]	@ (800eb5c <ip4_output_if_src+0x14c>)
 800ea30:	f001 f972 	bl	800fd18 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d060      	beq.n	800eafc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800ea3a:	2314      	movs	r3, #20
 800ea3c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800ea3e:	2114      	movs	r1, #20
 800ea40:	68f8      	ldr	r0, [r7, #12]
 800ea42:	f7f8 fa53 	bl	8006eec <pbuf_add_header>
 800ea46:	4603      	mov	r3, r0
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d002      	beq.n	800ea52 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ea4c:	f06f 0301 	mvn.w	r3, #1
 800ea50:	e07c      	b.n	800eb4c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	685b      	ldr	r3, [r3, #4]
 800ea56:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	895b      	ldrh	r3, [r3, #10]
 800ea5c:	2b13      	cmp	r3, #19
 800ea5e:	d806      	bhi.n	800ea6e <ip4_output_if_src+0x5e>
 800ea60:	4b3c      	ldr	r3, [pc, #240]	@ (800eb54 <ip4_output_if_src+0x144>)
 800ea62:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800ea66:	493e      	ldr	r1, [pc, #248]	@ (800eb60 <ip4_output_if_src+0x150>)
 800ea68:	483c      	ldr	r0, [pc, #240]	@ (800eb5c <ip4_output_if_src+0x14c>)
 800ea6a:	f001 f955 	bl	800fd18 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800ea6e:	69fb      	ldr	r3, [r7, #28]
 800ea70:	78fa      	ldrb	r2, [r7, #3]
 800ea72:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800ea74:	69fb      	ldr	r3, [r7, #28]
 800ea76:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800ea7a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681a      	ldr	r2, [r3, #0]
 800ea80:	69fb      	ldr	r3, [r7, #28]
 800ea82:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ea84:	8b7b      	ldrh	r3, [r7, #26]
 800ea86:	089b      	lsrs	r3, r3, #2
 800ea88:	b29b      	uxth	r3, r3
 800ea8a:	b2db      	uxtb	r3, r3
 800ea8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea90:	b2da      	uxtb	r2, r3
 800ea92:	69fb      	ldr	r3, [r7, #28]
 800ea94:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800ea96:	69fb      	ldr	r3, [r7, #28]
 800ea98:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800ea9c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	891b      	ldrh	r3, [r3, #8]
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f7f6 ff5a 	bl	800595c <lwip_htons>
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	461a      	mov	r2, r3
 800eaac:	69fb      	ldr	r3, [r7, #28]
 800eaae:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800eab0:	69fb      	ldr	r3, [r7, #28]
 800eab2:	2200      	movs	r2, #0
 800eab4:	719a      	strb	r2, [r3, #6]
 800eab6:	2200      	movs	r2, #0
 800eab8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800eaba:	4b2a      	ldr	r3, [pc, #168]	@ (800eb64 <ip4_output_if_src+0x154>)
 800eabc:	881b      	ldrh	r3, [r3, #0]
 800eabe:	4618      	mov	r0, r3
 800eac0:	f7f6 ff4c 	bl	800595c <lwip_htons>
 800eac4:	4603      	mov	r3, r0
 800eac6:	461a      	mov	r2, r3
 800eac8:	69fb      	ldr	r3, [r7, #28]
 800eaca:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800eacc:	4b25      	ldr	r3, [pc, #148]	@ (800eb64 <ip4_output_if_src+0x154>)
 800eace:	881b      	ldrh	r3, [r3, #0]
 800ead0:	3301      	adds	r3, #1
 800ead2:	b29a      	uxth	r2, r3
 800ead4:	4b23      	ldr	r3, [pc, #140]	@ (800eb64 <ip4_output_if_src+0x154>)
 800ead6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d104      	bne.n	800eae8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800eade:	4b22      	ldr	r3, [pc, #136]	@ (800eb68 <ip4_output_if_src+0x158>)
 800eae0:	681a      	ldr	r2, [r3, #0]
 800eae2:	69fb      	ldr	r3, [r7, #28]
 800eae4:	60da      	str	r2, [r3, #12]
 800eae6:	e003      	b.n	800eaf0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800eae8:	68bb      	ldr	r3, [r7, #8]
 800eaea:	681a      	ldr	r2, [r3, #0]
 800eaec:	69fb      	ldr	r3, [r7, #28]
 800eaee:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800eaf0:	69fb      	ldr	r3, [r7, #28]
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	729a      	strb	r2, [r3, #10]
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	72da      	strb	r2, [r3, #11]
 800eafa:	e00f      	b.n	800eb1c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	895b      	ldrh	r3, [r3, #10]
 800eb00:	2b13      	cmp	r3, #19
 800eb02:	d802      	bhi.n	800eb0a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800eb04:	f06f 0301 	mvn.w	r3, #1
 800eb08:	e020      	b.n	800eb4c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	685b      	ldr	r3, [r3, #4]
 800eb0e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800eb10:	69fb      	ldr	r3, [r7, #28]
 800eb12:	691b      	ldr	r3, [r3, #16]
 800eb14:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800eb16:	f107 0314 	add.w	r3, r7, #20
 800eb1a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800eb1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb1e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d00c      	beq.n	800eb3e <ip4_output_if_src+0x12e>
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	891a      	ldrh	r2, [r3, #8]
 800eb28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb2a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800eb2c:	429a      	cmp	r2, r3
 800eb2e:	d906      	bls.n	800eb3e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800eb30:	687a      	ldr	r2, [r7, #4]
 800eb32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800eb34:	68f8      	ldr	r0, [r7, #12]
 800eb36:	f000 fdd3 	bl	800f6e0 <ip4_frag>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	e006      	b.n	800eb4c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800eb3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb40:	695b      	ldr	r3, [r3, #20]
 800eb42:	687a      	ldr	r2, [r7, #4]
 800eb44:	68f9      	ldr	r1, [r7, #12]
 800eb46:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800eb48:	4798      	blx	r3
 800eb4a:	4603      	mov	r3, r0
}
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	3720      	adds	r7, #32
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}
 800eb54:	08013250 	.word	0x08013250
 800eb58:	08013284 	.word	0x08013284
 800eb5c:	08013290 	.word	0x08013290
 800eb60:	080132b8 	.word	0x080132b8
 800eb64:	20008922 	.word	0x20008922
 800eb68:	08013698 	.word	0x08013698

0800eb6c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800eb6c:	b480      	push	{r7}
 800eb6e:	b085      	sub	sp, #20
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
 800eb74:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb80:	d002      	beq.n	800eb88 <ip4_addr_isbroadcast_u32+0x1c>
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d101      	bne.n	800eb8c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800eb88:	2301      	movs	r3, #1
 800eb8a:	e02a      	b.n	800ebe2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800eb92:	f003 0302 	and.w	r3, r3, #2
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d101      	bne.n	800eb9e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	e021      	b.n	800ebe2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	3304      	adds	r3, #4
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	687a      	ldr	r2, [r7, #4]
 800eba6:	429a      	cmp	r2, r3
 800eba8:	d101      	bne.n	800ebae <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	e019      	b.n	800ebe2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800ebae:	68fa      	ldr	r2, [r7, #12]
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	3304      	adds	r3, #4
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	405a      	eors	r2, r3
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	3308      	adds	r3, #8
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	4013      	ands	r3, r2
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d10d      	bne.n	800ebe0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	3308      	adds	r3, #8
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	43da      	mvns	r2, r3
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	3308      	adds	r3, #8
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ebd8:	429a      	cmp	r2, r3
 800ebda:	d101      	bne.n	800ebe0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800ebdc:	2301      	movs	r3, #1
 800ebde:	e000      	b.n	800ebe2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800ebe0:	2300      	movs	r3, #0
  }
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	3714      	adds	r7, #20
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebec:	4770      	bx	lr
	...

0800ebf0 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	b08d      	sub	sp, #52	@ 0x34
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	60f8      	str	r0, [r7, #12]
 800ebf8:	60b9      	str	r1, [r7, #8]
 800ebfa:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800ec06:	68bb      	ldr	r3, [r7, #8]
 800ec08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 800ec0a:	f107 0318 	add.w	r3, r7, #24
 800ec0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 800ec10:	2300      	movs	r3, #0
 800ec12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ec16:	e058      	b.n	800ecca <ip4addr_ntoa_r+0xda>
    i = 0;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 800ec1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec20:	781a      	ldrb	r2, [r3, #0]
 800ec22:	4b32      	ldr	r3, [pc, #200]	@ (800ecec <ip4addr_ntoa_r+0xfc>)
 800ec24:	fba3 1302 	umull	r1, r3, r3, r2
 800ec28:	08d9      	lsrs	r1, r3, #3
 800ec2a:	460b      	mov	r3, r1
 800ec2c:	009b      	lsls	r3, r3, #2
 800ec2e:	440b      	add	r3, r1
 800ec30:	005b      	lsls	r3, r3, #1
 800ec32:	1ad3      	subs	r3, r2, r3
 800ec34:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800ec36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec38:	781b      	ldrb	r3, [r3, #0]
 800ec3a:	4a2c      	ldr	r2, [pc, #176]	@ (800ecec <ip4addr_ntoa_r+0xfc>)
 800ec3c:	fba2 2303 	umull	r2, r3, r2, r3
 800ec40:	08db      	lsrs	r3, r3, #3
 800ec42:	b2da      	uxtb	r2, r3
 800ec44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec46:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800ec48:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ec4c:	1c5a      	adds	r2, r3, #1
 800ec4e:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 800ec52:	4619      	mov	r1, r3
 800ec54:	7ffb      	ldrb	r3, [r7, #31]
 800ec56:	3330      	adds	r3, #48	@ 0x30
 800ec58:	b2da      	uxtb	r2, r3
 800ec5a:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 800ec5e:	443b      	add	r3, r7
 800ec60:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800ec64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec66:	781b      	ldrb	r3, [r3, #0]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d1d8      	bne.n	800ec1e <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800ec6c:	e011      	b.n	800ec92 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 800ec6e:	6a3b      	ldr	r3, [r7, #32]
 800ec70:	1c5a      	adds	r2, r3, #1
 800ec72:	623a      	str	r2, [r7, #32]
 800ec74:	687a      	ldr	r2, [r7, #4]
 800ec76:	429a      	cmp	r2, r3
 800ec78:	dc01      	bgt.n	800ec7e <ip4addr_ntoa_r+0x8e>
        return NULL;
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	e030      	b.n	800ece0 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 800ec7e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ec82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec84:	1c59      	adds	r1, r3, #1
 800ec86:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800ec88:	3230      	adds	r2, #48	@ 0x30
 800ec8a:	443a      	add	r2, r7
 800ec8c:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800ec90:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800ec92:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ec96:	1e5a      	subs	r2, r3, #1
 800ec98:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d1e6      	bne.n	800ec6e <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800eca0:	6a3b      	ldr	r3, [r7, #32]
 800eca2:	1c5a      	adds	r2, r3, #1
 800eca4:	623a      	str	r2, [r7, #32]
 800eca6:	687a      	ldr	r2, [r7, #4]
 800eca8:	429a      	cmp	r2, r3
 800ecaa:	dc01      	bgt.n	800ecb0 <ip4addr_ntoa_r+0xc0>
      return NULL;
 800ecac:	2300      	movs	r3, #0
 800ecae:	e017      	b.n	800ece0 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 800ecb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecb2:	1c5a      	adds	r2, r3, #1
 800ecb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ecb6:	222e      	movs	r2, #46	@ 0x2e
 800ecb8:	701a      	strb	r2, [r3, #0]
    ap++;
 800ecba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecbc:	3301      	adds	r3, #1
 800ecbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 800ecc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ecc4:	3301      	adds	r3, #1
 800ecc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ecca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ecce:	2b03      	cmp	r3, #3
 800ecd0:	d9a2      	bls.n	800ec18 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 800ecd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecd4:	3b01      	subs	r3, #1
 800ecd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ecd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecda:	2200      	movs	r2, #0
 800ecdc:	701a      	strb	r2, [r3, #0]
  return buf;
 800ecde:	68bb      	ldr	r3, [r7, #8]
}
 800ece0:	4618      	mov	r0, r3
 800ece2:	3734      	adds	r7, #52	@ 0x34
 800ece4:	46bd      	mov	sp, r7
 800ece6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecea:	4770      	bx	lr
 800ecec:	cccccccd 	.word	0xcccccccd

0800ecf0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b084      	sub	sp, #16
 800ecf4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800ecfa:	4b12      	ldr	r3, [pc, #72]	@ (800ed44 <ip_reass_tmr+0x54>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800ed00:	e018      	b.n	800ed34 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	7fdb      	ldrb	r3, [r3, #31]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d00b      	beq.n	800ed22 <ip_reass_tmr+0x32>
      r->timer--;
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	7fdb      	ldrb	r3, [r3, #31]
 800ed0e:	3b01      	subs	r3, #1
 800ed10:	b2da      	uxtb	r2, r3
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	60fb      	str	r3, [r7, #12]
 800ed20:	e008      	b.n	800ed34 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800ed2c:	68b9      	ldr	r1, [r7, #8]
 800ed2e:	6878      	ldr	r0, [r7, #4]
 800ed30:	f000 f80a 	bl	800ed48 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d1e3      	bne.n	800ed02 <ip_reass_tmr+0x12>
    }
  }
}
 800ed3a:	bf00      	nop
 800ed3c:	bf00      	nop
 800ed3e:	3710      	adds	r7, #16
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}
 800ed44:	20008924 	.word	0x20008924

0800ed48 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b088      	sub	sp, #32
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
 800ed50:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800ed52:	2300      	movs	r3, #0
 800ed54:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800ed56:	683a      	ldr	r2, [r7, #0]
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	429a      	cmp	r2, r3
 800ed5c:	d105      	bne.n	800ed6a <ip_reass_free_complete_datagram+0x22>
 800ed5e:	4b45      	ldr	r3, [pc, #276]	@ (800ee74 <ip_reass_free_complete_datagram+0x12c>)
 800ed60:	22ab      	movs	r2, #171	@ 0xab
 800ed62:	4945      	ldr	r1, [pc, #276]	@ (800ee78 <ip_reass_free_complete_datagram+0x130>)
 800ed64:	4845      	ldr	r0, [pc, #276]	@ (800ee7c <ip_reass_free_complete_datagram+0x134>)
 800ed66:	f000 ffd7 	bl	800fd18 <iprintf>
  if (prev != NULL) {
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d00a      	beq.n	800ed86 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	687a      	ldr	r2, [r7, #4]
 800ed76:	429a      	cmp	r2, r3
 800ed78:	d005      	beq.n	800ed86 <ip_reass_free_complete_datagram+0x3e>
 800ed7a:	4b3e      	ldr	r3, [pc, #248]	@ (800ee74 <ip_reass_free_complete_datagram+0x12c>)
 800ed7c:	22ad      	movs	r2, #173	@ 0xad
 800ed7e:	4940      	ldr	r1, [pc, #256]	@ (800ee80 <ip_reass_free_complete_datagram+0x138>)
 800ed80:	483e      	ldr	r0, [pc, #248]	@ (800ee7c <ip_reass_free_complete_datagram+0x134>)
 800ed82:	f000 ffc9 	bl	800fd18 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	685b      	ldr	r3, [r3, #4]
 800ed8a:	685b      	ldr	r3, [r3, #4]
 800ed8c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	889b      	ldrh	r3, [r3, #4]
 800ed92:	b29b      	uxth	r3, r3
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d12a      	bne.n	800edee <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	685b      	ldr	r3, [r3, #4]
 800ed9c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800ed9e:	697b      	ldr	r3, [r7, #20]
 800eda0:	681a      	ldr	r2, [r3, #0]
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800eda6:	69bb      	ldr	r3, [r7, #24]
 800eda8:	6858      	ldr	r0, [r3, #4]
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	3308      	adds	r3, #8
 800edae:	2214      	movs	r2, #20
 800edb0:	4619      	mov	r1, r3
 800edb2:	f001 f8b6 	bl	800ff22 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800edb6:	2101      	movs	r1, #1
 800edb8:	69b8      	ldr	r0, [r7, #24]
 800edba:	f7ff fbc7 	bl	800e54c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800edbe:	69b8      	ldr	r0, [r7, #24]
 800edc0:	f7f8 f9b2 	bl	8007128 <pbuf_clen>
 800edc4:	4603      	mov	r3, r0
 800edc6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800edc8:	8bfa      	ldrh	r2, [r7, #30]
 800edca:	8a7b      	ldrh	r3, [r7, #18]
 800edcc:	4413      	add	r3, r2
 800edce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800edd2:	db05      	blt.n	800ede0 <ip_reass_free_complete_datagram+0x98>
 800edd4:	4b27      	ldr	r3, [pc, #156]	@ (800ee74 <ip_reass_free_complete_datagram+0x12c>)
 800edd6:	22bc      	movs	r2, #188	@ 0xbc
 800edd8:	492a      	ldr	r1, [pc, #168]	@ (800ee84 <ip_reass_free_complete_datagram+0x13c>)
 800edda:	4828      	ldr	r0, [pc, #160]	@ (800ee7c <ip_reass_free_complete_datagram+0x134>)
 800eddc:	f000 ff9c 	bl	800fd18 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ede0:	8bfa      	ldrh	r2, [r7, #30]
 800ede2:	8a7b      	ldrh	r3, [r7, #18]
 800ede4:	4413      	add	r3, r2
 800ede6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800ede8:	69b8      	ldr	r0, [r7, #24]
 800edea:	f7f8 f915 	bl	8007018 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	685b      	ldr	r3, [r3, #4]
 800edf2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800edf4:	e01f      	b.n	800ee36 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800edf6:	69bb      	ldr	r3, [r7, #24]
 800edf8:	685b      	ldr	r3, [r3, #4]
 800edfa:	617b      	str	r3, [r7, #20]
    pcur = p;
 800edfc:	69bb      	ldr	r3, [r7, #24]
 800edfe:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800ee00:	697b      	ldr	r3, [r7, #20]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800ee06:	68f8      	ldr	r0, [r7, #12]
 800ee08:	f7f8 f98e 	bl	8007128 <pbuf_clen>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ee10:	8bfa      	ldrh	r2, [r7, #30]
 800ee12:	8a7b      	ldrh	r3, [r7, #18]
 800ee14:	4413      	add	r3, r2
 800ee16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ee1a:	db05      	blt.n	800ee28 <ip_reass_free_complete_datagram+0xe0>
 800ee1c:	4b15      	ldr	r3, [pc, #84]	@ (800ee74 <ip_reass_free_complete_datagram+0x12c>)
 800ee1e:	22cc      	movs	r2, #204	@ 0xcc
 800ee20:	4918      	ldr	r1, [pc, #96]	@ (800ee84 <ip_reass_free_complete_datagram+0x13c>)
 800ee22:	4816      	ldr	r0, [pc, #88]	@ (800ee7c <ip_reass_free_complete_datagram+0x134>)
 800ee24:	f000 ff78 	bl	800fd18 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ee28:	8bfa      	ldrh	r2, [r7, #30]
 800ee2a:	8a7b      	ldrh	r3, [r7, #18]
 800ee2c:	4413      	add	r3, r2
 800ee2e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800ee30:	68f8      	ldr	r0, [r7, #12]
 800ee32:	f7f8 f8f1 	bl	8007018 <pbuf_free>
  while (p != NULL) {
 800ee36:	69bb      	ldr	r3, [r7, #24]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d1dc      	bne.n	800edf6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800ee3c:	6839      	ldr	r1, [r7, #0]
 800ee3e:	6878      	ldr	r0, [r7, #4]
 800ee40:	f000 f8c2 	bl	800efc8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800ee44:	4b10      	ldr	r3, [pc, #64]	@ (800ee88 <ip_reass_free_complete_datagram+0x140>)
 800ee46:	881b      	ldrh	r3, [r3, #0]
 800ee48:	8bfa      	ldrh	r2, [r7, #30]
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	d905      	bls.n	800ee5a <ip_reass_free_complete_datagram+0x112>
 800ee4e:	4b09      	ldr	r3, [pc, #36]	@ (800ee74 <ip_reass_free_complete_datagram+0x12c>)
 800ee50:	22d2      	movs	r2, #210	@ 0xd2
 800ee52:	490e      	ldr	r1, [pc, #56]	@ (800ee8c <ip_reass_free_complete_datagram+0x144>)
 800ee54:	4809      	ldr	r0, [pc, #36]	@ (800ee7c <ip_reass_free_complete_datagram+0x134>)
 800ee56:	f000 ff5f 	bl	800fd18 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800ee5a:	4b0b      	ldr	r3, [pc, #44]	@ (800ee88 <ip_reass_free_complete_datagram+0x140>)
 800ee5c:	881a      	ldrh	r2, [r3, #0]
 800ee5e:	8bfb      	ldrh	r3, [r7, #30]
 800ee60:	1ad3      	subs	r3, r2, r3
 800ee62:	b29a      	uxth	r2, r3
 800ee64:	4b08      	ldr	r3, [pc, #32]	@ (800ee88 <ip_reass_free_complete_datagram+0x140>)
 800ee66:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800ee68:	8bfb      	ldrh	r3, [r7, #30]
}
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	3720      	adds	r7, #32
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}
 800ee72:	bf00      	nop
 800ee74:	080132e8 	.word	0x080132e8
 800ee78:	08013324 	.word	0x08013324
 800ee7c:	08013330 	.word	0x08013330
 800ee80:	08013358 	.word	0x08013358
 800ee84:	0801336c 	.word	0x0801336c
 800ee88:	20008928 	.word	0x20008928
 800ee8c:	0801338c 	.word	0x0801338c

0800ee90 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b08a      	sub	sp, #40	@ 0x28
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
 800ee98:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800eea2:	2300      	movs	r3, #0
 800eea4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800eea6:	2300      	movs	r3, #0
 800eea8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800eeaa:	2300      	movs	r3, #0
 800eeac:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800eeae:	4b28      	ldr	r3, [pc, #160]	@ (800ef50 <ip_reass_remove_oldest_datagram+0xc0>)
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800eeb4:	e030      	b.n	800ef18 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800eeb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeb8:	695a      	ldr	r2, [r3, #20]
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	68db      	ldr	r3, [r3, #12]
 800eebe:	429a      	cmp	r2, r3
 800eec0:	d10c      	bne.n	800eedc <ip_reass_remove_oldest_datagram+0x4c>
 800eec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eec4:	699a      	ldr	r2, [r3, #24]
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	691b      	ldr	r3, [r3, #16]
 800eeca:	429a      	cmp	r2, r3
 800eecc:	d106      	bne.n	800eedc <ip_reass_remove_oldest_datagram+0x4c>
 800eece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eed0:	899a      	ldrh	r2, [r3, #12]
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	889b      	ldrh	r3, [r3, #4]
 800eed6:	b29b      	uxth	r3, r3
 800eed8:	429a      	cmp	r2, r3
 800eeda:	d014      	beq.n	800ef06 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800eedc:	693b      	ldr	r3, [r7, #16]
 800eede:	3301      	adds	r3, #1
 800eee0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800eee2:	6a3b      	ldr	r3, [r7, #32]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d104      	bne.n	800eef2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800eee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeea:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800eeec:	69fb      	ldr	r3, [r7, #28]
 800eeee:	61bb      	str	r3, [r7, #24]
 800eef0:	e009      	b.n	800ef06 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800eef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eef4:	7fda      	ldrb	r2, [r3, #31]
 800eef6:	6a3b      	ldr	r3, [r7, #32]
 800eef8:	7fdb      	ldrb	r3, [r3, #31]
 800eefa:	429a      	cmp	r2, r3
 800eefc:	d803      	bhi.n	800ef06 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800eefe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef00:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ef02:	69fb      	ldr	r3, [r7, #28]
 800ef04:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800ef06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d001      	beq.n	800ef12 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800ef0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef10:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800ef12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800ef18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d1cb      	bne.n	800eeb6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800ef1e:	6a3b      	ldr	r3, [r7, #32]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d008      	beq.n	800ef36 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800ef24:	69b9      	ldr	r1, [r7, #24]
 800ef26:	6a38      	ldr	r0, [r7, #32]
 800ef28:	f7ff ff0e 	bl	800ed48 <ip_reass_free_complete_datagram>
 800ef2c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800ef2e:	697a      	ldr	r2, [r7, #20]
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	4413      	add	r3, r2
 800ef34:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800ef36:	697a      	ldr	r2, [r7, #20]
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	429a      	cmp	r2, r3
 800ef3c:	da02      	bge.n	800ef44 <ip_reass_remove_oldest_datagram+0xb4>
 800ef3e:	693b      	ldr	r3, [r7, #16]
 800ef40:	2b01      	cmp	r3, #1
 800ef42:	dcac      	bgt.n	800ee9e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800ef44:	697b      	ldr	r3, [r7, #20]
}
 800ef46:	4618      	mov	r0, r3
 800ef48:	3728      	adds	r7, #40	@ 0x28
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	bd80      	pop	{r7, pc}
 800ef4e:	bf00      	nop
 800ef50:	20008924 	.word	0x20008924

0800ef54 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b084      	sub	sp, #16
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
 800ef5c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ef5e:	2004      	movs	r0, #4
 800ef60:	f7f7 f974 	bl	800624c <memp_malloc>
 800ef64:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d110      	bne.n	800ef8e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800ef6c:	6839      	ldr	r1, [r7, #0]
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f7ff ff8e 	bl	800ee90 <ip_reass_remove_oldest_datagram>
 800ef74:	4602      	mov	r2, r0
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	4293      	cmp	r3, r2
 800ef7a:	dc03      	bgt.n	800ef84 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ef7c:	2004      	movs	r0, #4
 800ef7e:	f7f7 f965 	bl	800624c <memp_malloc>
 800ef82:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d101      	bne.n	800ef8e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	e016      	b.n	800efbc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800ef8e:	2220      	movs	r2, #32
 800ef90:	2100      	movs	r1, #0
 800ef92:	68f8      	ldr	r0, [r7, #12]
 800ef94:	f000 ff25 	bl	800fde2 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	220f      	movs	r2, #15
 800ef9c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800ef9e:	4b09      	ldr	r3, [pc, #36]	@ (800efc4 <ip_reass_enqueue_new_datagram+0x70>)
 800efa0:	681a      	ldr	r2, [r3, #0]
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800efa6:	4a07      	ldr	r2, [pc, #28]	@ (800efc4 <ip_reass_enqueue_new_datagram+0x70>)
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	3308      	adds	r3, #8
 800efb0:	2214      	movs	r2, #20
 800efb2:	6879      	ldr	r1, [r7, #4]
 800efb4:	4618      	mov	r0, r3
 800efb6:	f000 ffb4 	bl	800ff22 <memcpy>
  return ipr;
 800efba:	68fb      	ldr	r3, [r7, #12]
}
 800efbc:	4618      	mov	r0, r3
 800efbe:	3710      	adds	r7, #16
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}
 800efc4:	20008924 	.word	0x20008924

0800efc8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b082      	sub	sp, #8
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
 800efd0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800efd2:	4b10      	ldr	r3, [pc, #64]	@ (800f014 <ip_reass_dequeue_datagram+0x4c>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	687a      	ldr	r2, [r7, #4]
 800efd8:	429a      	cmp	r2, r3
 800efda:	d104      	bne.n	800efe6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	4a0c      	ldr	r2, [pc, #48]	@ (800f014 <ip_reass_dequeue_datagram+0x4c>)
 800efe2:	6013      	str	r3, [r2, #0]
 800efe4:	e00d      	b.n	800f002 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d106      	bne.n	800effa <ip_reass_dequeue_datagram+0x32>
 800efec:	4b0a      	ldr	r3, [pc, #40]	@ (800f018 <ip_reass_dequeue_datagram+0x50>)
 800efee:	f240 1245 	movw	r2, #325	@ 0x145
 800eff2:	490a      	ldr	r1, [pc, #40]	@ (800f01c <ip_reass_dequeue_datagram+0x54>)
 800eff4:	480a      	ldr	r0, [pc, #40]	@ (800f020 <ip_reass_dequeue_datagram+0x58>)
 800eff6:	f000 fe8f 	bl	800fd18 <iprintf>
    prev->next = ipr->next;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681a      	ldr	r2, [r3, #0]
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f002:	6879      	ldr	r1, [r7, #4]
 800f004:	2004      	movs	r0, #4
 800f006:	f7f7 f991 	bl	800632c <memp_free>
}
 800f00a:	bf00      	nop
 800f00c:	3708      	adds	r7, #8
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}
 800f012:	bf00      	nop
 800f014:	20008924 	.word	0x20008924
 800f018:	080132e8 	.word	0x080132e8
 800f01c:	080133b0 	.word	0x080133b0
 800f020:	08013330 	.word	0x08013330

0800f024 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b08c      	sub	sp, #48	@ 0x30
 800f028:	af00      	add	r7, sp, #0
 800f02a:	60f8      	str	r0, [r7, #12]
 800f02c:	60b9      	str	r1, [r7, #8]
 800f02e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800f030:	2300      	movs	r3, #0
 800f032:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f034:	2301      	movs	r3, #1
 800f036:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800f038:	68bb      	ldr	r3, [r7, #8]
 800f03a:	685b      	ldr	r3, [r3, #4]
 800f03c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f03e:	69fb      	ldr	r3, [r7, #28]
 800f040:	885b      	ldrh	r3, [r3, #2]
 800f042:	b29b      	uxth	r3, r3
 800f044:	4618      	mov	r0, r3
 800f046:	f7f6 fc89 	bl	800595c <lwip_htons>
 800f04a:	4603      	mov	r3, r0
 800f04c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800f04e:	69fb      	ldr	r3, [r7, #28]
 800f050:	781b      	ldrb	r3, [r3, #0]
 800f052:	f003 030f 	and.w	r3, r3, #15
 800f056:	b2db      	uxtb	r3, r3
 800f058:	009b      	lsls	r3, r3, #2
 800f05a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800f05c:	7e7b      	ldrb	r3, [r7, #25]
 800f05e:	b29b      	uxth	r3, r3
 800f060:	8b7a      	ldrh	r2, [r7, #26]
 800f062:	429a      	cmp	r2, r3
 800f064:	d202      	bcs.n	800f06c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f066:	f04f 33ff 	mov.w	r3, #4294967295
 800f06a:	e135      	b.n	800f2d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800f06c:	7e7b      	ldrb	r3, [r7, #25]
 800f06e:	b29b      	uxth	r3, r3
 800f070:	8b7a      	ldrh	r2, [r7, #26]
 800f072:	1ad3      	subs	r3, r2, r3
 800f074:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f076:	69fb      	ldr	r3, [r7, #28]
 800f078:	88db      	ldrh	r3, [r3, #6]
 800f07a:	b29b      	uxth	r3, r3
 800f07c:	4618      	mov	r0, r3
 800f07e:	f7f6 fc6d 	bl	800595c <lwip_htons>
 800f082:	4603      	mov	r3, r0
 800f084:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f088:	b29b      	uxth	r3, r3
 800f08a:	00db      	lsls	r3, r3, #3
 800f08c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800f08e:	68bb      	ldr	r3, [r7, #8]
 800f090:	685b      	ldr	r3, [r3, #4]
 800f092:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800f094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f096:	2200      	movs	r2, #0
 800f098:	701a      	strb	r2, [r3, #0]
 800f09a:	2200      	movs	r2, #0
 800f09c:	705a      	strb	r2, [r3, #1]
 800f09e:	2200      	movs	r2, #0
 800f0a0:	709a      	strb	r2, [r3, #2]
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f0a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0a8:	8afa      	ldrh	r2, [r7, #22]
 800f0aa:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800f0ac:	8afa      	ldrh	r2, [r7, #22]
 800f0ae:	8b7b      	ldrh	r3, [r7, #26]
 800f0b0:	4413      	add	r3, r2
 800f0b2:	b29a      	uxth	r2, r3
 800f0b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0b6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800f0b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0ba:	88db      	ldrh	r3, [r3, #6]
 800f0bc:	b29b      	uxth	r3, r3
 800f0be:	8afa      	ldrh	r2, [r7, #22]
 800f0c0:	429a      	cmp	r2, r3
 800f0c2:	d902      	bls.n	800f0ca <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f0c4:	f04f 33ff 	mov.w	r3, #4294967295
 800f0c8:	e106      	b.n	800f2d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	685b      	ldr	r3, [r3, #4]
 800f0ce:	627b      	str	r3, [r7, #36]	@ 0x24
 800f0d0:	e068      	b.n	800f1a4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800f0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0d4:	685b      	ldr	r3, [r3, #4]
 800f0d6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800f0d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0da:	889b      	ldrh	r3, [r3, #4]
 800f0dc:	b29a      	uxth	r2, r3
 800f0de:	693b      	ldr	r3, [r7, #16]
 800f0e0:	889b      	ldrh	r3, [r3, #4]
 800f0e2:	b29b      	uxth	r3, r3
 800f0e4:	429a      	cmp	r2, r3
 800f0e6:	d235      	bcs.n	800f154 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f0e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f0ec:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f0ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d020      	beq.n	800f136 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f0f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0f6:	889b      	ldrh	r3, [r3, #4]
 800f0f8:	b29a      	uxth	r2, r3
 800f0fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0fc:	88db      	ldrh	r3, [r3, #6]
 800f0fe:	b29b      	uxth	r3, r3
 800f100:	429a      	cmp	r2, r3
 800f102:	d307      	bcc.n	800f114 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800f104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f106:	88db      	ldrh	r3, [r3, #6]
 800f108:	b29a      	uxth	r2, r3
 800f10a:	693b      	ldr	r3, [r7, #16]
 800f10c:	889b      	ldrh	r3, [r3, #4]
 800f10e:	b29b      	uxth	r3, r3
 800f110:	429a      	cmp	r2, r3
 800f112:	d902      	bls.n	800f11a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f114:	f04f 33ff 	mov.w	r3, #4294967295
 800f118:	e0de      	b.n	800f2d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f11a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f11c:	68ba      	ldr	r2, [r7, #8]
 800f11e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f122:	88db      	ldrh	r3, [r3, #6]
 800f124:	b29a      	uxth	r2, r3
 800f126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f128:	889b      	ldrh	r3, [r3, #4]
 800f12a:	b29b      	uxth	r3, r3
 800f12c:	429a      	cmp	r2, r3
 800f12e:	d03d      	beq.n	800f1ac <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f130:	2300      	movs	r3, #0
 800f132:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f134:	e03a      	b.n	800f1ac <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800f136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f138:	88db      	ldrh	r3, [r3, #6]
 800f13a:	b29a      	uxth	r2, r3
 800f13c:	693b      	ldr	r3, [r7, #16]
 800f13e:	889b      	ldrh	r3, [r3, #4]
 800f140:	b29b      	uxth	r3, r3
 800f142:	429a      	cmp	r2, r3
 800f144:	d902      	bls.n	800f14c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f146:	f04f 33ff 	mov.w	r3, #4294967295
 800f14a:	e0c5      	b.n	800f2d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	68ba      	ldr	r2, [r7, #8]
 800f150:	605a      	str	r2, [r3, #4]
      break;
 800f152:	e02b      	b.n	800f1ac <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800f154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f156:	889b      	ldrh	r3, [r3, #4]
 800f158:	b29a      	uxth	r2, r3
 800f15a:	693b      	ldr	r3, [r7, #16]
 800f15c:	889b      	ldrh	r3, [r3, #4]
 800f15e:	b29b      	uxth	r3, r3
 800f160:	429a      	cmp	r2, r3
 800f162:	d102      	bne.n	800f16a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f164:	f04f 33ff 	mov.w	r3, #4294967295
 800f168:	e0b6      	b.n	800f2d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f16a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f16c:	889b      	ldrh	r3, [r3, #4]
 800f16e:	b29a      	uxth	r2, r3
 800f170:	693b      	ldr	r3, [r7, #16]
 800f172:	88db      	ldrh	r3, [r3, #6]
 800f174:	b29b      	uxth	r3, r3
 800f176:	429a      	cmp	r2, r3
 800f178:	d202      	bcs.n	800f180 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f17a:	f04f 33ff 	mov.w	r3, #4294967295
 800f17e:	e0ab      	b.n	800f2d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f182:	2b00      	cmp	r3, #0
 800f184:	d009      	beq.n	800f19a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800f186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f188:	88db      	ldrh	r3, [r3, #6]
 800f18a:	b29a      	uxth	r2, r3
 800f18c:	693b      	ldr	r3, [r7, #16]
 800f18e:	889b      	ldrh	r3, [r3, #4]
 800f190:	b29b      	uxth	r3, r3
 800f192:	429a      	cmp	r2, r3
 800f194:	d001      	beq.n	800f19a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f196:	2300      	movs	r3, #0
 800f198:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f19a:	693b      	ldr	r3, [r7, #16]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800f1a0:	693b      	ldr	r3, [r7, #16]
 800f1a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800f1a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d193      	bne.n	800f0d2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800f1aa:	e000      	b.n	800f1ae <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800f1ac:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d12d      	bne.n	800f210 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800f1b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d01c      	beq.n	800f1f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f1ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1bc:	88db      	ldrh	r3, [r3, #6]
 800f1be:	b29a      	uxth	r2, r3
 800f1c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1c2:	889b      	ldrh	r3, [r3, #4]
 800f1c4:	b29b      	uxth	r3, r3
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d906      	bls.n	800f1d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800f1ca:	4b45      	ldr	r3, [pc, #276]	@ (800f2e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f1cc:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800f1d0:	4944      	ldr	r1, [pc, #272]	@ (800f2e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f1d2:	4845      	ldr	r0, [pc, #276]	@ (800f2e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f1d4:	f000 fda0 	bl	800fd18 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f1d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1da:	68ba      	ldr	r2, [r7, #8]
 800f1dc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f1de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1e0:	88db      	ldrh	r3, [r3, #6]
 800f1e2:	b29a      	uxth	r2, r3
 800f1e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1e6:	889b      	ldrh	r3, [r3, #4]
 800f1e8:	b29b      	uxth	r3, r3
 800f1ea:	429a      	cmp	r2, r3
 800f1ec:	d010      	beq.n	800f210 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	623b      	str	r3, [r7, #32]
 800f1f2:	e00d      	b.n	800f210 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	685b      	ldr	r3, [r3, #4]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d006      	beq.n	800f20a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f1fc:	4b38      	ldr	r3, [pc, #224]	@ (800f2e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f1fe:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800f202:	493a      	ldr	r1, [pc, #232]	@ (800f2ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f204:	4838      	ldr	r0, [pc, #224]	@ (800f2e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f206:	f000 fd87 	bl	800fd18 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	68ba      	ldr	r2, [r7, #8]
 800f20e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d105      	bne.n	800f222 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	7f9b      	ldrb	r3, [r3, #30]
 800f21a:	f003 0301 	and.w	r3, r3, #1
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d059      	beq.n	800f2d6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800f222:	6a3b      	ldr	r3, [r7, #32]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d04f      	beq.n	800f2c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	685b      	ldr	r3, [r3, #4]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d006      	beq.n	800f23e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	685b      	ldr	r3, [r3, #4]
 800f234:	685b      	ldr	r3, [r3, #4]
 800f236:	889b      	ldrh	r3, [r3, #4]
 800f238:	b29b      	uxth	r3, r3
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d002      	beq.n	800f244 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800f23e:	2300      	movs	r3, #0
 800f240:	623b      	str	r3, [r7, #32]
 800f242:	e041      	b.n	800f2c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f246:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800f248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800f24e:	e012      	b.n	800f276 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800f250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f252:	685b      	ldr	r3, [r3, #4]
 800f254:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800f256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f258:	88db      	ldrh	r3, [r3, #6]
 800f25a:	b29a      	uxth	r2, r3
 800f25c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f25e:	889b      	ldrh	r3, [r3, #4]
 800f260:	b29b      	uxth	r3, r3
 800f262:	429a      	cmp	r2, r3
 800f264:	d002      	beq.n	800f26c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800f266:	2300      	movs	r3, #0
 800f268:	623b      	str	r3, [r7, #32]
            break;
 800f26a:	e007      	b.n	800f27c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800f26c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f26e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800f270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800f276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d1e9      	bne.n	800f250 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f27c:	6a3b      	ldr	r3, [r7, #32]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d022      	beq.n	800f2c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	685b      	ldr	r3, [r3, #4]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d106      	bne.n	800f298 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800f28a:	4b15      	ldr	r3, [pc, #84]	@ (800f2e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f28c:	f240 12df 	movw	r2, #479	@ 0x1df
 800f290:	4917      	ldr	r1, [pc, #92]	@ (800f2f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f292:	4815      	ldr	r0, [pc, #84]	@ (800f2e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f294:	f000 fd40 	bl	800fd18 <iprintf>
          LWIP_ASSERT("sanity check",
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	685b      	ldr	r3, [r3, #4]
 800f29c:	685b      	ldr	r3, [r3, #4]
 800f29e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f2a0:	429a      	cmp	r2, r3
 800f2a2:	d106      	bne.n	800f2b2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800f2a4:	4b0e      	ldr	r3, [pc, #56]	@ (800f2e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f2a6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800f2aa:	4911      	ldr	r1, [pc, #68]	@ (800f2f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f2ac:	480e      	ldr	r0, [pc, #56]	@ (800f2e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f2ae:	f000 fd33 	bl	800fd18 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f2b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d006      	beq.n	800f2c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800f2ba:	4b09      	ldr	r3, [pc, #36]	@ (800f2e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f2bc:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800f2c0:	490c      	ldr	r1, [pc, #48]	@ (800f2f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f2c2:	4809      	ldr	r0, [pc, #36]	@ (800f2e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f2c4:	f000 fd28 	bl	800fd18 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f2c8:	6a3b      	ldr	r3, [r7, #32]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	bf14      	ite	ne
 800f2ce:	2301      	movne	r3, #1
 800f2d0:	2300      	moveq	r3, #0
 800f2d2:	b2db      	uxtb	r3, r3
 800f2d4:	e000      	b.n	800f2d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f2d6:	2300      	movs	r3, #0
}
 800f2d8:	4618      	mov	r0, r3
 800f2da:	3730      	adds	r7, #48	@ 0x30
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}
 800f2e0:	080132e8 	.word	0x080132e8
 800f2e4:	080133cc 	.word	0x080133cc
 800f2e8:	08013330 	.word	0x08013330
 800f2ec:	080133ec 	.word	0x080133ec
 800f2f0:	08013424 	.word	0x08013424
 800f2f4:	08013434 	.word	0x08013434

0800f2f8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b08e      	sub	sp, #56	@ 0x38
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	685b      	ldr	r3, [r3, #4]
 800f304:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800f306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f308:	781b      	ldrb	r3, [r3, #0]
 800f30a:	f003 030f 	and.w	r3, r3, #15
 800f30e:	b2db      	uxtb	r3, r3
 800f310:	009b      	lsls	r3, r3, #2
 800f312:	b2db      	uxtb	r3, r3
 800f314:	2b14      	cmp	r3, #20
 800f316:	f040 8171 	bne.w	800f5fc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800f31a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f31c:	88db      	ldrh	r3, [r3, #6]
 800f31e:	b29b      	uxth	r3, r3
 800f320:	4618      	mov	r0, r3
 800f322:	f7f6 fb1b 	bl	800595c <lwip_htons>
 800f326:	4603      	mov	r3, r0
 800f328:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f32c:	b29b      	uxth	r3, r3
 800f32e:	00db      	lsls	r3, r3, #3
 800f330:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f334:	885b      	ldrh	r3, [r3, #2]
 800f336:	b29b      	uxth	r3, r3
 800f338:	4618      	mov	r0, r3
 800f33a:	f7f6 fb0f 	bl	800595c <lwip_htons>
 800f33e:	4603      	mov	r3, r0
 800f340:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800f342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f344:	781b      	ldrb	r3, [r3, #0]
 800f346:	f003 030f 	and.w	r3, r3, #15
 800f34a:	b2db      	uxtb	r3, r3
 800f34c:	009b      	lsls	r3, r3, #2
 800f34e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800f352:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f356:	b29b      	uxth	r3, r3
 800f358:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f35a:	429a      	cmp	r2, r3
 800f35c:	f0c0 8150 	bcc.w	800f600 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800f360:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f364:	b29b      	uxth	r3, r3
 800f366:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f368:	1ad3      	subs	r3, r2, r3
 800f36a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f7f7 fedb 	bl	8007128 <pbuf_clen>
 800f372:	4603      	mov	r3, r0
 800f374:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f376:	4b8c      	ldr	r3, [pc, #560]	@ (800f5a8 <ip4_reass+0x2b0>)
 800f378:	881b      	ldrh	r3, [r3, #0]
 800f37a:	461a      	mov	r2, r3
 800f37c:	8c3b      	ldrh	r3, [r7, #32]
 800f37e:	4413      	add	r3, r2
 800f380:	2b0a      	cmp	r3, #10
 800f382:	dd10      	ble.n	800f3a6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f384:	8c3b      	ldrh	r3, [r7, #32]
 800f386:	4619      	mov	r1, r3
 800f388:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f38a:	f7ff fd81 	bl	800ee90 <ip_reass_remove_oldest_datagram>
 800f38e:	4603      	mov	r3, r0
 800f390:	2b00      	cmp	r3, #0
 800f392:	f000 8137 	beq.w	800f604 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f396:	4b84      	ldr	r3, [pc, #528]	@ (800f5a8 <ip4_reass+0x2b0>)
 800f398:	881b      	ldrh	r3, [r3, #0]
 800f39a:	461a      	mov	r2, r3
 800f39c:	8c3b      	ldrh	r3, [r7, #32]
 800f39e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f3a0:	2b0a      	cmp	r3, #10
 800f3a2:	f300 812f 	bgt.w	800f604 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f3a6:	4b81      	ldr	r3, [pc, #516]	@ (800f5ac <ip4_reass+0x2b4>)
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	633b      	str	r3, [r7, #48]	@ 0x30
 800f3ac:	e015      	b.n	800f3da <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f3ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3b0:	695a      	ldr	r2, [r3, #20]
 800f3b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3b4:	68db      	ldr	r3, [r3, #12]
 800f3b6:	429a      	cmp	r2, r3
 800f3b8:	d10c      	bne.n	800f3d4 <ip4_reass+0xdc>
 800f3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3bc:	699a      	ldr	r2, [r3, #24]
 800f3be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3c0:	691b      	ldr	r3, [r3, #16]
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	d106      	bne.n	800f3d4 <ip4_reass+0xdc>
 800f3c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3c8:	899a      	ldrh	r2, [r3, #12]
 800f3ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3cc:	889b      	ldrh	r3, [r3, #4]
 800f3ce:	b29b      	uxth	r3, r3
 800f3d0:	429a      	cmp	r2, r3
 800f3d2:	d006      	beq.n	800f3e2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f3d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	633b      	str	r3, [r7, #48]	@ 0x30
 800f3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d1e6      	bne.n	800f3ae <ip4_reass+0xb6>
 800f3e0:	e000      	b.n	800f3e4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800f3e2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800f3e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d109      	bne.n	800f3fe <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f3ea:	8c3b      	ldrh	r3, [r7, #32]
 800f3ec:	4619      	mov	r1, r3
 800f3ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f3f0:	f7ff fdb0 	bl	800ef54 <ip_reass_enqueue_new_datagram>
 800f3f4:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d11c      	bne.n	800f436 <ip4_reass+0x13e>
      goto nullreturn;
 800f3fc:	e105      	b.n	800f60a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f3fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f400:	88db      	ldrh	r3, [r3, #6]
 800f402:	b29b      	uxth	r3, r3
 800f404:	4618      	mov	r0, r3
 800f406:	f7f6 faa9 	bl	800595c <lwip_htons>
 800f40a:	4603      	mov	r3, r0
 800f40c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f410:	2b00      	cmp	r3, #0
 800f412:	d110      	bne.n	800f436 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f416:	89db      	ldrh	r3, [r3, #14]
 800f418:	4618      	mov	r0, r3
 800f41a:	f7f6 fa9f 	bl	800595c <lwip_htons>
 800f41e:	4603      	mov	r3, r0
 800f420:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f424:	2b00      	cmp	r3, #0
 800f426:	d006      	beq.n	800f436 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f42a:	3308      	adds	r3, #8
 800f42c:	2214      	movs	r2, #20
 800f42e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f430:	4618      	mov	r0, r3
 800f432:	f000 fd76 	bl	800ff22 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f438:	88db      	ldrh	r3, [r3, #6]
 800f43a:	b29b      	uxth	r3, r3
 800f43c:	f003 0320 	and.w	r3, r3, #32
 800f440:	2b00      	cmp	r3, #0
 800f442:	bf0c      	ite	eq
 800f444:	2301      	moveq	r3, #1
 800f446:	2300      	movne	r3, #0
 800f448:	b2db      	uxtb	r3, r3
 800f44a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f44c:	69fb      	ldr	r3, [r7, #28]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d00e      	beq.n	800f470 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800f452:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800f454:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f456:	4413      	add	r3, r2
 800f458:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f45a:	8b7a      	ldrh	r2, [r7, #26]
 800f45c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f45e:	429a      	cmp	r2, r3
 800f460:	f0c0 80a0 	bcc.w	800f5a4 <ip4_reass+0x2ac>
 800f464:	8b7b      	ldrh	r3, [r7, #26]
 800f466:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800f46a:	4293      	cmp	r3, r2
 800f46c:	f200 809a 	bhi.w	800f5a4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f470:	69fa      	ldr	r2, [r7, #28]
 800f472:	6879      	ldr	r1, [r7, #4]
 800f474:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f476:	f7ff fdd5 	bl	800f024 <ip_reass_chain_frag_into_datagram_and_validate>
 800f47a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f47c:	697b      	ldr	r3, [r7, #20]
 800f47e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f482:	f000 809b 	beq.w	800f5bc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f486:	4b48      	ldr	r3, [pc, #288]	@ (800f5a8 <ip4_reass+0x2b0>)
 800f488:	881a      	ldrh	r2, [r3, #0]
 800f48a:	8c3b      	ldrh	r3, [r7, #32]
 800f48c:	4413      	add	r3, r2
 800f48e:	b29a      	uxth	r2, r3
 800f490:	4b45      	ldr	r3, [pc, #276]	@ (800f5a8 <ip4_reass+0x2b0>)
 800f492:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800f494:	69fb      	ldr	r3, [r7, #28]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d00d      	beq.n	800f4b6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800f49a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800f49c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f49e:	4413      	add	r3, r2
 800f4a0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800f4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4a4:	8a7a      	ldrh	r2, [r7, #18]
 800f4a6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4aa:	7f9b      	ldrb	r3, [r3, #30]
 800f4ac:	f043 0301 	orr.w	r3, r3, #1
 800f4b0:	b2da      	uxtb	r2, r3
 800f4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4b4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f4b6:	697b      	ldr	r3, [r7, #20]
 800f4b8:	2b01      	cmp	r3, #1
 800f4ba:	d171      	bne.n	800f5a0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800f4bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4be:	8b9b      	ldrh	r3, [r3, #28]
 800f4c0:	3314      	adds	r3, #20
 800f4c2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800f4c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4c6:	685b      	ldr	r3, [r3, #4]
 800f4c8:	685b      	ldr	r3, [r3, #4]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800f4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4d0:	685b      	ldr	r3, [r3, #4]
 800f4d2:	685b      	ldr	r3, [r3, #4]
 800f4d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f4d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4d8:	3308      	adds	r3, #8
 800f4da:	2214      	movs	r2, #20
 800f4dc:	4619      	mov	r1, r3
 800f4de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f4e0:	f000 fd1f 	bl	800ff22 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800f4e4:	8a3b      	ldrh	r3, [r7, #16]
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f7f6 fa38 	bl	800595c <lwip_htons>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	461a      	mov	r2, r3
 800f4f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4f2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f4f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	719a      	strb	r2, [r3, #6]
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f4fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f500:	2200      	movs	r2, #0
 800f502:	729a      	strb	r2, [r3, #10]
 800f504:	2200      	movs	r2, #0
 800f506:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800f508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f50a:	685b      	ldr	r3, [r3, #4]
 800f50c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800f50e:	e00d      	b.n	800f52c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800f510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f512:	685b      	ldr	r3, [r3, #4]
 800f514:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800f516:	2114      	movs	r1, #20
 800f518:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800f51a:	f7f7 fcf7 	bl	8006f0c <pbuf_remove_header>
      pbuf_cat(p, r);
 800f51e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800f520:	6878      	ldr	r0, [r7, #4]
 800f522:	f7f7 fe3b 	bl	800719c <pbuf_cat>
      r = iprh->next_pbuf;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800f52c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d1ee      	bne.n	800f510 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f532:	4b1e      	ldr	r3, [pc, #120]	@ (800f5ac <ip4_reass+0x2b4>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f538:	429a      	cmp	r2, r3
 800f53a:	d102      	bne.n	800f542 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800f53c:	2300      	movs	r3, #0
 800f53e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f540:	e010      	b.n	800f564 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f542:	4b1a      	ldr	r3, [pc, #104]	@ (800f5ac <ip4_reass+0x2b4>)
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f548:	e007      	b.n	800f55a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800f54a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f550:	429a      	cmp	r2, r3
 800f552:	d006      	beq.n	800f562 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f55a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d1f4      	bne.n	800f54a <ip4_reass+0x252>
 800f560:	e000      	b.n	800f564 <ip4_reass+0x26c>
          break;
 800f562:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800f564:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f566:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f568:	f7ff fd2e 	bl	800efc8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f7f7 fddb 	bl	8007128 <pbuf_clen>
 800f572:	4603      	mov	r3, r0
 800f574:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800f576:	4b0c      	ldr	r3, [pc, #48]	@ (800f5a8 <ip4_reass+0x2b0>)
 800f578:	881b      	ldrh	r3, [r3, #0]
 800f57a:	8c3a      	ldrh	r2, [r7, #32]
 800f57c:	429a      	cmp	r2, r3
 800f57e:	d906      	bls.n	800f58e <ip4_reass+0x296>
 800f580:	4b0b      	ldr	r3, [pc, #44]	@ (800f5b0 <ip4_reass+0x2b8>)
 800f582:	f240 229b 	movw	r2, #667	@ 0x29b
 800f586:	490b      	ldr	r1, [pc, #44]	@ (800f5b4 <ip4_reass+0x2bc>)
 800f588:	480b      	ldr	r0, [pc, #44]	@ (800f5b8 <ip4_reass+0x2c0>)
 800f58a:	f000 fbc5 	bl	800fd18 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800f58e:	4b06      	ldr	r3, [pc, #24]	@ (800f5a8 <ip4_reass+0x2b0>)
 800f590:	881a      	ldrh	r2, [r3, #0]
 800f592:	8c3b      	ldrh	r3, [r7, #32]
 800f594:	1ad3      	subs	r3, r2, r3
 800f596:	b29a      	uxth	r2, r3
 800f598:	4b03      	ldr	r3, [pc, #12]	@ (800f5a8 <ip4_reass+0x2b0>)
 800f59a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	e038      	b.n	800f612 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	e036      	b.n	800f612 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800f5a4:	bf00      	nop
 800f5a6:	e00a      	b.n	800f5be <ip4_reass+0x2c6>
 800f5a8:	20008928 	.word	0x20008928
 800f5ac:	20008924 	.word	0x20008924
 800f5b0:	080132e8 	.word	0x080132e8
 800f5b4:	08013458 	.word	0x08013458
 800f5b8:	08013330 	.word	0x08013330
    goto nullreturn_ipr;
 800f5bc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800f5be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d106      	bne.n	800f5d2 <ip4_reass+0x2da>
 800f5c4:	4b15      	ldr	r3, [pc, #84]	@ (800f61c <ip4_reass+0x324>)
 800f5c6:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800f5ca:	4915      	ldr	r1, [pc, #84]	@ (800f620 <ip4_reass+0x328>)
 800f5cc:	4815      	ldr	r0, [pc, #84]	@ (800f624 <ip4_reass+0x32c>)
 800f5ce:	f000 fba3 	bl	800fd18 <iprintf>
  if (ipr->p == NULL) {
 800f5d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5d4:	685b      	ldr	r3, [r3, #4]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d116      	bne.n	800f608 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800f5da:	4b13      	ldr	r3, [pc, #76]	@ (800f628 <ip4_reass+0x330>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	d006      	beq.n	800f5f2 <ip4_reass+0x2fa>
 800f5e4:	4b0d      	ldr	r3, [pc, #52]	@ (800f61c <ip4_reass+0x324>)
 800f5e6:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800f5ea:	4910      	ldr	r1, [pc, #64]	@ (800f62c <ip4_reass+0x334>)
 800f5ec:	480d      	ldr	r0, [pc, #52]	@ (800f624 <ip4_reass+0x32c>)
 800f5ee:	f000 fb93 	bl	800fd18 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800f5f2:	2100      	movs	r1, #0
 800f5f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f5f6:	f7ff fce7 	bl	800efc8 <ip_reass_dequeue_datagram>
 800f5fa:	e006      	b.n	800f60a <ip4_reass+0x312>
    goto nullreturn;
 800f5fc:	bf00      	nop
 800f5fe:	e004      	b.n	800f60a <ip4_reass+0x312>
    goto nullreturn;
 800f600:	bf00      	nop
 800f602:	e002      	b.n	800f60a <ip4_reass+0x312>
      goto nullreturn;
 800f604:	bf00      	nop
 800f606:	e000      	b.n	800f60a <ip4_reass+0x312>
  }

nullreturn:
 800f608:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800f60a:	6878      	ldr	r0, [r7, #4]
 800f60c:	f7f7 fd04 	bl	8007018 <pbuf_free>
  return NULL;
 800f610:	2300      	movs	r3, #0
}
 800f612:	4618      	mov	r0, r3
 800f614:	3738      	adds	r7, #56	@ 0x38
 800f616:	46bd      	mov	sp, r7
 800f618:	bd80      	pop	{r7, pc}
 800f61a:	bf00      	nop
 800f61c:	080132e8 	.word	0x080132e8
 800f620:	08013474 	.word	0x08013474
 800f624:	08013330 	.word	0x08013330
 800f628:	20008924 	.word	0x20008924
 800f62c:	08013480 	.word	0x08013480

0800f630 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800f630:	b580      	push	{r7, lr}
 800f632:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800f634:	2005      	movs	r0, #5
 800f636:	f7f6 fe09 	bl	800624c <memp_malloc>
 800f63a:	4603      	mov	r3, r0
}
 800f63c:	4618      	mov	r0, r3
 800f63e:	bd80      	pop	{r7, pc}

0800f640 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b082      	sub	sp, #8
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d106      	bne.n	800f65c <ip_frag_free_pbuf_custom_ref+0x1c>
 800f64e:	4b07      	ldr	r3, [pc, #28]	@ (800f66c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800f650:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800f654:	4906      	ldr	r1, [pc, #24]	@ (800f670 <ip_frag_free_pbuf_custom_ref+0x30>)
 800f656:	4807      	ldr	r0, [pc, #28]	@ (800f674 <ip_frag_free_pbuf_custom_ref+0x34>)
 800f658:	f000 fb5e 	bl	800fd18 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800f65c:	6879      	ldr	r1, [r7, #4]
 800f65e:	2005      	movs	r0, #5
 800f660:	f7f6 fe64 	bl	800632c <memp_free>
}
 800f664:	bf00      	nop
 800f666:	3708      	adds	r7, #8
 800f668:	46bd      	mov	sp, r7
 800f66a:	bd80      	pop	{r7, pc}
 800f66c:	080132e8 	.word	0x080132e8
 800f670:	080134a0 	.word	0x080134a0
 800f674:	08013330 	.word	0x08013330

0800f678 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b084      	sub	sp, #16
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d106      	bne.n	800f698 <ipfrag_free_pbuf_custom+0x20>
 800f68a:	4b11      	ldr	r3, [pc, #68]	@ (800f6d0 <ipfrag_free_pbuf_custom+0x58>)
 800f68c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800f690:	4910      	ldr	r1, [pc, #64]	@ (800f6d4 <ipfrag_free_pbuf_custom+0x5c>)
 800f692:	4811      	ldr	r0, [pc, #68]	@ (800f6d8 <ipfrag_free_pbuf_custom+0x60>)
 800f694:	f000 fb40 	bl	800fd18 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800f698:	68fa      	ldr	r2, [r7, #12]
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	429a      	cmp	r2, r3
 800f69e:	d006      	beq.n	800f6ae <ipfrag_free_pbuf_custom+0x36>
 800f6a0:	4b0b      	ldr	r3, [pc, #44]	@ (800f6d0 <ipfrag_free_pbuf_custom+0x58>)
 800f6a2:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800f6a6:	490d      	ldr	r1, [pc, #52]	@ (800f6dc <ipfrag_free_pbuf_custom+0x64>)
 800f6a8:	480b      	ldr	r0, [pc, #44]	@ (800f6d8 <ipfrag_free_pbuf_custom+0x60>)
 800f6aa:	f000 fb35 	bl	800fd18 <iprintf>
  if (pcr->original != NULL) {
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	695b      	ldr	r3, [r3, #20]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d004      	beq.n	800f6c0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	695b      	ldr	r3, [r3, #20]
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f7f7 fcac 	bl	8007018 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f6c0:	68f8      	ldr	r0, [r7, #12]
 800f6c2:	f7ff ffbd 	bl	800f640 <ip_frag_free_pbuf_custom_ref>
}
 800f6c6:	bf00      	nop
 800f6c8:	3710      	adds	r7, #16
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	bd80      	pop	{r7, pc}
 800f6ce:	bf00      	nop
 800f6d0:	080132e8 	.word	0x080132e8
 800f6d4:	080134ac 	.word	0x080134ac
 800f6d8:	08013330 	.word	0x08013330
 800f6dc:	080134b8 	.word	0x080134b8

0800f6e0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b094      	sub	sp, #80	@ 0x50
 800f6e4:	af02      	add	r7, sp, #8
 800f6e6:	60f8      	str	r0, [r7, #12]
 800f6e8:	60b9      	str	r1, [r7, #8]
 800f6ea:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800f6f2:	68bb      	ldr	r3, [r7, #8]
 800f6f4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f6f6:	3b14      	subs	r3, #20
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	da00      	bge.n	800f6fe <ip4_frag+0x1e>
 800f6fc:	3307      	adds	r3, #7
 800f6fe:	10db      	asrs	r3, r3, #3
 800f700:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800f702:	2314      	movs	r3, #20
 800f704:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	685b      	ldr	r3, [r3, #4]
 800f70a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800f70c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f70e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800f710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	f003 030f 	and.w	r3, r3, #15
 800f718:	b2db      	uxtb	r3, r3
 800f71a:	009b      	lsls	r3, r3, #2
 800f71c:	b2db      	uxtb	r3, r3
 800f71e:	2b14      	cmp	r3, #20
 800f720:	d002      	beq.n	800f728 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800f722:	f06f 0305 	mvn.w	r3, #5
 800f726:	e110      	b.n	800f94a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	895b      	ldrh	r3, [r3, #10]
 800f72c:	2b13      	cmp	r3, #19
 800f72e:	d809      	bhi.n	800f744 <ip4_frag+0x64>
 800f730:	4b88      	ldr	r3, [pc, #544]	@ (800f954 <ip4_frag+0x274>)
 800f732:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800f736:	4988      	ldr	r1, [pc, #544]	@ (800f958 <ip4_frag+0x278>)
 800f738:	4888      	ldr	r0, [pc, #544]	@ (800f95c <ip4_frag+0x27c>)
 800f73a:	f000 faed 	bl	800fd18 <iprintf>
 800f73e:	f06f 0305 	mvn.w	r3, #5
 800f742:	e102      	b.n	800f94a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800f744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f746:	88db      	ldrh	r3, [r3, #6]
 800f748:	b29b      	uxth	r3, r3
 800f74a:	4618      	mov	r0, r3
 800f74c:	f7f6 f906 	bl	800595c <lwip_htons>
 800f750:	4603      	mov	r3, r0
 800f752:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800f754:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f756:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f75a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800f75e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f760:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f764:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	891b      	ldrh	r3, [r3, #8]
 800f76a:	3b14      	subs	r3, #20
 800f76c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800f770:	e0e1      	b.n	800f936 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800f772:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800f774:	00db      	lsls	r3, r3, #3
 800f776:	b29b      	uxth	r3, r3
 800f778:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f77c:	4293      	cmp	r3, r2
 800f77e:	bf28      	it	cs
 800f780:	4613      	movcs	r3, r2
 800f782:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800f784:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f788:	2114      	movs	r1, #20
 800f78a:	200e      	movs	r0, #14
 800f78c:	f7f7 f960 	bl	8006a50 <pbuf_alloc>
 800f790:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800f792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f794:	2b00      	cmp	r3, #0
 800f796:	f000 80d5 	beq.w	800f944 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f79c:	895b      	ldrh	r3, [r3, #10]
 800f79e:	2b13      	cmp	r3, #19
 800f7a0:	d806      	bhi.n	800f7b0 <ip4_frag+0xd0>
 800f7a2:	4b6c      	ldr	r3, [pc, #432]	@ (800f954 <ip4_frag+0x274>)
 800f7a4:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800f7a8:	496d      	ldr	r1, [pc, #436]	@ (800f960 <ip4_frag+0x280>)
 800f7aa:	486c      	ldr	r0, [pc, #432]	@ (800f95c <ip4_frag+0x27c>)
 800f7ac:	f000 fab4 	bl	800fd18 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800f7b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7b2:	685b      	ldr	r3, [r3, #4]
 800f7b4:	2214      	movs	r2, #20
 800f7b6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	f000 fbb2 	bl	800ff22 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800f7be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7c0:	685b      	ldr	r3, [r3, #4]
 800f7c2:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800f7c4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f7c6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800f7ca:	e064      	b.n	800f896 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	895a      	ldrh	r2, [r3, #10]
 800f7d0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800f7d2:	1ad3      	subs	r3, r2, r3
 800f7d4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	895b      	ldrh	r3, [r3, #10]
 800f7da:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800f7dc:	429a      	cmp	r2, r3
 800f7de:	d906      	bls.n	800f7ee <ip4_frag+0x10e>
 800f7e0:	4b5c      	ldr	r3, [pc, #368]	@ (800f954 <ip4_frag+0x274>)
 800f7e2:	f240 322d 	movw	r2, #813	@ 0x32d
 800f7e6:	495f      	ldr	r1, [pc, #380]	@ (800f964 <ip4_frag+0x284>)
 800f7e8:	485c      	ldr	r0, [pc, #368]	@ (800f95c <ip4_frag+0x27c>)
 800f7ea:	f000 fa95 	bl	800fd18 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f7ee:	8bfa      	ldrh	r2, [r7, #30]
 800f7f0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800f7f4:	4293      	cmp	r3, r2
 800f7f6:	bf28      	it	cs
 800f7f8:	4613      	movcs	r3, r2
 800f7fa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800f7fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800f802:	2b00      	cmp	r3, #0
 800f804:	d105      	bne.n	800f812 <ip4_frag+0x132>
        poff = 0;
 800f806:	2300      	movs	r3, #0
 800f808:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	60fb      	str	r3, [r7, #12]
        continue;
 800f810:	e041      	b.n	800f896 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800f812:	f7ff ff0d 	bl	800f630 <ip_frag_alloc_pbuf_custom_ref>
 800f816:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800f818:	69bb      	ldr	r3, [r7, #24]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d103      	bne.n	800f826 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800f81e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f820:	f7f7 fbfa 	bl	8007018 <pbuf_free>
        goto memerr;
 800f824:	e08f      	b.n	800f946 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f826:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f82c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800f82e:	4413      	add	r3, r2
 800f830:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800f834:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800f838:	9201      	str	r2, [sp, #4]
 800f83a:	9300      	str	r3, [sp, #0]
 800f83c:	4603      	mov	r3, r0
 800f83e:	2241      	movs	r2, #65	@ 0x41
 800f840:	2000      	movs	r0, #0
 800f842:	f7f7 fa2f 	bl	8006ca4 <pbuf_alloced_custom>
 800f846:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800f848:	697b      	ldr	r3, [r7, #20]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d106      	bne.n	800f85c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800f84e:	69b8      	ldr	r0, [r7, #24]
 800f850:	f7ff fef6 	bl	800f640 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800f854:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f856:	f7f7 fbdf 	bl	8007018 <pbuf_free>
        goto memerr;
 800f85a:	e074      	b.n	800f946 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800f85c:	68f8      	ldr	r0, [r7, #12]
 800f85e:	f7f7 fc7b 	bl	8007158 <pbuf_ref>
      pcr->original = p;
 800f862:	69bb      	ldr	r3, [r7, #24]
 800f864:	68fa      	ldr	r2, [r7, #12]
 800f866:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f868:	69bb      	ldr	r3, [r7, #24]
 800f86a:	4a3f      	ldr	r2, [pc, #252]	@ (800f968 <ip4_frag+0x288>)
 800f86c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f86e:	6979      	ldr	r1, [r7, #20]
 800f870:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f872:	f7f7 fc93 	bl	800719c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800f876:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800f87a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800f87e:	1ad3      	subs	r3, r2, r3
 800f880:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800f884:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d004      	beq.n	800f896 <ip4_frag+0x1b6>
        poff = 0;
 800f88c:	2300      	movs	r3, #0
 800f88e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800f896:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d196      	bne.n	800f7cc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800f89e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800f8a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800f8a4:	4413      	add	r3, r2
 800f8a6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f8ac:	f1a3 0213 	sub.w	r2, r3, #19
 800f8b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	bfcc      	ite	gt
 800f8b8:	2301      	movgt	r3, #1
 800f8ba:	2300      	movle	r3, #0
 800f8bc:	b2db      	uxtb	r3, r3
 800f8be:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800f8c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800f8c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f8c8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800f8ca:	6a3b      	ldr	r3, [r7, #32]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d002      	beq.n	800f8d6 <ip4_frag+0x1f6>
 800f8d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d003      	beq.n	800f8de <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800f8d6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f8d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800f8dc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800f8de:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f7f6 f83b 	bl	800595c <lwip_htons>
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	461a      	mov	r2, r3
 800f8ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8ec:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800f8ee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f8f0:	3314      	adds	r3, #20
 800f8f2:	b29b      	uxth	r3, r3
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	f7f6 f831 	bl	800595c <lwip_htons>
 800f8fa:	4603      	mov	r3, r0
 800f8fc:	461a      	mov	r2, r3
 800f8fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f900:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800f902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f904:	2200      	movs	r2, #0
 800f906:	729a      	strb	r2, [r3, #10]
 800f908:	2200      	movs	r2, #0
 800f90a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800f90c:	68bb      	ldr	r3, [r7, #8]
 800f90e:	695b      	ldr	r3, [r3, #20]
 800f910:	687a      	ldr	r2, [r7, #4]
 800f912:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f914:	68b8      	ldr	r0, [r7, #8]
 800f916:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800f918:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f91a:	f7f7 fb7d 	bl	8007018 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800f91e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f922:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f924:	1ad3      	subs	r3, r2, r3
 800f926:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800f92a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800f92e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800f930:	4413      	add	r3, r2
 800f932:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800f936:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	f47f af19 	bne.w	800f772 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800f940:	2300      	movs	r3, #0
 800f942:	e002      	b.n	800f94a <ip4_frag+0x26a>
      goto memerr;
 800f944:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800f946:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f94a:	4618      	mov	r0, r3
 800f94c:	3748      	adds	r7, #72	@ 0x48
 800f94e:	46bd      	mov	sp, r7
 800f950:	bd80      	pop	{r7, pc}
 800f952:	bf00      	nop
 800f954:	080132e8 	.word	0x080132e8
 800f958:	080134c4 	.word	0x080134c4
 800f95c:	08013330 	.word	0x08013330
 800f960:	080134e0 	.word	0x080134e0
 800f964:	08013500 	.word	0x08013500
 800f968:	0800f679 	.word	0x0800f679

0800f96c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800f96c:	b580      	push	{r7, lr}
 800f96e:	b086      	sub	sp, #24
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
 800f974:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800f976:	230e      	movs	r3, #14
 800f978:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	895b      	ldrh	r3, [r3, #10]
 800f97e:	2b0e      	cmp	r3, #14
 800f980:	d96e      	bls.n	800fa60 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	7bdb      	ldrb	r3, [r3, #15]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d106      	bne.n	800f998 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800f98a:	683b      	ldr	r3, [r7, #0]
 800f98c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f990:	3301      	adds	r3, #1
 800f992:	b2da      	uxtb	r2, r3
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	685b      	ldr	r3, [r3, #4]
 800f99c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800f99e:	693b      	ldr	r3, [r7, #16]
 800f9a0:	7b1a      	ldrb	r2, [r3, #12]
 800f9a2:	7b5b      	ldrb	r3, [r3, #13]
 800f9a4:	021b      	lsls	r3, r3, #8
 800f9a6:	4313      	orrs	r3, r2
 800f9a8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800f9aa:	693b      	ldr	r3, [r7, #16]
 800f9ac:	781b      	ldrb	r3, [r3, #0]
 800f9ae:	f003 0301 	and.w	r3, r3, #1
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d023      	beq.n	800f9fe <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800f9b6:	693b      	ldr	r3, [r7, #16]
 800f9b8:	781b      	ldrb	r3, [r3, #0]
 800f9ba:	2b01      	cmp	r3, #1
 800f9bc:	d10f      	bne.n	800f9de <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f9be:	693b      	ldr	r3, [r7, #16]
 800f9c0:	785b      	ldrb	r3, [r3, #1]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d11b      	bne.n	800f9fe <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800f9c6:	693b      	ldr	r3, [r7, #16]
 800f9c8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f9ca:	2b5e      	cmp	r3, #94	@ 0x5e
 800f9cc:	d117      	bne.n	800f9fe <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	7b5b      	ldrb	r3, [r3, #13]
 800f9d2:	f043 0310 	orr.w	r3, r3, #16
 800f9d6:	b2da      	uxtb	r2, r3
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	735a      	strb	r2, [r3, #13]
 800f9dc:	e00f      	b.n	800f9fe <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800f9de:	693b      	ldr	r3, [r7, #16]
 800f9e0:	2206      	movs	r2, #6
 800f9e2:	4928      	ldr	r1, [pc, #160]	@ (800fa84 <ethernet_input+0x118>)
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	f000 f9ec 	bl	800fdc2 <memcmp>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d106      	bne.n	800f9fe <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	7b5b      	ldrb	r3, [r3, #13]
 800f9f4:	f043 0308 	orr.w	r3, r3, #8
 800f9f8:	b2da      	uxtb	r2, r3
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800f9fe:	89fb      	ldrh	r3, [r7, #14]
 800fa00:	2b08      	cmp	r3, #8
 800fa02:	d003      	beq.n	800fa0c <ethernet_input+0xa0>
 800fa04:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800fa08:	d014      	beq.n	800fa34 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800fa0a:	e032      	b.n	800fa72 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fa0c:	683b      	ldr	r3, [r7, #0]
 800fa0e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fa12:	f003 0308 	and.w	r3, r3, #8
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d024      	beq.n	800fa64 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800fa1a:	8afb      	ldrh	r3, [r7, #22]
 800fa1c:	4619      	mov	r1, r3
 800fa1e:	6878      	ldr	r0, [r7, #4]
 800fa20:	f7f7 fa74 	bl	8006f0c <pbuf_remove_header>
 800fa24:	4603      	mov	r3, r0
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d11e      	bne.n	800fa68 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800fa2a:	6839      	ldr	r1, [r7, #0]
 800fa2c:	6878      	ldr	r0, [r7, #4]
 800fa2e:	f7fe fea1 	bl	800e774 <ip4_input>
      break;
 800fa32:	e013      	b.n	800fa5c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fa34:	683b      	ldr	r3, [r7, #0]
 800fa36:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fa3a:	f003 0308 	and.w	r3, r3, #8
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d014      	beq.n	800fa6c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800fa42:	8afb      	ldrh	r3, [r7, #22]
 800fa44:	4619      	mov	r1, r3
 800fa46:	6878      	ldr	r0, [r7, #4]
 800fa48:	f7f7 fa60 	bl	8006f0c <pbuf_remove_header>
 800fa4c:	4603      	mov	r3, r0
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d10e      	bne.n	800fa70 <ethernet_input+0x104>
        etharp_input(p, netif);
 800fa52:	6839      	ldr	r1, [r7, #0]
 800fa54:	6878      	ldr	r0, [r7, #4]
 800fa56:	f7fe f841 	bl	800dadc <etharp_input>
      break;
 800fa5a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	e00c      	b.n	800fa7a <ethernet_input+0x10e>
    goto free_and_return;
 800fa60:	bf00      	nop
 800fa62:	e006      	b.n	800fa72 <ethernet_input+0x106>
        goto free_and_return;
 800fa64:	bf00      	nop
 800fa66:	e004      	b.n	800fa72 <ethernet_input+0x106>
        goto free_and_return;
 800fa68:	bf00      	nop
 800fa6a:	e002      	b.n	800fa72 <ethernet_input+0x106>
        goto free_and_return;
 800fa6c:	bf00      	nop
 800fa6e:	e000      	b.n	800fa72 <ethernet_input+0x106>
        goto free_and_return;
 800fa70:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800fa72:	6878      	ldr	r0, [r7, #4]
 800fa74:	f7f7 fad0 	bl	8007018 <pbuf_free>
  return ERR_OK;
 800fa78:	2300      	movs	r3, #0
}
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	3718      	adds	r7, #24
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bd80      	pop	{r7, pc}
 800fa82:	bf00      	nop
 800fa84:	0801369c 	.word	0x0801369c

0800fa88 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b086      	sub	sp, #24
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	60f8      	str	r0, [r7, #12]
 800fa90:	60b9      	str	r1, [r7, #8]
 800fa92:	607a      	str	r2, [r7, #4]
 800fa94:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800fa96:	8c3b      	ldrh	r3, [r7, #32]
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f7f5 ff5f 	bl	800595c <lwip_htons>
 800fa9e:	4603      	mov	r3, r0
 800faa0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800faa2:	210e      	movs	r1, #14
 800faa4:	68b8      	ldr	r0, [r7, #8]
 800faa6:	f7f7 fa21 	bl	8006eec <pbuf_add_header>
 800faaa:	4603      	mov	r3, r0
 800faac:	2b00      	cmp	r3, #0
 800faae:	d125      	bne.n	800fafc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800fab0:	68bb      	ldr	r3, [r7, #8]
 800fab2:	685b      	ldr	r3, [r3, #4]
 800fab4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800fab6:	693b      	ldr	r3, [r7, #16]
 800fab8:	8afa      	ldrh	r2, [r7, #22]
 800faba:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800fabc:	693b      	ldr	r3, [r7, #16]
 800fabe:	2206      	movs	r2, #6
 800fac0:	6839      	ldr	r1, [r7, #0]
 800fac2:	4618      	mov	r0, r3
 800fac4:	f000 fa2d 	bl	800ff22 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800fac8:	693b      	ldr	r3, [r7, #16]
 800faca:	3306      	adds	r3, #6
 800facc:	2206      	movs	r2, #6
 800face:	6879      	ldr	r1, [r7, #4]
 800fad0:	4618      	mov	r0, r3
 800fad2:	f000 fa26 	bl	800ff22 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800fadc:	2b06      	cmp	r3, #6
 800fade:	d006      	beq.n	800faee <ethernet_output+0x66>
 800fae0:	4b0a      	ldr	r3, [pc, #40]	@ (800fb0c <ethernet_output+0x84>)
 800fae2:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800fae6:	490a      	ldr	r1, [pc, #40]	@ (800fb10 <ethernet_output+0x88>)
 800fae8:	480a      	ldr	r0, [pc, #40]	@ (800fb14 <ethernet_output+0x8c>)
 800faea:	f000 f915 	bl	800fd18 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	699b      	ldr	r3, [r3, #24]
 800faf2:	68b9      	ldr	r1, [r7, #8]
 800faf4:	68f8      	ldr	r0, [r7, #12]
 800faf6:	4798      	blx	r3
 800faf8:	4603      	mov	r3, r0
 800fafa:	e002      	b.n	800fb02 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800fafc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800fafe:	f06f 0301 	mvn.w	r3, #1
}
 800fb02:	4618      	mov	r0, r3
 800fb04:	3718      	adds	r7, #24
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bd80      	pop	{r7, pc}
 800fb0a:	bf00      	nop
 800fb0c:	08013510 	.word	0x08013510
 800fb10:	08013548 	.word	0x08013548
 800fb14:	0801357c 	.word	0x0801357c

0800fb18 <rand>:
 800fb18:	4b16      	ldr	r3, [pc, #88]	@ (800fb74 <rand+0x5c>)
 800fb1a:	b510      	push	{r4, lr}
 800fb1c:	681c      	ldr	r4, [r3, #0]
 800fb1e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fb20:	b9b3      	cbnz	r3, 800fb50 <rand+0x38>
 800fb22:	2018      	movs	r0, #24
 800fb24:	f000 fa74 	bl	8010010 <malloc>
 800fb28:	4602      	mov	r2, r0
 800fb2a:	6320      	str	r0, [r4, #48]	@ 0x30
 800fb2c:	b920      	cbnz	r0, 800fb38 <rand+0x20>
 800fb2e:	4b12      	ldr	r3, [pc, #72]	@ (800fb78 <rand+0x60>)
 800fb30:	4812      	ldr	r0, [pc, #72]	@ (800fb7c <rand+0x64>)
 800fb32:	2152      	movs	r1, #82	@ 0x52
 800fb34:	f000 fa04 	bl	800ff40 <__assert_func>
 800fb38:	4911      	ldr	r1, [pc, #68]	@ (800fb80 <rand+0x68>)
 800fb3a:	4b12      	ldr	r3, [pc, #72]	@ (800fb84 <rand+0x6c>)
 800fb3c:	e9c0 1300 	strd	r1, r3, [r0]
 800fb40:	4b11      	ldr	r3, [pc, #68]	@ (800fb88 <rand+0x70>)
 800fb42:	6083      	str	r3, [r0, #8]
 800fb44:	230b      	movs	r3, #11
 800fb46:	8183      	strh	r3, [r0, #12]
 800fb48:	2100      	movs	r1, #0
 800fb4a:	2001      	movs	r0, #1
 800fb4c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800fb50:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800fb52:	480e      	ldr	r0, [pc, #56]	@ (800fb8c <rand+0x74>)
 800fb54:	690b      	ldr	r3, [r1, #16]
 800fb56:	694c      	ldr	r4, [r1, #20]
 800fb58:	4a0d      	ldr	r2, [pc, #52]	@ (800fb90 <rand+0x78>)
 800fb5a:	4358      	muls	r0, r3
 800fb5c:	fb02 0004 	mla	r0, r2, r4, r0
 800fb60:	fba3 3202 	umull	r3, r2, r3, r2
 800fb64:	3301      	adds	r3, #1
 800fb66:	eb40 0002 	adc.w	r0, r0, r2
 800fb6a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800fb6e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800fb72:	bd10      	pop	{r4, pc}
 800fb74:	20000038 	.word	0x20000038
 800fb78:	080136aa 	.word	0x080136aa
 800fb7c:	080136c1 	.word	0x080136c1
 800fb80:	abcd330e 	.word	0xabcd330e
 800fb84:	e66d1234 	.word	0xe66d1234
 800fb88:	0005deec 	.word	0x0005deec
 800fb8c:	5851f42d 	.word	0x5851f42d
 800fb90:	4c957f2d 	.word	0x4c957f2d

0800fb94 <std>:
 800fb94:	2300      	movs	r3, #0
 800fb96:	b510      	push	{r4, lr}
 800fb98:	4604      	mov	r4, r0
 800fb9a:	e9c0 3300 	strd	r3, r3, [r0]
 800fb9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fba2:	6083      	str	r3, [r0, #8]
 800fba4:	8181      	strh	r1, [r0, #12]
 800fba6:	6643      	str	r3, [r0, #100]	@ 0x64
 800fba8:	81c2      	strh	r2, [r0, #14]
 800fbaa:	6183      	str	r3, [r0, #24]
 800fbac:	4619      	mov	r1, r3
 800fbae:	2208      	movs	r2, #8
 800fbb0:	305c      	adds	r0, #92	@ 0x5c
 800fbb2:	f000 f916 	bl	800fde2 <memset>
 800fbb6:	4b0d      	ldr	r3, [pc, #52]	@ (800fbec <std+0x58>)
 800fbb8:	6263      	str	r3, [r4, #36]	@ 0x24
 800fbba:	4b0d      	ldr	r3, [pc, #52]	@ (800fbf0 <std+0x5c>)
 800fbbc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fbbe:	4b0d      	ldr	r3, [pc, #52]	@ (800fbf4 <std+0x60>)
 800fbc0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fbc2:	4b0d      	ldr	r3, [pc, #52]	@ (800fbf8 <std+0x64>)
 800fbc4:	6323      	str	r3, [r4, #48]	@ 0x30
 800fbc6:	4b0d      	ldr	r3, [pc, #52]	@ (800fbfc <std+0x68>)
 800fbc8:	6224      	str	r4, [r4, #32]
 800fbca:	429c      	cmp	r4, r3
 800fbcc:	d006      	beq.n	800fbdc <std+0x48>
 800fbce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fbd2:	4294      	cmp	r4, r2
 800fbd4:	d002      	beq.n	800fbdc <std+0x48>
 800fbd6:	33d0      	adds	r3, #208	@ 0xd0
 800fbd8:	429c      	cmp	r4, r3
 800fbda:	d105      	bne.n	800fbe8 <std+0x54>
 800fbdc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fbe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbe4:	f000 b992 	b.w	800ff0c <__retarget_lock_init_recursive>
 800fbe8:	bd10      	pop	{r4, pc}
 800fbea:	bf00      	nop
 800fbec:	0800fd3d 	.word	0x0800fd3d
 800fbf0:	0800fd5f 	.word	0x0800fd5f
 800fbf4:	0800fd97 	.word	0x0800fd97
 800fbf8:	0800fdbb 	.word	0x0800fdbb
 800fbfc:	2000892c 	.word	0x2000892c

0800fc00 <stdio_exit_handler>:
 800fc00:	4a02      	ldr	r2, [pc, #8]	@ (800fc0c <stdio_exit_handler+0xc>)
 800fc02:	4903      	ldr	r1, [pc, #12]	@ (800fc10 <stdio_exit_handler+0x10>)
 800fc04:	4803      	ldr	r0, [pc, #12]	@ (800fc14 <stdio_exit_handler+0x14>)
 800fc06:	f000 b869 	b.w	800fcdc <_fwalk_sglue>
 800fc0a:	bf00      	nop
 800fc0c:	2000002c 	.word	0x2000002c
 800fc10:	08010825 	.word	0x08010825
 800fc14:	2000003c 	.word	0x2000003c

0800fc18 <cleanup_stdio>:
 800fc18:	6841      	ldr	r1, [r0, #4]
 800fc1a:	4b0c      	ldr	r3, [pc, #48]	@ (800fc4c <cleanup_stdio+0x34>)
 800fc1c:	4299      	cmp	r1, r3
 800fc1e:	b510      	push	{r4, lr}
 800fc20:	4604      	mov	r4, r0
 800fc22:	d001      	beq.n	800fc28 <cleanup_stdio+0x10>
 800fc24:	f000 fdfe 	bl	8010824 <_fflush_r>
 800fc28:	68a1      	ldr	r1, [r4, #8]
 800fc2a:	4b09      	ldr	r3, [pc, #36]	@ (800fc50 <cleanup_stdio+0x38>)
 800fc2c:	4299      	cmp	r1, r3
 800fc2e:	d002      	beq.n	800fc36 <cleanup_stdio+0x1e>
 800fc30:	4620      	mov	r0, r4
 800fc32:	f000 fdf7 	bl	8010824 <_fflush_r>
 800fc36:	68e1      	ldr	r1, [r4, #12]
 800fc38:	4b06      	ldr	r3, [pc, #24]	@ (800fc54 <cleanup_stdio+0x3c>)
 800fc3a:	4299      	cmp	r1, r3
 800fc3c:	d004      	beq.n	800fc48 <cleanup_stdio+0x30>
 800fc3e:	4620      	mov	r0, r4
 800fc40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc44:	f000 bdee 	b.w	8010824 <_fflush_r>
 800fc48:	bd10      	pop	{r4, pc}
 800fc4a:	bf00      	nop
 800fc4c:	2000892c 	.word	0x2000892c
 800fc50:	20008994 	.word	0x20008994
 800fc54:	200089fc 	.word	0x200089fc

0800fc58 <global_stdio_init.part.0>:
 800fc58:	b510      	push	{r4, lr}
 800fc5a:	4b0b      	ldr	r3, [pc, #44]	@ (800fc88 <global_stdio_init.part.0+0x30>)
 800fc5c:	4c0b      	ldr	r4, [pc, #44]	@ (800fc8c <global_stdio_init.part.0+0x34>)
 800fc5e:	4a0c      	ldr	r2, [pc, #48]	@ (800fc90 <global_stdio_init.part.0+0x38>)
 800fc60:	601a      	str	r2, [r3, #0]
 800fc62:	4620      	mov	r0, r4
 800fc64:	2200      	movs	r2, #0
 800fc66:	2104      	movs	r1, #4
 800fc68:	f7ff ff94 	bl	800fb94 <std>
 800fc6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fc70:	2201      	movs	r2, #1
 800fc72:	2109      	movs	r1, #9
 800fc74:	f7ff ff8e 	bl	800fb94 <std>
 800fc78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fc7c:	2202      	movs	r2, #2
 800fc7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc82:	2112      	movs	r1, #18
 800fc84:	f7ff bf86 	b.w	800fb94 <std>
 800fc88:	20008a64 	.word	0x20008a64
 800fc8c:	2000892c 	.word	0x2000892c
 800fc90:	0800fc01 	.word	0x0800fc01

0800fc94 <__sfp_lock_acquire>:
 800fc94:	4801      	ldr	r0, [pc, #4]	@ (800fc9c <__sfp_lock_acquire+0x8>)
 800fc96:	f000 b93a 	b.w	800ff0e <__retarget_lock_acquire_recursive>
 800fc9a:	bf00      	nop
 800fc9c:	20008a6d 	.word	0x20008a6d

0800fca0 <__sfp_lock_release>:
 800fca0:	4801      	ldr	r0, [pc, #4]	@ (800fca8 <__sfp_lock_release+0x8>)
 800fca2:	f000 b935 	b.w	800ff10 <__retarget_lock_release_recursive>
 800fca6:	bf00      	nop
 800fca8:	20008a6d 	.word	0x20008a6d

0800fcac <__sinit>:
 800fcac:	b510      	push	{r4, lr}
 800fcae:	4604      	mov	r4, r0
 800fcb0:	f7ff fff0 	bl	800fc94 <__sfp_lock_acquire>
 800fcb4:	6a23      	ldr	r3, [r4, #32]
 800fcb6:	b11b      	cbz	r3, 800fcc0 <__sinit+0x14>
 800fcb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fcbc:	f7ff bff0 	b.w	800fca0 <__sfp_lock_release>
 800fcc0:	4b04      	ldr	r3, [pc, #16]	@ (800fcd4 <__sinit+0x28>)
 800fcc2:	6223      	str	r3, [r4, #32]
 800fcc4:	4b04      	ldr	r3, [pc, #16]	@ (800fcd8 <__sinit+0x2c>)
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d1f5      	bne.n	800fcb8 <__sinit+0xc>
 800fccc:	f7ff ffc4 	bl	800fc58 <global_stdio_init.part.0>
 800fcd0:	e7f2      	b.n	800fcb8 <__sinit+0xc>
 800fcd2:	bf00      	nop
 800fcd4:	0800fc19 	.word	0x0800fc19
 800fcd8:	20008a64 	.word	0x20008a64

0800fcdc <_fwalk_sglue>:
 800fcdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fce0:	4607      	mov	r7, r0
 800fce2:	4688      	mov	r8, r1
 800fce4:	4614      	mov	r4, r2
 800fce6:	2600      	movs	r6, #0
 800fce8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fcec:	f1b9 0901 	subs.w	r9, r9, #1
 800fcf0:	d505      	bpl.n	800fcfe <_fwalk_sglue+0x22>
 800fcf2:	6824      	ldr	r4, [r4, #0]
 800fcf4:	2c00      	cmp	r4, #0
 800fcf6:	d1f7      	bne.n	800fce8 <_fwalk_sglue+0xc>
 800fcf8:	4630      	mov	r0, r6
 800fcfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcfe:	89ab      	ldrh	r3, [r5, #12]
 800fd00:	2b01      	cmp	r3, #1
 800fd02:	d907      	bls.n	800fd14 <_fwalk_sglue+0x38>
 800fd04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fd08:	3301      	adds	r3, #1
 800fd0a:	d003      	beq.n	800fd14 <_fwalk_sglue+0x38>
 800fd0c:	4629      	mov	r1, r5
 800fd0e:	4638      	mov	r0, r7
 800fd10:	47c0      	blx	r8
 800fd12:	4306      	orrs	r6, r0
 800fd14:	3568      	adds	r5, #104	@ 0x68
 800fd16:	e7e9      	b.n	800fcec <_fwalk_sglue+0x10>

0800fd18 <iprintf>:
 800fd18:	b40f      	push	{r0, r1, r2, r3}
 800fd1a:	b507      	push	{r0, r1, r2, lr}
 800fd1c:	4906      	ldr	r1, [pc, #24]	@ (800fd38 <iprintf+0x20>)
 800fd1e:	ab04      	add	r3, sp, #16
 800fd20:	6808      	ldr	r0, [r1, #0]
 800fd22:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd26:	6881      	ldr	r1, [r0, #8]
 800fd28:	9301      	str	r3, [sp, #4]
 800fd2a:	f000 fa51 	bl	80101d0 <_vfiprintf_r>
 800fd2e:	b003      	add	sp, #12
 800fd30:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd34:	b004      	add	sp, #16
 800fd36:	4770      	bx	lr
 800fd38:	20000038 	.word	0x20000038

0800fd3c <__sread>:
 800fd3c:	b510      	push	{r4, lr}
 800fd3e:	460c      	mov	r4, r1
 800fd40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd44:	f000 f89a 	bl	800fe7c <_read_r>
 800fd48:	2800      	cmp	r0, #0
 800fd4a:	bfab      	itete	ge
 800fd4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fd4e:	89a3      	ldrhlt	r3, [r4, #12]
 800fd50:	181b      	addge	r3, r3, r0
 800fd52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fd56:	bfac      	ite	ge
 800fd58:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fd5a:	81a3      	strhlt	r3, [r4, #12]
 800fd5c:	bd10      	pop	{r4, pc}

0800fd5e <__swrite>:
 800fd5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd62:	461f      	mov	r7, r3
 800fd64:	898b      	ldrh	r3, [r1, #12]
 800fd66:	05db      	lsls	r3, r3, #23
 800fd68:	4605      	mov	r5, r0
 800fd6a:	460c      	mov	r4, r1
 800fd6c:	4616      	mov	r6, r2
 800fd6e:	d505      	bpl.n	800fd7c <__swrite+0x1e>
 800fd70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd74:	2302      	movs	r3, #2
 800fd76:	2200      	movs	r2, #0
 800fd78:	f000 f86e 	bl	800fe58 <_lseek_r>
 800fd7c:	89a3      	ldrh	r3, [r4, #12]
 800fd7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fd86:	81a3      	strh	r3, [r4, #12]
 800fd88:	4632      	mov	r2, r6
 800fd8a:	463b      	mov	r3, r7
 800fd8c:	4628      	mov	r0, r5
 800fd8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd92:	f000 b885 	b.w	800fea0 <_write_r>

0800fd96 <__sseek>:
 800fd96:	b510      	push	{r4, lr}
 800fd98:	460c      	mov	r4, r1
 800fd9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd9e:	f000 f85b 	bl	800fe58 <_lseek_r>
 800fda2:	1c43      	adds	r3, r0, #1
 800fda4:	89a3      	ldrh	r3, [r4, #12]
 800fda6:	bf15      	itete	ne
 800fda8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fdaa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fdae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fdb2:	81a3      	strheq	r3, [r4, #12]
 800fdb4:	bf18      	it	ne
 800fdb6:	81a3      	strhne	r3, [r4, #12]
 800fdb8:	bd10      	pop	{r4, pc}

0800fdba <__sclose>:
 800fdba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdbe:	f000 b83b 	b.w	800fe38 <_close_r>

0800fdc2 <memcmp>:
 800fdc2:	b510      	push	{r4, lr}
 800fdc4:	3901      	subs	r1, #1
 800fdc6:	4402      	add	r2, r0
 800fdc8:	4290      	cmp	r0, r2
 800fdca:	d101      	bne.n	800fdd0 <memcmp+0xe>
 800fdcc:	2000      	movs	r0, #0
 800fdce:	e005      	b.n	800fddc <memcmp+0x1a>
 800fdd0:	7803      	ldrb	r3, [r0, #0]
 800fdd2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fdd6:	42a3      	cmp	r3, r4
 800fdd8:	d001      	beq.n	800fdde <memcmp+0x1c>
 800fdda:	1b18      	subs	r0, r3, r4
 800fddc:	bd10      	pop	{r4, pc}
 800fdde:	3001      	adds	r0, #1
 800fde0:	e7f2      	b.n	800fdc8 <memcmp+0x6>

0800fde2 <memset>:
 800fde2:	4402      	add	r2, r0
 800fde4:	4603      	mov	r3, r0
 800fde6:	4293      	cmp	r3, r2
 800fde8:	d100      	bne.n	800fdec <memset+0xa>
 800fdea:	4770      	bx	lr
 800fdec:	f803 1b01 	strb.w	r1, [r3], #1
 800fdf0:	e7f9      	b.n	800fde6 <memset+0x4>

0800fdf2 <strcat>:
 800fdf2:	b510      	push	{r4, lr}
 800fdf4:	4602      	mov	r2, r0
 800fdf6:	7814      	ldrb	r4, [r2, #0]
 800fdf8:	4613      	mov	r3, r2
 800fdfa:	3201      	adds	r2, #1
 800fdfc:	2c00      	cmp	r4, #0
 800fdfe:	d1fa      	bne.n	800fdf6 <strcat+0x4>
 800fe00:	3b01      	subs	r3, #1
 800fe02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fe06:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fe0a:	2a00      	cmp	r2, #0
 800fe0c:	d1f9      	bne.n	800fe02 <strcat+0x10>
 800fe0e:	bd10      	pop	{r4, pc}

0800fe10 <strncpy>:
 800fe10:	b510      	push	{r4, lr}
 800fe12:	3901      	subs	r1, #1
 800fe14:	4603      	mov	r3, r0
 800fe16:	b132      	cbz	r2, 800fe26 <strncpy+0x16>
 800fe18:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fe1c:	f803 4b01 	strb.w	r4, [r3], #1
 800fe20:	3a01      	subs	r2, #1
 800fe22:	2c00      	cmp	r4, #0
 800fe24:	d1f7      	bne.n	800fe16 <strncpy+0x6>
 800fe26:	441a      	add	r2, r3
 800fe28:	2100      	movs	r1, #0
 800fe2a:	4293      	cmp	r3, r2
 800fe2c:	d100      	bne.n	800fe30 <strncpy+0x20>
 800fe2e:	bd10      	pop	{r4, pc}
 800fe30:	f803 1b01 	strb.w	r1, [r3], #1
 800fe34:	e7f9      	b.n	800fe2a <strncpy+0x1a>
	...

0800fe38 <_close_r>:
 800fe38:	b538      	push	{r3, r4, r5, lr}
 800fe3a:	4d06      	ldr	r5, [pc, #24]	@ (800fe54 <_close_r+0x1c>)
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	4604      	mov	r4, r0
 800fe40:	4608      	mov	r0, r1
 800fe42:	602b      	str	r3, [r5, #0]
 800fe44:	f7f1 f81c 	bl	8000e80 <_close>
 800fe48:	1c43      	adds	r3, r0, #1
 800fe4a:	d102      	bne.n	800fe52 <_close_r+0x1a>
 800fe4c:	682b      	ldr	r3, [r5, #0]
 800fe4e:	b103      	cbz	r3, 800fe52 <_close_r+0x1a>
 800fe50:	6023      	str	r3, [r4, #0]
 800fe52:	bd38      	pop	{r3, r4, r5, pc}
 800fe54:	20008a68 	.word	0x20008a68

0800fe58 <_lseek_r>:
 800fe58:	b538      	push	{r3, r4, r5, lr}
 800fe5a:	4d07      	ldr	r5, [pc, #28]	@ (800fe78 <_lseek_r+0x20>)
 800fe5c:	4604      	mov	r4, r0
 800fe5e:	4608      	mov	r0, r1
 800fe60:	4611      	mov	r1, r2
 800fe62:	2200      	movs	r2, #0
 800fe64:	602a      	str	r2, [r5, #0]
 800fe66:	461a      	mov	r2, r3
 800fe68:	f7f1 f831 	bl	8000ece <_lseek>
 800fe6c:	1c43      	adds	r3, r0, #1
 800fe6e:	d102      	bne.n	800fe76 <_lseek_r+0x1e>
 800fe70:	682b      	ldr	r3, [r5, #0]
 800fe72:	b103      	cbz	r3, 800fe76 <_lseek_r+0x1e>
 800fe74:	6023      	str	r3, [r4, #0]
 800fe76:	bd38      	pop	{r3, r4, r5, pc}
 800fe78:	20008a68 	.word	0x20008a68

0800fe7c <_read_r>:
 800fe7c:	b538      	push	{r3, r4, r5, lr}
 800fe7e:	4d07      	ldr	r5, [pc, #28]	@ (800fe9c <_read_r+0x20>)
 800fe80:	4604      	mov	r4, r0
 800fe82:	4608      	mov	r0, r1
 800fe84:	4611      	mov	r1, r2
 800fe86:	2200      	movs	r2, #0
 800fe88:	602a      	str	r2, [r5, #0]
 800fe8a:	461a      	mov	r2, r3
 800fe8c:	f7f0 ffbf 	bl	8000e0e <_read>
 800fe90:	1c43      	adds	r3, r0, #1
 800fe92:	d102      	bne.n	800fe9a <_read_r+0x1e>
 800fe94:	682b      	ldr	r3, [r5, #0]
 800fe96:	b103      	cbz	r3, 800fe9a <_read_r+0x1e>
 800fe98:	6023      	str	r3, [r4, #0]
 800fe9a:	bd38      	pop	{r3, r4, r5, pc}
 800fe9c:	20008a68 	.word	0x20008a68

0800fea0 <_write_r>:
 800fea0:	b538      	push	{r3, r4, r5, lr}
 800fea2:	4d07      	ldr	r5, [pc, #28]	@ (800fec0 <_write_r+0x20>)
 800fea4:	4604      	mov	r4, r0
 800fea6:	4608      	mov	r0, r1
 800fea8:	4611      	mov	r1, r2
 800feaa:	2200      	movs	r2, #0
 800feac:	602a      	str	r2, [r5, #0]
 800feae:	461a      	mov	r2, r3
 800feb0:	f7f0 ffca 	bl	8000e48 <_write>
 800feb4:	1c43      	adds	r3, r0, #1
 800feb6:	d102      	bne.n	800febe <_write_r+0x1e>
 800feb8:	682b      	ldr	r3, [r5, #0]
 800feba:	b103      	cbz	r3, 800febe <_write_r+0x1e>
 800febc:	6023      	str	r3, [r4, #0]
 800febe:	bd38      	pop	{r3, r4, r5, pc}
 800fec0:	20008a68 	.word	0x20008a68

0800fec4 <__libc_init_array>:
 800fec4:	b570      	push	{r4, r5, r6, lr}
 800fec6:	4d0d      	ldr	r5, [pc, #52]	@ (800fefc <__libc_init_array+0x38>)
 800fec8:	4c0d      	ldr	r4, [pc, #52]	@ (800ff00 <__libc_init_array+0x3c>)
 800feca:	1b64      	subs	r4, r4, r5
 800fecc:	10a4      	asrs	r4, r4, #2
 800fece:	2600      	movs	r6, #0
 800fed0:	42a6      	cmp	r6, r4
 800fed2:	d109      	bne.n	800fee8 <__libc_init_array+0x24>
 800fed4:	4d0b      	ldr	r5, [pc, #44]	@ (800ff04 <__libc_init_array+0x40>)
 800fed6:	4c0c      	ldr	r4, [pc, #48]	@ (800ff08 <__libc_init_array+0x44>)
 800fed8:	f000 fe52 	bl	8010b80 <_init>
 800fedc:	1b64      	subs	r4, r4, r5
 800fede:	10a4      	asrs	r4, r4, #2
 800fee0:	2600      	movs	r6, #0
 800fee2:	42a6      	cmp	r6, r4
 800fee4:	d105      	bne.n	800fef2 <__libc_init_array+0x2e>
 800fee6:	bd70      	pop	{r4, r5, r6, pc}
 800fee8:	f855 3b04 	ldr.w	r3, [r5], #4
 800feec:	4798      	blx	r3
 800feee:	3601      	adds	r6, #1
 800fef0:	e7ee      	b.n	800fed0 <__libc_init_array+0xc>
 800fef2:	f855 3b04 	ldr.w	r3, [r5], #4
 800fef6:	4798      	blx	r3
 800fef8:	3601      	adds	r6, #1
 800fefa:	e7f2      	b.n	800fee2 <__libc_init_array+0x1e>
 800fefc:	08013790 	.word	0x08013790
 800ff00:	08013790 	.word	0x08013790
 800ff04:	08013790 	.word	0x08013790
 800ff08:	08013794 	.word	0x08013794

0800ff0c <__retarget_lock_init_recursive>:
 800ff0c:	4770      	bx	lr

0800ff0e <__retarget_lock_acquire_recursive>:
 800ff0e:	4770      	bx	lr

0800ff10 <__retarget_lock_release_recursive>:
 800ff10:	4770      	bx	lr

0800ff12 <strcpy>:
 800ff12:	4603      	mov	r3, r0
 800ff14:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ff18:	f803 2b01 	strb.w	r2, [r3], #1
 800ff1c:	2a00      	cmp	r2, #0
 800ff1e:	d1f9      	bne.n	800ff14 <strcpy+0x2>
 800ff20:	4770      	bx	lr

0800ff22 <memcpy>:
 800ff22:	440a      	add	r2, r1
 800ff24:	4291      	cmp	r1, r2
 800ff26:	f100 33ff 	add.w	r3, r0, #4294967295
 800ff2a:	d100      	bne.n	800ff2e <memcpy+0xc>
 800ff2c:	4770      	bx	lr
 800ff2e:	b510      	push	{r4, lr}
 800ff30:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff34:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ff38:	4291      	cmp	r1, r2
 800ff3a:	d1f9      	bne.n	800ff30 <memcpy+0xe>
 800ff3c:	bd10      	pop	{r4, pc}
	...

0800ff40 <__assert_func>:
 800ff40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ff42:	4614      	mov	r4, r2
 800ff44:	461a      	mov	r2, r3
 800ff46:	4b09      	ldr	r3, [pc, #36]	@ (800ff6c <__assert_func+0x2c>)
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	4605      	mov	r5, r0
 800ff4c:	68d8      	ldr	r0, [r3, #12]
 800ff4e:	b954      	cbnz	r4, 800ff66 <__assert_func+0x26>
 800ff50:	4b07      	ldr	r3, [pc, #28]	@ (800ff70 <__assert_func+0x30>)
 800ff52:	461c      	mov	r4, r3
 800ff54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ff58:	9100      	str	r1, [sp, #0]
 800ff5a:	462b      	mov	r3, r5
 800ff5c:	4905      	ldr	r1, [pc, #20]	@ (800ff74 <__assert_func+0x34>)
 800ff5e:	f000 fc89 	bl	8010874 <fiprintf>
 800ff62:	f000 fd3d 	bl	80109e0 <abort>
 800ff66:	4b04      	ldr	r3, [pc, #16]	@ (800ff78 <__assert_func+0x38>)
 800ff68:	e7f4      	b.n	800ff54 <__assert_func+0x14>
 800ff6a:	bf00      	nop
 800ff6c:	20000038 	.word	0x20000038
 800ff70:	08013754 	.word	0x08013754
 800ff74:	08013726 	.word	0x08013726
 800ff78:	08013719 	.word	0x08013719

0800ff7c <_free_r>:
 800ff7c:	b538      	push	{r3, r4, r5, lr}
 800ff7e:	4605      	mov	r5, r0
 800ff80:	2900      	cmp	r1, #0
 800ff82:	d041      	beq.n	8010008 <_free_r+0x8c>
 800ff84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff88:	1f0c      	subs	r4, r1, #4
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	bfb8      	it	lt
 800ff8e:	18e4      	addlt	r4, r4, r3
 800ff90:	f000 f8e8 	bl	8010164 <__malloc_lock>
 800ff94:	4a1d      	ldr	r2, [pc, #116]	@ (801000c <_free_r+0x90>)
 800ff96:	6813      	ldr	r3, [r2, #0]
 800ff98:	b933      	cbnz	r3, 800ffa8 <_free_r+0x2c>
 800ff9a:	6063      	str	r3, [r4, #4]
 800ff9c:	6014      	str	r4, [r2, #0]
 800ff9e:	4628      	mov	r0, r5
 800ffa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ffa4:	f000 b8e4 	b.w	8010170 <__malloc_unlock>
 800ffa8:	42a3      	cmp	r3, r4
 800ffaa:	d908      	bls.n	800ffbe <_free_r+0x42>
 800ffac:	6820      	ldr	r0, [r4, #0]
 800ffae:	1821      	adds	r1, r4, r0
 800ffb0:	428b      	cmp	r3, r1
 800ffb2:	bf01      	itttt	eq
 800ffb4:	6819      	ldreq	r1, [r3, #0]
 800ffb6:	685b      	ldreq	r3, [r3, #4]
 800ffb8:	1809      	addeq	r1, r1, r0
 800ffba:	6021      	streq	r1, [r4, #0]
 800ffbc:	e7ed      	b.n	800ff9a <_free_r+0x1e>
 800ffbe:	461a      	mov	r2, r3
 800ffc0:	685b      	ldr	r3, [r3, #4]
 800ffc2:	b10b      	cbz	r3, 800ffc8 <_free_r+0x4c>
 800ffc4:	42a3      	cmp	r3, r4
 800ffc6:	d9fa      	bls.n	800ffbe <_free_r+0x42>
 800ffc8:	6811      	ldr	r1, [r2, #0]
 800ffca:	1850      	adds	r0, r2, r1
 800ffcc:	42a0      	cmp	r0, r4
 800ffce:	d10b      	bne.n	800ffe8 <_free_r+0x6c>
 800ffd0:	6820      	ldr	r0, [r4, #0]
 800ffd2:	4401      	add	r1, r0
 800ffd4:	1850      	adds	r0, r2, r1
 800ffd6:	4283      	cmp	r3, r0
 800ffd8:	6011      	str	r1, [r2, #0]
 800ffda:	d1e0      	bne.n	800ff9e <_free_r+0x22>
 800ffdc:	6818      	ldr	r0, [r3, #0]
 800ffde:	685b      	ldr	r3, [r3, #4]
 800ffe0:	6053      	str	r3, [r2, #4]
 800ffe2:	4408      	add	r0, r1
 800ffe4:	6010      	str	r0, [r2, #0]
 800ffe6:	e7da      	b.n	800ff9e <_free_r+0x22>
 800ffe8:	d902      	bls.n	800fff0 <_free_r+0x74>
 800ffea:	230c      	movs	r3, #12
 800ffec:	602b      	str	r3, [r5, #0]
 800ffee:	e7d6      	b.n	800ff9e <_free_r+0x22>
 800fff0:	6820      	ldr	r0, [r4, #0]
 800fff2:	1821      	adds	r1, r4, r0
 800fff4:	428b      	cmp	r3, r1
 800fff6:	bf04      	itt	eq
 800fff8:	6819      	ldreq	r1, [r3, #0]
 800fffa:	685b      	ldreq	r3, [r3, #4]
 800fffc:	6063      	str	r3, [r4, #4]
 800fffe:	bf04      	itt	eq
 8010000:	1809      	addeq	r1, r1, r0
 8010002:	6021      	streq	r1, [r4, #0]
 8010004:	6054      	str	r4, [r2, #4]
 8010006:	e7ca      	b.n	800ff9e <_free_r+0x22>
 8010008:	bd38      	pop	{r3, r4, r5, pc}
 801000a:	bf00      	nop
 801000c:	20008a74 	.word	0x20008a74

08010010 <malloc>:
 8010010:	4b02      	ldr	r3, [pc, #8]	@ (801001c <malloc+0xc>)
 8010012:	4601      	mov	r1, r0
 8010014:	6818      	ldr	r0, [r3, #0]
 8010016:	f000 b825 	b.w	8010064 <_malloc_r>
 801001a:	bf00      	nop
 801001c:	20000038 	.word	0x20000038

08010020 <sbrk_aligned>:
 8010020:	b570      	push	{r4, r5, r6, lr}
 8010022:	4e0f      	ldr	r6, [pc, #60]	@ (8010060 <sbrk_aligned+0x40>)
 8010024:	460c      	mov	r4, r1
 8010026:	6831      	ldr	r1, [r6, #0]
 8010028:	4605      	mov	r5, r0
 801002a:	b911      	cbnz	r1, 8010032 <sbrk_aligned+0x12>
 801002c:	f000 fcc8 	bl	80109c0 <_sbrk_r>
 8010030:	6030      	str	r0, [r6, #0]
 8010032:	4621      	mov	r1, r4
 8010034:	4628      	mov	r0, r5
 8010036:	f000 fcc3 	bl	80109c0 <_sbrk_r>
 801003a:	1c43      	adds	r3, r0, #1
 801003c:	d103      	bne.n	8010046 <sbrk_aligned+0x26>
 801003e:	f04f 34ff 	mov.w	r4, #4294967295
 8010042:	4620      	mov	r0, r4
 8010044:	bd70      	pop	{r4, r5, r6, pc}
 8010046:	1cc4      	adds	r4, r0, #3
 8010048:	f024 0403 	bic.w	r4, r4, #3
 801004c:	42a0      	cmp	r0, r4
 801004e:	d0f8      	beq.n	8010042 <sbrk_aligned+0x22>
 8010050:	1a21      	subs	r1, r4, r0
 8010052:	4628      	mov	r0, r5
 8010054:	f000 fcb4 	bl	80109c0 <_sbrk_r>
 8010058:	3001      	adds	r0, #1
 801005a:	d1f2      	bne.n	8010042 <sbrk_aligned+0x22>
 801005c:	e7ef      	b.n	801003e <sbrk_aligned+0x1e>
 801005e:	bf00      	nop
 8010060:	20008a70 	.word	0x20008a70

08010064 <_malloc_r>:
 8010064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010068:	1ccd      	adds	r5, r1, #3
 801006a:	f025 0503 	bic.w	r5, r5, #3
 801006e:	3508      	adds	r5, #8
 8010070:	2d0c      	cmp	r5, #12
 8010072:	bf38      	it	cc
 8010074:	250c      	movcc	r5, #12
 8010076:	2d00      	cmp	r5, #0
 8010078:	4606      	mov	r6, r0
 801007a:	db01      	blt.n	8010080 <_malloc_r+0x1c>
 801007c:	42a9      	cmp	r1, r5
 801007e:	d904      	bls.n	801008a <_malloc_r+0x26>
 8010080:	230c      	movs	r3, #12
 8010082:	6033      	str	r3, [r6, #0]
 8010084:	2000      	movs	r0, #0
 8010086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801008a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010160 <_malloc_r+0xfc>
 801008e:	f000 f869 	bl	8010164 <__malloc_lock>
 8010092:	f8d8 3000 	ldr.w	r3, [r8]
 8010096:	461c      	mov	r4, r3
 8010098:	bb44      	cbnz	r4, 80100ec <_malloc_r+0x88>
 801009a:	4629      	mov	r1, r5
 801009c:	4630      	mov	r0, r6
 801009e:	f7ff ffbf 	bl	8010020 <sbrk_aligned>
 80100a2:	1c43      	adds	r3, r0, #1
 80100a4:	4604      	mov	r4, r0
 80100a6:	d158      	bne.n	801015a <_malloc_r+0xf6>
 80100a8:	f8d8 4000 	ldr.w	r4, [r8]
 80100ac:	4627      	mov	r7, r4
 80100ae:	2f00      	cmp	r7, #0
 80100b0:	d143      	bne.n	801013a <_malloc_r+0xd6>
 80100b2:	2c00      	cmp	r4, #0
 80100b4:	d04b      	beq.n	801014e <_malloc_r+0xea>
 80100b6:	6823      	ldr	r3, [r4, #0]
 80100b8:	4639      	mov	r1, r7
 80100ba:	4630      	mov	r0, r6
 80100bc:	eb04 0903 	add.w	r9, r4, r3
 80100c0:	f000 fc7e 	bl	80109c0 <_sbrk_r>
 80100c4:	4581      	cmp	r9, r0
 80100c6:	d142      	bne.n	801014e <_malloc_r+0xea>
 80100c8:	6821      	ldr	r1, [r4, #0]
 80100ca:	1a6d      	subs	r5, r5, r1
 80100cc:	4629      	mov	r1, r5
 80100ce:	4630      	mov	r0, r6
 80100d0:	f7ff ffa6 	bl	8010020 <sbrk_aligned>
 80100d4:	3001      	adds	r0, #1
 80100d6:	d03a      	beq.n	801014e <_malloc_r+0xea>
 80100d8:	6823      	ldr	r3, [r4, #0]
 80100da:	442b      	add	r3, r5
 80100dc:	6023      	str	r3, [r4, #0]
 80100de:	f8d8 3000 	ldr.w	r3, [r8]
 80100e2:	685a      	ldr	r2, [r3, #4]
 80100e4:	bb62      	cbnz	r2, 8010140 <_malloc_r+0xdc>
 80100e6:	f8c8 7000 	str.w	r7, [r8]
 80100ea:	e00f      	b.n	801010c <_malloc_r+0xa8>
 80100ec:	6822      	ldr	r2, [r4, #0]
 80100ee:	1b52      	subs	r2, r2, r5
 80100f0:	d420      	bmi.n	8010134 <_malloc_r+0xd0>
 80100f2:	2a0b      	cmp	r2, #11
 80100f4:	d917      	bls.n	8010126 <_malloc_r+0xc2>
 80100f6:	1961      	adds	r1, r4, r5
 80100f8:	42a3      	cmp	r3, r4
 80100fa:	6025      	str	r5, [r4, #0]
 80100fc:	bf18      	it	ne
 80100fe:	6059      	strne	r1, [r3, #4]
 8010100:	6863      	ldr	r3, [r4, #4]
 8010102:	bf08      	it	eq
 8010104:	f8c8 1000 	streq.w	r1, [r8]
 8010108:	5162      	str	r2, [r4, r5]
 801010a:	604b      	str	r3, [r1, #4]
 801010c:	4630      	mov	r0, r6
 801010e:	f000 f82f 	bl	8010170 <__malloc_unlock>
 8010112:	f104 000b 	add.w	r0, r4, #11
 8010116:	1d23      	adds	r3, r4, #4
 8010118:	f020 0007 	bic.w	r0, r0, #7
 801011c:	1ac2      	subs	r2, r0, r3
 801011e:	bf1c      	itt	ne
 8010120:	1a1b      	subne	r3, r3, r0
 8010122:	50a3      	strne	r3, [r4, r2]
 8010124:	e7af      	b.n	8010086 <_malloc_r+0x22>
 8010126:	6862      	ldr	r2, [r4, #4]
 8010128:	42a3      	cmp	r3, r4
 801012a:	bf0c      	ite	eq
 801012c:	f8c8 2000 	streq.w	r2, [r8]
 8010130:	605a      	strne	r2, [r3, #4]
 8010132:	e7eb      	b.n	801010c <_malloc_r+0xa8>
 8010134:	4623      	mov	r3, r4
 8010136:	6864      	ldr	r4, [r4, #4]
 8010138:	e7ae      	b.n	8010098 <_malloc_r+0x34>
 801013a:	463c      	mov	r4, r7
 801013c:	687f      	ldr	r7, [r7, #4]
 801013e:	e7b6      	b.n	80100ae <_malloc_r+0x4a>
 8010140:	461a      	mov	r2, r3
 8010142:	685b      	ldr	r3, [r3, #4]
 8010144:	42a3      	cmp	r3, r4
 8010146:	d1fb      	bne.n	8010140 <_malloc_r+0xdc>
 8010148:	2300      	movs	r3, #0
 801014a:	6053      	str	r3, [r2, #4]
 801014c:	e7de      	b.n	801010c <_malloc_r+0xa8>
 801014e:	230c      	movs	r3, #12
 8010150:	6033      	str	r3, [r6, #0]
 8010152:	4630      	mov	r0, r6
 8010154:	f000 f80c 	bl	8010170 <__malloc_unlock>
 8010158:	e794      	b.n	8010084 <_malloc_r+0x20>
 801015a:	6005      	str	r5, [r0, #0]
 801015c:	e7d6      	b.n	801010c <_malloc_r+0xa8>
 801015e:	bf00      	nop
 8010160:	20008a74 	.word	0x20008a74

08010164 <__malloc_lock>:
 8010164:	4801      	ldr	r0, [pc, #4]	@ (801016c <__malloc_lock+0x8>)
 8010166:	f7ff bed2 	b.w	800ff0e <__retarget_lock_acquire_recursive>
 801016a:	bf00      	nop
 801016c:	20008a6c 	.word	0x20008a6c

08010170 <__malloc_unlock>:
 8010170:	4801      	ldr	r0, [pc, #4]	@ (8010178 <__malloc_unlock+0x8>)
 8010172:	f7ff becd 	b.w	800ff10 <__retarget_lock_release_recursive>
 8010176:	bf00      	nop
 8010178:	20008a6c 	.word	0x20008a6c

0801017c <__sfputc_r>:
 801017c:	6893      	ldr	r3, [r2, #8]
 801017e:	3b01      	subs	r3, #1
 8010180:	2b00      	cmp	r3, #0
 8010182:	b410      	push	{r4}
 8010184:	6093      	str	r3, [r2, #8]
 8010186:	da08      	bge.n	801019a <__sfputc_r+0x1e>
 8010188:	6994      	ldr	r4, [r2, #24]
 801018a:	42a3      	cmp	r3, r4
 801018c:	db01      	blt.n	8010192 <__sfputc_r+0x16>
 801018e:	290a      	cmp	r1, #10
 8010190:	d103      	bne.n	801019a <__sfputc_r+0x1e>
 8010192:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010196:	f000 bb7f 	b.w	8010898 <__swbuf_r>
 801019a:	6813      	ldr	r3, [r2, #0]
 801019c:	1c58      	adds	r0, r3, #1
 801019e:	6010      	str	r0, [r2, #0]
 80101a0:	7019      	strb	r1, [r3, #0]
 80101a2:	4608      	mov	r0, r1
 80101a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101a8:	4770      	bx	lr

080101aa <__sfputs_r>:
 80101aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101ac:	4606      	mov	r6, r0
 80101ae:	460f      	mov	r7, r1
 80101b0:	4614      	mov	r4, r2
 80101b2:	18d5      	adds	r5, r2, r3
 80101b4:	42ac      	cmp	r4, r5
 80101b6:	d101      	bne.n	80101bc <__sfputs_r+0x12>
 80101b8:	2000      	movs	r0, #0
 80101ba:	e007      	b.n	80101cc <__sfputs_r+0x22>
 80101bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101c0:	463a      	mov	r2, r7
 80101c2:	4630      	mov	r0, r6
 80101c4:	f7ff ffda 	bl	801017c <__sfputc_r>
 80101c8:	1c43      	adds	r3, r0, #1
 80101ca:	d1f3      	bne.n	80101b4 <__sfputs_r+0xa>
 80101cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080101d0 <_vfiprintf_r>:
 80101d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101d4:	460d      	mov	r5, r1
 80101d6:	b09d      	sub	sp, #116	@ 0x74
 80101d8:	4614      	mov	r4, r2
 80101da:	4698      	mov	r8, r3
 80101dc:	4606      	mov	r6, r0
 80101de:	b118      	cbz	r0, 80101e8 <_vfiprintf_r+0x18>
 80101e0:	6a03      	ldr	r3, [r0, #32]
 80101e2:	b90b      	cbnz	r3, 80101e8 <_vfiprintf_r+0x18>
 80101e4:	f7ff fd62 	bl	800fcac <__sinit>
 80101e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80101ea:	07d9      	lsls	r1, r3, #31
 80101ec:	d405      	bmi.n	80101fa <_vfiprintf_r+0x2a>
 80101ee:	89ab      	ldrh	r3, [r5, #12]
 80101f0:	059a      	lsls	r2, r3, #22
 80101f2:	d402      	bmi.n	80101fa <_vfiprintf_r+0x2a>
 80101f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80101f6:	f7ff fe8a 	bl	800ff0e <__retarget_lock_acquire_recursive>
 80101fa:	89ab      	ldrh	r3, [r5, #12]
 80101fc:	071b      	lsls	r3, r3, #28
 80101fe:	d501      	bpl.n	8010204 <_vfiprintf_r+0x34>
 8010200:	692b      	ldr	r3, [r5, #16]
 8010202:	b99b      	cbnz	r3, 801022c <_vfiprintf_r+0x5c>
 8010204:	4629      	mov	r1, r5
 8010206:	4630      	mov	r0, r6
 8010208:	f000 fb84 	bl	8010914 <__swsetup_r>
 801020c:	b170      	cbz	r0, 801022c <_vfiprintf_r+0x5c>
 801020e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010210:	07dc      	lsls	r4, r3, #31
 8010212:	d504      	bpl.n	801021e <_vfiprintf_r+0x4e>
 8010214:	f04f 30ff 	mov.w	r0, #4294967295
 8010218:	b01d      	add	sp, #116	@ 0x74
 801021a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801021e:	89ab      	ldrh	r3, [r5, #12]
 8010220:	0598      	lsls	r0, r3, #22
 8010222:	d4f7      	bmi.n	8010214 <_vfiprintf_r+0x44>
 8010224:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010226:	f7ff fe73 	bl	800ff10 <__retarget_lock_release_recursive>
 801022a:	e7f3      	b.n	8010214 <_vfiprintf_r+0x44>
 801022c:	2300      	movs	r3, #0
 801022e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010230:	2320      	movs	r3, #32
 8010232:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010236:	f8cd 800c 	str.w	r8, [sp, #12]
 801023a:	2330      	movs	r3, #48	@ 0x30
 801023c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80103ec <_vfiprintf_r+0x21c>
 8010240:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010244:	f04f 0901 	mov.w	r9, #1
 8010248:	4623      	mov	r3, r4
 801024a:	469a      	mov	sl, r3
 801024c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010250:	b10a      	cbz	r2, 8010256 <_vfiprintf_r+0x86>
 8010252:	2a25      	cmp	r2, #37	@ 0x25
 8010254:	d1f9      	bne.n	801024a <_vfiprintf_r+0x7a>
 8010256:	ebba 0b04 	subs.w	fp, sl, r4
 801025a:	d00b      	beq.n	8010274 <_vfiprintf_r+0xa4>
 801025c:	465b      	mov	r3, fp
 801025e:	4622      	mov	r2, r4
 8010260:	4629      	mov	r1, r5
 8010262:	4630      	mov	r0, r6
 8010264:	f7ff ffa1 	bl	80101aa <__sfputs_r>
 8010268:	3001      	adds	r0, #1
 801026a:	f000 80a7 	beq.w	80103bc <_vfiprintf_r+0x1ec>
 801026e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010270:	445a      	add	r2, fp
 8010272:	9209      	str	r2, [sp, #36]	@ 0x24
 8010274:	f89a 3000 	ldrb.w	r3, [sl]
 8010278:	2b00      	cmp	r3, #0
 801027a:	f000 809f 	beq.w	80103bc <_vfiprintf_r+0x1ec>
 801027e:	2300      	movs	r3, #0
 8010280:	f04f 32ff 	mov.w	r2, #4294967295
 8010284:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010288:	f10a 0a01 	add.w	sl, sl, #1
 801028c:	9304      	str	r3, [sp, #16]
 801028e:	9307      	str	r3, [sp, #28]
 8010290:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010294:	931a      	str	r3, [sp, #104]	@ 0x68
 8010296:	4654      	mov	r4, sl
 8010298:	2205      	movs	r2, #5
 801029a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801029e:	4853      	ldr	r0, [pc, #332]	@ (80103ec <_vfiprintf_r+0x21c>)
 80102a0:	f7ef ffe6 	bl	8000270 <memchr>
 80102a4:	9a04      	ldr	r2, [sp, #16]
 80102a6:	b9d8      	cbnz	r0, 80102e0 <_vfiprintf_r+0x110>
 80102a8:	06d1      	lsls	r1, r2, #27
 80102aa:	bf44      	itt	mi
 80102ac:	2320      	movmi	r3, #32
 80102ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80102b2:	0713      	lsls	r3, r2, #28
 80102b4:	bf44      	itt	mi
 80102b6:	232b      	movmi	r3, #43	@ 0x2b
 80102b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80102bc:	f89a 3000 	ldrb.w	r3, [sl]
 80102c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80102c2:	d015      	beq.n	80102f0 <_vfiprintf_r+0x120>
 80102c4:	9a07      	ldr	r2, [sp, #28]
 80102c6:	4654      	mov	r4, sl
 80102c8:	2000      	movs	r0, #0
 80102ca:	f04f 0c0a 	mov.w	ip, #10
 80102ce:	4621      	mov	r1, r4
 80102d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80102d4:	3b30      	subs	r3, #48	@ 0x30
 80102d6:	2b09      	cmp	r3, #9
 80102d8:	d94b      	bls.n	8010372 <_vfiprintf_r+0x1a2>
 80102da:	b1b0      	cbz	r0, 801030a <_vfiprintf_r+0x13a>
 80102dc:	9207      	str	r2, [sp, #28]
 80102de:	e014      	b.n	801030a <_vfiprintf_r+0x13a>
 80102e0:	eba0 0308 	sub.w	r3, r0, r8
 80102e4:	fa09 f303 	lsl.w	r3, r9, r3
 80102e8:	4313      	orrs	r3, r2
 80102ea:	9304      	str	r3, [sp, #16]
 80102ec:	46a2      	mov	sl, r4
 80102ee:	e7d2      	b.n	8010296 <_vfiprintf_r+0xc6>
 80102f0:	9b03      	ldr	r3, [sp, #12]
 80102f2:	1d19      	adds	r1, r3, #4
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	9103      	str	r1, [sp, #12]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	bfbb      	ittet	lt
 80102fc:	425b      	neglt	r3, r3
 80102fe:	f042 0202 	orrlt.w	r2, r2, #2
 8010302:	9307      	strge	r3, [sp, #28]
 8010304:	9307      	strlt	r3, [sp, #28]
 8010306:	bfb8      	it	lt
 8010308:	9204      	strlt	r2, [sp, #16]
 801030a:	7823      	ldrb	r3, [r4, #0]
 801030c:	2b2e      	cmp	r3, #46	@ 0x2e
 801030e:	d10a      	bne.n	8010326 <_vfiprintf_r+0x156>
 8010310:	7863      	ldrb	r3, [r4, #1]
 8010312:	2b2a      	cmp	r3, #42	@ 0x2a
 8010314:	d132      	bne.n	801037c <_vfiprintf_r+0x1ac>
 8010316:	9b03      	ldr	r3, [sp, #12]
 8010318:	1d1a      	adds	r2, r3, #4
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	9203      	str	r2, [sp, #12]
 801031e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010322:	3402      	adds	r4, #2
 8010324:	9305      	str	r3, [sp, #20]
 8010326:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80103fc <_vfiprintf_r+0x22c>
 801032a:	7821      	ldrb	r1, [r4, #0]
 801032c:	2203      	movs	r2, #3
 801032e:	4650      	mov	r0, sl
 8010330:	f7ef ff9e 	bl	8000270 <memchr>
 8010334:	b138      	cbz	r0, 8010346 <_vfiprintf_r+0x176>
 8010336:	9b04      	ldr	r3, [sp, #16]
 8010338:	eba0 000a 	sub.w	r0, r0, sl
 801033c:	2240      	movs	r2, #64	@ 0x40
 801033e:	4082      	lsls	r2, r0
 8010340:	4313      	orrs	r3, r2
 8010342:	3401      	adds	r4, #1
 8010344:	9304      	str	r3, [sp, #16]
 8010346:	f814 1b01 	ldrb.w	r1, [r4], #1
 801034a:	4829      	ldr	r0, [pc, #164]	@ (80103f0 <_vfiprintf_r+0x220>)
 801034c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010350:	2206      	movs	r2, #6
 8010352:	f7ef ff8d 	bl	8000270 <memchr>
 8010356:	2800      	cmp	r0, #0
 8010358:	d03f      	beq.n	80103da <_vfiprintf_r+0x20a>
 801035a:	4b26      	ldr	r3, [pc, #152]	@ (80103f4 <_vfiprintf_r+0x224>)
 801035c:	bb1b      	cbnz	r3, 80103a6 <_vfiprintf_r+0x1d6>
 801035e:	9b03      	ldr	r3, [sp, #12]
 8010360:	3307      	adds	r3, #7
 8010362:	f023 0307 	bic.w	r3, r3, #7
 8010366:	3308      	adds	r3, #8
 8010368:	9303      	str	r3, [sp, #12]
 801036a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801036c:	443b      	add	r3, r7
 801036e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010370:	e76a      	b.n	8010248 <_vfiprintf_r+0x78>
 8010372:	fb0c 3202 	mla	r2, ip, r2, r3
 8010376:	460c      	mov	r4, r1
 8010378:	2001      	movs	r0, #1
 801037a:	e7a8      	b.n	80102ce <_vfiprintf_r+0xfe>
 801037c:	2300      	movs	r3, #0
 801037e:	3401      	adds	r4, #1
 8010380:	9305      	str	r3, [sp, #20]
 8010382:	4619      	mov	r1, r3
 8010384:	f04f 0c0a 	mov.w	ip, #10
 8010388:	4620      	mov	r0, r4
 801038a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801038e:	3a30      	subs	r2, #48	@ 0x30
 8010390:	2a09      	cmp	r2, #9
 8010392:	d903      	bls.n	801039c <_vfiprintf_r+0x1cc>
 8010394:	2b00      	cmp	r3, #0
 8010396:	d0c6      	beq.n	8010326 <_vfiprintf_r+0x156>
 8010398:	9105      	str	r1, [sp, #20]
 801039a:	e7c4      	b.n	8010326 <_vfiprintf_r+0x156>
 801039c:	fb0c 2101 	mla	r1, ip, r1, r2
 80103a0:	4604      	mov	r4, r0
 80103a2:	2301      	movs	r3, #1
 80103a4:	e7f0      	b.n	8010388 <_vfiprintf_r+0x1b8>
 80103a6:	ab03      	add	r3, sp, #12
 80103a8:	9300      	str	r3, [sp, #0]
 80103aa:	462a      	mov	r2, r5
 80103ac:	4b12      	ldr	r3, [pc, #72]	@ (80103f8 <_vfiprintf_r+0x228>)
 80103ae:	a904      	add	r1, sp, #16
 80103b0:	4630      	mov	r0, r6
 80103b2:	f3af 8000 	nop.w
 80103b6:	4607      	mov	r7, r0
 80103b8:	1c78      	adds	r0, r7, #1
 80103ba:	d1d6      	bne.n	801036a <_vfiprintf_r+0x19a>
 80103bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80103be:	07d9      	lsls	r1, r3, #31
 80103c0:	d405      	bmi.n	80103ce <_vfiprintf_r+0x1fe>
 80103c2:	89ab      	ldrh	r3, [r5, #12]
 80103c4:	059a      	lsls	r2, r3, #22
 80103c6:	d402      	bmi.n	80103ce <_vfiprintf_r+0x1fe>
 80103c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80103ca:	f7ff fda1 	bl	800ff10 <__retarget_lock_release_recursive>
 80103ce:	89ab      	ldrh	r3, [r5, #12]
 80103d0:	065b      	lsls	r3, r3, #25
 80103d2:	f53f af1f 	bmi.w	8010214 <_vfiprintf_r+0x44>
 80103d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80103d8:	e71e      	b.n	8010218 <_vfiprintf_r+0x48>
 80103da:	ab03      	add	r3, sp, #12
 80103dc:	9300      	str	r3, [sp, #0]
 80103de:	462a      	mov	r2, r5
 80103e0:	4b05      	ldr	r3, [pc, #20]	@ (80103f8 <_vfiprintf_r+0x228>)
 80103e2:	a904      	add	r1, sp, #16
 80103e4:	4630      	mov	r0, r6
 80103e6:	f000 f879 	bl	80104dc <_printf_i>
 80103ea:	e7e4      	b.n	80103b6 <_vfiprintf_r+0x1e6>
 80103ec:	08013755 	.word	0x08013755
 80103f0:	0801375f 	.word	0x0801375f
 80103f4:	00000000 	.word	0x00000000
 80103f8:	080101ab 	.word	0x080101ab
 80103fc:	0801375b 	.word	0x0801375b

08010400 <_printf_common>:
 8010400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010404:	4616      	mov	r6, r2
 8010406:	4698      	mov	r8, r3
 8010408:	688a      	ldr	r2, [r1, #8]
 801040a:	690b      	ldr	r3, [r1, #16]
 801040c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010410:	4293      	cmp	r3, r2
 8010412:	bfb8      	it	lt
 8010414:	4613      	movlt	r3, r2
 8010416:	6033      	str	r3, [r6, #0]
 8010418:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801041c:	4607      	mov	r7, r0
 801041e:	460c      	mov	r4, r1
 8010420:	b10a      	cbz	r2, 8010426 <_printf_common+0x26>
 8010422:	3301      	adds	r3, #1
 8010424:	6033      	str	r3, [r6, #0]
 8010426:	6823      	ldr	r3, [r4, #0]
 8010428:	0699      	lsls	r1, r3, #26
 801042a:	bf42      	ittt	mi
 801042c:	6833      	ldrmi	r3, [r6, #0]
 801042e:	3302      	addmi	r3, #2
 8010430:	6033      	strmi	r3, [r6, #0]
 8010432:	6825      	ldr	r5, [r4, #0]
 8010434:	f015 0506 	ands.w	r5, r5, #6
 8010438:	d106      	bne.n	8010448 <_printf_common+0x48>
 801043a:	f104 0a19 	add.w	sl, r4, #25
 801043e:	68e3      	ldr	r3, [r4, #12]
 8010440:	6832      	ldr	r2, [r6, #0]
 8010442:	1a9b      	subs	r3, r3, r2
 8010444:	42ab      	cmp	r3, r5
 8010446:	dc26      	bgt.n	8010496 <_printf_common+0x96>
 8010448:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801044c:	6822      	ldr	r2, [r4, #0]
 801044e:	3b00      	subs	r3, #0
 8010450:	bf18      	it	ne
 8010452:	2301      	movne	r3, #1
 8010454:	0692      	lsls	r2, r2, #26
 8010456:	d42b      	bmi.n	80104b0 <_printf_common+0xb0>
 8010458:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801045c:	4641      	mov	r1, r8
 801045e:	4638      	mov	r0, r7
 8010460:	47c8      	blx	r9
 8010462:	3001      	adds	r0, #1
 8010464:	d01e      	beq.n	80104a4 <_printf_common+0xa4>
 8010466:	6823      	ldr	r3, [r4, #0]
 8010468:	6922      	ldr	r2, [r4, #16]
 801046a:	f003 0306 	and.w	r3, r3, #6
 801046e:	2b04      	cmp	r3, #4
 8010470:	bf02      	ittt	eq
 8010472:	68e5      	ldreq	r5, [r4, #12]
 8010474:	6833      	ldreq	r3, [r6, #0]
 8010476:	1aed      	subeq	r5, r5, r3
 8010478:	68a3      	ldr	r3, [r4, #8]
 801047a:	bf0c      	ite	eq
 801047c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010480:	2500      	movne	r5, #0
 8010482:	4293      	cmp	r3, r2
 8010484:	bfc4      	itt	gt
 8010486:	1a9b      	subgt	r3, r3, r2
 8010488:	18ed      	addgt	r5, r5, r3
 801048a:	2600      	movs	r6, #0
 801048c:	341a      	adds	r4, #26
 801048e:	42b5      	cmp	r5, r6
 8010490:	d11a      	bne.n	80104c8 <_printf_common+0xc8>
 8010492:	2000      	movs	r0, #0
 8010494:	e008      	b.n	80104a8 <_printf_common+0xa8>
 8010496:	2301      	movs	r3, #1
 8010498:	4652      	mov	r2, sl
 801049a:	4641      	mov	r1, r8
 801049c:	4638      	mov	r0, r7
 801049e:	47c8      	blx	r9
 80104a0:	3001      	adds	r0, #1
 80104a2:	d103      	bne.n	80104ac <_printf_common+0xac>
 80104a4:	f04f 30ff 	mov.w	r0, #4294967295
 80104a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104ac:	3501      	adds	r5, #1
 80104ae:	e7c6      	b.n	801043e <_printf_common+0x3e>
 80104b0:	18e1      	adds	r1, r4, r3
 80104b2:	1c5a      	adds	r2, r3, #1
 80104b4:	2030      	movs	r0, #48	@ 0x30
 80104b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80104ba:	4422      	add	r2, r4
 80104bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80104c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80104c4:	3302      	adds	r3, #2
 80104c6:	e7c7      	b.n	8010458 <_printf_common+0x58>
 80104c8:	2301      	movs	r3, #1
 80104ca:	4622      	mov	r2, r4
 80104cc:	4641      	mov	r1, r8
 80104ce:	4638      	mov	r0, r7
 80104d0:	47c8      	blx	r9
 80104d2:	3001      	adds	r0, #1
 80104d4:	d0e6      	beq.n	80104a4 <_printf_common+0xa4>
 80104d6:	3601      	adds	r6, #1
 80104d8:	e7d9      	b.n	801048e <_printf_common+0x8e>
	...

080104dc <_printf_i>:
 80104dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80104e0:	7e0f      	ldrb	r7, [r1, #24]
 80104e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80104e4:	2f78      	cmp	r7, #120	@ 0x78
 80104e6:	4691      	mov	r9, r2
 80104e8:	4680      	mov	r8, r0
 80104ea:	460c      	mov	r4, r1
 80104ec:	469a      	mov	sl, r3
 80104ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80104f2:	d807      	bhi.n	8010504 <_printf_i+0x28>
 80104f4:	2f62      	cmp	r7, #98	@ 0x62
 80104f6:	d80a      	bhi.n	801050e <_printf_i+0x32>
 80104f8:	2f00      	cmp	r7, #0
 80104fa:	f000 80d2 	beq.w	80106a2 <_printf_i+0x1c6>
 80104fe:	2f58      	cmp	r7, #88	@ 0x58
 8010500:	f000 80b9 	beq.w	8010676 <_printf_i+0x19a>
 8010504:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010508:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801050c:	e03a      	b.n	8010584 <_printf_i+0xa8>
 801050e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010512:	2b15      	cmp	r3, #21
 8010514:	d8f6      	bhi.n	8010504 <_printf_i+0x28>
 8010516:	a101      	add	r1, pc, #4	@ (adr r1, 801051c <_printf_i+0x40>)
 8010518:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801051c:	08010575 	.word	0x08010575
 8010520:	08010589 	.word	0x08010589
 8010524:	08010505 	.word	0x08010505
 8010528:	08010505 	.word	0x08010505
 801052c:	08010505 	.word	0x08010505
 8010530:	08010505 	.word	0x08010505
 8010534:	08010589 	.word	0x08010589
 8010538:	08010505 	.word	0x08010505
 801053c:	08010505 	.word	0x08010505
 8010540:	08010505 	.word	0x08010505
 8010544:	08010505 	.word	0x08010505
 8010548:	08010689 	.word	0x08010689
 801054c:	080105b3 	.word	0x080105b3
 8010550:	08010643 	.word	0x08010643
 8010554:	08010505 	.word	0x08010505
 8010558:	08010505 	.word	0x08010505
 801055c:	080106ab 	.word	0x080106ab
 8010560:	08010505 	.word	0x08010505
 8010564:	080105b3 	.word	0x080105b3
 8010568:	08010505 	.word	0x08010505
 801056c:	08010505 	.word	0x08010505
 8010570:	0801064b 	.word	0x0801064b
 8010574:	6833      	ldr	r3, [r6, #0]
 8010576:	1d1a      	adds	r2, r3, #4
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	6032      	str	r2, [r6, #0]
 801057c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010580:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010584:	2301      	movs	r3, #1
 8010586:	e09d      	b.n	80106c4 <_printf_i+0x1e8>
 8010588:	6833      	ldr	r3, [r6, #0]
 801058a:	6820      	ldr	r0, [r4, #0]
 801058c:	1d19      	adds	r1, r3, #4
 801058e:	6031      	str	r1, [r6, #0]
 8010590:	0606      	lsls	r6, r0, #24
 8010592:	d501      	bpl.n	8010598 <_printf_i+0xbc>
 8010594:	681d      	ldr	r5, [r3, #0]
 8010596:	e003      	b.n	80105a0 <_printf_i+0xc4>
 8010598:	0645      	lsls	r5, r0, #25
 801059a:	d5fb      	bpl.n	8010594 <_printf_i+0xb8>
 801059c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80105a0:	2d00      	cmp	r5, #0
 80105a2:	da03      	bge.n	80105ac <_printf_i+0xd0>
 80105a4:	232d      	movs	r3, #45	@ 0x2d
 80105a6:	426d      	negs	r5, r5
 80105a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80105ac:	4859      	ldr	r0, [pc, #356]	@ (8010714 <_printf_i+0x238>)
 80105ae:	230a      	movs	r3, #10
 80105b0:	e011      	b.n	80105d6 <_printf_i+0xfa>
 80105b2:	6821      	ldr	r1, [r4, #0]
 80105b4:	6833      	ldr	r3, [r6, #0]
 80105b6:	0608      	lsls	r0, r1, #24
 80105b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80105bc:	d402      	bmi.n	80105c4 <_printf_i+0xe8>
 80105be:	0649      	lsls	r1, r1, #25
 80105c0:	bf48      	it	mi
 80105c2:	b2ad      	uxthmi	r5, r5
 80105c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80105c6:	4853      	ldr	r0, [pc, #332]	@ (8010714 <_printf_i+0x238>)
 80105c8:	6033      	str	r3, [r6, #0]
 80105ca:	bf14      	ite	ne
 80105cc:	230a      	movne	r3, #10
 80105ce:	2308      	moveq	r3, #8
 80105d0:	2100      	movs	r1, #0
 80105d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80105d6:	6866      	ldr	r6, [r4, #4]
 80105d8:	60a6      	str	r6, [r4, #8]
 80105da:	2e00      	cmp	r6, #0
 80105dc:	bfa2      	ittt	ge
 80105de:	6821      	ldrge	r1, [r4, #0]
 80105e0:	f021 0104 	bicge.w	r1, r1, #4
 80105e4:	6021      	strge	r1, [r4, #0]
 80105e6:	b90d      	cbnz	r5, 80105ec <_printf_i+0x110>
 80105e8:	2e00      	cmp	r6, #0
 80105ea:	d04b      	beq.n	8010684 <_printf_i+0x1a8>
 80105ec:	4616      	mov	r6, r2
 80105ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80105f2:	fb03 5711 	mls	r7, r3, r1, r5
 80105f6:	5dc7      	ldrb	r7, [r0, r7]
 80105f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80105fc:	462f      	mov	r7, r5
 80105fe:	42bb      	cmp	r3, r7
 8010600:	460d      	mov	r5, r1
 8010602:	d9f4      	bls.n	80105ee <_printf_i+0x112>
 8010604:	2b08      	cmp	r3, #8
 8010606:	d10b      	bne.n	8010620 <_printf_i+0x144>
 8010608:	6823      	ldr	r3, [r4, #0]
 801060a:	07df      	lsls	r7, r3, #31
 801060c:	d508      	bpl.n	8010620 <_printf_i+0x144>
 801060e:	6923      	ldr	r3, [r4, #16]
 8010610:	6861      	ldr	r1, [r4, #4]
 8010612:	4299      	cmp	r1, r3
 8010614:	bfde      	ittt	le
 8010616:	2330      	movle	r3, #48	@ 0x30
 8010618:	f806 3c01 	strble.w	r3, [r6, #-1]
 801061c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010620:	1b92      	subs	r2, r2, r6
 8010622:	6122      	str	r2, [r4, #16]
 8010624:	f8cd a000 	str.w	sl, [sp]
 8010628:	464b      	mov	r3, r9
 801062a:	aa03      	add	r2, sp, #12
 801062c:	4621      	mov	r1, r4
 801062e:	4640      	mov	r0, r8
 8010630:	f7ff fee6 	bl	8010400 <_printf_common>
 8010634:	3001      	adds	r0, #1
 8010636:	d14a      	bne.n	80106ce <_printf_i+0x1f2>
 8010638:	f04f 30ff 	mov.w	r0, #4294967295
 801063c:	b004      	add	sp, #16
 801063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010642:	6823      	ldr	r3, [r4, #0]
 8010644:	f043 0320 	orr.w	r3, r3, #32
 8010648:	6023      	str	r3, [r4, #0]
 801064a:	4833      	ldr	r0, [pc, #204]	@ (8010718 <_printf_i+0x23c>)
 801064c:	2778      	movs	r7, #120	@ 0x78
 801064e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010652:	6823      	ldr	r3, [r4, #0]
 8010654:	6831      	ldr	r1, [r6, #0]
 8010656:	061f      	lsls	r7, r3, #24
 8010658:	f851 5b04 	ldr.w	r5, [r1], #4
 801065c:	d402      	bmi.n	8010664 <_printf_i+0x188>
 801065e:	065f      	lsls	r7, r3, #25
 8010660:	bf48      	it	mi
 8010662:	b2ad      	uxthmi	r5, r5
 8010664:	6031      	str	r1, [r6, #0]
 8010666:	07d9      	lsls	r1, r3, #31
 8010668:	bf44      	itt	mi
 801066a:	f043 0320 	orrmi.w	r3, r3, #32
 801066e:	6023      	strmi	r3, [r4, #0]
 8010670:	b11d      	cbz	r5, 801067a <_printf_i+0x19e>
 8010672:	2310      	movs	r3, #16
 8010674:	e7ac      	b.n	80105d0 <_printf_i+0xf4>
 8010676:	4827      	ldr	r0, [pc, #156]	@ (8010714 <_printf_i+0x238>)
 8010678:	e7e9      	b.n	801064e <_printf_i+0x172>
 801067a:	6823      	ldr	r3, [r4, #0]
 801067c:	f023 0320 	bic.w	r3, r3, #32
 8010680:	6023      	str	r3, [r4, #0]
 8010682:	e7f6      	b.n	8010672 <_printf_i+0x196>
 8010684:	4616      	mov	r6, r2
 8010686:	e7bd      	b.n	8010604 <_printf_i+0x128>
 8010688:	6833      	ldr	r3, [r6, #0]
 801068a:	6825      	ldr	r5, [r4, #0]
 801068c:	6961      	ldr	r1, [r4, #20]
 801068e:	1d18      	adds	r0, r3, #4
 8010690:	6030      	str	r0, [r6, #0]
 8010692:	062e      	lsls	r6, r5, #24
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	d501      	bpl.n	801069c <_printf_i+0x1c0>
 8010698:	6019      	str	r1, [r3, #0]
 801069a:	e002      	b.n	80106a2 <_printf_i+0x1c6>
 801069c:	0668      	lsls	r0, r5, #25
 801069e:	d5fb      	bpl.n	8010698 <_printf_i+0x1bc>
 80106a0:	8019      	strh	r1, [r3, #0]
 80106a2:	2300      	movs	r3, #0
 80106a4:	6123      	str	r3, [r4, #16]
 80106a6:	4616      	mov	r6, r2
 80106a8:	e7bc      	b.n	8010624 <_printf_i+0x148>
 80106aa:	6833      	ldr	r3, [r6, #0]
 80106ac:	1d1a      	adds	r2, r3, #4
 80106ae:	6032      	str	r2, [r6, #0]
 80106b0:	681e      	ldr	r6, [r3, #0]
 80106b2:	6862      	ldr	r2, [r4, #4]
 80106b4:	2100      	movs	r1, #0
 80106b6:	4630      	mov	r0, r6
 80106b8:	f7ef fdda 	bl	8000270 <memchr>
 80106bc:	b108      	cbz	r0, 80106c2 <_printf_i+0x1e6>
 80106be:	1b80      	subs	r0, r0, r6
 80106c0:	6060      	str	r0, [r4, #4]
 80106c2:	6863      	ldr	r3, [r4, #4]
 80106c4:	6123      	str	r3, [r4, #16]
 80106c6:	2300      	movs	r3, #0
 80106c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80106cc:	e7aa      	b.n	8010624 <_printf_i+0x148>
 80106ce:	6923      	ldr	r3, [r4, #16]
 80106d0:	4632      	mov	r2, r6
 80106d2:	4649      	mov	r1, r9
 80106d4:	4640      	mov	r0, r8
 80106d6:	47d0      	blx	sl
 80106d8:	3001      	adds	r0, #1
 80106da:	d0ad      	beq.n	8010638 <_printf_i+0x15c>
 80106dc:	6823      	ldr	r3, [r4, #0]
 80106de:	079b      	lsls	r3, r3, #30
 80106e0:	d413      	bmi.n	801070a <_printf_i+0x22e>
 80106e2:	68e0      	ldr	r0, [r4, #12]
 80106e4:	9b03      	ldr	r3, [sp, #12]
 80106e6:	4298      	cmp	r0, r3
 80106e8:	bfb8      	it	lt
 80106ea:	4618      	movlt	r0, r3
 80106ec:	e7a6      	b.n	801063c <_printf_i+0x160>
 80106ee:	2301      	movs	r3, #1
 80106f0:	4632      	mov	r2, r6
 80106f2:	4649      	mov	r1, r9
 80106f4:	4640      	mov	r0, r8
 80106f6:	47d0      	blx	sl
 80106f8:	3001      	adds	r0, #1
 80106fa:	d09d      	beq.n	8010638 <_printf_i+0x15c>
 80106fc:	3501      	adds	r5, #1
 80106fe:	68e3      	ldr	r3, [r4, #12]
 8010700:	9903      	ldr	r1, [sp, #12]
 8010702:	1a5b      	subs	r3, r3, r1
 8010704:	42ab      	cmp	r3, r5
 8010706:	dcf2      	bgt.n	80106ee <_printf_i+0x212>
 8010708:	e7eb      	b.n	80106e2 <_printf_i+0x206>
 801070a:	2500      	movs	r5, #0
 801070c:	f104 0619 	add.w	r6, r4, #25
 8010710:	e7f5      	b.n	80106fe <_printf_i+0x222>
 8010712:	bf00      	nop
 8010714:	08013766 	.word	0x08013766
 8010718:	08013777 	.word	0x08013777

0801071c <__sflush_r>:
 801071c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010724:	0716      	lsls	r6, r2, #28
 8010726:	4605      	mov	r5, r0
 8010728:	460c      	mov	r4, r1
 801072a:	d454      	bmi.n	80107d6 <__sflush_r+0xba>
 801072c:	684b      	ldr	r3, [r1, #4]
 801072e:	2b00      	cmp	r3, #0
 8010730:	dc02      	bgt.n	8010738 <__sflush_r+0x1c>
 8010732:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010734:	2b00      	cmp	r3, #0
 8010736:	dd48      	ble.n	80107ca <__sflush_r+0xae>
 8010738:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801073a:	2e00      	cmp	r6, #0
 801073c:	d045      	beq.n	80107ca <__sflush_r+0xae>
 801073e:	2300      	movs	r3, #0
 8010740:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010744:	682f      	ldr	r7, [r5, #0]
 8010746:	6a21      	ldr	r1, [r4, #32]
 8010748:	602b      	str	r3, [r5, #0]
 801074a:	d030      	beq.n	80107ae <__sflush_r+0x92>
 801074c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801074e:	89a3      	ldrh	r3, [r4, #12]
 8010750:	0759      	lsls	r1, r3, #29
 8010752:	d505      	bpl.n	8010760 <__sflush_r+0x44>
 8010754:	6863      	ldr	r3, [r4, #4]
 8010756:	1ad2      	subs	r2, r2, r3
 8010758:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801075a:	b10b      	cbz	r3, 8010760 <__sflush_r+0x44>
 801075c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801075e:	1ad2      	subs	r2, r2, r3
 8010760:	2300      	movs	r3, #0
 8010762:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010764:	6a21      	ldr	r1, [r4, #32]
 8010766:	4628      	mov	r0, r5
 8010768:	47b0      	blx	r6
 801076a:	1c43      	adds	r3, r0, #1
 801076c:	89a3      	ldrh	r3, [r4, #12]
 801076e:	d106      	bne.n	801077e <__sflush_r+0x62>
 8010770:	6829      	ldr	r1, [r5, #0]
 8010772:	291d      	cmp	r1, #29
 8010774:	d82b      	bhi.n	80107ce <__sflush_r+0xb2>
 8010776:	4a2a      	ldr	r2, [pc, #168]	@ (8010820 <__sflush_r+0x104>)
 8010778:	410a      	asrs	r2, r1
 801077a:	07d6      	lsls	r6, r2, #31
 801077c:	d427      	bmi.n	80107ce <__sflush_r+0xb2>
 801077e:	2200      	movs	r2, #0
 8010780:	6062      	str	r2, [r4, #4]
 8010782:	04d9      	lsls	r1, r3, #19
 8010784:	6922      	ldr	r2, [r4, #16]
 8010786:	6022      	str	r2, [r4, #0]
 8010788:	d504      	bpl.n	8010794 <__sflush_r+0x78>
 801078a:	1c42      	adds	r2, r0, #1
 801078c:	d101      	bne.n	8010792 <__sflush_r+0x76>
 801078e:	682b      	ldr	r3, [r5, #0]
 8010790:	b903      	cbnz	r3, 8010794 <__sflush_r+0x78>
 8010792:	6560      	str	r0, [r4, #84]	@ 0x54
 8010794:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010796:	602f      	str	r7, [r5, #0]
 8010798:	b1b9      	cbz	r1, 80107ca <__sflush_r+0xae>
 801079a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801079e:	4299      	cmp	r1, r3
 80107a0:	d002      	beq.n	80107a8 <__sflush_r+0x8c>
 80107a2:	4628      	mov	r0, r5
 80107a4:	f7ff fbea 	bl	800ff7c <_free_r>
 80107a8:	2300      	movs	r3, #0
 80107aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80107ac:	e00d      	b.n	80107ca <__sflush_r+0xae>
 80107ae:	2301      	movs	r3, #1
 80107b0:	4628      	mov	r0, r5
 80107b2:	47b0      	blx	r6
 80107b4:	4602      	mov	r2, r0
 80107b6:	1c50      	adds	r0, r2, #1
 80107b8:	d1c9      	bne.n	801074e <__sflush_r+0x32>
 80107ba:	682b      	ldr	r3, [r5, #0]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d0c6      	beq.n	801074e <__sflush_r+0x32>
 80107c0:	2b1d      	cmp	r3, #29
 80107c2:	d001      	beq.n	80107c8 <__sflush_r+0xac>
 80107c4:	2b16      	cmp	r3, #22
 80107c6:	d11e      	bne.n	8010806 <__sflush_r+0xea>
 80107c8:	602f      	str	r7, [r5, #0]
 80107ca:	2000      	movs	r0, #0
 80107cc:	e022      	b.n	8010814 <__sflush_r+0xf8>
 80107ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80107d2:	b21b      	sxth	r3, r3
 80107d4:	e01b      	b.n	801080e <__sflush_r+0xf2>
 80107d6:	690f      	ldr	r7, [r1, #16]
 80107d8:	2f00      	cmp	r7, #0
 80107da:	d0f6      	beq.n	80107ca <__sflush_r+0xae>
 80107dc:	0793      	lsls	r3, r2, #30
 80107de:	680e      	ldr	r6, [r1, #0]
 80107e0:	bf08      	it	eq
 80107e2:	694b      	ldreq	r3, [r1, #20]
 80107e4:	600f      	str	r7, [r1, #0]
 80107e6:	bf18      	it	ne
 80107e8:	2300      	movne	r3, #0
 80107ea:	eba6 0807 	sub.w	r8, r6, r7
 80107ee:	608b      	str	r3, [r1, #8]
 80107f0:	f1b8 0f00 	cmp.w	r8, #0
 80107f4:	dde9      	ble.n	80107ca <__sflush_r+0xae>
 80107f6:	6a21      	ldr	r1, [r4, #32]
 80107f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80107fa:	4643      	mov	r3, r8
 80107fc:	463a      	mov	r2, r7
 80107fe:	4628      	mov	r0, r5
 8010800:	47b0      	blx	r6
 8010802:	2800      	cmp	r0, #0
 8010804:	dc08      	bgt.n	8010818 <__sflush_r+0xfc>
 8010806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801080a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801080e:	81a3      	strh	r3, [r4, #12]
 8010810:	f04f 30ff 	mov.w	r0, #4294967295
 8010814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010818:	4407      	add	r7, r0
 801081a:	eba8 0800 	sub.w	r8, r8, r0
 801081e:	e7e7      	b.n	80107f0 <__sflush_r+0xd4>
 8010820:	dfbffffe 	.word	0xdfbffffe

08010824 <_fflush_r>:
 8010824:	b538      	push	{r3, r4, r5, lr}
 8010826:	690b      	ldr	r3, [r1, #16]
 8010828:	4605      	mov	r5, r0
 801082a:	460c      	mov	r4, r1
 801082c:	b913      	cbnz	r3, 8010834 <_fflush_r+0x10>
 801082e:	2500      	movs	r5, #0
 8010830:	4628      	mov	r0, r5
 8010832:	bd38      	pop	{r3, r4, r5, pc}
 8010834:	b118      	cbz	r0, 801083e <_fflush_r+0x1a>
 8010836:	6a03      	ldr	r3, [r0, #32]
 8010838:	b90b      	cbnz	r3, 801083e <_fflush_r+0x1a>
 801083a:	f7ff fa37 	bl	800fcac <__sinit>
 801083e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d0f3      	beq.n	801082e <_fflush_r+0xa>
 8010846:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010848:	07d0      	lsls	r0, r2, #31
 801084a:	d404      	bmi.n	8010856 <_fflush_r+0x32>
 801084c:	0599      	lsls	r1, r3, #22
 801084e:	d402      	bmi.n	8010856 <_fflush_r+0x32>
 8010850:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010852:	f7ff fb5c 	bl	800ff0e <__retarget_lock_acquire_recursive>
 8010856:	4628      	mov	r0, r5
 8010858:	4621      	mov	r1, r4
 801085a:	f7ff ff5f 	bl	801071c <__sflush_r>
 801085e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010860:	07da      	lsls	r2, r3, #31
 8010862:	4605      	mov	r5, r0
 8010864:	d4e4      	bmi.n	8010830 <_fflush_r+0xc>
 8010866:	89a3      	ldrh	r3, [r4, #12]
 8010868:	059b      	lsls	r3, r3, #22
 801086a:	d4e1      	bmi.n	8010830 <_fflush_r+0xc>
 801086c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801086e:	f7ff fb4f 	bl	800ff10 <__retarget_lock_release_recursive>
 8010872:	e7dd      	b.n	8010830 <_fflush_r+0xc>

08010874 <fiprintf>:
 8010874:	b40e      	push	{r1, r2, r3}
 8010876:	b503      	push	{r0, r1, lr}
 8010878:	4601      	mov	r1, r0
 801087a:	ab03      	add	r3, sp, #12
 801087c:	4805      	ldr	r0, [pc, #20]	@ (8010894 <fiprintf+0x20>)
 801087e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010882:	6800      	ldr	r0, [r0, #0]
 8010884:	9301      	str	r3, [sp, #4]
 8010886:	f7ff fca3 	bl	80101d0 <_vfiprintf_r>
 801088a:	b002      	add	sp, #8
 801088c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010890:	b003      	add	sp, #12
 8010892:	4770      	bx	lr
 8010894:	20000038 	.word	0x20000038

08010898 <__swbuf_r>:
 8010898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801089a:	460e      	mov	r6, r1
 801089c:	4614      	mov	r4, r2
 801089e:	4605      	mov	r5, r0
 80108a0:	b118      	cbz	r0, 80108aa <__swbuf_r+0x12>
 80108a2:	6a03      	ldr	r3, [r0, #32]
 80108a4:	b90b      	cbnz	r3, 80108aa <__swbuf_r+0x12>
 80108a6:	f7ff fa01 	bl	800fcac <__sinit>
 80108aa:	69a3      	ldr	r3, [r4, #24]
 80108ac:	60a3      	str	r3, [r4, #8]
 80108ae:	89a3      	ldrh	r3, [r4, #12]
 80108b0:	071a      	lsls	r2, r3, #28
 80108b2:	d501      	bpl.n	80108b8 <__swbuf_r+0x20>
 80108b4:	6923      	ldr	r3, [r4, #16]
 80108b6:	b943      	cbnz	r3, 80108ca <__swbuf_r+0x32>
 80108b8:	4621      	mov	r1, r4
 80108ba:	4628      	mov	r0, r5
 80108bc:	f000 f82a 	bl	8010914 <__swsetup_r>
 80108c0:	b118      	cbz	r0, 80108ca <__swbuf_r+0x32>
 80108c2:	f04f 37ff 	mov.w	r7, #4294967295
 80108c6:	4638      	mov	r0, r7
 80108c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108ca:	6823      	ldr	r3, [r4, #0]
 80108cc:	6922      	ldr	r2, [r4, #16]
 80108ce:	1a98      	subs	r0, r3, r2
 80108d0:	6963      	ldr	r3, [r4, #20]
 80108d2:	b2f6      	uxtb	r6, r6
 80108d4:	4283      	cmp	r3, r0
 80108d6:	4637      	mov	r7, r6
 80108d8:	dc05      	bgt.n	80108e6 <__swbuf_r+0x4e>
 80108da:	4621      	mov	r1, r4
 80108dc:	4628      	mov	r0, r5
 80108de:	f7ff ffa1 	bl	8010824 <_fflush_r>
 80108e2:	2800      	cmp	r0, #0
 80108e4:	d1ed      	bne.n	80108c2 <__swbuf_r+0x2a>
 80108e6:	68a3      	ldr	r3, [r4, #8]
 80108e8:	3b01      	subs	r3, #1
 80108ea:	60a3      	str	r3, [r4, #8]
 80108ec:	6823      	ldr	r3, [r4, #0]
 80108ee:	1c5a      	adds	r2, r3, #1
 80108f0:	6022      	str	r2, [r4, #0]
 80108f2:	701e      	strb	r6, [r3, #0]
 80108f4:	6962      	ldr	r2, [r4, #20]
 80108f6:	1c43      	adds	r3, r0, #1
 80108f8:	429a      	cmp	r2, r3
 80108fa:	d004      	beq.n	8010906 <__swbuf_r+0x6e>
 80108fc:	89a3      	ldrh	r3, [r4, #12]
 80108fe:	07db      	lsls	r3, r3, #31
 8010900:	d5e1      	bpl.n	80108c6 <__swbuf_r+0x2e>
 8010902:	2e0a      	cmp	r6, #10
 8010904:	d1df      	bne.n	80108c6 <__swbuf_r+0x2e>
 8010906:	4621      	mov	r1, r4
 8010908:	4628      	mov	r0, r5
 801090a:	f7ff ff8b 	bl	8010824 <_fflush_r>
 801090e:	2800      	cmp	r0, #0
 8010910:	d0d9      	beq.n	80108c6 <__swbuf_r+0x2e>
 8010912:	e7d6      	b.n	80108c2 <__swbuf_r+0x2a>

08010914 <__swsetup_r>:
 8010914:	b538      	push	{r3, r4, r5, lr}
 8010916:	4b29      	ldr	r3, [pc, #164]	@ (80109bc <__swsetup_r+0xa8>)
 8010918:	4605      	mov	r5, r0
 801091a:	6818      	ldr	r0, [r3, #0]
 801091c:	460c      	mov	r4, r1
 801091e:	b118      	cbz	r0, 8010928 <__swsetup_r+0x14>
 8010920:	6a03      	ldr	r3, [r0, #32]
 8010922:	b90b      	cbnz	r3, 8010928 <__swsetup_r+0x14>
 8010924:	f7ff f9c2 	bl	800fcac <__sinit>
 8010928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801092c:	0719      	lsls	r1, r3, #28
 801092e:	d422      	bmi.n	8010976 <__swsetup_r+0x62>
 8010930:	06da      	lsls	r2, r3, #27
 8010932:	d407      	bmi.n	8010944 <__swsetup_r+0x30>
 8010934:	2209      	movs	r2, #9
 8010936:	602a      	str	r2, [r5, #0]
 8010938:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801093c:	81a3      	strh	r3, [r4, #12]
 801093e:	f04f 30ff 	mov.w	r0, #4294967295
 8010942:	e033      	b.n	80109ac <__swsetup_r+0x98>
 8010944:	0758      	lsls	r0, r3, #29
 8010946:	d512      	bpl.n	801096e <__swsetup_r+0x5a>
 8010948:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801094a:	b141      	cbz	r1, 801095e <__swsetup_r+0x4a>
 801094c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010950:	4299      	cmp	r1, r3
 8010952:	d002      	beq.n	801095a <__swsetup_r+0x46>
 8010954:	4628      	mov	r0, r5
 8010956:	f7ff fb11 	bl	800ff7c <_free_r>
 801095a:	2300      	movs	r3, #0
 801095c:	6363      	str	r3, [r4, #52]	@ 0x34
 801095e:	89a3      	ldrh	r3, [r4, #12]
 8010960:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010964:	81a3      	strh	r3, [r4, #12]
 8010966:	2300      	movs	r3, #0
 8010968:	6063      	str	r3, [r4, #4]
 801096a:	6923      	ldr	r3, [r4, #16]
 801096c:	6023      	str	r3, [r4, #0]
 801096e:	89a3      	ldrh	r3, [r4, #12]
 8010970:	f043 0308 	orr.w	r3, r3, #8
 8010974:	81a3      	strh	r3, [r4, #12]
 8010976:	6923      	ldr	r3, [r4, #16]
 8010978:	b94b      	cbnz	r3, 801098e <__swsetup_r+0x7a>
 801097a:	89a3      	ldrh	r3, [r4, #12]
 801097c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010980:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010984:	d003      	beq.n	801098e <__swsetup_r+0x7a>
 8010986:	4621      	mov	r1, r4
 8010988:	4628      	mov	r0, r5
 801098a:	f000 f856 	bl	8010a3a <__smakebuf_r>
 801098e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010992:	f013 0201 	ands.w	r2, r3, #1
 8010996:	d00a      	beq.n	80109ae <__swsetup_r+0x9a>
 8010998:	2200      	movs	r2, #0
 801099a:	60a2      	str	r2, [r4, #8]
 801099c:	6962      	ldr	r2, [r4, #20]
 801099e:	4252      	negs	r2, r2
 80109a0:	61a2      	str	r2, [r4, #24]
 80109a2:	6922      	ldr	r2, [r4, #16]
 80109a4:	b942      	cbnz	r2, 80109b8 <__swsetup_r+0xa4>
 80109a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80109aa:	d1c5      	bne.n	8010938 <__swsetup_r+0x24>
 80109ac:	bd38      	pop	{r3, r4, r5, pc}
 80109ae:	0799      	lsls	r1, r3, #30
 80109b0:	bf58      	it	pl
 80109b2:	6962      	ldrpl	r2, [r4, #20]
 80109b4:	60a2      	str	r2, [r4, #8]
 80109b6:	e7f4      	b.n	80109a2 <__swsetup_r+0x8e>
 80109b8:	2000      	movs	r0, #0
 80109ba:	e7f7      	b.n	80109ac <__swsetup_r+0x98>
 80109bc:	20000038 	.word	0x20000038

080109c0 <_sbrk_r>:
 80109c0:	b538      	push	{r3, r4, r5, lr}
 80109c2:	4d06      	ldr	r5, [pc, #24]	@ (80109dc <_sbrk_r+0x1c>)
 80109c4:	2300      	movs	r3, #0
 80109c6:	4604      	mov	r4, r0
 80109c8:	4608      	mov	r0, r1
 80109ca:	602b      	str	r3, [r5, #0]
 80109cc:	f7f0 fa8c 	bl	8000ee8 <_sbrk>
 80109d0:	1c43      	adds	r3, r0, #1
 80109d2:	d102      	bne.n	80109da <_sbrk_r+0x1a>
 80109d4:	682b      	ldr	r3, [r5, #0]
 80109d6:	b103      	cbz	r3, 80109da <_sbrk_r+0x1a>
 80109d8:	6023      	str	r3, [r4, #0]
 80109da:	bd38      	pop	{r3, r4, r5, pc}
 80109dc:	20008a68 	.word	0x20008a68

080109e0 <abort>:
 80109e0:	b508      	push	{r3, lr}
 80109e2:	2006      	movs	r0, #6
 80109e4:	f000 f88e 	bl	8010b04 <raise>
 80109e8:	2001      	movs	r0, #1
 80109ea:	f7f0 fa05 	bl	8000df8 <_exit>

080109ee <__swhatbuf_r>:
 80109ee:	b570      	push	{r4, r5, r6, lr}
 80109f0:	460c      	mov	r4, r1
 80109f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109f6:	2900      	cmp	r1, #0
 80109f8:	b096      	sub	sp, #88	@ 0x58
 80109fa:	4615      	mov	r5, r2
 80109fc:	461e      	mov	r6, r3
 80109fe:	da0d      	bge.n	8010a1c <__swhatbuf_r+0x2e>
 8010a00:	89a3      	ldrh	r3, [r4, #12]
 8010a02:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010a06:	f04f 0100 	mov.w	r1, #0
 8010a0a:	bf14      	ite	ne
 8010a0c:	2340      	movne	r3, #64	@ 0x40
 8010a0e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010a12:	2000      	movs	r0, #0
 8010a14:	6031      	str	r1, [r6, #0]
 8010a16:	602b      	str	r3, [r5, #0]
 8010a18:	b016      	add	sp, #88	@ 0x58
 8010a1a:	bd70      	pop	{r4, r5, r6, pc}
 8010a1c:	466a      	mov	r2, sp
 8010a1e:	f000 f879 	bl	8010b14 <_fstat_r>
 8010a22:	2800      	cmp	r0, #0
 8010a24:	dbec      	blt.n	8010a00 <__swhatbuf_r+0x12>
 8010a26:	9901      	ldr	r1, [sp, #4]
 8010a28:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010a2c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010a30:	4259      	negs	r1, r3
 8010a32:	4159      	adcs	r1, r3
 8010a34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010a38:	e7eb      	b.n	8010a12 <__swhatbuf_r+0x24>

08010a3a <__smakebuf_r>:
 8010a3a:	898b      	ldrh	r3, [r1, #12]
 8010a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010a3e:	079d      	lsls	r5, r3, #30
 8010a40:	4606      	mov	r6, r0
 8010a42:	460c      	mov	r4, r1
 8010a44:	d507      	bpl.n	8010a56 <__smakebuf_r+0x1c>
 8010a46:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010a4a:	6023      	str	r3, [r4, #0]
 8010a4c:	6123      	str	r3, [r4, #16]
 8010a4e:	2301      	movs	r3, #1
 8010a50:	6163      	str	r3, [r4, #20]
 8010a52:	b003      	add	sp, #12
 8010a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a56:	ab01      	add	r3, sp, #4
 8010a58:	466a      	mov	r2, sp
 8010a5a:	f7ff ffc8 	bl	80109ee <__swhatbuf_r>
 8010a5e:	9f00      	ldr	r7, [sp, #0]
 8010a60:	4605      	mov	r5, r0
 8010a62:	4639      	mov	r1, r7
 8010a64:	4630      	mov	r0, r6
 8010a66:	f7ff fafd 	bl	8010064 <_malloc_r>
 8010a6a:	b948      	cbnz	r0, 8010a80 <__smakebuf_r+0x46>
 8010a6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a70:	059a      	lsls	r2, r3, #22
 8010a72:	d4ee      	bmi.n	8010a52 <__smakebuf_r+0x18>
 8010a74:	f023 0303 	bic.w	r3, r3, #3
 8010a78:	f043 0302 	orr.w	r3, r3, #2
 8010a7c:	81a3      	strh	r3, [r4, #12]
 8010a7e:	e7e2      	b.n	8010a46 <__smakebuf_r+0xc>
 8010a80:	89a3      	ldrh	r3, [r4, #12]
 8010a82:	6020      	str	r0, [r4, #0]
 8010a84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a88:	81a3      	strh	r3, [r4, #12]
 8010a8a:	9b01      	ldr	r3, [sp, #4]
 8010a8c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010a90:	b15b      	cbz	r3, 8010aaa <__smakebuf_r+0x70>
 8010a92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010a96:	4630      	mov	r0, r6
 8010a98:	f000 f84e 	bl	8010b38 <_isatty_r>
 8010a9c:	b128      	cbz	r0, 8010aaa <__smakebuf_r+0x70>
 8010a9e:	89a3      	ldrh	r3, [r4, #12]
 8010aa0:	f023 0303 	bic.w	r3, r3, #3
 8010aa4:	f043 0301 	orr.w	r3, r3, #1
 8010aa8:	81a3      	strh	r3, [r4, #12]
 8010aaa:	89a3      	ldrh	r3, [r4, #12]
 8010aac:	431d      	orrs	r5, r3
 8010aae:	81a5      	strh	r5, [r4, #12]
 8010ab0:	e7cf      	b.n	8010a52 <__smakebuf_r+0x18>

08010ab2 <_raise_r>:
 8010ab2:	291f      	cmp	r1, #31
 8010ab4:	b538      	push	{r3, r4, r5, lr}
 8010ab6:	4605      	mov	r5, r0
 8010ab8:	460c      	mov	r4, r1
 8010aba:	d904      	bls.n	8010ac6 <_raise_r+0x14>
 8010abc:	2316      	movs	r3, #22
 8010abe:	6003      	str	r3, [r0, #0]
 8010ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8010ac4:	bd38      	pop	{r3, r4, r5, pc}
 8010ac6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010ac8:	b112      	cbz	r2, 8010ad0 <_raise_r+0x1e>
 8010aca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010ace:	b94b      	cbnz	r3, 8010ae4 <_raise_r+0x32>
 8010ad0:	4628      	mov	r0, r5
 8010ad2:	f000 f853 	bl	8010b7c <_getpid_r>
 8010ad6:	4622      	mov	r2, r4
 8010ad8:	4601      	mov	r1, r0
 8010ada:	4628      	mov	r0, r5
 8010adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ae0:	f000 b83a 	b.w	8010b58 <_kill_r>
 8010ae4:	2b01      	cmp	r3, #1
 8010ae6:	d00a      	beq.n	8010afe <_raise_r+0x4c>
 8010ae8:	1c59      	adds	r1, r3, #1
 8010aea:	d103      	bne.n	8010af4 <_raise_r+0x42>
 8010aec:	2316      	movs	r3, #22
 8010aee:	6003      	str	r3, [r0, #0]
 8010af0:	2001      	movs	r0, #1
 8010af2:	e7e7      	b.n	8010ac4 <_raise_r+0x12>
 8010af4:	2100      	movs	r1, #0
 8010af6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010afa:	4620      	mov	r0, r4
 8010afc:	4798      	blx	r3
 8010afe:	2000      	movs	r0, #0
 8010b00:	e7e0      	b.n	8010ac4 <_raise_r+0x12>
	...

08010b04 <raise>:
 8010b04:	4b02      	ldr	r3, [pc, #8]	@ (8010b10 <raise+0xc>)
 8010b06:	4601      	mov	r1, r0
 8010b08:	6818      	ldr	r0, [r3, #0]
 8010b0a:	f7ff bfd2 	b.w	8010ab2 <_raise_r>
 8010b0e:	bf00      	nop
 8010b10:	20000038 	.word	0x20000038

08010b14 <_fstat_r>:
 8010b14:	b538      	push	{r3, r4, r5, lr}
 8010b16:	4d07      	ldr	r5, [pc, #28]	@ (8010b34 <_fstat_r+0x20>)
 8010b18:	2300      	movs	r3, #0
 8010b1a:	4604      	mov	r4, r0
 8010b1c:	4608      	mov	r0, r1
 8010b1e:	4611      	mov	r1, r2
 8010b20:	602b      	str	r3, [r5, #0]
 8010b22:	f7f0 f9b9 	bl	8000e98 <_fstat>
 8010b26:	1c43      	adds	r3, r0, #1
 8010b28:	d102      	bne.n	8010b30 <_fstat_r+0x1c>
 8010b2a:	682b      	ldr	r3, [r5, #0]
 8010b2c:	b103      	cbz	r3, 8010b30 <_fstat_r+0x1c>
 8010b2e:	6023      	str	r3, [r4, #0]
 8010b30:	bd38      	pop	{r3, r4, r5, pc}
 8010b32:	bf00      	nop
 8010b34:	20008a68 	.word	0x20008a68

08010b38 <_isatty_r>:
 8010b38:	b538      	push	{r3, r4, r5, lr}
 8010b3a:	4d06      	ldr	r5, [pc, #24]	@ (8010b54 <_isatty_r+0x1c>)
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	4604      	mov	r4, r0
 8010b40:	4608      	mov	r0, r1
 8010b42:	602b      	str	r3, [r5, #0]
 8010b44:	f7f0 f9b8 	bl	8000eb8 <_isatty>
 8010b48:	1c43      	adds	r3, r0, #1
 8010b4a:	d102      	bne.n	8010b52 <_isatty_r+0x1a>
 8010b4c:	682b      	ldr	r3, [r5, #0]
 8010b4e:	b103      	cbz	r3, 8010b52 <_isatty_r+0x1a>
 8010b50:	6023      	str	r3, [r4, #0]
 8010b52:	bd38      	pop	{r3, r4, r5, pc}
 8010b54:	20008a68 	.word	0x20008a68

08010b58 <_kill_r>:
 8010b58:	b538      	push	{r3, r4, r5, lr}
 8010b5a:	4d07      	ldr	r5, [pc, #28]	@ (8010b78 <_kill_r+0x20>)
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	4604      	mov	r4, r0
 8010b60:	4608      	mov	r0, r1
 8010b62:	4611      	mov	r1, r2
 8010b64:	602b      	str	r3, [r5, #0]
 8010b66:	f7f0 f935 	bl	8000dd4 <_kill>
 8010b6a:	1c43      	adds	r3, r0, #1
 8010b6c:	d102      	bne.n	8010b74 <_kill_r+0x1c>
 8010b6e:	682b      	ldr	r3, [r5, #0]
 8010b70:	b103      	cbz	r3, 8010b74 <_kill_r+0x1c>
 8010b72:	6023      	str	r3, [r4, #0]
 8010b74:	bd38      	pop	{r3, r4, r5, pc}
 8010b76:	bf00      	nop
 8010b78:	20008a68 	.word	0x20008a68

08010b7c <_getpid_r>:
 8010b7c:	f7f0 b921 	b.w	8000dc2 <_getpid>

08010b80 <_init>:
 8010b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b82:	bf00      	nop
 8010b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b86:	bc08      	pop	{r3}
 8010b88:	469e      	mov	lr, r3
 8010b8a:	4770      	bx	lr

08010b8c <_fini>:
 8010b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b8e:	bf00      	nop
 8010b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b92:	bc08      	pop	{r3}
 8010b94:	469e      	mov	lr, r3
 8010b96:	4770      	bx	lr
